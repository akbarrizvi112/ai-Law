"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@langchain";
exports.ids = ["vendor-chunks/@langchain"];
exports.modules = {

/***/ "(rsc)/./node_modules/@langchain/core/chat_history.js":
/*!******************************************************!*\
  !*** ./node_modules/@langchain/core/chat_history.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseChatMessageHistory: () => (/* reexport safe */ _dist_chat_history_js__WEBPACK_IMPORTED_MODULE_0__.BaseChatMessageHistory),\n/* harmony export */   BaseListChatMessageHistory: () => (/* reexport safe */ _dist_chat_history_js__WEBPACK_IMPORTED_MODULE_0__.BaseListChatMessageHistory)\n/* harmony export */ });\n/* harmony import */ var _dist_chat_history_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/chat_history.js */ \"(rsc)/./node_modules/@langchain/core/dist/chat_history.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2NoYXRfaGlzdG9yeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvY2hhdF9oaXN0b3J5LmpzPzU0M2MiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9kaXN0L2NoYXRfaGlzdG9yeS5qcyciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/chat_history.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/caches.js":
/*!*****************************************************!*\
  !*** ./node_modules/@langchain/core/dist/caches.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseCache: () => (/* binding */ BaseCache),\n/* harmony export */   InMemoryCache: () => (/* binding */ InMemoryCache),\n/* harmony export */   deserializeStoredGeneration: () => (/* binding */ deserializeStoredGeneration),\n/* harmony export */   getCacheKey: () => (/* binding */ getCacheKey),\n/* harmony export */   serializeGeneration: () => (/* binding */ serializeGeneration)\n/* harmony export */ });\n/* harmony import */ var _utils_hash_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/hash.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/hash.js\");\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n\n\n/**\n * This cache key should be consistent across all versions of langchain.\n * It is currently NOT consistent across versions of langchain.\n *\n * A huge benefit of having a remote cache (like redis) is that you can\n * access the cache from different processes/machines. The allows you to\n * seperate concerns and scale horizontally.\n *\n * TODO: Make cache key consistent across versions of langchain.\n */ const getCacheKey = (...strings)=>(0,_utils_hash_js__WEBPACK_IMPORTED_MODULE_0__.insecureHash)(strings.join(\"_\"));\nfunction deserializeStoredGeneration(storedGeneration) {\n    if (storedGeneration.message !== undefined) {\n        return {\n            text: storedGeneration.text,\n            message: (0,_messages_index_js__WEBPACK_IMPORTED_MODULE_1__.mapStoredMessageToChatMessage)(storedGeneration.message)\n        };\n    } else {\n        return {\n            text: storedGeneration.text\n        };\n    }\n}\nfunction serializeGeneration(generation) {\n    const serializedValue = {\n        text: generation.text\n    };\n    if (generation.message !== undefined) {\n        serializedValue.message = generation.message.toDict();\n    }\n    return serializedValue;\n}\n/**\n * Base class for all caches. All caches should extend this class.\n */ class BaseCache {\n}\nconst GLOBAL_MAP = new Map();\n/**\n * A cache for storing LLM generations that stores data in memory.\n */ class InMemoryCache extends BaseCache {\n    constructor(map){\n        super();\n        Object.defineProperty(this, \"cache\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.cache = map ?? new Map();\n    }\n    /**\n     * Retrieves data from the cache using a prompt and an LLM key. If the\n     * data is not found, it returns null.\n     * @param prompt The prompt used to find the data.\n     * @param llmKey The LLM key used to find the data.\n     * @returns The data corresponding to the prompt and LLM key, or null if not found.\n     */ lookup(prompt, llmKey) {\n        return Promise.resolve(this.cache.get(getCacheKey(prompt, llmKey)) ?? null);\n    }\n    /**\n     * Updates the cache with new data using a prompt and an LLM key.\n     * @param prompt The prompt used to store the data.\n     * @param llmKey The LLM key used to store the data.\n     * @param value The data to be stored.\n     */ async update(prompt, llmKey, value) {\n        this.cache.set(getCacheKey(prompt, llmKey), value);\n    }\n    /**\n     * Returns a global instance of InMemoryCache using a predefined global\n     * map as the initial cache.\n     * @returns A global instance of InMemoryCache.\n     */ static global() {\n        return new InMemoryCache(GLOBAL_MAP);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvY2FjaGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBK0M7QUFDc0I7QUFDckU7Ozs7Ozs7OztDQVNDLEdBQ00sTUFBTUUsY0FBYyxDQUFDLEdBQUdDLFVBQVlILDREQUFZQSxDQUFDRyxRQUFRQyxJQUFJLENBQUMsTUFBTTtBQUNwRSxTQUFTQyw0QkFBNEJDLGdCQUFnQjtJQUN4RCxJQUFJQSxpQkFBaUJDLE9BQU8sS0FBS0MsV0FBVztRQUN4QyxPQUFPO1lBQ0hDLE1BQU1ILGlCQUFpQkcsSUFBSTtZQUMzQkYsU0FBU04saUZBQTZCQSxDQUFDSyxpQkFBaUJDLE9BQU87UUFDbkU7SUFDSixPQUNLO1FBQ0QsT0FBTztZQUFFRSxNQUFNSCxpQkFBaUJHLElBQUk7UUFBQztJQUN6QztBQUNKO0FBQ08sU0FBU0Msb0JBQW9CQyxVQUFVO0lBQzFDLE1BQU1DLGtCQUFrQjtRQUNwQkgsTUFBTUUsV0FBV0YsSUFBSTtJQUN6QjtJQUNBLElBQUlFLFdBQVdKLE9BQU8sS0FBS0MsV0FBVztRQUNsQ0ksZ0JBQWdCTCxPQUFPLEdBQUdJLFdBQVdKLE9BQU8sQ0FBQ00sTUFBTTtJQUN2RDtJQUNBLE9BQU9EO0FBQ1g7QUFDQTs7Q0FFQyxHQUNNLE1BQU1FO0FBQ2I7QUFDQSxNQUFNQyxhQUFhLElBQUlDO0FBQ3ZCOztDQUVDLEdBQ00sTUFBTUMsc0JBQXNCSDtJQUMvQkksWUFBWUMsR0FBRyxDQUFFO1FBQ2IsS0FBSztRQUNMQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFNBQVM7WUFDakNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ0MsS0FBSyxHQUFHUCxPQUFPLElBQUlIO0lBQzVCO0lBQ0E7Ozs7OztLQU1DLEdBQ0RXLE9BQU9DLE1BQU0sRUFBRUMsTUFBTSxFQUFFO1FBQ25CLE9BQU9DLFFBQVFDLE9BQU8sQ0FBQyxJQUFJLENBQUNMLEtBQUssQ0FBQ00sR0FBRyxDQUFDOUIsWUFBWTBCLFFBQVFDLFlBQVk7SUFDMUU7SUFDQTs7Ozs7S0FLQyxHQUNELE1BQU1JLE9BQU9MLE1BQU0sRUFBRUMsTUFBTSxFQUFFSixLQUFLLEVBQUU7UUFDaEMsSUFBSSxDQUFDQyxLQUFLLENBQUNRLEdBQUcsQ0FBQ2hDLFlBQVkwQixRQUFRQyxTQUFTSjtJQUNoRDtJQUNBOzs7O0tBSUMsR0FDRCxPQUFPVSxTQUFTO1FBQ1osT0FBTyxJQUFJbEIsY0FBY0Y7SUFDN0I7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L2NhY2hlcy5qcz82NWJkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluc2VjdXJlSGFzaCB9IGZyb20gXCIuL3V0aWxzL2hhc2guanNcIjtcbmltcG9ydCB7IG1hcFN0b3JlZE1lc3NhZ2VUb0NoYXRNZXNzYWdlLCB9IGZyb20gXCIuL21lc3NhZ2VzL2luZGV4LmpzXCI7XG4vKipcbiAqIFRoaXMgY2FjaGUga2V5IHNob3VsZCBiZSBjb25zaXN0ZW50IGFjcm9zcyBhbGwgdmVyc2lvbnMgb2YgbGFuZ2NoYWluLlxuICogSXQgaXMgY3VycmVudGx5IE5PVCBjb25zaXN0ZW50IGFjcm9zcyB2ZXJzaW9ucyBvZiBsYW5nY2hhaW4uXG4gKlxuICogQSBodWdlIGJlbmVmaXQgb2YgaGF2aW5nIGEgcmVtb3RlIGNhY2hlIChsaWtlIHJlZGlzKSBpcyB0aGF0IHlvdSBjYW5cbiAqIGFjY2VzcyB0aGUgY2FjaGUgZnJvbSBkaWZmZXJlbnQgcHJvY2Vzc2VzL21hY2hpbmVzLiBUaGUgYWxsb3dzIHlvdSB0b1xuICogc2VwZXJhdGUgY29uY2VybnMgYW5kIHNjYWxlIGhvcml6b250YWxseS5cbiAqXG4gKiBUT0RPOiBNYWtlIGNhY2hlIGtleSBjb25zaXN0ZW50IGFjcm9zcyB2ZXJzaW9ucyBvZiBsYW5nY2hhaW4uXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRDYWNoZUtleSA9ICguLi5zdHJpbmdzKSA9PiBpbnNlY3VyZUhhc2goc3RyaW5ncy5qb2luKFwiX1wiKSk7XG5leHBvcnQgZnVuY3Rpb24gZGVzZXJpYWxpemVTdG9yZWRHZW5lcmF0aW9uKHN0b3JlZEdlbmVyYXRpb24pIHtcbiAgICBpZiAoc3RvcmVkR2VuZXJhdGlvbi5tZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRleHQ6IHN0b3JlZEdlbmVyYXRpb24udGV4dCxcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1hcFN0b3JlZE1lc3NhZ2VUb0NoYXRNZXNzYWdlKHN0b3JlZEdlbmVyYXRpb24ubWVzc2FnZSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4geyB0ZXh0OiBzdG9yZWRHZW5lcmF0aW9uLnRleHQgfTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplR2VuZXJhdGlvbihnZW5lcmF0aW9uKSB7XG4gICAgY29uc3Qgc2VyaWFsaXplZFZhbHVlID0ge1xuICAgICAgICB0ZXh0OiBnZW5lcmF0aW9uLnRleHQsXG4gICAgfTtcbiAgICBpZiAoZ2VuZXJhdGlvbi5tZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc2VyaWFsaXplZFZhbHVlLm1lc3NhZ2UgPSBnZW5lcmF0aW9uLm1lc3NhZ2UudG9EaWN0KCk7XG4gICAgfVxuICAgIHJldHVybiBzZXJpYWxpemVkVmFsdWU7XG59XG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIGFsbCBjYWNoZXMuIEFsbCBjYWNoZXMgc2hvdWxkIGV4dGVuZCB0aGlzIGNsYXNzLlxuICovXG5leHBvcnQgY2xhc3MgQmFzZUNhY2hlIHtcbn1cbmNvbnN0IEdMT0JBTF9NQVAgPSBuZXcgTWFwKCk7XG4vKipcbiAqIEEgY2FjaGUgZm9yIHN0b3JpbmcgTExNIGdlbmVyYXRpb25zIHRoYXQgc3RvcmVzIGRhdGEgaW4gbWVtb3J5LlxuICovXG5leHBvcnQgY2xhc3MgSW5NZW1vcnlDYWNoZSBleHRlbmRzIEJhc2VDYWNoZSB7XG4gICAgY29uc3RydWN0b3IobWFwKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNhY2hlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2FjaGUgPSBtYXAgPz8gbmV3IE1hcCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgZGF0YSBmcm9tIHRoZSBjYWNoZSB1c2luZyBhIHByb21wdCBhbmQgYW4gTExNIGtleS4gSWYgdGhlXG4gICAgICogZGF0YSBpcyBub3QgZm91bmQsIGl0IHJldHVybnMgbnVsbC5cbiAgICAgKiBAcGFyYW0gcHJvbXB0IFRoZSBwcm9tcHQgdXNlZCB0byBmaW5kIHRoZSBkYXRhLlxuICAgICAqIEBwYXJhbSBsbG1LZXkgVGhlIExMTSBrZXkgdXNlZCB0byBmaW5kIHRoZSBkYXRhLlxuICAgICAqIEByZXR1cm5zIFRoZSBkYXRhIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb21wdCBhbmQgTExNIGtleSwgb3IgbnVsbCBpZiBub3QgZm91bmQuXG4gICAgICovXG4gICAgbG9va3VwKHByb21wdCwgbGxtS2V5KSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5jYWNoZS5nZXQoZ2V0Q2FjaGVLZXkocHJvbXB0LCBsbG1LZXkpKSA/PyBudWxsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgY2FjaGUgd2l0aCBuZXcgZGF0YSB1c2luZyBhIHByb21wdCBhbmQgYW4gTExNIGtleS5cbiAgICAgKiBAcGFyYW0gcHJvbXB0IFRoZSBwcm9tcHQgdXNlZCB0byBzdG9yZSB0aGUgZGF0YS5cbiAgICAgKiBAcGFyYW0gbGxtS2V5IFRoZSBMTE0ga2V5IHVzZWQgdG8gc3RvcmUgdGhlIGRhdGEuXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSBkYXRhIHRvIGJlIHN0b3JlZC5cbiAgICAgKi9cbiAgICBhc3luYyB1cGRhdGUocHJvbXB0LCBsbG1LZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuY2FjaGUuc2V0KGdldENhY2hlS2V5KHByb21wdCwgbGxtS2V5KSwgdmFsdWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgZ2xvYmFsIGluc3RhbmNlIG9mIEluTWVtb3J5Q2FjaGUgdXNpbmcgYSBwcmVkZWZpbmVkIGdsb2JhbFxuICAgICAqIG1hcCBhcyB0aGUgaW5pdGlhbCBjYWNoZS5cbiAgICAgKiBAcmV0dXJucyBBIGdsb2JhbCBpbnN0YW5jZSBvZiBJbk1lbW9yeUNhY2hlLlxuICAgICAqL1xuICAgIHN0YXRpYyBnbG9iYWwoKSB7XG4gICAgICAgIHJldHVybiBuZXcgSW5NZW1vcnlDYWNoZShHTE9CQUxfTUFQKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiaW5zZWN1cmVIYXNoIiwibWFwU3RvcmVkTWVzc2FnZVRvQ2hhdE1lc3NhZ2UiLCJnZXRDYWNoZUtleSIsInN0cmluZ3MiLCJqb2luIiwiZGVzZXJpYWxpemVTdG9yZWRHZW5lcmF0aW9uIiwic3RvcmVkR2VuZXJhdGlvbiIsIm1lc3NhZ2UiLCJ1bmRlZmluZWQiLCJ0ZXh0Iiwic2VyaWFsaXplR2VuZXJhdGlvbiIsImdlbmVyYXRpb24iLCJzZXJpYWxpemVkVmFsdWUiLCJ0b0RpY3QiLCJCYXNlQ2FjaGUiLCJHTE9CQUxfTUFQIiwiTWFwIiwiSW5NZW1vcnlDYWNoZSIsImNvbnN0cnVjdG9yIiwibWFwIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsImNhY2hlIiwibG9va3VwIiwicHJvbXB0IiwibGxtS2V5IiwiUHJvbWlzZSIsInJlc29sdmUiLCJnZXQiLCJ1cGRhdGUiLCJzZXQiLCJnbG9iYWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/caches.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/callbacks/base.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/callbacks/base.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseCallbackHandler: () => (/* binding */ BaseCallbackHandler)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../load/serializable.js */ \"(rsc)/./node_modules/@langchain/core/dist/load/serializable.js\");\n\n\n/**\n * Abstract class that provides a set of optional methods that can be\n * overridden in derived classes to handle various events during the\n * execution of a LangChain application.\n */ class BaseCallbackHandlerMethodsClass {\n}\n/**\n * Abstract base class for creating callback handlers in the LangChain\n * framework. It provides a set of optional methods that can be overridden\n * in derived classes to handle various events during the execution of a\n * LangChain application.\n */ class BaseCallbackHandler extends BaseCallbackHandlerMethodsClass {\n    get lc_namespace() {\n        return [\n            \"langchain_core\",\n            \"callbacks\",\n            this.name\n        ];\n    }\n    get lc_secrets() {\n        return undefined;\n    }\n    get lc_attributes() {\n        return undefined;\n    }\n    get lc_aliases() {\n        return undefined;\n    }\n    /**\n     * The name of the serializable. Override to provide an alias or\n     * to preserve the serialized module name in minified environments.\n     *\n     * Implemented as a static method to support loading logic.\n     */ static lc_name() {\n        return this.name;\n    }\n    /**\n     * The final serialized identifier for the module.\n     */ get lc_id() {\n        return [\n            ...this.lc_namespace,\n            (0,_load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.get_lc_unique_name)(this.constructor)\n        ];\n    }\n    constructor(input){\n        super();\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"ignoreLLM\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreAgent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreRetriever\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"awaitHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: typeof process !== \"undefined\" ? process.env?.LANGCHAIN_CALLBACKS_BACKGROUND !== \"true\" : true\n        });\n        this.lc_kwargs = input || {};\n        if (input) {\n            this.ignoreLLM = input.ignoreLLM ?? this.ignoreLLM;\n            this.ignoreChain = input.ignoreChain ?? this.ignoreChain;\n            this.ignoreAgent = input.ignoreAgent ?? this.ignoreAgent;\n            this.ignoreRetriever = input.ignoreRetriever ?? this.ignoreRetriever;\n        }\n    }\n    copy() {\n        return new this.constructor(this);\n    }\n    toJSON() {\n        return _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable.prototype.toJSON.call(this);\n    }\n    toJSONNotImplemented() {\n        return _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable.prototype.toJSONNotImplemented.call(this);\n    }\n    static fromMethods(methods) {\n        class Handler extends BaseCallbackHandler {\n            constructor(){\n                super();\n                Object.defineProperty(this, \"name\", {\n                    enumerable: true,\n                    configurable: true,\n                    writable: true,\n                    value: uuid__WEBPACK_IMPORTED_MODULE_1__[\"default\"]()\n                });\n                Object.assign(this, methods);\n            }\n        }\n        return new Handler();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/callbacks/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.js":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/callbacks/manager.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseCallbackManager: () => (/* binding */ BaseCallbackManager),\n/* harmony export */   CallbackManager: () => (/* binding */ CallbackManager),\n/* harmony export */   CallbackManagerForChainRun: () => (/* binding */ CallbackManagerForChainRun),\n/* harmony export */   CallbackManagerForLLMRun: () => (/* binding */ CallbackManagerForLLMRun),\n/* harmony export */   CallbackManagerForRetrieverRun: () => (/* binding */ CallbackManagerForRetrieverRun),\n/* harmony export */   CallbackManagerForToolRun: () => (/* binding */ CallbackManagerForToolRun),\n/* harmony export */   TraceGroup: () => (/* binding */ TraceGroup),\n/* harmony export */   ensureHandler: () => (/* binding */ ensureHandler),\n/* harmony export */   parseCallbackConfigArg: () => (/* binding */ parseCallbackConfigArg),\n/* harmony export */   traceAsGroup: () => (/* binding */ traceAsGroup)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/base.js\");\n/* harmony import */ var _tracers_console_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tracers/console.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/console.js\");\n/* harmony import */ var _tracers_initialize_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tracers/initialize.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/initialize.js\");\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _utils_env_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/env.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.js\");\n/* harmony import */ var _tracers_tracer_langchain_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../tracers/tracer_langchain.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/tracer_langchain.js\");\n/* harmony import */ var _promises_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./promises.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/promises.js\");\n\n\n\n\n\n\n\n\nfunction parseCallbackConfigArg(arg) {\n    if (!arg) {\n        return {};\n    } else if (Array.isArray(arg) || \"name\" in arg) {\n        return {\n            callbacks: arg\n        };\n    } else {\n        return arg;\n    }\n}\n/**\n * Manage callbacks from different components of LangChain.\n */ class BaseCallbackManager {\n    setHandler(handler) {\n        return this.setHandlers([\n            handler\n        ]);\n    }\n}\n/**\n * Base class for run manager in LangChain.\n */ class BaseRunManager {\n    constructor(runId, handlers, inheritableHandlers, tags, inheritableTags, metadata, inheritableMetadata, _parentRunId){\n        Object.defineProperty(this, \"runId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: runId\n        });\n        Object.defineProperty(this, \"handlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: handlers\n        });\n        Object.defineProperty(this, \"inheritableHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: inheritableHandlers\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: tags\n        });\n        Object.defineProperty(this, \"inheritableTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: inheritableTags\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: metadata\n        });\n        Object.defineProperty(this, \"inheritableMetadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: inheritableMetadata\n        });\n        Object.defineProperty(this, \"_parentRunId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _parentRunId\n        });\n    }\n    async handleText(text) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                try {\n                    await handler.handleText?.(text, this.runId, this._parentRunId, this.tags);\n                } catch (err) {\n                    console.error(`Error in handler ${handler.constructor.name}, handleText: ${err}`);\n                }\n            }, handler.awaitHandlers)));\n    }\n}\n/**\n * Manages callbacks for retriever runs.\n */ class CallbackManagerForRetrieverRun extends BaseRunManager {\n    getChild(tag) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const manager = new CallbackManager(this.runId);\n        manager.setHandlers(this.inheritableHandlers);\n        manager.addTags(this.inheritableTags);\n        manager.addMetadata(this.inheritableMetadata);\n        if (tag) {\n            manager.addTags([\n                tag\n            ], false);\n        }\n        return manager;\n    }\n    async handleRetrieverEnd(documents) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreRetriever) {\n                    try {\n                        await handler.handleRetrieverEnd?.(documents, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleRetriever`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleRetrieverError(err) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreRetriever) {\n                    try {\n                        await handler.handleRetrieverError?.(err, this.runId, this._parentRunId, this.tags);\n                    } catch (error) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleRetrieverError: ${error}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\nclass CallbackManagerForLLMRun extends BaseRunManager {\n    async handleLLMNewToken(token, idx, _runId, _parentRunId, _tags, fields) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreLLM) {\n                    try {\n                        await handler.handleLLMNewToken?.(token, idx ?? {\n                            prompt: 0,\n                            completion: 0\n                        }, this.runId, this._parentRunId, this.tags, fields);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleLLMNewToken: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleLLMError(err) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreLLM) {\n                    try {\n                        await handler.handleLLMError?.(err, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleLLMError: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleLLMEnd(output) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreLLM) {\n                    try {\n                        await handler.handleLLMEnd?.(output, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleLLMEnd: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\nclass CallbackManagerForChainRun extends BaseRunManager {\n    getChild(tag) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const manager = new CallbackManager(this.runId);\n        manager.setHandlers(this.inheritableHandlers);\n        manager.addTags(this.inheritableTags);\n        manager.addMetadata(this.inheritableMetadata);\n        if (tag) {\n            manager.addTags([\n                tag\n            ], false);\n        }\n        return manager;\n    }\n    async handleChainError(err, _runId, _parentRunId, _tags, kwargs) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreChain) {\n                    try {\n                        await handler.handleChainError?.(err, this.runId, this._parentRunId, this.tags, kwargs);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleChainError: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleChainEnd(output, _runId, _parentRunId, _tags, kwargs) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreChain) {\n                    try {\n                        await handler.handleChainEnd?.(output, this.runId, this._parentRunId, this.tags, kwargs);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleChainEnd: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleAgentAction(action) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleAgentAction?.(action, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleAgentAction: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleAgentEnd(action) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleAgentEnd?.(action, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleAgentEnd: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\nclass CallbackManagerForToolRun extends BaseRunManager {\n    getChild(tag) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const manager = new CallbackManager(this.runId);\n        manager.setHandlers(this.inheritableHandlers);\n        manager.addTags(this.inheritableTags);\n        manager.addMetadata(this.inheritableMetadata);\n        if (tag) {\n            manager.addTags([\n                tag\n            ], false);\n        }\n        return manager;\n    }\n    async handleToolError(err) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleToolError?.(err, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleToolError: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleToolEnd(output) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleToolEnd?.(output, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleToolEnd: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\n/**\n * @example\n * ```typescript\n * const prompt = PromptTemplate.fromTemplate(\"What is the answer to {question}?\");\n *\n * // Example of using LLMChain with OpenAI and a simple prompt\n * const chain = new LLMChain({\n *   llm: new ChatOpenAI({ temperature: 0.9 }),\n *   prompt,\n * });\n *\n * // Running the chain with a single question\n * const result = await chain.call({\n *   question: \"What is the airspeed velocity of an unladen swallow?\",\n * });\n * console.log(\"The answer is:\", result);\n * ```\n */ class CallbackManager extends BaseCallbackManager {\n    constructor(parentRunId, options){\n        super();\n        Object.defineProperty(this, \"handlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"inheritableHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"inheritableTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"inheritableMetadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"callback_manager\"\n        });\n        Object.defineProperty(this, \"_parentRunId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.handlers = options?.handlers ?? this.handlers;\n        this.inheritableHandlers = options?.inheritableHandlers ?? this.inheritableHandlers;\n        this.tags = options?.tags ?? this.tags;\n        this.inheritableTags = options?.inheritableTags ?? this.inheritableTags;\n        this.metadata = options?.metadata ?? this.metadata;\n        this.inheritableMetadata = options?.inheritableMetadata ?? this.inheritableMetadata;\n        this._parentRunId = parentRunId;\n    }\n    /**\n     * Gets the parent run ID, if any.\n     *\n     * @returns The parent run ID.\n     */ getParentRunId() {\n        return this._parentRunId;\n    }\n    async handleLLMStart(llm, prompts, _runId = undefined, _parentRunId = undefined, extraParams = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        return Promise.all(prompts.map(async (prompt)=>{\n            const runId = (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])();\n            await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                    if (!handler.ignoreLLM) {\n                        try {\n                            await handler.handleLLMStart?.(llm, [\n                                prompt\n                            ], runId, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                        } catch (err) {\n                            console.error(`Error in handler ${handler.constructor.name}, handleLLMStart: ${err}`);\n                        }\n                    }\n                }, handler.awaitHandlers)));\n            return new CallbackManagerForLLMRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n        }));\n    }\n    async handleChatModelStart(llm, messages, _runId = undefined, _parentRunId = undefined, extraParams = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        return Promise.all(messages.map(async (messageGroup)=>{\n            const runId = (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])();\n            await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                    if (!handler.ignoreLLM) {\n                        try {\n                            if (handler.handleChatModelStart) {\n                                await handler.handleChatModelStart?.(llm, [\n                                    messageGroup\n                                ], runId, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                            } else if (handler.handleLLMStart) {\n                                const messageString = (0,_messages_index_js__WEBPACK_IMPORTED_MODULE_3__.getBufferString)(messageGroup);\n                                await handler.handleLLMStart?.(llm, [\n                                    messageString\n                                ], runId, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                            }\n                        } catch (err) {\n                            console.error(`Error in handler ${handler.constructor.name}, handleLLMStart: ${err}`);\n                        }\n                    }\n                }, handler.awaitHandlers)));\n            return new CallbackManagerForLLMRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n        }));\n    }\n    async handleChainStart(chain, inputs, runId = (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(), runType = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreChain) {\n                    try {\n                        await handler.handleChainStart?.(chain, inputs, runId, this._parentRunId, this.tags, this.metadata, runType, runName);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleChainStart: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n        return new CallbackManagerForChainRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n    }\n    async handleToolStart(tool, input, runId = (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(), _parentRunId = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleToolStart?.(tool, input, runId, this._parentRunId, this.tags, this.metadata, runName);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleToolStart: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n        return new CallbackManagerForToolRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n    }\n    async handleRetrieverStart(retriever, query, runId = (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(), _parentRunId = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreRetriever) {\n                    try {\n                        await handler.handleRetrieverStart?.(retriever, query, runId, this._parentRunId, this.tags, this.metadata, runName);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleRetrieverStart: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n        return new CallbackManagerForRetrieverRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n    }\n    addHandler(handler, inherit = true) {\n        this.handlers.push(handler);\n        if (inherit) {\n            this.inheritableHandlers.push(handler);\n        }\n    }\n    removeHandler(handler) {\n        this.handlers = this.handlers.filter((_handler)=>_handler !== handler);\n        this.inheritableHandlers = this.inheritableHandlers.filter((_handler)=>_handler !== handler);\n    }\n    setHandlers(handlers, inherit = true) {\n        this.handlers = [];\n        this.inheritableHandlers = [];\n        for (const handler of handlers){\n            this.addHandler(handler, inherit);\n        }\n    }\n    addTags(tags, inherit = true) {\n        this.removeTags(tags); // Remove duplicates\n        this.tags.push(...tags);\n        if (inherit) {\n            this.inheritableTags.push(...tags);\n        }\n    }\n    removeTags(tags) {\n        this.tags = this.tags.filter((tag)=>!tags.includes(tag));\n        this.inheritableTags = this.inheritableTags.filter((tag)=>!tags.includes(tag));\n    }\n    addMetadata(metadata, inherit = true) {\n        this.metadata = {\n            ...this.metadata,\n            ...metadata\n        };\n        if (inherit) {\n            this.inheritableMetadata = {\n                ...this.inheritableMetadata,\n                ...metadata\n            };\n        }\n    }\n    removeMetadata(metadata) {\n        for (const key of Object.keys(metadata)){\n            delete this.metadata[key];\n            delete this.inheritableMetadata[key];\n        }\n    }\n    copy(additionalHandlers = [], inherit = true) {\n        const manager = new CallbackManager(this._parentRunId);\n        for (const handler of this.handlers){\n            const inheritable = this.inheritableHandlers.includes(handler);\n            manager.addHandler(handler, inheritable);\n        }\n        for (const tag of this.tags){\n            const inheritable = this.inheritableTags.includes(tag);\n            manager.addTags([\n                tag\n            ], inheritable);\n        }\n        for (const key of Object.keys(this.metadata)){\n            const inheritable = Object.keys(this.inheritableMetadata).includes(key);\n            manager.addMetadata({\n                [key]: this.metadata[key]\n            }, inheritable);\n        }\n        for (const handler of additionalHandlers){\n            if (// Prevent multiple copies of console_callback_handler\n            manager.handlers.filter((h)=>h.name === \"console_callback_handler\").some((h)=>h.name === handler.name)) {\n                continue;\n            }\n            manager.addHandler(handler, inherit);\n        }\n        return manager;\n    }\n    static fromHandlers(handlers) {\n        class Handler extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseCallbackHandler {\n            constructor(){\n                super();\n                Object.defineProperty(this, \"name\", {\n                    enumerable: true,\n                    configurable: true,\n                    writable: true,\n                    value: (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])()\n                });\n                Object.assign(this, handlers);\n            }\n        }\n        const manager = new this();\n        manager.addHandler(new Handler());\n        return manager;\n    }\n    static async configure(inheritableHandlers, localHandlers, inheritableTags, localTags, inheritableMetadata, localMetadata, options) {\n        let callbackManager;\n        if (inheritableHandlers || localHandlers) {\n            if (Array.isArray(inheritableHandlers) || !inheritableHandlers) {\n                callbackManager = new CallbackManager();\n                callbackManager.setHandlers(inheritableHandlers?.map(ensureHandler) ?? [], true);\n            } else {\n                callbackManager = inheritableHandlers;\n            }\n            callbackManager = callbackManager.copy(Array.isArray(localHandlers) ? localHandlers.map(ensureHandler) : localHandlers?.handlers, false);\n        }\n        const verboseEnabled = (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"LANGCHAIN_VERBOSE\") === \"true\" || options?.verbose;\n        const tracingV2Enabled = (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"LANGCHAIN_TRACING_V2\") === \"true\";\n        const tracingEnabled = tracingV2Enabled || ((0,_utils_env_js__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"LANGCHAIN_TRACING\") ?? false);\n        if (verboseEnabled || tracingEnabled) {\n            if (!callbackManager) {\n                callbackManager = new CallbackManager();\n            }\n            if (verboseEnabled && !callbackManager.handlers.some((handler)=>handler.name === _tracers_console_js__WEBPACK_IMPORTED_MODULE_1__.ConsoleCallbackHandler.prototype.name)) {\n                const consoleHandler = new _tracers_console_js__WEBPACK_IMPORTED_MODULE_1__.ConsoleCallbackHandler();\n                callbackManager.addHandler(consoleHandler, true);\n            }\n            if (tracingEnabled && !callbackManager.handlers.some((handler)=>handler.name === \"langchain_tracer\")) {\n                if (tracingV2Enabled) {\n                    callbackManager.addHandler(await (0,_tracers_initialize_js__WEBPACK_IMPORTED_MODULE_2__.getTracingV2CallbackHandler)(), true);\n                }\n            }\n        }\n        if (inheritableTags || localTags) {\n            if (callbackManager) {\n                callbackManager.addTags(inheritableTags ?? []);\n                callbackManager.addTags(localTags ?? [], false);\n            }\n        }\n        if (inheritableMetadata || localMetadata) {\n            if (callbackManager) {\n                callbackManager.addMetadata(inheritableMetadata ?? {});\n                callbackManager.addMetadata(localMetadata ?? {}, false);\n            }\n        }\n        return callbackManager;\n    }\n}\nfunction ensureHandler(handler) {\n    if (\"name\" in handler) {\n        return handler;\n    }\n    return _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseCallbackHandler.fromMethods(handler);\n}\n/**\n * @example\n * ```typescript\n * const prompt = PromptTemplate.fromTemplate(`What is the answer to {question}?`);\n *\n * // Example of using LLMChain to process a series of questions\n * const chain = new LLMChain({\n *   llm: new ChatOpenAI({ temperature: 0.9 }),\n *   prompt,\n * });\n *\n * // Process questions using the chain\n * const processQuestions = async (questions) => {\n *   for (const question of questions) {\n *     const result = await chain.call({ question });\n *     console.log(result);\n *   }\n * };\n *\n * // Example questions\n * const questions = [\n *   \"What is your name?\",\n *   \"What is your quest?\",\n *   \"What is your favorite color?\",\n * ];\n *\n * // Run the example\n * processQuestions(questions).catch(console.error);\n *\n * ```\n */ class TraceGroup {\n    constructor(groupName, options){\n        Object.defineProperty(this, \"groupName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: groupName\n        });\n        Object.defineProperty(this, \"options\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: options\n        });\n        Object.defineProperty(this, \"runManager\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    async getTraceGroupCallbackManager(group_name, inputs, options) {\n        const cb = new _tracers_tracer_langchain_js__WEBPACK_IMPORTED_MODULE_5__.LangChainTracer(options);\n        const cm = await CallbackManager.configure([\n            cb\n        ]);\n        const runManager = await cm?.handleChainStart({\n            lc: 1,\n            type: \"not_implemented\",\n            id: [\n                \"langchain\",\n                \"callbacks\",\n                \"groups\",\n                group_name\n            ]\n        }, inputs ?? {});\n        if (!runManager) {\n            throw new Error(\"Failed to create run group callback manager.\");\n        }\n        return runManager;\n    }\n    async start(inputs) {\n        if (!this.runManager) {\n            this.runManager = await this.getTraceGroupCallbackManager(this.groupName, inputs, this.options);\n        }\n        return this.runManager.getChild();\n    }\n    async error(err) {\n        if (this.runManager) {\n            await this.runManager.handleChainError(err);\n            this.runManager = undefined;\n        }\n    }\n    async end(output) {\n        if (this.runManager) {\n            await this.runManager.handleChainEnd(output ?? {});\n            this.runManager = undefined;\n        }\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _coerceToDict(value, defaultKey) {\n    return value && !Array.isArray(value) && typeof value === \"object\" ? value : {\n        [defaultKey]: value\n    };\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function traceAsGroup(groupOptions, enclosedCode, ...args) {\n    const traceGroup = new TraceGroup(groupOptions.name, groupOptions);\n    const callbackManager = await traceGroup.start({\n        ...args\n    });\n    try {\n        const result = await enclosedCode(callbackManager, ...args);\n        await traceGroup.end(_coerceToDict(result, \"output\"));\n        return result;\n    } catch (err) {\n        await traceGroup.error(err);\n        throw err;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/callbacks/promises.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/callbacks/promises.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   awaitAllCallbacks: () => (/* binding */ awaitAllCallbacks),\n/* harmony export */   consumeCallback: () => (/* binding */ consumeCallback)\n/* harmony export */ });\n/* harmony import */ var p_queue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-queue */ \"(rsc)/./node_modules/p-queue/dist/index.js\");\n\nlet queue;\n/**\n * Creates a queue using the p-queue library. The queue is configured to\n * auto-start and has a concurrency of 1, meaning it will process tasks\n * one at a time.\n */ function createQueue() {\n    const PQueue =  true ? p_queue__WEBPACK_IMPORTED_MODULE_0__[\"default\"] : p_queue__WEBPACK_IMPORTED_MODULE_0__;\n    return new PQueue({\n        autoStart: true,\n        concurrency: 1\n    });\n}\n/**\n * Consume a promise, either adding it to the queue or waiting for it to resolve\n * @param promise Promise to consume\n * @param wait Whether to wait for the promise to resolve or resolve immediately\n */ async function consumeCallback(promiseFn, wait) {\n    if (wait === true) {\n        await promiseFn();\n    } else {\n        if (typeof queue === \"undefined\") {\n            queue = createQueue();\n        }\n        void queue.add(promiseFn);\n    }\n}\n/**\n * Waits for all promises in the queue to resolve. If the queue is\n * undefined, it immediately resolves a promise.\n */ function awaitAllCallbacks() {\n    return typeof queue !== \"undefined\" ? queue.onIdle() : Promise.resolve();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvY2FsbGJhY2tzL3Byb21pc2VzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFnQztBQUNoQyxJQUFJQztBQUNKOzs7O0NBSUMsR0FDRCxTQUFTQztJQUNMLE1BQU1DLFNBQVMsS0FBc0JILEdBQUdBLCtDQUFpQixHQUFHQSxvQ0FBU0E7SUFDckUsT0FBTyxJQUFJRyxPQUFPO1FBQ2RFLFdBQVc7UUFDWEMsYUFBYTtJQUNqQjtBQUNKO0FBQ0E7Ozs7Q0FJQyxHQUNNLGVBQWVDLGdCQUFnQkMsU0FBUyxFQUFFQyxJQUFJO0lBQ2pELElBQUlBLFNBQVMsTUFBTTtRQUNmLE1BQU1EO0lBQ1YsT0FDSztRQUNELElBQUksT0FBT1AsVUFBVSxhQUFhO1lBQzlCQSxRQUFRQztRQUNaO1FBQ0EsS0FBS0QsTUFBTVMsR0FBRyxDQUFDRjtJQUNuQjtBQUNKO0FBQ0E7OztDQUdDLEdBQ00sU0FBU0c7SUFDWixPQUFPLE9BQU9WLFVBQVUsY0FBY0EsTUFBTVcsTUFBTSxLQUFLQyxRQUFRQyxPQUFPO0FBQzFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvY2FsbGJhY2tzL3Byb21pc2VzLmpzP2VjMzMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBRdWV1ZU1vZCBmcm9tIFwicC1xdWV1ZVwiO1xubGV0IHF1ZXVlO1xuLyoqXG4gKiBDcmVhdGVzIGEgcXVldWUgdXNpbmcgdGhlIHAtcXVldWUgbGlicmFyeS4gVGhlIHF1ZXVlIGlzIGNvbmZpZ3VyZWQgdG9cbiAqIGF1dG8tc3RhcnQgYW5kIGhhcyBhIGNvbmN1cnJlbmN5IG9mIDEsIG1lYW5pbmcgaXQgd2lsbCBwcm9jZXNzIHRhc2tzXG4gKiBvbmUgYXQgYSB0aW1lLlxuICovXG5mdW5jdGlvbiBjcmVhdGVRdWV1ZSgpIHtcbiAgICBjb25zdCBQUXVldWUgPSBcImRlZmF1bHRcIiBpbiBQUXVldWVNb2QgPyBQUXVldWVNb2QuZGVmYXVsdCA6IFBRdWV1ZU1vZDtcbiAgICByZXR1cm4gbmV3IFBRdWV1ZSh7XG4gICAgICAgIGF1dG9TdGFydDogdHJ1ZSxcbiAgICAgICAgY29uY3VycmVuY3k6IDEsXG4gICAgfSk7XG59XG4vKipcbiAqIENvbnN1bWUgYSBwcm9taXNlLCBlaXRoZXIgYWRkaW5nIGl0IHRvIHRoZSBxdWV1ZSBvciB3YWl0aW5nIGZvciBpdCB0byByZXNvbHZlXG4gKiBAcGFyYW0gcHJvbWlzZSBQcm9taXNlIHRvIGNvbnN1bWVcbiAqIEBwYXJhbSB3YWl0IFdoZXRoZXIgdG8gd2FpdCBmb3IgdGhlIHByb21pc2UgdG8gcmVzb2x2ZSBvciByZXNvbHZlIGltbWVkaWF0ZWx5XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb25zdW1lQ2FsbGJhY2socHJvbWlzZUZuLCB3YWl0KSB7XG4gICAgaWYgKHdhaXQgPT09IHRydWUpIHtcbiAgICAgICAgYXdhaXQgcHJvbWlzZUZuKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAodHlwZW9mIHF1ZXVlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBxdWV1ZSA9IGNyZWF0ZVF1ZXVlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdm9pZCBxdWV1ZS5hZGQocHJvbWlzZUZuKTtcbiAgICB9XG59XG4vKipcbiAqIFdhaXRzIGZvciBhbGwgcHJvbWlzZXMgaW4gdGhlIHF1ZXVlIHRvIHJlc29sdmUuIElmIHRoZSBxdWV1ZSBpc1xuICogdW5kZWZpbmVkLCBpdCBpbW1lZGlhdGVseSByZXNvbHZlcyBhIHByb21pc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhd2FpdEFsbENhbGxiYWNrcygpIHtcbiAgICByZXR1cm4gdHlwZW9mIHF1ZXVlICE9PSBcInVuZGVmaW5lZFwiID8gcXVldWUub25JZGxlKCkgOiBQcm9taXNlLnJlc29sdmUoKTtcbn1cbiJdLCJuYW1lcyI6WyJQUXVldWVNb2QiLCJxdWV1ZSIsImNyZWF0ZVF1ZXVlIiwiUFF1ZXVlIiwiZGVmYXVsdCIsImF1dG9TdGFydCIsImNvbmN1cnJlbmN5IiwiY29uc3VtZUNhbGxiYWNrIiwicHJvbWlzZUZuIiwid2FpdCIsImFkZCIsImF3YWl0QWxsQ2FsbGJhY2tzIiwib25JZGxlIiwiUHJvbWlzZSIsInJlc29sdmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/callbacks/promises.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/chat_history.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/chat_history.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseChatMessageHistory: () => (/* binding */ BaseChatMessageHistory),\n/* harmony export */   BaseListChatMessageHistory: () => (/* binding */ BaseListChatMessageHistory)\n/* harmony export */ });\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./load/serializable.js */ \"(rsc)/./node_modules/@langchain/core/dist/load/serializable.js\");\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n\n\n/**\n * Base class for all chat message histories. All chat message histories\n * should extend this class.\n */ class BaseChatMessageHistory extends _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable {\n}\n/**\n * Base class for all list chat message histories. All list chat message\n * histories should extend this class.\n */ class BaseListChatMessageHistory extends _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable {\n    /**\n     * This is a convenience method for adding a human message string to the store.\n     * Please note that this is a convenience method. Code should favor the\n     * bulk addMessages interface instead to save on round-trips to the underlying\n     * persistence layer.\n     * This method may be deprecated in a future release.\n     */ addUserMessage(message) {\n        return this.addMessage(new _messages_index_js__WEBPACK_IMPORTED_MODULE_1__.HumanMessage(message));\n    }\n    /** @deprecated Use addAIMessage instead */ addAIChatMessage(message) {\n        return this.addMessage(new _messages_index_js__WEBPACK_IMPORTED_MODULE_1__.AIMessage(message));\n    }\n    /**\n     * This is a convenience method for adding an AI message string to the store.\n     * Please note that this is a convenience method. Code should favor the bulk\n     * addMessages interface instead to save on round-trips to the underlying\n     * persistence layer.\n     * This method may be deprecated in a future release.\n     */ addAIMessage(message) {\n        return this.addMessage(new _messages_index_js__WEBPACK_IMPORTED_MODULE_1__.AIMessage(message));\n    }\n    /**\n     * Add a list of messages.\n     *\n     * Implementations should override this method to handle bulk addition of messages\n     * in an efficient manner to avoid unnecessary round-trips to the underlying store.\n     *\n     * @param messages - A list of BaseMessage objects to store.\n     */ async addMessages(messages) {\n        for (const message of messages){\n            await this.addMessage(message);\n        }\n    }\n    /**\n     * Remove all messages from the store.\n     */ clear() {\n        throw new Error(\"Not implemented.\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvY2hhdF9oaXN0b3J5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBc0Q7QUFDUTtBQUM5RDs7O0NBR0MsR0FDTSxNQUFNRywrQkFBK0JILCtEQUFZQTtBQUN4RDtBQUNBOzs7Q0FHQyxHQUNNLE1BQU1JLG1DQUFtQ0osK0RBQVlBO0lBQ3hEOzs7Ozs7S0FNQyxHQUNESyxlQUFlQyxPQUFPLEVBQUU7UUFDcEIsT0FBTyxJQUFJLENBQUNDLFVBQVUsQ0FBQyxJQUFJTiw0REFBWUEsQ0FBQ0s7SUFDNUM7SUFDQSx5Q0FBeUMsR0FDekNFLGlCQUFpQkYsT0FBTyxFQUFFO1FBQ3RCLE9BQU8sSUFBSSxDQUFDQyxVQUFVLENBQUMsSUFBSUwseURBQVNBLENBQUNJO0lBQ3pDO0lBQ0E7Ozs7OztLQU1DLEdBQ0RHLGFBQWFILE9BQU8sRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ0MsVUFBVSxDQUFDLElBQUlMLHlEQUFTQSxDQUFDSTtJQUN6QztJQUNBOzs7Ozs7O0tBT0MsR0FDRCxNQUFNSSxZQUFZQyxRQUFRLEVBQUU7UUFDeEIsS0FBSyxNQUFNTCxXQUFXSyxTQUFVO1lBQzVCLE1BQU0sSUFBSSxDQUFDSixVQUFVLENBQUNEO1FBQzFCO0lBQ0o7SUFDQTs7S0FFQyxHQUNETSxRQUFRO1FBQ0osTUFBTSxJQUFJQyxNQUFNO0lBQ3BCO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9jaGF0X2hpc3RvcnkuanM/Yzc5MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZXJpYWxpemFibGUgfSBmcm9tIFwiLi9sb2FkL3NlcmlhbGl6YWJsZS5qc1wiO1xuaW1wb3J0IHsgSHVtYW5NZXNzYWdlLCBBSU1lc3NhZ2UgfSBmcm9tIFwiLi9tZXNzYWdlcy9pbmRleC5qc1wiO1xuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBhbGwgY2hhdCBtZXNzYWdlIGhpc3Rvcmllcy4gQWxsIGNoYXQgbWVzc2FnZSBoaXN0b3JpZXNcbiAqIHNob3VsZCBleHRlbmQgdGhpcyBjbGFzcy5cbiAqL1xuZXhwb3J0IGNsYXNzIEJhc2VDaGF0TWVzc2FnZUhpc3RvcnkgZXh0ZW5kcyBTZXJpYWxpemFibGUge1xufVxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBhbGwgbGlzdCBjaGF0IG1lc3NhZ2UgaGlzdG9yaWVzLiBBbGwgbGlzdCBjaGF0IG1lc3NhZ2VcbiAqIGhpc3RvcmllcyBzaG91bGQgZXh0ZW5kIHRoaXMgY2xhc3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBCYXNlTGlzdENoYXRNZXNzYWdlSGlzdG9yeSBleHRlbmRzIFNlcmlhbGl6YWJsZSB7XG4gICAgLyoqXG4gICAgICogVGhpcyBpcyBhIGNvbnZlbmllbmNlIG1ldGhvZCBmb3IgYWRkaW5nIGEgaHVtYW4gbWVzc2FnZSBzdHJpbmcgdG8gdGhlIHN0b3JlLlxuICAgICAqIFBsZWFzZSBub3RlIHRoYXQgdGhpcyBpcyBhIGNvbnZlbmllbmNlIG1ldGhvZC4gQ29kZSBzaG91bGQgZmF2b3IgdGhlXG4gICAgICogYnVsayBhZGRNZXNzYWdlcyBpbnRlcmZhY2UgaW5zdGVhZCB0byBzYXZlIG9uIHJvdW5kLXRyaXBzIHRvIHRoZSB1bmRlcmx5aW5nXG4gICAgICogcGVyc2lzdGVuY2UgbGF5ZXIuXG4gICAgICogVGhpcyBtZXRob2QgbWF5IGJlIGRlcHJlY2F0ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS5cbiAgICAgKi9cbiAgICBhZGRVc2VyTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZE1lc3NhZ2UobmV3IEh1bWFuTWVzc2FnZShtZXNzYWdlKSk7XG4gICAgfVxuICAgIC8qKiBAZGVwcmVjYXRlZCBVc2UgYWRkQUlNZXNzYWdlIGluc3RlYWQgKi9cbiAgICBhZGRBSUNoYXRNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkTWVzc2FnZShuZXcgQUlNZXNzYWdlKG1lc3NhZ2UpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBpcyBhIGNvbnZlbmllbmNlIG1ldGhvZCBmb3IgYWRkaW5nIGFuIEFJIG1lc3NhZ2Ugc3RyaW5nIHRvIHRoZSBzdG9yZS5cbiAgICAgKiBQbGVhc2Ugbm90ZSB0aGF0IHRoaXMgaXMgYSBjb252ZW5pZW5jZSBtZXRob2QuIENvZGUgc2hvdWxkIGZhdm9yIHRoZSBidWxrXG4gICAgICogYWRkTWVzc2FnZXMgaW50ZXJmYWNlIGluc3RlYWQgdG8gc2F2ZSBvbiByb3VuZC10cmlwcyB0byB0aGUgdW5kZXJseWluZ1xuICAgICAqIHBlcnNpc3RlbmNlIGxheWVyLlxuICAgICAqIFRoaXMgbWV0aG9kIG1heSBiZSBkZXByZWNhdGVkIGluIGEgZnV0dXJlIHJlbGVhc2UuXG4gICAgICovXG4gICAgYWRkQUlNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkTWVzc2FnZShuZXcgQUlNZXNzYWdlKG1lc3NhZ2UpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGEgbGlzdCBvZiBtZXNzYWdlcy5cbiAgICAgKlxuICAgICAqIEltcGxlbWVudGF0aW9ucyBzaG91bGQgb3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gaGFuZGxlIGJ1bGsgYWRkaXRpb24gb2YgbWVzc2FnZXNcbiAgICAgKiBpbiBhbiBlZmZpY2llbnQgbWFubmVyIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHJvdW5kLXRyaXBzIHRvIHRoZSB1bmRlcmx5aW5nIHN0b3JlLlxuICAgICAqXG4gICAgICogQHBhcmFtIG1lc3NhZ2VzIC0gQSBsaXN0IG9mIEJhc2VNZXNzYWdlIG9iamVjdHMgdG8gc3RvcmUuXG4gICAgICovXG4gICAgYXN5bmMgYWRkTWVzc2FnZXMobWVzc2FnZXMpIHtcbiAgICAgICAgZm9yIChjb25zdCBtZXNzYWdlIG9mIG1lc3NhZ2VzKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmFkZE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFsbCBtZXNzYWdlcyBmcm9tIHRoZSBzdG9yZS5cbiAgICAgKi9cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkLlwiKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiU2VyaWFsaXphYmxlIiwiSHVtYW5NZXNzYWdlIiwiQUlNZXNzYWdlIiwiQmFzZUNoYXRNZXNzYWdlSGlzdG9yeSIsIkJhc2VMaXN0Q2hhdE1lc3NhZ2VIaXN0b3J5IiwiYWRkVXNlck1lc3NhZ2UiLCJtZXNzYWdlIiwiYWRkTWVzc2FnZSIsImFkZEFJQ2hhdE1lc3NhZ2UiLCJhZGRBSU1lc3NhZ2UiLCJhZGRNZXNzYWdlcyIsIm1lc3NhZ2VzIiwiY2xlYXIiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/chat_history.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/documents/document.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/documents/document.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Document: () => (/* binding */ Document)\n/* harmony export */ });\n/**\n * Interface for interacting with a document.\n */ class Document {\n    constructor(fields){\n        Object.defineProperty(this, \"pageContent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.pageContent = fields.pageContent ? fields.pageContent.toString() : this.pageContent;\n        this.metadata = fields.metadata ?? {};\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvZG9jdW1lbnRzL2RvY3VtZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Q0FFQyxHQUNNLE1BQU1BO0lBQ1RDLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQkMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxlQUFlO1lBQ3ZDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxZQUFZO1lBQ3BDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNDLFdBQVcsR0FBR1AsT0FBT08sV0FBVyxHQUMvQlAsT0FBT08sV0FBVyxDQUFDQyxRQUFRLEtBQzNCLElBQUksQ0FBQ0QsV0FBVztRQUN0QixJQUFJLENBQUNFLFFBQVEsR0FBR1QsT0FBT1MsUUFBUSxJQUFJLENBQUM7SUFDeEM7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L2RvY3VtZW50cy9kb2N1bWVudC5qcz9iNGZhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSW50ZXJmYWNlIGZvciBpbnRlcmFjdGluZyB3aXRoIGEgZG9jdW1lbnQuXG4gKi9cbmV4cG9ydCBjbGFzcyBEb2N1bWVudCB7XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInBhZ2VDb250ZW50XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1ldGFkYXRhXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucGFnZUNvbnRlbnQgPSBmaWVsZHMucGFnZUNvbnRlbnRcbiAgICAgICAgICAgID8gZmllbGRzLnBhZ2VDb250ZW50LnRvU3RyaW5nKClcbiAgICAgICAgICAgIDogdGhpcy5wYWdlQ29udGVudDtcbiAgICAgICAgdGhpcy5tZXRhZGF0YSA9IGZpZWxkcy5tZXRhZGF0YSA/PyB7fTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiRG9jdW1lbnQiLCJjb25zdHJ1Y3RvciIsImZpZWxkcyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJwYWdlQ29udGVudCIsInRvU3RyaW5nIiwibWV0YWRhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/documents/document.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/documents/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/documents/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseDocumentTransformer: () => (/* reexport safe */ _transformers_js__WEBPACK_IMPORTED_MODULE_1__.BaseDocumentTransformer),\n/* harmony export */   Document: () => (/* reexport safe */ _document_js__WEBPACK_IMPORTED_MODULE_0__.Document),\n/* harmony export */   MappingDocumentTransformer: () => (/* reexport safe */ _transformers_js__WEBPACK_IMPORTED_MODULE_1__.MappingDocumentTransformer)\n/* harmony export */ });\n/* harmony import */ var _document_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./document.js */ \"(rsc)/./node_modules/@langchain/core/dist/documents/document.js\");\n/* harmony import */ var _transformers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transformers.js */ \"(rsc)/./node_modules/@langchain/core/dist/documents/transformers.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvZG9jdW1lbnRzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQThCO0FBQ0kiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9kb2N1bWVudHMvaW5kZXguanM/MjYyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9kb2N1bWVudC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdHJhbnNmb3JtZXJzLmpzXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/documents/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/documents/transformers.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/documents/transformers.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseDocumentTransformer: () => (/* binding */ BaseDocumentTransformer),\n/* harmony export */   MappingDocumentTransformer: () => (/* binding */ MappingDocumentTransformer)\n/* harmony export */ });\n/* harmony import */ var _runnables_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runnables/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n\n/**\n * Abstract base class for document transformation systems.\n *\n * A document transformation system takes an array of Documents and returns an\n * array of transformed Documents. These arrays do not necessarily have to have\n * the same length.\n *\n * One example of this is a text splitter that splits a large document into\n * many smaller documents.\n */ class BaseDocumentTransformer extends _runnables_base_js__WEBPACK_IMPORTED_MODULE_0__.Runnable {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"documents\",\n                \"transformers\"\n            ]\n        });\n    }\n    /**\n     * Method to invoke the document transformation. This method calls the\n     * transformDocuments method with the provided input.\n     * @param input The input documents to be transformed.\n     * @param _options Optional configuration object to customize the behavior of callbacks.\n     * @returns A Promise that resolves to the transformed documents.\n     */ invoke(input, _options) {\n        return this.transformDocuments(input);\n    }\n}\n/**\n * Class for document transformers that return exactly one transformed document\n * for each input document.\n */ class MappingDocumentTransformer extends BaseDocumentTransformer {\n    async transformDocuments(documents) {\n        const newDocuments = [];\n        for (const document of documents){\n            const transformedDocument = await this._transformDocument(document);\n            newDocuments.push(transformedDocument);\n        }\n        return newDocuments;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvZG9jdW1lbnRzL3RyYW5zZm9ybWVycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBZ0Q7QUFDaEQ7Ozs7Ozs7OztDQVNDLEdBQ00sTUFBTUMsZ0NBQWdDRCx3REFBUUE7SUFDakRFLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1RDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO2dCQUFDO2dCQUFrQjtnQkFBYTthQUFlO1FBQzFEO0lBQ0o7SUFDQTs7Ozs7O0tBTUMsR0FDREMsT0FBT0MsS0FBSyxFQUFFQyxRQUFRLEVBQUU7UUFDcEIsT0FBTyxJQUFJLENBQUNDLGtCQUFrQixDQUFDRjtJQUNuQztBQUNKO0FBQ0E7OztDQUdDLEdBQ00sTUFBTUcsbUNBQW1DYjtJQUM1QyxNQUFNWSxtQkFBbUJFLFNBQVMsRUFBRTtRQUNoQyxNQUFNQyxlQUFlLEVBQUU7UUFDdkIsS0FBSyxNQUFNQyxZQUFZRixVQUFXO1lBQzlCLE1BQU1HLHNCQUFzQixNQUFNLElBQUksQ0FBQ0Msa0JBQWtCLENBQUNGO1lBQzFERCxhQUFhSSxJQUFJLENBQUNGO1FBQ3RCO1FBQ0EsT0FBT0Y7SUFDWDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvZG9jdW1lbnRzL3RyYW5zZm9ybWVycy5qcz81MDAzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJ1bm5hYmxlIH0gZnJvbSBcIi4uL3J1bm5hYmxlcy9iYXNlLmpzXCI7XG4vKipcbiAqIEFic3RyYWN0IGJhc2UgY2xhc3MgZm9yIGRvY3VtZW50IHRyYW5zZm9ybWF0aW9uIHN5c3RlbXMuXG4gKlxuICogQSBkb2N1bWVudCB0cmFuc2Zvcm1hdGlvbiBzeXN0ZW0gdGFrZXMgYW4gYXJyYXkgb2YgRG9jdW1lbnRzIGFuZCByZXR1cm5zIGFuXG4gKiBhcnJheSBvZiB0cmFuc2Zvcm1lZCBEb2N1bWVudHMuIFRoZXNlIGFycmF5cyBkbyBub3QgbmVjZXNzYXJpbHkgaGF2ZSB0byBoYXZlXG4gKiB0aGUgc2FtZSBsZW5ndGguXG4gKlxuICogT25lIGV4YW1wbGUgb2YgdGhpcyBpcyBhIHRleHQgc3BsaXR0ZXIgdGhhdCBzcGxpdHMgYSBsYXJnZSBkb2N1bWVudCBpbnRvXG4gKiBtYW55IHNtYWxsZXIgZG9jdW1lbnRzLlxuICovXG5leHBvcnQgY2xhc3MgQmFzZURvY3VtZW50VHJhbnNmb3JtZXIgZXh0ZW5kcyBSdW5uYWJsZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX25hbWVzcGFjZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogW1wibGFuZ2NoYWluX2NvcmVcIiwgXCJkb2N1bWVudHNcIiwgXCJ0cmFuc2Zvcm1lcnNcIl1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0byBpbnZva2UgdGhlIGRvY3VtZW50IHRyYW5zZm9ybWF0aW9uLiBUaGlzIG1ldGhvZCBjYWxscyB0aGVcbiAgICAgKiB0cmFuc2Zvcm1Eb2N1bWVudHMgbWV0aG9kIHdpdGggdGhlIHByb3ZpZGVkIGlucHV0LlxuICAgICAqIEBwYXJhbSBpbnB1dCBUaGUgaW5wdXQgZG9jdW1lbnRzIHRvIGJlIHRyYW5zZm9ybWVkLlxuICAgICAqIEBwYXJhbSBfb3B0aW9ucyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdCB0byBjdXN0b21pemUgdGhlIGJlaGF2aW9yIG9mIGNhbGxiYWNrcy5cbiAgICAgKiBAcmV0dXJucyBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgdHJhbnNmb3JtZWQgZG9jdW1lbnRzLlxuICAgICAqL1xuICAgIGludm9rZShpbnB1dCwgX29wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtRG9jdW1lbnRzKGlucHV0KTtcbiAgICB9XG59XG4vKipcbiAqIENsYXNzIGZvciBkb2N1bWVudCB0cmFuc2Zvcm1lcnMgdGhhdCByZXR1cm4gZXhhY3RseSBvbmUgdHJhbnNmb3JtZWQgZG9jdW1lbnRcbiAqIGZvciBlYWNoIGlucHV0IGRvY3VtZW50LlxuICovXG5leHBvcnQgY2xhc3MgTWFwcGluZ0RvY3VtZW50VHJhbnNmb3JtZXIgZXh0ZW5kcyBCYXNlRG9jdW1lbnRUcmFuc2Zvcm1lciB7XG4gICAgYXN5bmMgdHJhbnNmb3JtRG9jdW1lbnRzKGRvY3VtZW50cykge1xuICAgICAgICBjb25zdCBuZXdEb2N1bWVudHMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBkb2N1bWVudCBvZiBkb2N1bWVudHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybWVkRG9jdW1lbnQgPSBhd2FpdCB0aGlzLl90cmFuc2Zvcm1Eb2N1bWVudChkb2N1bWVudCk7XG4gICAgICAgICAgICBuZXdEb2N1bWVudHMucHVzaCh0cmFuc2Zvcm1lZERvY3VtZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3RG9jdW1lbnRzO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJSdW5uYWJsZSIsIkJhc2VEb2N1bWVudFRyYW5zZm9ybWVyIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwiaW52b2tlIiwiaW5wdXQiLCJfb3B0aW9ucyIsInRyYW5zZm9ybURvY3VtZW50cyIsIk1hcHBpbmdEb2N1bWVudFRyYW5zZm9ybWVyIiwiZG9jdW1lbnRzIiwibmV3RG9jdW1lbnRzIiwiZG9jdW1lbnQiLCJ0cmFuc2Zvcm1lZERvY3VtZW50IiwiX3RyYW5zZm9ybURvY3VtZW50IiwicHVzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/documents/transformers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/language_models/base.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/language_models/base.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseLangChain: () => (/* binding */ BaseLangChain),\n/* harmony export */   BaseLanguageModel: () => (/* binding */ BaseLanguageModel),\n/* harmony export */   calculateMaxTokens: () => (/* binding */ calculateMaxTokens),\n/* harmony export */   getEmbeddingContextSize: () => (/* binding */ getEmbeddingContextSize),\n/* harmony export */   getModelContextSize: () => (/* binding */ getModelContextSize),\n/* harmony export */   getModelNameForTiktoken: () => (/* binding */ getModelNameForTiktoken)\n/* harmony export */ });\n/* harmony import */ var _caches_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../caches.js */ \"(rsc)/./node_modules/@langchain/core/dist/caches.js\");\n/* harmony import */ var _prompt_values_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../prompt_values.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompt_values.js\");\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/async_caller.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.js\");\n/* harmony import */ var _utils_tiktoken_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/tiktoken.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/tiktoken.js\");\n/* harmony import */ var _runnables_base_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../runnables/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n\n\n\n\n\n\n// https://www.npmjs.com/package/js-tiktoken\nconst getModelNameForTiktoken = (modelName)=>{\n    if (modelName.startsWith(\"gpt-3.5-turbo-16k\")) {\n        return \"gpt-3.5-turbo-16k\";\n    }\n    if (modelName.startsWith(\"gpt-3.5-turbo-\")) {\n        return \"gpt-3.5-turbo\";\n    }\n    if (modelName.startsWith(\"gpt-4-32k\")) {\n        return \"gpt-4-32k\";\n    }\n    if (modelName.startsWith(\"gpt-4-\")) {\n        return \"gpt-4\";\n    }\n    return modelName;\n};\nconst getEmbeddingContextSize = (modelName)=>{\n    switch(modelName){\n        case \"text-embedding-ada-002\":\n            return 8191;\n        default:\n            return 2046;\n    }\n};\nconst getModelContextSize = (modelName)=>{\n    switch(getModelNameForTiktoken(modelName)){\n        case \"gpt-3.5-turbo-16k\":\n            return 16384;\n        case \"gpt-3.5-turbo\":\n            return 4096;\n        case \"gpt-4-32k\":\n            return 32768;\n        case \"gpt-4\":\n            return 8192;\n        case \"text-davinci-003\":\n            return 4097;\n        case \"text-curie-001\":\n            return 2048;\n        case \"text-babbage-001\":\n            return 2048;\n        case \"text-ada-001\":\n            return 2048;\n        case \"code-davinci-002\":\n            return 8000;\n        case \"code-cushman-001\":\n            return 2048;\n        default:\n            return 4097;\n    }\n};\nconst calculateMaxTokens = async ({ prompt, modelName })=>{\n    let numTokens;\n    try {\n        numTokens = (await (0,_utils_tiktoken_js__WEBPACK_IMPORTED_MODULE_4__.encodingForModel)(getModelNameForTiktoken(modelName))).encode(prompt).length;\n    } catch (error) {\n        console.warn(\"Failed to calculate number of tokens, falling back to approximate count\");\n        // fallback to approximate calculation if tiktoken is not available\n        // each token is ~4 characters: https://help.openai.com/en/articles/4936856-what-are-tokens-and-how-to-count-them#\n        numTokens = Math.ceil(prompt.length / 4);\n    }\n    const maxTokens = getModelContextSize(modelName);\n    return maxTokens - numTokens;\n};\nconst getVerbosity = ()=>false;\n/**\n * Base class for language models, chains, tools.\n */ class BaseLangChain extends _runnables_base_js__WEBPACK_IMPORTED_MODULE_5__.Runnable {\n    get lc_attributes() {\n        return {\n            callbacks: undefined,\n            verbose: undefined\n        };\n    }\n    constructor(params){\n        super(params);\n        /**\n         * Whether to print out response text.\n         */ Object.defineProperty(this, \"verbose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"callbacks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.verbose = params.verbose ?? getVerbosity();\n        this.callbacks = params.callbacks;\n        this.tags = params.tags ?? [];\n        this.metadata = params.metadata ?? {};\n    }\n}\n/**\n * Base class for language models.\n */ class BaseLanguageModel extends BaseLangChain {\n    /**\n     * Keys that the language model accepts as call options.\n     */ get callKeys() {\n        return [\n            \"stop\",\n            \"timeout\",\n            \"signal\",\n            \"tags\",\n            \"metadata\",\n            \"callbacks\"\n        ];\n    }\n    constructor({ callbacks, callbackManager, ...params }){\n        super({\n            callbacks: callbacks ?? callbackManager,\n            ...params\n        });\n        /**\n         * The async caller should be used by subclasses to make any async calls,\n         * which will thus benefit from the concurrency and retry logic.\n         */ Object.defineProperty(this, \"caller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"cache\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_encoding\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (typeof params.cache === \"object\") {\n            this.cache = params.cache;\n        } else if (params.cache) {\n            this.cache = _caches_js__WEBPACK_IMPORTED_MODULE_0__.InMemoryCache.global();\n        } else {\n            this.cache = undefined;\n        }\n        this.caller = new _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_3__.AsyncCaller(params ?? {});\n    }\n    async getNumTokens(content) {\n        // TODO: Figure out correct value.\n        if (typeof content !== \"string\") {\n            return 0;\n        }\n        // fallback to approximate calculation if tiktoken is not available\n        let numTokens = Math.ceil(content.length / 4);\n        if (!this._encoding) {\n            try {\n                this._encoding = await (0,_utils_tiktoken_js__WEBPACK_IMPORTED_MODULE_4__.encodingForModel)(\"modelName\" in this ? getModelNameForTiktoken(this.modelName) : \"gpt2\");\n            } catch (error) {\n                console.warn(\"Failed to calculate number of tokens, falling back to approximate count\", error);\n            }\n        }\n        if (this._encoding) {\n            try {\n                numTokens = this._encoding.encode(content).length;\n            } catch (error) {\n                console.warn(\"Failed to calculate number of tokens, falling back to approximate count\", error);\n            }\n        }\n        return numTokens;\n    }\n    static _convertInputToPromptValue(input) {\n        if (typeof input === \"string\") {\n            return new _prompt_values_js__WEBPACK_IMPORTED_MODULE_1__.StringPromptValue(input);\n        } else if (Array.isArray(input)) {\n            return new _prompt_values_js__WEBPACK_IMPORTED_MODULE_1__.ChatPromptValue(input.map(_messages_index_js__WEBPACK_IMPORTED_MODULE_2__.coerceMessageLikeToMessage));\n        } else {\n            return input;\n        }\n    }\n    /**\n     * Get the identifying parameters of the LLM.\n     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _identifyingParams() {\n        return {};\n    }\n    /**\n     * Create a unique cache key for a specific call to a specific language model.\n     * @param callOptions Call options for the model\n     * @returns A unique cache key.\n     */ _getSerializedCacheKeyParametersForCall(callOptions) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const params = {\n            ...this._identifyingParams(),\n            ...callOptions,\n            _type: this._llmType(),\n            _model: this._modelType()\n        };\n        const filteredEntries = Object.entries(params).filter(([_, value])=>value !== undefined);\n        const serializedEntries = filteredEntries.map(([key, value])=>`${key}:${JSON.stringify(value)}`).sort().join(\",\");\n        return serializedEntries;\n    }\n    /**\n     * @deprecated\n     * Return a json-like object representing this LLM.\n     */ serialize() {\n        return {\n            ...this._identifyingParams(),\n            _type: this._llmType(),\n            _model: this._modelType()\n        };\n    }\n    /**\n     * @deprecated\n     * Load an LLM from a json-like object describing it.\n     */ static async deserialize(_data) {\n        throw new Error(\"Use .toJSON() instead\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/language_models/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/load/map_keys.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/load/map_keys.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keyFromJson: () => (/* binding */ keyFromJson),\n/* harmony export */   keyToJson: () => (/* binding */ keyToJson),\n/* harmony export */   mapKeys: () => (/* binding */ mapKeys)\n/* harmony export */ });\n/* harmony import */ var decamelize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! decamelize */ \"(rsc)/./node_modules/decamelize/index.js\");\n/* harmony import */ var camelcase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! camelcase */ \"(rsc)/./node_modules/camelcase/index.js\");\n\n\nfunction keyToJson(key, map) {\n    return map?.[key] || decamelize__WEBPACK_IMPORTED_MODULE_0__(key);\n}\nfunction keyFromJson(key, map) {\n    return map?.[key] || camelcase__WEBPACK_IMPORTED_MODULE_1__(key);\n}\nfunction mapKeys(fields, mapper, map) {\n    const mapped = {};\n    for(const key in fields){\n        if (Object.hasOwn(fields, key)) {\n            mapped[mapper(key, map)] = fields[key];\n        }\n    }\n    return mapped;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbG9hZC9tYXBfa2V5cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFtQztBQUNEO0FBQzNCLFNBQVNFLFVBQVVDLEdBQUcsRUFBRUMsR0FBRztJQUM5QixPQUFPQSxLQUFLLENBQUNELElBQUksSUFBSUgsdUNBQVNBLENBQUNHO0FBQ25DO0FBQ08sU0FBU0UsWUFBWUYsR0FBRyxFQUFFQyxHQUFHO0lBQ2hDLE9BQU9BLEtBQUssQ0FBQ0QsSUFBSSxJQUFJRixzQ0FBU0EsQ0FBQ0U7QUFDbkM7QUFDTyxTQUFTRyxRQUFRQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUosR0FBRztJQUN2QyxNQUFNSyxTQUFTLENBQUM7SUFDaEIsSUFBSyxNQUFNTixPQUFPSSxPQUFRO1FBQ3RCLElBQUlHLE9BQU9DLE1BQU0sQ0FBQ0osUUFBUUosTUFBTTtZQUM1Qk0sTUFBTSxDQUFDRCxPQUFPTCxLQUFLQyxLQUFLLEdBQUdHLE1BQU0sQ0FBQ0osSUFBSTtRQUMxQztJQUNKO0lBQ0EsT0FBT007QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L2xvYWQvbWFwX2tleXMuanM/MGY0MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc25ha2VDYXNlIGZyb20gXCJkZWNhbWVsaXplXCI7XG5pbXBvcnQgY2FtZWxDYXNlIGZyb20gXCJjYW1lbGNhc2VcIjtcbmV4cG9ydCBmdW5jdGlvbiBrZXlUb0pzb24oa2V5LCBtYXApIHtcbiAgICByZXR1cm4gbWFwPy5ba2V5XSB8fCBzbmFrZUNhc2Uoa2V5KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBrZXlGcm9tSnNvbihrZXksIG1hcCkge1xuICAgIHJldHVybiBtYXA/LltrZXldIHx8IGNhbWVsQ2FzZShrZXkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1hcEtleXMoZmllbGRzLCBtYXBwZXIsIG1hcCkge1xuICAgIGNvbnN0IG1hcHBlZCA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIGZpZWxkcykge1xuICAgICAgICBpZiAoT2JqZWN0Lmhhc093bihmaWVsZHMsIGtleSkpIHtcbiAgICAgICAgICAgIG1hcHBlZFttYXBwZXIoa2V5LCBtYXApXSA9IGZpZWxkc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXBwZWQ7XG59XG4iXSwibmFtZXMiOlsic25ha2VDYXNlIiwiY2FtZWxDYXNlIiwia2V5VG9Kc29uIiwia2V5IiwibWFwIiwia2V5RnJvbUpzb24iLCJtYXBLZXlzIiwiZmllbGRzIiwibWFwcGVyIiwibWFwcGVkIiwiT2JqZWN0IiwiaGFzT3duIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/load/map_keys.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/load/serializable.js":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/load/serializable.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Serializable: () => (/* binding */ Serializable),\n/* harmony export */   get_lc_unique_name: () => (/* binding */ get_lc_unique_name)\n/* harmony export */ });\n/* harmony import */ var _map_keys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map_keys.js */ \"(rsc)/./node_modules/@langchain/core/dist/load/map_keys.js\");\n\nfunction shallowCopy(obj) {\n    return Array.isArray(obj) ? [\n        ...obj\n    ] : {\n        ...obj\n    };\n}\nfunction replaceSecrets(root, secretsMap) {\n    const result = shallowCopy(root);\n    for (const [path, secretId] of Object.entries(secretsMap)){\n        const [last, ...partsReverse] = path.split(\".\").reverse();\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let current = result;\n        for (const part of partsReverse.reverse()){\n            if (current[part] === undefined) {\n                break;\n            }\n            current[part] = shallowCopy(current[part]);\n            current = current[part];\n        }\n        if (current[last] !== undefined) {\n            current[last] = {\n                lc: 1,\n                type: \"secret\",\n                id: [\n                    secretId\n                ]\n            };\n        }\n    }\n    return result;\n}\n/**\n * Get a unique name for the module, rather than parent class implementations.\n * Should not be subclassed, subclass lc_name above instead.\n */ function get_lc_unique_name(// eslint-disable-next-line @typescript-eslint/no-use-before-define\nserializableClass) {\n    // \"super\" here would refer to the parent class of Serializable,\n    // when we want the parent class of the module actually calling this method.\n    const parentClass = Object.getPrototypeOf(serializableClass);\n    const lcNameIsSubclassed = typeof serializableClass.lc_name === \"function\" && (typeof parentClass.lc_name !== \"function\" || serializableClass.lc_name() !== parentClass.lc_name());\n    if (lcNameIsSubclassed) {\n        return serializableClass.lc_name();\n    } else {\n        return serializableClass.name;\n    }\n}\nclass Serializable {\n    /**\n     * The name of the serializable. Override to provide an alias or\n     * to preserve the serialized module name in minified environments.\n     *\n     * Implemented as a static method to support loading logic.\n     */ static lc_name() {\n        return this.name;\n    }\n    /**\n     * The final serialized identifier for the module.\n     */ get lc_id() {\n        return [\n            ...this.lc_namespace,\n            get_lc_unique_name(this.constructor)\n        ];\n    }\n    /**\n     * A map of secrets, which will be omitted from serialization.\n     * Keys are paths to the secret in constructor args, e.g. \"foo.bar.baz\".\n     * Values are the secret ids, which will be used when deserializing.\n     */ get lc_secrets() {\n        return undefined;\n    }\n    /**\n     * A map of additional attributes to merge with constructor args.\n     * Keys are the attribute names, e.g. \"foo\".\n     * Values are the attribute values, which will be serialized.\n     * These attributes need to be accepted by the constructor as arguments.\n     */ get lc_attributes() {\n        return undefined;\n    }\n    /**\n     * A map of aliases for constructor args.\n     * Keys are the attribute names, e.g. \"foo\".\n     * Values are the alias that will replace the key in serialization.\n     * This is used to eg. make argument names match Python.\n     */ get lc_aliases() {\n        return undefined;\n    }\n    constructor(kwargs, ..._args){\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.lc_kwargs = kwargs || {};\n    }\n    toJSON() {\n        if (!this.lc_serializable) {\n            return this.toJSONNotImplemented();\n        }\n        if (// eslint-disable-next-line no-instanceof/no-instanceof\n        this.lc_kwargs instanceof Serializable || typeof this.lc_kwargs !== \"object\" || Array.isArray(this.lc_kwargs)) {\n            // We do not support serialization of classes with arg not a POJO\n            // I'm aware the check above isn't as strict as it could be\n            return this.toJSONNotImplemented();\n        }\n        const aliases = {};\n        const secrets = {};\n        const kwargs = Object.keys(this.lc_kwargs).reduce((acc, key)=>{\n            acc[key] = key in this ? this[key] : this.lc_kwargs[key];\n            return acc;\n        }, {});\n        // get secrets, attributes and aliases from all superclasses\n        for(// eslint-disable-next-line @typescript-eslint/no-this-alias\n        let current = Object.getPrototypeOf(this); current; current = Object.getPrototypeOf(current)){\n            Object.assign(aliases, Reflect.get(current, \"lc_aliases\", this));\n            Object.assign(secrets, Reflect.get(current, \"lc_secrets\", this));\n            Object.assign(kwargs, Reflect.get(current, \"lc_attributes\", this));\n        }\n        // include all secrets used, even if not in kwargs,\n        // will be replaced with sentinel value in replaceSecrets\n        Object.keys(secrets).forEach((keyPath)=>{\n            // eslint-disable-next-line @typescript-eslint/no-this-alias, @typescript-eslint/no-explicit-any\n            let read = this;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            let write = kwargs;\n            const [last, ...partsReverse] = keyPath.split(\".\").reverse();\n            for (const key of partsReverse.reverse()){\n                if (!(key in read) || read[key] === undefined) return;\n                if (!(key in write) || write[key] === undefined) {\n                    if (typeof read[key] === \"object\" && read[key] != null) {\n                        write[key] = {};\n                    } else if (Array.isArray(read[key])) {\n                        write[key] = [];\n                    }\n                }\n                read = read[key];\n                write = write[key];\n            }\n            if (last in read && read[last] !== undefined) {\n                write[last] = write[last] || read[last];\n            }\n        });\n        return {\n            lc: 1,\n            type: \"constructor\",\n            id: this.lc_id,\n            kwargs: (0,_map_keys_js__WEBPACK_IMPORTED_MODULE_0__.mapKeys)(Object.keys(secrets).length ? replaceSecrets(kwargs, secrets) : kwargs, _map_keys_js__WEBPACK_IMPORTED_MODULE_0__.keyToJson, aliases)\n        };\n    }\n    toJSONNotImplemented() {\n        return {\n            lc: 1,\n            type: \"not_implemented\",\n            id: this.lc_id\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbG9hZC9zZXJpYWxpemFibGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1EO0FBQ25ELFNBQVNFLFlBQVlDLEdBQUc7SUFDcEIsT0FBT0MsTUFBTUMsT0FBTyxDQUFDRixPQUFPO1dBQUlBO0tBQUksR0FBRztRQUFFLEdBQUdBLEdBQUc7SUFBQztBQUNwRDtBQUNBLFNBQVNHLGVBQWVDLElBQUksRUFBRUMsVUFBVTtJQUNwQyxNQUFNQyxTQUFTUCxZQUFZSztJQUMzQixLQUFLLE1BQU0sQ0FBQ0csTUFBTUMsU0FBUyxJQUFJQyxPQUFPQyxPQUFPLENBQUNMLFlBQWE7UUFDdkQsTUFBTSxDQUFDTSxNQUFNLEdBQUdDLGFBQWEsR0FBR0wsS0FBS00sS0FBSyxDQUFDLEtBQUtDLE9BQU87UUFDdkQsOERBQThEO1FBQzlELElBQUlDLFVBQVVUO1FBQ2QsS0FBSyxNQUFNVSxRQUFRSixhQUFhRSxPQUFPLEdBQUk7WUFDdkMsSUFBSUMsT0FBTyxDQUFDQyxLQUFLLEtBQUtDLFdBQVc7Z0JBQzdCO1lBQ0o7WUFDQUYsT0FBTyxDQUFDQyxLQUFLLEdBQUdqQixZQUFZZ0IsT0FBTyxDQUFDQyxLQUFLO1lBQ3pDRCxVQUFVQSxPQUFPLENBQUNDLEtBQUs7UUFDM0I7UUFDQSxJQUFJRCxPQUFPLENBQUNKLEtBQUssS0FBS00sV0FBVztZQUM3QkYsT0FBTyxDQUFDSixLQUFLLEdBQUc7Z0JBQ1pPLElBQUk7Z0JBQ0pDLE1BQU07Z0JBQ05DLElBQUk7b0JBQUNaO2lCQUFTO1lBQ2xCO1FBQ0o7SUFDSjtJQUNBLE9BQU9GO0FBQ1g7QUFDQTs7O0NBR0MsR0FDTSxTQUFTZSxtQkFDaEIsbUVBQW1FO0FBQ25FQyxpQkFBaUI7SUFDYixnRUFBZ0U7SUFDaEUsNEVBQTRFO0lBQzVFLE1BQU1DLGNBQWNkLE9BQU9lLGNBQWMsQ0FBQ0Y7SUFDMUMsTUFBTUcscUJBQXFCLE9BQU9ILGtCQUFrQkksT0FBTyxLQUFLLGNBQzNELFFBQU9ILFlBQVlHLE9BQU8sS0FBSyxjQUM1Qkosa0JBQWtCSSxPQUFPLE9BQU9ILFlBQVlHLE9BQU8sRUFBQztJQUM1RCxJQUFJRCxvQkFBb0I7UUFDcEIsT0FBT0gsa0JBQWtCSSxPQUFPO0lBQ3BDLE9BQ0s7UUFDRCxPQUFPSixrQkFBa0JLLElBQUk7SUFDakM7QUFDSjtBQUNPLE1BQU1DO0lBQ1Q7Ozs7O0tBS0MsR0FDRCxPQUFPRixVQUFVO1FBQ2IsT0FBTyxJQUFJLENBQUNDLElBQUk7SUFDcEI7SUFDQTs7S0FFQyxHQUNELElBQUlFLFFBQVE7UUFDUixPQUFPO2VBQ0EsSUFBSSxDQUFDQyxZQUFZO1lBQ3BCVCxtQkFBbUIsSUFBSSxDQUFDVSxXQUFXO1NBQ3RDO0lBQ0w7SUFDQTs7OztLQUlDLEdBQ0QsSUFBSUMsYUFBYTtRQUNiLE9BQU9mO0lBQ1g7SUFDQTs7Ozs7S0FLQyxHQUNELElBQUlnQixnQkFBZ0I7UUFDaEIsT0FBT2hCO0lBQ1g7SUFDQTs7Ozs7S0FLQyxHQUNELElBQUlpQixhQUFhO1FBQ2IsT0FBT2pCO0lBQ1g7SUFDQWMsWUFBWUksTUFBTSxFQUFFLEdBQUdDLEtBQUssQ0FBRTtRQUMxQjNCLE9BQU80QixjQUFjLENBQUMsSUFBSSxFQUFFLG1CQUFtQjtZQUMzQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO1FBQ0FoQyxPQUFPNEIsY0FBYyxDQUFDLElBQUksRUFBRSxhQUFhO1lBQ3JDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNDLFNBQVMsR0FBR1AsVUFBVSxDQUFDO0lBQ2hDO0lBQ0FRLFNBQVM7UUFDTCxJQUFJLENBQUMsSUFBSSxDQUFDQyxlQUFlLEVBQUU7WUFDdkIsT0FBTyxJQUFJLENBQUNDLG9CQUFvQjtRQUNwQztRQUNBLElBQ0EsdURBQXVEO1FBQ3ZELElBQUksQ0FBQ0gsU0FBUyxZQUFZZCxnQkFDdEIsT0FBTyxJQUFJLENBQUNjLFNBQVMsS0FBSyxZQUMxQnpDLE1BQU1DLE9BQU8sQ0FBQyxJQUFJLENBQUN3QyxTQUFTLEdBQUc7WUFDL0IsaUVBQWlFO1lBQ2pFLDJEQUEyRDtZQUMzRCxPQUFPLElBQUksQ0FBQ0csb0JBQW9CO1FBQ3BDO1FBQ0EsTUFBTUMsVUFBVSxDQUFDO1FBQ2pCLE1BQU1DLFVBQVUsQ0FBQztRQUNqQixNQUFNWixTQUFTMUIsT0FBT3VDLElBQUksQ0FBQyxJQUFJLENBQUNOLFNBQVMsRUFBRU8sTUFBTSxDQUFDLENBQUNDLEtBQUtDO1lBQ3BERCxHQUFHLENBQUNDLElBQUksR0FBR0EsT0FBTyxJQUFJLEdBQUcsSUFBSSxDQUFDQSxJQUFJLEdBQUcsSUFBSSxDQUFDVCxTQUFTLENBQUNTLElBQUk7WUFDeEQsT0FBT0Q7UUFDWCxHQUFHLENBQUM7UUFDSiw0REFBNEQ7UUFDNUQsSUFDQSw0REFBNEQ7UUFDNUQsSUFBSW5DLFVBQVVOLE9BQU9lLGNBQWMsQ0FBQyxJQUFJLEdBQUdULFNBQVNBLFVBQVVOLE9BQU9lLGNBQWMsQ0FBQ1QsU0FBVTtZQUMxRk4sT0FBTzJDLE1BQU0sQ0FBQ04sU0FBU08sUUFBUUMsR0FBRyxDQUFDdkMsU0FBUyxjQUFjLElBQUk7WUFDOUROLE9BQU8yQyxNQUFNLENBQUNMLFNBQVNNLFFBQVFDLEdBQUcsQ0FBQ3ZDLFNBQVMsY0FBYyxJQUFJO1lBQzlETixPQUFPMkMsTUFBTSxDQUFDakIsUUFBUWtCLFFBQVFDLEdBQUcsQ0FBQ3ZDLFNBQVMsaUJBQWlCLElBQUk7UUFDcEU7UUFDQSxtREFBbUQ7UUFDbkQseURBQXlEO1FBQ3pETixPQUFPdUMsSUFBSSxDQUFDRCxTQUFTUSxPQUFPLENBQUMsQ0FBQ0M7WUFDMUIsZ0dBQWdHO1lBQ2hHLElBQUlDLE9BQU8sSUFBSTtZQUNmLDhEQUE4RDtZQUM5RCxJQUFJQyxRQUFRdkI7WUFDWixNQUFNLENBQUN4QixNQUFNLEdBQUdDLGFBQWEsR0FBRzRDLFFBQVEzQyxLQUFLLENBQUMsS0FBS0MsT0FBTztZQUMxRCxLQUFLLE1BQU1xQyxPQUFPdkMsYUFBYUUsT0FBTyxHQUFJO2dCQUN0QyxJQUFJLENBQUVxQyxDQUFBQSxPQUFPTSxJQUFHLEtBQU1BLElBQUksQ0FBQ04sSUFBSSxLQUFLbEMsV0FDaEM7Z0JBQ0osSUFBSSxDQUFFa0MsQ0FBQUEsT0FBT08sS0FBSSxLQUFNQSxLQUFLLENBQUNQLElBQUksS0FBS2xDLFdBQVc7b0JBQzdDLElBQUksT0FBT3dDLElBQUksQ0FBQ04sSUFBSSxLQUFLLFlBQVlNLElBQUksQ0FBQ04sSUFBSSxJQUFJLE1BQU07d0JBQ3BETyxLQUFLLENBQUNQLElBQUksR0FBRyxDQUFDO29CQUNsQixPQUNLLElBQUlsRCxNQUFNQyxPQUFPLENBQUN1RCxJQUFJLENBQUNOLElBQUksR0FBRzt3QkFDL0JPLEtBQUssQ0FBQ1AsSUFBSSxHQUFHLEVBQUU7b0JBQ25CO2dCQUNKO2dCQUNBTSxPQUFPQSxJQUFJLENBQUNOLElBQUk7Z0JBQ2hCTyxRQUFRQSxLQUFLLENBQUNQLElBQUk7WUFDdEI7WUFDQSxJQUFJeEMsUUFBUThDLFFBQVFBLElBQUksQ0FBQzlDLEtBQUssS0FBS00sV0FBVztnQkFDMUN5QyxLQUFLLENBQUMvQyxLQUFLLEdBQUcrQyxLQUFLLENBQUMvQyxLQUFLLElBQUk4QyxJQUFJLENBQUM5QyxLQUFLO1lBQzNDO1FBQ0o7UUFDQSxPQUFPO1lBQ0hPLElBQUk7WUFDSkMsTUFBTTtZQUNOQyxJQUFJLElBQUksQ0FBQ1MsS0FBSztZQUNkTSxRQUFRckMscURBQU9BLENBQUNXLE9BQU91QyxJQUFJLENBQUNELFNBQVNZLE1BQU0sR0FBR3hELGVBQWVnQyxRQUFRWSxXQUFXWixRQUFRdEMsbURBQVNBLEVBQUVpRDtRQUN2RztJQUNKO0lBQ0FELHVCQUF1QjtRQUNuQixPQUFPO1lBQ0gzQixJQUFJO1lBQ0pDLE1BQU07WUFDTkMsSUFBSSxJQUFJLENBQUNTLEtBQUs7UUFDbEI7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbG9hZC9zZXJpYWxpemFibGUuanM/ZWUyZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBrZXlUb0pzb24sIG1hcEtleXMgfSBmcm9tIFwiLi9tYXBfa2V5cy5qc1wiO1xuZnVuY3Rpb24gc2hhbGxvd0NvcHkob2JqKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkob2JqKSA/IFsuLi5vYmpdIDogeyAuLi5vYmogfTtcbn1cbmZ1bmN0aW9uIHJlcGxhY2VTZWNyZXRzKHJvb3QsIHNlY3JldHNNYXApIHtcbiAgICBjb25zdCByZXN1bHQgPSBzaGFsbG93Q29weShyb290KTtcbiAgICBmb3IgKGNvbnN0IFtwYXRoLCBzZWNyZXRJZF0gb2YgT2JqZWN0LmVudHJpZXMoc2VjcmV0c01hcCkpIHtcbiAgICAgICAgY29uc3QgW2xhc3QsIC4uLnBhcnRzUmV2ZXJzZV0gPSBwYXRoLnNwbGl0KFwiLlwiKS5yZXZlcnNlKCk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIGxldCBjdXJyZW50ID0gcmVzdWx0O1xuICAgICAgICBmb3IgKGNvbnN0IHBhcnQgb2YgcGFydHNSZXZlcnNlLnJldmVyc2UoKSkge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRbcGFydF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudFtwYXJ0XSA9IHNoYWxsb3dDb3B5KGN1cnJlbnRbcGFydF0pO1xuICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnRbcGFydF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnRbbGFzdF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY3VycmVudFtsYXN0XSA9IHtcbiAgICAgICAgICAgICAgICBsYzogMSxcbiAgICAgICAgICAgICAgICB0eXBlOiBcInNlY3JldFwiLFxuICAgICAgICAgICAgICAgIGlkOiBbc2VjcmV0SWRdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBHZXQgYSB1bmlxdWUgbmFtZSBmb3IgdGhlIG1vZHVsZSwgcmF0aGVyIHRoYW4gcGFyZW50IGNsYXNzIGltcGxlbWVudGF0aW9ucy5cbiAqIFNob3VsZCBub3QgYmUgc3ViY2xhc3NlZCwgc3ViY2xhc3MgbGNfbmFtZSBhYm92ZSBpbnN0ZWFkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0X2xjX3VuaXF1ZV9uYW1lKFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2UtYmVmb3JlLWRlZmluZVxuc2VyaWFsaXphYmxlQ2xhc3MpIHtcbiAgICAvLyBcInN1cGVyXCIgaGVyZSB3b3VsZCByZWZlciB0byB0aGUgcGFyZW50IGNsYXNzIG9mIFNlcmlhbGl6YWJsZSxcbiAgICAvLyB3aGVuIHdlIHdhbnQgdGhlIHBhcmVudCBjbGFzcyBvZiB0aGUgbW9kdWxlIGFjdHVhbGx5IGNhbGxpbmcgdGhpcyBtZXRob2QuXG4gICAgY29uc3QgcGFyZW50Q2xhc3MgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc2VyaWFsaXphYmxlQ2xhc3MpO1xuICAgIGNvbnN0IGxjTmFtZUlzU3ViY2xhc3NlZCA9IHR5cGVvZiBzZXJpYWxpemFibGVDbGFzcy5sY19uYW1lID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgKHR5cGVvZiBwYXJlbnRDbGFzcy5sY19uYW1lICE9PSBcImZ1bmN0aW9uXCIgfHxcbiAgICAgICAgICAgIHNlcmlhbGl6YWJsZUNsYXNzLmxjX25hbWUoKSAhPT0gcGFyZW50Q2xhc3MubGNfbmFtZSgpKTtcbiAgICBpZiAobGNOYW1lSXNTdWJjbGFzc2VkKSB7XG4gICAgICAgIHJldHVybiBzZXJpYWxpemFibGVDbGFzcy5sY19uYW1lKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gc2VyaWFsaXphYmxlQ2xhc3MubmFtZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgU2VyaWFsaXphYmxlIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgc2VyaWFsaXphYmxlLiBPdmVycmlkZSB0byBwcm92aWRlIGFuIGFsaWFzIG9yXG4gICAgICogdG8gcHJlc2VydmUgdGhlIHNlcmlhbGl6ZWQgbW9kdWxlIG5hbWUgaW4gbWluaWZpZWQgZW52aXJvbm1lbnRzLlxuICAgICAqXG4gICAgICogSW1wbGVtZW50ZWQgYXMgYSBzdGF0aWMgbWV0aG9kIHRvIHN1cHBvcnQgbG9hZGluZyBsb2dpYy5cbiAgICAgKi9cbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGZpbmFsIHNlcmlhbGl6ZWQgaWRlbnRpZmllciBmb3IgdGhlIG1vZHVsZS5cbiAgICAgKi9cbiAgICBnZXQgbGNfaWQoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAuLi50aGlzLmxjX25hbWVzcGFjZSxcbiAgICAgICAgICAgIGdldF9sY191bmlxdWVfbmFtZSh0aGlzLmNvbnN0cnVjdG9yKSxcbiAgICAgICAgXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBtYXAgb2Ygc2VjcmV0cywgd2hpY2ggd2lsbCBiZSBvbWl0dGVkIGZyb20gc2VyaWFsaXphdGlvbi5cbiAgICAgKiBLZXlzIGFyZSBwYXRocyB0byB0aGUgc2VjcmV0IGluIGNvbnN0cnVjdG9yIGFyZ3MsIGUuZy4gXCJmb28uYmFyLmJhelwiLlxuICAgICAqIFZhbHVlcyBhcmUgdGhlIHNlY3JldCBpZHMsIHdoaWNoIHdpbGwgYmUgdXNlZCB3aGVuIGRlc2VyaWFsaXppbmcuXG4gICAgICovXG4gICAgZ2V0IGxjX3NlY3JldHMoKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgbWFwIG9mIGFkZGl0aW9uYWwgYXR0cmlidXRlcyB0byBtZXJnZSB3aXRoIGNvbnN0cnVjdG9yIGFyZ3MuXG4gICAgICogS2V5cyBhcmUgdGhlIGF0dHJpYnV0ZSBuYW1lcywgZS5nLiBcImZvb1wiLlxuICAgICAqIFZhbHVlcyBhcmUgdGhlIGF0dHJpYnV0ZSB2YWx1ZXMsIHdoaWNoIHdpbGwgYmUgc2VyaWFsaXplZC5cbiAgICAgKiBUaGVzZSBhdHRyaWJ1dGVzIG5lZWQgdG8gYmUgYWNjZXB0ZWQgYnkgdGhlIGNvbnN0cnVjdG9yIGFzIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBnZXQgbGNfYXR0cmlidXRlcygpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBtYXAgb2YgYWxpYXNlcyBmb3IgY29uc3RydWN0b3IgYXJncy5cbiAgICAgKiBLZXlzIGFyZSB0aGUgYXR0cmlidXRlIG5hbWVzLCBlLmcuIFwiZm9vXCIuXG4gICAgICogVmFsdWVzIGFyZSB0aGUgYWxpYXMgdGhhdCB3aWxsIHJlcGxhY2UgdGhlIGtleSBpbiBzZXJpYWxpemF0aW9uLlxuICAgICAqIFRoaXMgaXMgdXNlZCB0byBlZy4gbWFrZSBhcmd1bWVudCBuYW1lcyBtYXRjaCBQeXRob24uXG4gICAgICovXG4gICAgZ2V0IGxjX2FsaWFzZXMoKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGt3YXJncywgLi4uX2FyZ3MpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGNfc2VyaWFsaXphYmxlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGNfa3dhcmdzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubGNfa3dhcmdzID0ga3dhcmdzIHx8IHt9O1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIGlmICghdGhpcy5sY19zZXJpYWxpemFibGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvSlNPTk5vdEltcGxlbWVudGVkKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW5zdGFuY2VvZi9uby1pbnN0YW5jZW9mXG4gICAgICAgIHRoaXMubGNfa3dhcmdzIGluc3RhbmNlb2YgU2VyaWFsaXphYmxlIHx8XG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5sY19rd2FyZ3MgIT09IFwib2JqZWN0XCIgfHxcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkodGhpcy5sY19rd2FyZ3MpKSB7XG4gICAgICAgICAgICAvLyBXZSBkbyBub3Qgc3VwcG9ydCBzZXJpYWxpemF0aW9uIG9mIGNsYXNzZXMgd2l0aCBhcmcgbm90IGEgUE9KT1xuICAgICAgICAgICAgLy8gSSdtIGF3YXJlIHRoZSBjaGVjayBhYm92ZSBpc24ndCBhcyBzdHJpY3QgYXMgaXQgY291bGQgYmVcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvSlNPTk5vdEltcGxlbWVudGVkKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWxpYXNlcyA9IHt9O1xuICAgICAgICBjb25zdCBzZWNyZXRzID0ge307XG4gICAgICAgIGNvbnN0IGt3YXJncyA9IE9iamVjdC5rZXlzKHRoaXMubGNfa3dhcmdzKS5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgICAgICAgICBhY2Nba2V5XSA9IGtleSBpbiB0aGlzID8gdGhpc1trZXldIDogdGhpcy5sY19rd2FyZ3Nba2V5XTtcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH0sIHt9KTtcbiAgICAgICAgLy8gZ2V0IHNlY3JldHMsIGF0dHJpYnV0ZXMgYW5kIGFsaWFzZXMgZnJvbSBhbGwgc3VwZXJjbGFzc2VzXG4gICAgICAgIGZvciAoXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhpcy1hbGlhc1xuICAgICAgICBsZXQgY3VycmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKTsgY3VycmVudDsgY3VycmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihjdXJyZW50KSkge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihhbGlhc2VzLCBSZWZsZWN0LmdldChjdXJyZW50LCBcImxjX2FsaWFzZXNcIiwgdGhpcykpO1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihzZWNyZXRzLCBSZWZsZWN0LmdldChjdXJyZW50LCBcImxjX3NlY3JldHNcIiwgdGhpcykpO1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihrd2FyZ3MsIFJlZmxlY3QuZ2V0KGN1cnJlbnQsIFwibGNfYXR0cmlidXRlc1wiLCB0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaW5jbHVkZSBhbGwgc2VjcmV0cyB1c2VkLCBldmVuIGlmIG5vdCBpbiBrd2FyZ3MsXG4gICAgICAgIC8vIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBzZW50aW5lbCB2YWx1ZSBpbiByZXBsYWNlU2VjcmV0c1xuICAgICAgICBPYmplY3Qua2V5cyhzZWNyZXRzKS5mb3JFYWNoKChrZXlQYXRoKSA9PiB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXMsIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgIGxldCByZWFkID0gdGhpcztcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICBsZXQgd3JpdGUgPSBrd2FyZ3M7XG4gICAgICAgICAgICBjb25zdCBbbGFzdCwgLi4ucGFydHNSZXZlcnNlXSA9IGtleVBhdGguc3BsaXQoXCIuXCIpLnJldmVyc2UoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHBhcnRzUmV2ZXJzZS5yZXZlcnNlKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gcmVhZCkgfHwgcmVhZFtrZXldID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gd3JpdGUpIHx8IHdyaXRlW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlYWRba2V5XSA9PT0gXCJvYmplY3RcIiAmJiByZWFkW2tleV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVba2V5XSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmVhZFtrZXldKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVba2V5XSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlYWQgPSByZWFkW2tleV07XG4gICAgICAgICAgICAgICAgd3JpdGUgPSB3cml0ZVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxhc3QgaW4gcmVhZCAmJiByZWFkW2xhc3RdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB3cml0ZVtsYXN0XSA9IHdyaXRlW2xhc3RdIHx8IHJlYWRbbGFzdF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGM6IDEsXG4gICAgICAgICAgICB0eXBlOiBcImNvbnN0cnVjdG9yXCIsXG4gICAgICAgICAgICBpZDogdGhpcy5sY19pZCxcbiAgICAgICAgICAgIGt3YXJnczogbWFwS2V5cyhPYmplY3Qua2V5cyhzZWNyZXRzKS5sZW5ndGggPyByZXBsYWNlU2VjcmV0cyhrd2FyZ3MsIHNlY3JldHMpIDoga3dhcmdzLCBrZXlUb0pzb24sIGFsaWFzZXMpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICB0b0pTT05Ob3RJbXBsZW1lbnRlZCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxjOiAxLFxuICAgICAgICAgICAgdHlwZTogXCJub3RfaW1wbGVtZW50ZWRcIixcbiAgICAgICAgICAgIGlkOiB0aGlzLmxjX2lkLFxuICAgICAgICB9O1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJrZXlUb0pzb24iLCJtYXBLZXlzIiwic2hhbGxvd0NvcHkiLCJvYmoiLCJBcnJheSIsImlzQXJyYXkiLCJyZXBsYWNlU2VjcmV0cyIsInJvb3QiLCJzZWNyZXRzTWFwIiwicmVzdWx0IiwicGF0aCIsInNlY3JldElkIiwiT2JqZWN0IiwiZW50cmllcyIsImxhc3QiLCJwYXJ0c1JldmVyc2UiLCJzcGxpdCIsInJldmVyc2UiLCJjdXJyZW50IiwicGFydCIsInVuZGVmaW5lZCIsImxjIiwidHlwZSIsImlkIiwiZ2V0X2xjX3VuaXF1ZV9uYW1lIiwic2VyaWFsaXphYmxlQ2xhc3MiLCJwYXJlbnRDbGFzcyIsImdldFByb3RvdHlwZU9mIiwibGNOYW1lSXNTdWJjbGFzc2VkIiwibGNfbmFtZSIsIm5hbWUiLCJTZXJpYWxpemFibGUiLCJsY19pZCIsImxjX25hbWVzcGFjZSIsImNvbnN0cnVjdG9yIiwibGNfc2VjcmV0cyIsImxjX2F0dHJpYnV0ZXMiLCJsY19hbGlhc2VzIiwia3dhcmdzIiwiX2FyZ3MiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwibGNfa3dhcmdzIiwidG9KU09OIiwibGNfc2VyaWFsaXphYmxlIiwidG9KU09OTm90SW1wbGVtZW50ZWQiLCJhbGlhc2VzIiwic2VjcmV0cyIsImtleXMiLCJyZWR1Y2UiLCJhY2MiLCJrZXkiLCJhc3NpZ24iLCJSZWZsZWN0IiwiZ2V0IiwiZm9yRWFjaCIsImtleVBhdGgiLCJyZWFkIiwid3JpdGUiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/load/serializable.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIMessage: () => (/* binding */ AIMessage),\n/* harmony export */   AIMessageChunk: () => (/* binding */ AIMessageChunk),\n/* harmony export */   BaseMessage: () => (/* binding */ BaseMessage),\n/* harmony export */   BaseMessageChunk: () => (/* binding */ BaseMessageChunk),\n/* harmony export */   ChatMessage: () => (/* binding */ ChatMessage),\n/* harmony export */   ChatMessageChunk: () => (/* binding */ ChatMessageChunk),\n/* harmony export */   FunctionMessage: () => (/* binding */ FunctionMessage),\n/* harmony export */   FunctionMessageChunk: () => (/* binding */ FunctionMessageChunk),\n/* harmony export */   HumanMessage: () => (/* binding */ HumanMessage),\n/* harmony export */   HumanMessageChunk: () => (/* binding */ HumanMessageChunk),\n/* harmony export */   SystemMessage: () => (/* binding */ SystemMessage),\n/* harmony export */   SystemMessageChunk: () => (/* binding */ SystemMessageChunk),\n/* harmony export */   ToolMessage: () => (/* binding */ ToolMessage),\n/* harmony export */   ToolMessageChunk: () => (/* binding */ ToolMessageChunk),\n/* harmony export */   coerceMessageLikeToMessage: () => (/* binding */ coerceMessageLikeToMessage),\n/* harmony export */   getBufferString: () => (/* binding */ getBufferString),\n/* harmony export */   isBaseMessage: () => (/* binding */ isBaseMessage),\n/* harmony export */   isBaseMessageChunk: () => (/* binding */ isBaseMessageChunk),\n/* harmony export */   mapChatMessagesToStoredMessages: () => (/* binding */ mapChatMessagesToStoredMessages),\n/* harmony export */   mapStoredMessageToChatMessage: () => (/* binding */ mapStoredMessageToChatMessage),\n/* harmony export */   mapStoredMessagesToChatMessages: () => (/* binding */ mapStoredMessagesToChatMessages)\n/* harmony export */ });\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../load/serializable.js */ \"(rsc)/./node_modules/@langchain/core/dist/load/serializable.js\");\n\nfunction mergeContent(firstContent, secondContent) {\n    // If first content is a string\n    if (typeof firstContent === \"string\") {\n        if (typeof secondContent === \"string\") {\n            return firstContent + secondContent;\n        } else {\n            return [\n                {\n                    type: \"text\",\n                    text: firstContent\n                },\n                ...secondContent\n            ];\n        }\n    // If both are arrays\n    } else if (Array.isArray(secondContent)) {\n        return [\n            ...firstContent,\n            ...secondContent\n        ];\n    // If the first content is a list and second is a string\n    } else {\n        // Otherwise, add the second content as a new element of the list\n        return [\n            ...firstContent,\n            {\n                type: \"text\",\n                text: secondContent\n            }\n        ];\n    }\n}\n/**\n * Base class for all types of messages in a conversation. It includes\n * properties like `content`, `name`, and `additional_kwargs`. It also\n * includes methods like `toDict()` and `_getType()`.\n */ class BaseMessage extends _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable {\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            additional_kwargs: \"additional_kwargs\"\n        };\n    }\n    /**\n     * @deprecated\n     * Use {@link BaseMessage.content} instead.\n     */ get text() {\n        return typeof this.content === \"string\" ? this.content : \"\";\n    }\n    constructor(fields, /** @deprecated */ kwargs){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                content: fields,\n                additional_kwargs: kwargs\n            };\n        }\n        // Make sure the default value for additional_kwargs is passed into super() for serialization\n        if (!fields.additional_kwargs) {\n            // eslint-disable-next-line no-param-reassign\n            fields.additional_kwargs = {};\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"messages\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        /** The content of the message. */ Object.defineProperty(this, \"content\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** The name of the message sender in a multi-user chat. */ Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Additional keyword arguments */ Object.defineProperty(this, \"additional_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = fields.name;\n        this.content = fields.content;\n        this.additional_kwargs = fields.additional_kwargs;\n    }\n    toDict() {\n        return {\n            type: this._getType(),\n            data: this.toJSON().kwargs\n        };\n    }\n    toChunk() {\n        const type = this._getType();\n        if (type === \"human\") {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            return new HumanMessageChunk({\n                ...this\n            });\n        } else if (type === \"ai\") {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            return new AIMessageChunk({\n                ...this\n            });\n        } else if (type === \"system\") {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            return new SystemMessageChunk({\n                ...this\n            });\n        } else if (type === \"function\") {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            return new FunctionMessageChunk({\n                ...this\n            });\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        } else if (ChatMessage.isInstance(this)) {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            return new ChatMessageChunk({\n                ...this\n            });\n        } else {\n            throw new Error(\"Unknown message type.\");\n        }\n    }\n}\nfunction isOpenAIToolCallArray(value) {\n    return Array.isArray(value) && value.every((v)=>typeof v.index === \"number\");\n}\n/**\n * Represents a chunk of a message, which can be concatenated with other\n * message chunks. It includes a method `_merge_kwargs_dict()` for merging\n * additional keyword arguments from another `BaseMessageChunk` into this\n * one. It also overrides the `__add__()` method to support concatenation\n * of `BaseMessageChunk` instances.\n */ class BaseMessageChunk extends BaseMessage {\n    static _mergeAdditionalKwargs(left, right) {\n        const merged = {\n            ...left\n        };\n        for (const [key, value] of Object.entries(right)){\n            if (merged[key] === undefined) {\n                merged[key] = value;\n            } else if (typeof merged[key] !== typeof value) {\n                throw new Error(`additional_kwargs[${key}] already exists in the message chunk, but with a different type.`);\n            } else if (typeof merged[key] === \"string\") {\n                merged[key] = merged[key] + value;\n            } else if (!Array.isArray(merged[key]) && typeof merged[key] === \"object\") {\n                merged[key] = this._mergeAdditionalKwargs(merged[key], value);\n            } else if (key === \"tool_calls\" && isOpenAIToolCallArray(merged[key]) && isOpenAIToolCallArray(value)) {\n                for (const toolCall of value){\n                    if (merged[key]?.[toolCall.index] !== undefined) {\n                        merged[key] = merged[key]?.map((value, i)=>{\n                            if (i !== toolCall.index) {\n                                return value;\n                            }\n                            return {\n                                ...value,\n                                ...toolCall,\n                                function: {\n                                    name: toolCall.function.name ?? value.function.name,\n                                    arguments: (value.function.arguments ?? \"\") + (toolCall.function.arguments ?? \"\")\n                                }\n                            };\n                        });\n                    } else {\n                        merged[key][toolCall.index] = toolCall;\n                    }\n                }\n            } else {\n                throw new Error(`additional_kwargs[${key}] already exists in this message chunk.`);\n            }\n        }\n        return merged;\n    }\n}\n/**\n * Represents a human message in a conversation.\n */ class HumanMessage extends BaseMessage {\n    static lc_name() {\n        return \"HumanMessage\";\n    }\n    _getType() {\n        return \"human\";\n    }\n}\n/**\n * Represents a chunk of a human message, which can be concatenated with\n * other human message chunks.\n */ class HumanMessageChunk extends BaseMessageChunk {\n    static lc_name() {\n        return \"HumanMessageChunk\";\n    }\n    _getType() {\n        return \"human\";\n    }\n    concat(chunk) {\n        return new HumanMessageChunk({\n            content: mergeContent(this.content, chunk.content),\n            additional_kwargs: HumanMessageChunk._mergeAdditionalKwargs(this.additional_kwargs, chunk.additional_kwargs)\n        });\n    }\n}\n/**\n * Represents an AI message in a conversation.\n */ class AIMessage extends BaseMessage {\n    static lc_name() {\n        return \"AIMessage\";\n    }\n    _getType() {\n        return \"ai\";\n    }\n}\n/**\n * Represents a chunk of an AI message, which can be concatenated with\n * other AI message chunks.\n */ class AIMessageChunk extends BaseMessageChunk {\n    static lc_name() {\n        return \"AIMessageChunk\";\n    }\n    _getType() {\n        return \"ai\";\n    }\n    concat(chunk) {\n        return new AIMessageChunk({\n            content: mergeContent(this.content, chunk.content),\n            additional_kwargs: AIMessageChunk._mergeAdditionalKwargs(this.additional_kwargs, chunk.additional_kwargs)\n        });\n    }\n}\n/**\n * Represents a system message in a conversation.\n */ class SystemMessage extends BaseMessage {\n    static lc_name() {\n        return \"SystemMessage\";\n    }\n    _getType() {\n        return \"system\";\n    }\n}\n/**\n * Represents a chunk of a system message, which can be concatenated with\n * other system message chunks.\n */ class SystemMessageChunk extends BaseMessageChunk {\n    static lc_name() {\n        return \"SystemMessageChunk\";\n    }\n    _getType() {\n        return \"system\";\n    }\n    concat(chunk) {\n        return new SystemMessageChunk({\n            content: mergeContent(this.content, chunk.content),\n            additional_kwargs: SystemMessageChunk._mergeAdditionalKwargs(this.additional_kwargs, chunk.additional_kwargs)\n        });\n    }\n}\n/**\n * Represents a function message in a conversation.\n */ class FunctionMessage extends BaseMessage {\n    static lc_name() {\n        return \"FunctionMessage\";\n    }\n    constructor(fields, /** @deprecated */ name){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = {\n                content: fields,\n                name: name\n            };\n        }\n        super(fields);\n    }\n    _getType() {\n        return \"function\";\n    }\n}\n/**\n * Represents a chunk of a function message, which can be concatenated\n * with other function message chunks.\n */ class FunctionMessageChunk extends BaseMessageChunk {\n    static lc_name() {\n        return \"FunctionMessageChunk\";\n    }\n    _getType() {\n        return \"function\";\n    }\n    concat(chunk) {\n        return new FunctionMessageChunk({\n            content: mergeContent(this.content, chunk.content),\n            additional_kwargs: FunctionMessageChunk._mergeAdditionalKwargs(this.additional_kwargs, chunk.additional_kwargs),\n            name: this.name ?? \"\"\n        });\n    }\n}\n/**\n * Represents a tool message in a conversation.\n */ class ToolMessage extends BaseMessage {\n    static lc_name() {\n        return \"ToolMessage\";\n    }\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            tool_call_id: \"tool_call_id\"\n        };\n    }\n    constructor(fields, tool_call_id, name){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = {\n                content: fields,\n                name,\n                tool_call_id: tool_call_id\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"tool_call_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.tool_call_id = fields.tool_call_id;\n    }\n    _getType() {\n        return \"tool\";\n    }\n    static isInstance(message) {\n        return message._getType() === \"tool\";\n    }\n}\n/**\n * Represents a chunk of a tool message, which can be concatenated\n * with other tool message chunks.\n */ class ToolMessageChunk extends BaseMessageChunk {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"tool_call_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.tool_call_id = fields.tool_call_id;\n    }\n    static lc_name() {\n        return \"ToolMessageChunk\";\n    }\n    _getType() {\n        return \"tool\";\n    }\n    concat(chunk) {\n        return new ToolMessageChunk({\n            content: mergeContent(this.content, chunk.content),\n            additional_kwargs: ToolMessageChunk._mergeAdditionalKwargs(this.additional_kwargs, chunk.additional_kwargs),\n            tool_call_id: this.tool_call_id\n        });\n    }\n}\n/**\n * Represents a chat message in a conversation.\n */ class ChatMessage extends BaseMessage {\n    static lc_name() {\n        return \"ChatMessage\";\n    }\n    static _chatMessageClass() {\n        return ChatMessage;\n    }\n    constructor(fields, role){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = {\n                content: fields,\n                role: role\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"role\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.role = fields.role;\n    }\n    _getType() {\n        return \"generic\";\n    }\n    static isInstance(message) {\n        return message._getType() === \"generic\";\n    }\n}\nfunction isBaseMessage(messageLike) {\n    return typeof messageLike?._getType === \"function\";\n}\nfunction isBaseMessageChunk(messageLike) {\n    return isBaseMessage(messageLike) && typeof messageLike.concat === \"function\";\n}\nfunction coerceMessageLikeToMessage(messageLike) {\n    if (typeof messageLike === \"string\") {\n        return new HumanMessage(messageLike);\n    } else if (isBaseMessage(messageLike)) {\n        return messageLike;\n    }\n    const [type, content] = messageLike;\n    if (type === \"human\" || type === \"user\") {\n        return new HumanMessage({\n            content\n        });\n    } else if (type === \"ai\" || type === \"assistant\") {\n        return new AIMessage({\n            content\n        });\n    } else if (type === \"system\") {\n        return new SystemMessage({\n            content\n        });\n    } else {\n        throw new Error(`Unable to coerce message from array: only human, AI, or system message coercion is currently supported.`);\n    }\n}\n/**\n * Represents a chunk of a chat message, which can be concatenated with\n * other chat message chunks.\n */ class ChatMessageChunk extends BaseMessageChunk {\n    static lc_name() {\n        return \"ChatMessageChunk\";\n    }\n    constructor(fields, role){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = {\n                content: fields,\n                role: role\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"role\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.role = fields.role;\n    }\n    _getType() {\n        return \"generic\";\n    }\n    concat(chunk) {\n        return new ChatMessageChunk({\n            content: mergeContent(this.content, chunk.content),\n            additional_kwargs: ChatMessageChunk._mergeAdditionalKwargs(this.additional_kwargs, chunk.additional_kwargs),\n            role: this.role\n        });\n    }\n}\n/**\n * This function is used by memory classes to get a string representation\n * of the chat message history, based on the message content and role.\n */ function getBufferString(messages, humanPrefix = \"Human\", aiPrefix = \"AI\") {\n    const string_messages = [];\n    for (const m of messages){\n        let role;\n        if (m._getType() === \"human\") {\n            role = humanPrefix;\n        } else if (m._getType() === \"ai\") {\n            role = aiPrefix;\n        } else if (m._getType() === \"system\") {\n            role = \"System\";\n        } else if (m._getType() === \"function\") {\n            role = \"Function\";\n        } else if (m._getType() === \"tool\") {\n            role = \"Tool\";\n        } else if (m._getType() === \"generic\") {\n            role = m.role;\n        } else {\n            throw new Error(`Got unsupported message type: ${m._getType()}`);\n        }\n        const nameStr = m.name ? `${m.name}, ` : \"\";\n        string_messages.push(`${role}: ${nameStr}${m.content}`);\n    }\n    return string_messages.join(\"\\n\");\n}\n/**\n * Maps messages from an older format (V1) to the current `StoredMessage`\n * format. If the message is already in the `StoredMessage` format, it is\n * returned as is. Otherwise, it transforms the V1 message into a\n * `StoredMessage`. This function is important for maintaining\n * compatibility with older message formats.\n */ function mapV1MessageToStoredMessage(message) {\n    // TODO: Remove this mapper when we deprecate the old message format.\n    if (message.data !== undefined) {\n        return message;\n    } else {\n        const v1Message = message;\n        return {\n            type: v1Message.type,\n            data: {\n                content: v1Message.text,\n                role: v1Message.role,\n                name: undefined,\n                tool_call_id: undefined\n            }\n        };\n    }\n}\nfunction mapStoredMessageToChatMessage(message) {\n    const storedMessage = mapV1MessageToStoredMessage(message);\n    switch(storedMessage.type){\n        case \"human\":\n            return new HumanMessage(storedMessage.data);\n        case \"ai\":\n            return new AIMessage(storedMessage.data);\n        case \"system\":\n            return new SystemMessage(storedMessage.data);\n        case \"function\":\n            if (storedMessage.data.name === undefined) {\n                throw new Error(\"Name must be defined for function messages\");\n            }\n            return new FunctionMessage(storedMessage.data);\n        case \"tool\":\n            if (storedMessage.data.tool_call_id === undefined) {\n                throw new Error(\"Tool call ID must be defined for tool messages\");\n            }\n            return new ToolMessage(storedMessage.data);\n        case \"chat\":\n            {\n                if (storedMessage.data.role === undefined) {\n                    throw new Error(\"Role must be defined for chat messages\");\n                }\n                return new ChatMessage(storedMessage.data);\n            }\n        default:\n            throw new Error(`Got unexpected type: ${storedMessage.type}`);\n    }\n}\n/**\n * Transforms an array of `StoredMessage` instances into an array of\n * `BaseMessage` instances. It uses the `mapV1MessageToStoredMessage`\n * function to ensure all messages are in the `StoredMessage` format, then\n * creates new instances of the appropriate `BaseMessage` subclass based\n * on the type of each message. This function is used to prepare stored\n * messages for use in a chat context.\n */ function mapStoredMessagesToChatMessages(messages) {\n    return messages.map(mapStoredMessageToChatMessage);\n}\n/**\n * Transforms an array of `BaseMessage` instances into an array of\n * `StoredMessage` instances. It does this by calling the `toDict` method\n * on each `BaseMessage`, which returns a `StoredMessage`. This function\n * is used to prepare chat messages for storage.\n */ function mapChatMessagesToStoredMessages(messages) {\n    return messages.map((message)=>message.toDict());\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/prompt_values.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/prompt_values.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePromptValue: () => (/* binding */ BasePromptValue),\n/* harmony export */   ChatPromptValue: () => (/* binding */ ChatPromptValue),\n/* harmony export */   ImagePromptValue: () => (/* binding */ ImagePromptValue),\n/* harmony export */   StringPromptValue: () => (/* binding */ StringPromptValue)\n/* harmony export */ });\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./load/serializable.js */ \"(rsc)/./node_modules/@langchain/core/dist/load/serializable.js\");\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n\n\n/**\n * Base PromptValue class. All prompt values should extend this class.\n */ class BasePromptValue extends _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable {\n}\n/**\n * Represents a prompt value as a string. It extends the BasePromptValue\n * class and overrides the toString and toChatMessages methods.\n */ class StringPromptValue extends BasePromptValue {\n    static lc_name() {\n        return \"StringPromptValue\";\n    }\n    constructor(value){\n        super({\n            value\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"prompt_values\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.value = value;\n    }\n    toString() {\n        return this.value;\n    }\n    toChatMessages() {\n        return [\n            new _messages_index_js__WEBPACK_IMPORTED_MODULE_1__.HumanMessage(this.value)\n        ];\n    }\n}\n/**\n * Class that represents a chat prompt value. It extends the\n * BasePromptValue and includes an array of BaseMessage instances.\n */ class ChatPromptValue extends BasePromptValue {\n    static lc_name() {\n        return \"ChatPromptValue\";\n    }\n    constructor(fields){\n        if (Array.isArray(fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                messages: fields\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"prompt_values\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"messages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.messages = fields.messages;\n    }\n    toString() {\n        return (0,_messages_index_js__WEBPACK_IMPORTED_MODULE_1__.getBufferString)(this.messages);\n    }\n    toChatMessages() {\n        return this.messages;\n    }\n}\n/**\n * Class that represents an image prompt value. It extends the\n * BasePromptValue and includes an ImageURL instance.\n */ class ImagePromptValue extends BasePromptValue {\n    static lc_name() {\n        return \"ImagePromptValue\";\n    }\n    constructor(fields){\n        if (!(\"imageUrl\" in fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                imageUrl: fields\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"prompt_values\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"imageUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** @ignore */ Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.imageUrl = fields.imageUrl;\n    }\n    toString() {\n        return this.imageUrl.url;\n    }\n    toChatMessages() {\n        return [\n            new _messages_index_js__WEBPACK_IMPORTED_MODULE_1__.HumanMessage({\n                content: [\n                    {\n                        type: \"image_url\",\n                        image_url: {\n                            detail: this.imageUrl.detail,\n                            url: this.imageUrl.url\n                        }\n                    }\n                ]\n            })\n        ];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/prompt_values.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/retrievers.js":
/*!*********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/retrievers.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseRetriever: () => (/* binding */ BaseRetriever)\n/* harmony export */ });\n/* harmony import */ var _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./callbacks/manager.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.js\");\n/* harmony import */ var _runnables_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./runnables/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n/* harmony import */ var _runnables_config_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./runnables/config.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\");\n\n\n\n/**\n * Abstract base class for a Document retrieval system. A retrieval system\n * is defined as something that can take string queries and return the\n * most 'relevant' Documents from some source.\n */ class BaseRetriever extends _runnables_base_js__WEBPACK_IMPORTED_MODULE_1__.Runnable {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"callbacks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"verbose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.callbacks = fields?.callbacks;\n        this.tags = fields?.tags ?? [];\n        this.metadata = fields?.metadata ?? {};\n        this.verbose = fields?.verbose ?? false;\n    }\n    /**\n     * TODO: This should be an abstract method, but we'd like to avoid breaking\n     * changes to people currently using subclassed custom retrievers.\n     * Change it on next major release.\n     */ _getRelevantDocuments(_query, _callbacks) {\n        throw new Error(\"Not implemented!\");\n    }\n    async invoke(input, options) {\n        return this.getRelevantDocuments(input, (0,_runnables_config_js__WEBPACK_IMPORTED_MODULE_2__.ensureConfig)(options));\n    }\n    /**\n     * Main method used to retrieve relevant documents. It takes a query\n     * string and an optional configuration object, and returns a promise that\n     * resolves to an array of `Document` objects. This method handles the\n     * retrieval process, including starting and ending callbacks, and error\n     * handling.\n     * @param query The query string to retrieve relevant documents for.\n     * @param config Optional configuration object for the retrieval process.\n     * @returns A promise that resolves to an array of `Document` objects.\n     */ async getRelevantDocuments(query, config) {\n        const parsedConfig = (0,_runnables_config_js__WEBPACK_IMPORTED_MODULE_2__.ensureConfig)((0,_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.parseCallbackConfigArg)(config));\n        const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.CallbackManager.configure(parsedConfig.callbacks, this.callbacks, parsedConfig.tags, this.tags, parsedConfig.metadata, this.metadata, {\n            verbose: this.verbose\n        });\n        const runManager = await callbackManager_?.handleRetrieverStart(this.toJSON(), query, undefined, undefined, undefined, undefined, parsedConfig.runName);\n        try {\n            const results = await this._getRelevantDocuments(query, runManager);\n            await runManager?.handleRetrieverEnd(results);\n            return results;\n        } catch (error) {\n            await runManager?.handleRetrieverError(error);\n            throw error;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcmV0cmlldmVycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWtGO0FBQ25DO0FBQ007QUFDckQ7Ozs7Q0FJQyxHQUNNLE1BQU1JLHNCQUFzQkYsd0RBQVFBO0lBQ3ZDRyxZQUFZQyxNQUFNLENBQUU7UUFDaEIsS0FBSyxDQUFDQTtRQUNOQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGFBQWE7WUFDckNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVE7WUFDaENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFlBQVk7WUFDcENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFdBQVc7WUFDbkNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ0MsU0FBUyxHQUFHUCxRQUFRTztRQUN6QixJQUFJLENBQUNDLElBQUksR0FBR1IsUUFBUVEsUUFBUSxFQUFFO1FBQzlCLElBQUksQ0FBQ0MsUUFBUSxHQUFHVCxRQUFRUyxZQUFZLENBQUM7UUFDckMsSUFBSSxDQUFDQyxPQUFPLEdBQUdWLFFBQVFVLFdBQVc7SUFDdEM7SUFDQTs7OztLQUlDLEdBQ0RDLHNCQUFzQkMsTUFBTSxFQUFFQyxVQUFVLEVBQUU7UUFDdEMsTUFBTSxJQUFJQyxNQUFNO0lBQ3BCO0lBQ0EsTUFBTUMsT0FBT0MsS0FBSyxFQUFFQyxPQUFPLEVBQUU7UUFDekIsT0FBTyxJQUFJLENBQUNDLG9CQUFvQixDQUFDRixPQUFPbkIsa0VBQVlBLENBQUNvQjtJQUN6RDtJQUNBOzs7Ozs7Ozs7S0FTQyxHQUNELE1BQU1DLHFCQUFxQkMsS0FBSyxFQUFFQyxNQUFNLEVBQUU7UUFDdEMsTUFBTUMsZUFBZXhCLGtFQUFZQSxDQUFDRiw2RUFBc0JBLENBQUN5QjtRQUN6RCxNQUFNRSxtQkFBbUIsTUFBTTVCLGtFQUFlQSxDQUFDNkIsU0FBUyxDQUFDRixhQUFhZCxTQUFTLEVBQUUsSUFBSSxDQUFDQSxTQUFTLEVBQUVjLGFBQWFiLElBQUksRUFBRSxJQUFJLENBQUNBLElBQUksRUFBRWEsYUFBYVosUUFBUSxFQUFFLElBQUksQ0FBQ0EsUUFBUSxFQUFFO1lBQUVDLFNBQVMsSUFBSSxDQUFDQSxPQUFPO1FBQUM7UUFDN0wsTUFBTWMsYUFBYSxNQUFNRixrQkFBa0JHLHFCQUFxQixJQUFJLENBQUNDLE1BQU0sSUFBSVAsT0FBT1EsV0FBV0EsV0FBV0EsV0FBV0EsV0FBV04sYUFBYU8sT0FBTztRQUN0SixJQUFJO1lBQ0EsTUFBTUMsVUFBVSxNQUFNLElBQUksQ0FBQ2xCLHFCQUFxQixDQUFDUSxPQUFPSztZQUN4RCxNQUFNQSxZQUFZTSxtQkFBbUJEO1lBQ3JDLE9BQU9BO1FBQ1gsRUFDQSxPQUFPRSxPQUFPO1lBQ1YsTUFBTVAsWUFBWVEscUJBQXFCRDtZQUN2QyxNQUFNQTtRQUNWO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3JldHJpZXZlcnMuanM/MzIyMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDYWxsYmFja01hbmFnZXIsIHBhcnNlQ2FsbGJhY2tDb25maWdBcmcsIH0gZnJvbSBcIi4vY2FsbGJhY2tzL21hbmFnZXIuanNcIjtcbmltcG9ydCB7IFJ1bm5hYmxlIH0gZnJvbSBcIi4vcnVubmFibGVzL2Jhc2UuanNcIjtcbmltcG9ydCB7IGVuc3VyZUNvbmZpZyB9IGZyb20gXCIuL3J1bm5hYmxlcy9jb25maWcuanNcIjtcbi8qKlxuICogQWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgYSBEb2N1bWVudCByZXRyaWV2YWwgc3lzdGVtLiBBIHJldHJpZXZhbCBzeXN0ZW1cbiAqIGlzIGRlZmluZWQgYXMgc29tZXRoaW5nIHRoYXQgY2FuIHRha2Ugc3RyaW5nIHF1ZXJpZXMgYW5kIHJldHVybiB0aGVcbiAqIG1vc3QgJ3JlbGV2YW50JyBEb2N1bWVudHMgZnJvbSBzb21lIHNvdXJjZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEJhc2VSZXRyaWV2ZXIgZXh0ZW5kcyBSdW5uYWJsZSB7XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkcyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNhbGxiYWNrc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0YWdzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1ldGFkYXRhXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInZlcmJvc2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jYWxsYmFja3MgPSBmaWVsZHM/LmNhbGxiYWNrcztcbiAgICAgICAgdGhpcy50YWdzID0gZmllbGRzPy50YWdzID8/IFtdO1xuICAgICAgICB0aGlzLm1ldGFkYXRhID0gZmllbGRzPy5tZXRhZGF0YSA/PyB7fTtcbiAgICAgICAgdGhpcy52ZXJib3NlID0gZmllbGRzPy52ZXJib3NlID8/IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUT0RPOiBUaGlzIHNob3VsZCBiZSBhbiBhYnN0cmFjdCBtZXRob2QsIGJ1dCB3ZSdkIGxpa2UgdG8gYXZvaWQgYnJlYWtpbmdcbiAgICAgKiBjaGFuZ2VzIHRvIHBlb3BsZSBjdXJyZW50bHkgdXNpbmcgc3ViY2xhc3NlZCBjdXN0b20gcmV0cmlldmVycy5cbiAgICAgKiBDaGFuZ2UgaXQgb24gbmV4dCBtYWpvciByZWxlYXNlLlxuICAgICAqL1xuICAgIF9nZXRSZWxldmFudERvY3VtZW50cyhfcXVlcnksIF9jYWxsYmFja3MpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkIVwiKTtcbiAgICB9XG4gICAgYXN5bmMgaW52b2tlKGlucHV0LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFJlbGV2YW50RG9jdW1lbnRzKGlucHV0LCBlbnN1cmVDb25maWcob3B0aW9ucykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYWluIG1ldGhvZCB1c2VkIHRvIHJldHJpZXZlIHJlbGV2YW50IGRvY3VtZW50cy4gSXQgdGFrZXMgYSBxdWVyeVxuICAgICAqIHN0cmluZyBhbmQgYW4gb3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3QsIGFuZCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0XG4gICAgICogcmVzb2x2ZXMgdG8gYW4gYXJyYXkgb2YgYERvY3VtZW50YCBvYmplY3RzLiBUaGlzIG1ldGhvZCBoYW5kbGVzIHRoZVxuICAgICAqIHJldHJpZXZhbCBwcm9jZXNzLCBpbmNsdWRpbmcgc3RhcnRpbmcgYW5kIGVuZGluZyBjYWxsYmFja3MsIGFuZCBlcnJvclxuICAgICAqIGhhbmRsaW5nLlxuICAgICAqIEBwYXJhbSBxdWVyeSBUaGUgcXVlcnkgc3RyaW5nIHRvIHJldHJpZXZlIHJlbGV2YW50IGRvY3VtZW50cyBmb3IuXG4gICAgICogQHBhcmFtIGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdCBmb3IgdGhlIHJldHJpZXZhbCBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIGFycmF5IG9mIGBEb2N1bWVudGAgb2JqZWN0cy5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRSZWxldmFudERvY3VtZW50cyhxdWVyeSwgY29uZmlnKSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZENvbmZpZyA9IGVuc3VyZUNvbmZpZyhwYXJzZUNhbGxiYWNrQ29uZmlnQXJnKGNvbmZpZykpO1xuICAgICAgICBjb25zdCBjYWxsYmFja01hbmFnZXJfID0gYXdhaXQgQ2FsbGJhY2tNYW5hZ2VyLmNvbmZpZ3VyZShwYXJzZWRDb25maWcuY2FsbGJhY2tzLCB0aGlzLmNhbGxiYWNrcywgcGFyc2VkQ29uZmlnLnRhZ3MsIHRoaXMudGFncywgcGFyc2VkQ29uZmlnLm1ldGFkYXRhLCB0aGlzLm1ldGFkYXRhLCB7IHZlcmJvc2U6IHRoaXMudmVyYm9zZSB9KTtcbiAgICAgICAgY29uc3QgcnVuTWFuYWdlciA9IGF3YWl0IGNhbGxiYWNrTWFuYWdlcl8/LmhhbmRsZVJldHJpZXZlclN0YXJ0KHRoaXMudG9KU09OKCksIHF1ZXJ5LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHBhcnNlZENvbmZpZy5ydW5OYW1lKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCB0aGlzLl9nZXRSZWxldmFudERvY3VtZW50cyhxdWVyeSwgcnVuTWFuYWdlcik7XG4gICAgICAgICAgICBhd2FpdCBydW5NYW5hZ2VyPy5oYW5kbGVSZXRyaWV2ZXJFbmQocmVzdWx0cyk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGF3YWl0IHJ1bk1hbmFnZXI/LmhhbmRsZVJldHJpZXZlckVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkNhbGxiYWNrTWFuYWdlciIsInBhcnNlQ2FsbGJhY2tDb25maWdBcmciLCJSdW5uYWJsZSIsImVuc3VyZUNvbmZpZyIsIkJhc2VSZXRyaWV2ZXIiLCJjb25zdHJ1Y3RvciIsImZpZWxkcyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJjYWxsYmFja3MiLCJ0YWdzIiwibWV0YWRhdGEiLCJ2ZXJib3NlIiwiX2dldFJlbGV2YW50RG9jdW1lbnRzIiwiX3F1ZXJ5IiwiX2NhbGxiYWNrcyIsIkVycm9yIiwiaW52b2tlIiwiaW5wdXQiLCJvcHRpb25zIiwiZ2V0UmVsZXZhbnREb2N1bWVudHMiLCJxdWVyeSIsImNvbmZpZyIsInBhcnNlZENvbmZpZyIsImNhbGxiYWNrTWFuYWdlcl8iLCJjb25maWd1cmUiLCJydW5NYW5hZ2VyIiwiaGFuZGxlUmV0cmlldmVyU3RhcnQiLCJ0b0pTT04iLCJ1bmRlZmluZWQiLCJydW5OYW1lIiwicmVzdWx0cyIsImhhbmRsZVJldHJpZXZlckVuZCIsImVycm9yIiwiaGFuZGxlUmV0cmlldmVyRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/retrievers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/base.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/base.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Runnable: () => (/* binding */ Runnable),\n/* harmony export */   RunnableAssign: () => (/* binding */ RunnableAssign),\n/* harmony export */   RunnableBinding: () => (/* binding */ RunnableBinding),\n/* harmony export */   RunnableEach: () => (/* binding */ RunnableEach),\n/* harmony export */   RunnableLambda: () => (/* binding */ RunnableLambda),\n/* harmony export */   RunnableMap: () => (/* binding */ RunnableMap),\n/* harmony export */   RunnableParallel: () => (/* binding */ RunnableParallel),\n/* harmony export */   RunnablePick: () => (/* binding */ RunnablePick),\n/* harmony export */   RunnableRetry: () => (/* binding */ RunnableRetry),\n/* harmony export */   RunnableSequence: () => (/* binding */ RunnableSequence),\n/* harmony export */   RunnableWithFallbacks: () => (/* binding */ RunnableWithFallbacks),\n/* harmony export */   _coerceToDict: () => (/* binding */ _coerceToDict),\n/* harmony export */   _coerceToRunnable: () => (/* binding */ _coerceToRunnable)\n/* harmony export */ });\n/* harmony import */ var p_retry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-retry */ \"(rsc)/./node_modules/p-retry/index.js\");\n/* harmony import */ var _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../callbacks/manager.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.js\");\n/* harmony import */ var _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tracers/log_stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/log_stream.js\");\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../load/serializable.js */ \"(rsc)/./node_modules/@langchain/core/dist/load/serializable.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./config.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\");\n/* harmony import */ var _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/async_caller.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.js\");\n/* harmony import */ var _tracers_root_listener_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../tracers/root_listener.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/root_listener.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/utils.js\");\n/* harmony import */ var _singletons_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../singletons/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/index.js\");\n\n\n\n\n\n\n\n\n\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _coerceToDict(value, defaultKey) {\n    return value && !Array.isArray(value) && // eslint-disable-next-line no-instanceof/no-instanceof\n    !(value instanceof Date) && typeof value === \"object\" ? value : {\n        [defaultKey]: value\n    };\n}\n/**\n * A Runnable is a generic unit of work that can be invoked, batched, streamed, and/or\n * transformed.\n */ class Runnable extends _load_serializable_js__WEBPACK_IMPORTED_MODULE_3__.Serializable {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_runnable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    getName(suffix) {\n        const name = // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.name ?? this.constructor.lc_name() ?? this.constructor.name;\n        return suffix ? `${name}${suffix}` : name;\n    }\n    /**\n     * Bind arguments to a Runnable, returning a new Runnable.\n     * @param kwargs\n     * @returns A new RunnableBinding that, when invoked, will apply the bound args.\n     */ bind(kwargs) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableBinding({\n            bound: this,\n            kwargs,\n            config: {}\n        });\n    }\n    /**\n     * Return a new Runnable that maps a list of inputs to a list of outputs,\n     * by calling invoke() with each input.\n     */ map() {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableEach({\n            bound: this\n        });\n    }\n    /**\n     * Add retry logic to an existing runnable.\n     * @param kwargs\n     * @returns A new RunnableRetry that, when invoked, will retry according to the parameters.\n     */ withRetry(fields) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableRetry({\n            bound: this,\n            kwargs: {},\n            config: {},\n            maxAttemptNumber: fields?.stopAfterAttempt,\n            ...fields\n        });\n    }\n    /**\n     * Bind config to a Runnable, returning a new Runnable.\n     * @param config New configuration parameters to attach to the new runnable.\n     * @returns A new RunnableBinding with a config matching what's passed.\n     */ withConfig(config) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableBinding({\n            bound: this,\n            config,\n            kwargs: {}\n        });\n    }\n    /**\n     * Create a new runnable from the current one that will try invoking\n     * other passed fallback runnables if the initial invocation fails.\n     * @param fields.fallbacks Other runnables to call if the runnable errors.\n     * @returns A new RunnableWithFallbacks.\n     */ withFallbacks(fields) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableWithFallbacks({\n            runnable: this,\n            fallbacks: fields.fallbacks\n        });\n    }\n    _getOptionsList(options, length = 0) {\n        if (Array.isArray(options)) {\n            if (options.length !== length) {\n                throw new Error(`Passed \"options\" must be an array with the same length as the inputs, but got ${options.length} options for ${length} inputs`);\n            }\n            return options.map(_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig);\n        }\n        return Array.from({\n            length\n        }, ()=>(0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options));\n    }\n    async batch(inputs, options, batchOptions) {\n        const configList = this._getOptionsList(options ?? {}, inputs.length);\n        const maxConcurrency = configList[0]?.maxConcurrency ?? batchOptions?.maxConcurrency;\n        const caller = new _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_6__.AsyncCaller({\n            maxConcurrency,\n            onFailedAttempt: (e)=>{\n                throw e;\n            }\n        });\n        const batchCalls = inputs.map((input, i)=>caller.call(async ()=>{\n                try {\n                    const result = await this.invoke(input, configList[i]);\n                    return result;\n                } catch (e) {\n                    if (batchOptions?.returnExceptions) {\n                        return e;\n                    }\n                    throw e;\n                }\n            }));\n        return Promise.all(batchCalls);\n    }\n    /**\n     * Default streaming implementation.\n     * Subclasses should override this method if they support streaming output.\n     * @param input\n     * @param options\n     */ async *_streamIterator(input, options) {\n        yield this.invoke(input, options);\n    }\n    /**\n     * Stream output in chunks.\n     * @param input\n     * @param options\n     * @returns A readable stream that is also an iterable.\n     */ async stream(input, options) {\n        // Buffer the first streamed chunk to allow for initial errors\n        // to surface immediately.\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.AsyncGeneratorWithSetup(this._streamIterator(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options)));\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n    _separateRunnableConfigFromCallOptions(options = {}) {\n        const runnableConfig = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)({\n            callbacks: options.callbacks,\n            tags: options.tags,\n            metadata: options.metadata,\n            runName: options.runName,\n            configurable: options.configurable,\n            recursionLimit: options.recursionLimit,\n            maxConcurrency: options.maxConcurrency\n        });\n        const callOptions = {\n            ...options\n        };\n        delete callOptions.callbacks;\n        delete callOptions.tags;\n        delete callOptions.metadata;\n        delete callOptions.runName;\n        delete callOptions.configurable;\n        delete callOptions.recursionLimit;\n        delete callOptions.maxConcurrency;\n        return [\n            runnableConfig,\n            callOptions\n        ];\n    }\n    async _callWithConfig(func, input, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig)(config);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), undefined, config?.runType, undefined, undefined, config?.runName ?? this.getName());\n        let output;\n        try {\n            output = await func.call(this, input, config, runManager);\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(output, \"output\"));\n        return output;\n    }\n    /**\n     * Internal method that handles batching and configuration for a runnable\n     * It takes a function, input values, and optional configuration, and\n     * returns a promise that resolves to the output values.\n     * @param func The function to be executed for each input value.\n     * @param input The input values to be processed.\n     * @param config Optional configuration for the function execution.\n     * @returns A promise that resolves to the output values.\n     */ async _batchWithConfig(func, inputs, options, batchOptions) {\n        const optionsList = this._getOptionsList(options ?? {}, inputs.length);\n        const callbackManagers = await Promise.all(optionsList.map(_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig));\n        const runManagers = await Promise.all(callbackManagers.map((callbackManager, i)=>callbackManager?.handleChainStart(this.toJSON(), _coerceToDict(inputs[i], \"input\"), undefined, optionsList[i].runType, undefined, undefined, optionsList[i].runName ?? this.getName())));\n        let outputs;\n        try {\n            outputs = await func.call(this, inputs, optionsList, runManagers, batchOptions);\n        } catch (e) {\n            await Promise.all(runManagers.map((runManager)=>runManager?.handleChainError(e)));\n            throw e;\n        }\n        await Promise.all(runManagers.map((runManager)=>runManager?.handleChainEnd(_coerceToDict(outputs, \"output\"))));\n        return outputs;\n    }\n    /**\n     * Helper method to transform an Iterator of Input values into an Iterator of\n     * Output values, with callbacks.\n     * Use this to implement `stream()` or `transform()` in Runnable subclasses.\n     */ async *_transformStreamWithConfig(inputGenerator, transformer, options) {\n        let finalInput;\n        let finalInputSupported = true;\n        let finalOutput;\n        let finalOutputSupported = true;\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig)(config);\n        async function* wrapInputForTracing() {\n            for await (const chunk of inputGenerator){\n                if (finalInputSupported) {\n                    if (finalInput === undefined) {\n                        finalInput = chunk;\n                    } else {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            finalInput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.concat)(finalInput, chunk);\n                        } catch  {\n                            finalInput = undefined;\n                            finalInputSupported = false;\n                        }\n                    }\n                }\n                yield chunk;\n            }\n        }\n        let runManager;\n        try {\n            const pipe = await (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.pipeGeneratorWithSetup)(transformer.bind(this), wrapInputForTracing(), async ()=>callbackManager_?.handleChainStart(this.toJSON(), {\n                    input: \"\"\n                }, undefined, config?.runType, undefined, undefined, config?.runName ?? this.getName()), config);\n            runManager = pipe.setup;\n            const isLogStreamHandler = (handler)=>handler.name === \"log_stream_tracer\";\n            const streamLogHandler = runManager?.handlers.find(isLogStreamHandler);\n            let iterator = pipe.output;\n            if (streamLogHandler !== undefined && runManager !== undefined) {\n                iterator = await streamLogHandler.tapOutputIterable(runManager.runId, pipe.output);\n            }\n            for await (const chunk of iterator){\n                yield chunk;\n                if (finalOutputSupported) {\n                    if (finalOutput === undefined) {\n                        finalOutput = chunk;\n                    } else {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            finalOutput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.concat)(finalOutput, chunk);\n                        } catch  {\n                            finalOutput = undefined;\n                            finalOutputSupported = false;\n                        }\n                    }\n                }\n            }\n        } catch (e) {\n            await runManager?.handleChainError(e, undefined, undefined, undefined, {\n                inputs: _coerceToDict(finalInput, \"input\")\n            });\n            throw e;\n        }\n        await runManager?.handleChainEnd(finalOutput ?? {}, undefined, undefined, undefined, {\n            inputs: _coerceToDict(finalInput, \"input\")\n        });\n    }\n    /**\n     * Create a new runnable sequence that runs each individual runnable in series,\n     * piping the output of one runnable into another runnable or runnable-like.\n     * @param coerceable A runnable, function, or object whose values are functions or runnables.\n     * @returns A new runnable sequence.\n     */ pipe(coerceable) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableSequence({\n            first: this,\n            last: _coerceToRunnable(coerceable)\n        });\n    }\n    /**\n     * Pick keys from the dict output of this runnable. Returns a new runnable.\n     */ pick(keys) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return this.pipe(new RunnablePick(keys));\n    }\n    /**\n     * Assigns new fields to the dict output of this runnable. Returns a new runnable.\n     */ assign(mapping) {\n        return this.pipe(// eslint-disable-next-line @typescript-eslint/no-use-before-define\n        new RunnableAssign(// eslint-disable-next-line @typescript-eslint/no-use-before-define\n        new RunnableMap({\n            steps: mapping\n        })));\n    }\n    /**\n     * Default implementation of transform, which buffers input and then calls stream.\n     * Subclasses should override this method if they can start producing output while\n     * input is still being generated.\n     * @param generator\n     * @param options\n     */ async *transform(generator, options) {\n        let finalChunk;\n        for await (const chunk of generator){\n            if (finalChunk === undefined) {\n                finalChunk = chunk;\n            } else {\n                // Make a best effort to gather, for any type that supports concat.\n                // This method should throw an error if gathering fails.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                finalChunk = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.concat)(finalChunk, chunk);\n            }\n        }\n        yield* this._streamIterator(finalChunk, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options));\n    }\n    /**\n     * Stream all output from a runnable, as reported to the callback system.\n     * This includes all inner runs of LLMs, Retrievers, Tools, etc.\n     * Output is streamed as Log objects, which include a list of\n     * jsonpatch ops that describe how the state of the run has changed in each\n     * step, and the final state of the run.\n     * The jsonpatch ops can be applied in order to construct state.\n     * @param input\n     * @param options\n     * @param streamOptions\n     */ async *streamLog(input, options, streamOptions) {\n        const logStreamCallbackHandler = new _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__.LogStreamCallbackHandler({\n            ...streamOptions,\n            autoClose: false,\n            _schemaFormat: \"original\"\n        });\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options);\n        yield* this._streamLog(input, logStreamCallbackHandler, config);\n    }\n    async *_streamLog(input, logStreamCallbackHandler, config) {\n        const { callbacks } = config;\n        if (callbacks === undefined) {\n            // eslint-disable-next-line no-param-reassign\n            config.callbacks = [\n                logStreamCallbackHandler\n            ];\n        } else if (Array.isArray(callbacks)) {\n            // eslint-disable-next-line no-param-reassign\n            config.callbacks = callbacks.concat([\n                logStreamCallbackHandler\n            ]);\n        } else {\n            const copiedCallbacks = callbacks.copy();\n            copiedCallbacks.inheritableHandlers.push(logStreamCallbackHandler);\n            // eslint-disable-next-line no-param-reassign\n            config.callbacks = copiedCallbacks;\n        }\n        const runnableStreamPromise = this.stream(input, config);\n        async function consumeRunnableStream() {\n            try {\n                const runnableStream = await runnableStreamPromise;\n                for await (const chunk of runnableStream){\n                    const patch = new _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__.RunLogPatch({\n                        ops: [\n                            {\n                                op: \"add\",\n                                path: \"/streamed_output/-\",\n                                value: chunk\n                            }\n                        ]\n                    });\n                    await logStreamCallbackHandler.writer.write(patch);\n                }\n            } finally{\n                await logStreamCallbackHandler.writer.close();\n            }\n        }\n        const runnableStreamConsumePromise = consumeRunnableStream();\n        try {\n            for await (const log of logStreamCallbackHandler){\n                yield log;\n            }\n        } finally{\n            await runnableStreamConsumePromise;\n        }\n    }\n    /**\n     * Generate a stream of events emitted by the internal steps of the runnable.\n     *\n     * Use to create an iterator over StreamEvents that provide real-time information\n     * about the progress of the runnable, including StreamEvents from intermediate\n     * results.\n     *\n     * A StreamEvent is a dictionary with the following schema:\n     *\n     * - `event`: string - Event names are of the format: on_[runnable_type]_(start|stream|end).\n     * - `name`: string - The name of the runnable that generated the event.\n     * - `run_id`: string - Randomly generated ID associated with the given execution of\n     *   the runnable that emitted the event. A child runnable that gets invoked as part of the execution of a\n     *   parent runnable is assigned its own unique ID.\n     * - `tags`: string[] - The tags of the runnable that generated the event.\n     * - `metadata`: Record<string, any> - The metadata of the runnable that generated the event.\n     * - `data`: Record<string, any>\n     *\n     * Below is a table that illustrates some events that might be emitted by various\n     * chains. Metadata fields have been omitted from the table for brevity.\n     * Chain definitions have been included after the table.\n     *\n     * | event                | name             | chunk                              | input                                         | output                                          |\n     * |----------------------|------------------|------------------------------------|-----------------------------------------------|-------------------------------------------------|\n     * | on_llm_start         | [model name]     |                                    | {'input': 'hello'}                            |                                                 |\n     * | on_llm_stream        | [model name]     | 'Hello' OR AIMessageChunk(\"hello\") |                                               |                                                 |\n     * | on_llm_end           | [model name]     |                                    | 'Hello human!'                                |\n     * | on_chain_start       | format_docs      |                                    |                                               |                                                 |\n     * | on_chain_stream      | format_docs      | \"hello world!, goodbye world!\"     |                                               |                                                 |\n     * | on_chain_end         | format_docs      |                                    | [Document(...)]                               | \"hello world!, goodbye world!\"                  |\n     * | on_tool_start        | some_tool        |                                    | {\"x\": 1, \"y\": \"2\"}                            |                                                 |\n     * | on_tool_stream       | some_tool        |   {\"x\": 1, \"y\": \"2\"}               |                                               |                                                 |\n     * | on_tool_end          | some_tool        |                                    |                                               | {\"x\": 1, \"y\": \"2\"}                              |\n     * | on_retriever_start   | [retriever name] |                                    | {\"query\": \"hello\"}                            |                                                 |\n     * | on_retriever_chunk   | [retriever name] |  {documents: [...]}                |                                               |                                                 |\n     * | on_retriever_end     | [retriever name] |                                    | {\"query\": \"hello\"}                            | {documents: [...]}                              |\n     * | on_prompt_start      | [template_name]  |                                    | {\"question\": \"hello\"}                         |                                                 |\n     * | on_prompt_end        | [template_name]  |                                    | {\"question\": \"hello\"}                         | ChatPromptValue(messages: [SystemMessage, ...]) |\n     */ async *streamEvents(input, options, streamOptions) {\n        if (options.version !== \"v1\") {\n            throw new Error(`Only version \"v1\" of the events schema is currently supported.`);\n        }\n        let runLog;\n        let hasEncounteredStartEvent = false;\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options);\n        const rootTags = config.tags ?? [];\n        const rootMetadata = config.metadata ?? {};\n        const rootName = config.runName ?? this.getName();\n        const logStreamCallbackHandler = new _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__.LogStreamCallbackHandler({\n            ...streamOptions,\n            autoClose: false,\n            _schemaFormat: \"streaming_events\"\n        });\n        const rootEventFilter = new _utils_js__WEBPACK_IMPORTED_MODULE_8__._RootEventFilter({\n            ...streamOptions\n        });\n        const logStream = this._streamLog(input, logStreamCallbackHandler, config);\n        for await (const log of logStream){\n            if (!runLog) {\n                runLog = _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__.RunLog.fromRunLogPatch(log);\n            } else {\n                runLog = runLog.concat(log);\n            }\n            if (runLog.state === undefined) {\n                throw new Error(`Internal error: \"streamEvents\" state is missing. Please open a bug report.`);\n            }\n            // Yield the start event for the root runnable if it hasn't been seen.\n            // The root run is never filtered out\n            if (!hasEncounteredStartEvent) {\n                hasEncounteredStartEvent = true;\n                const state = {\n                    ...runLog.state\n                };\n                const event = {\n                    run_id: state.id,\n                    event: `on_${state.type}_start`,\n                    name: rootName,\n                    tags: rootTags,\n                    metadata: rootMetadata,\n                    data: {\n                        input\n                    }\n                };\n                if (rootEventFilter.includeEvent(event, state.type)) {\n                    yield event;\n                }\n            }\n            const paths = log.ops.filter((op)=>op.path.startsWith(\"/logs/\")).map((op)=>op.path.split(\"/\")[2]);\n            const dedupedPaths = [\n                ...new Set(paths)\n            ];\n            for (const path of dedupedPaths){\n                let eventType;\n                let data = {};\n                const logEntry = runLog.state.logs[path];\n                if (logEntry.end_time === undefined) {\n                    if (logEntry.streamed_output.length > 0) {\n                        eventType = \"stream\";\n                    } else {\n                        eventType = \"start\";\n                    }\n                } else {\n                    eventType = \"end\";\n                }\n                if (eventType === \"start\") {\n                    // Include the inputs with the start event if they are available.\n                    // Usually they will NOT be available for components that operate\n                    // on streams, since those components stream the input and\n                    // don't know its final value until the end of the stream.\n                    if (logEntry.inputs !== undefined) {\n                        data.input = logEntry.inputs;\n                    }\n                } else if (eventType === \"end\") {\n                    if (logEntry.inputs !== undefined) {\n                        data.input = logEntry.inputs;\n                    }\n                    data.output = logEntry.final_output;\n                } else if (eventType === \"stream\") {\n                    const chunkCount = logEntry.streamed_output.length;\n                    if (chunkCount !== 1) {\n                        throw new Error(`Expected exactly one chunk of streamed output, got ${chunkCount} instead. Encountered in: \"${logEntry.name}\"`);\n                    }\n                    data = {\n                        chunk: logEntry.streamed_output[0]\n                    };\n                    // Clean up the stream, we don't need it anymore.\n                    // And this avoids duplicates as well!\n                    logEntry.streamed_output = [];\n                }\n                yield {\n                    event: `on_${logEntry.type}_${eventType}`,\n                    name: logEntry.name,\n                    run_id: logEntry.id,\n                    tags: logEntry.tags,\n                    metadata: logEntry.metadata,\n                    data\n                };\n            }\n            // Finally, we take care of the streaming output from the root chain\n            // if there is any.\n            const { state } = runLog;\n            if (state.streamed_output.length > 0) {\n                const chunkCount = state.streamed_output.length;\n                if (chunkCount !== 1) {\n                    throw new Error(`Expected exactly one chunk of streamed output, got ${chunkCount} instead. Encountered in: \"${state.name}\"`);\n                }\n                const data = {\n                    chunk: state.streamed_output[0]\n                };\n                // Clean up the stream, we don't need it anymore.\n                state.streamed_output = [];\n                const event = {\n                    event: `on_${state.type}_stream`,\n                    run_id: state.id,\n                    tags: rootTags,\n                    metadata: rootMetadata,\n                    name: rootName,\n                    data\n                };\n                if (rootEventFilter.includeEvent(event, state.type)) {\n                    yield event;\n                }\n            }\n        }\n        const state = runLog?.state;\n        if (state !== undefined) {\n            // Finally, yield the end event for the root runnable.\n            const event = {\n                event: `on_${state.type}_end`,\n                name: rootName,\n                run_id: state.id,\n                tags: rootTags,\n                metadata: rootMetadata,\n                data: {\n                    output: state.final_output\n                }\n            };\n            if (rootEventFilter.includeEvent(event, state.type)) yield event;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static isRunnable(thing) {\n        return thing ? thing.lc_runnable : false;\n    }\n    /**\n     * Bind lifecycle listeners to a Runnable, returning a new Runnable.\n     * The Run object contains information about the run, including its id,\n     * type, input, output, error, startTime, endTime, and any tags or metadata\n     * added to the run.\n     *\n     * @param {Object} params - The object containing the callback functions.\n     * @param {(run: Run) => void} params.onStart - Called before the runnable starts running, with the Run object.\n     * @param {(run: Run) => void} params.onEnd - Called after the runnable finishes running, with the Run object.\n     * @param {(run: Run) => void} params.onError - Called if the runnable throws an error, with the Run object.\n     */ withListeners({ onStart, onEnd, onError }) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableBinding({\n            bound: this,\n            config: {},\n            configFactories: [\n                (config)=>({\n                        callbacks: [\n                            new _tracers_root_listener_js__WEBPACK_IMPORTED_MODULE_7__.RootListenersTracer({\n                                config,\n                                onStart,\n                                onEnd,\n                                onError\n                            })\n                        ]\n                    })\n            ]\n        });\n    }\n}\n/**\n * A runnable that delegates calls to another runnable with a set of kwargs.\n */ class RunnableBinding extends Runnable {\n    static lc_name() {\n        return \"RunnableBinding\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"bound\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"config\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"configFactories\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.bound = fields.bound;\n        this.kwargs = fields.kwargs;\n        this.config = fields.config;\n        this.configFactories = fields.configFactories;\n    }\n    getName(suffix) {\n        return this.bound.getName(suffix);\n    }\n    async _mergeConfig(...options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.mergeConfigs)(this.config, ...options);\n        return (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.mergeConfigs)(config, ...this.configFactories ? await Promise.all(this.configFactories.map(async (configFactory)=>await configFactory(config))) : []);\n    }\n    bind(kwargs) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return new this.constructor({\n            bound: this.bound,\n            kwargs: {\n                ...this.kwargs,\n                ...kwargs\n            },\n            config: this.config\n        });\n    }\n    withConfig(config) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return new this.constructor({\n            bound: this.bound,\n            kwargs: this.kwargs,\n            config: {\n                ...this.config,\n                ...config\n            }\n        });\n    }\n    withRetry(fields) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return new this.constructor({\n            bound: this.bound.withRetry(fields),\n            kwargs: this.kwargs,\n            config: this.config\n        });\n    }\n    async invoke(input, options) {\n        return this.bound.invoke(input, await this._mergeConfig(options, this.kwargs));\n    }\n    async batch(inputs, options, batchOptions) {\n        const mergedOptions = Array.isArray(options) ? await Promise.all(options.map(async (individualOption)=>this._mergeConfig(individualOption, this.kwargs))) : await this._mergeConfig(options, this.kwargs);\n        return this.bound.batch(inputs, mergedOptions, batchOptions);\n    }\n    async *_streamIterator(input, options) {\n        yield* this.bound._streamIterator(input, await this._mergeConfig(options, this.kwargs));\n    }\n    async stream(input, options) {\n        return this.bound.stream(input, await this._mergeConfig(options, this.kwargs));\n    }\n    async *transform(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    generator, options) {\n        yield* this.bound.transform(generator, await this._mergeConfig(options, this.kwargs));\n    }\n    async *streamEvents(input, options, streamOptions) {\n        yield* this.bound.streamEvents(input, {\n            ...await this._mergeConfig(options, this.kwargs),\n            version: options.version\n        }, streamOptions);\n    }\n    static isRunnableBinding(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    thing) {\n        return thing.bound && Runnable.isRunnable(thing.bound);\n    }\n    /**\n     * Bind lifecycle listeners to a Runnable, returning a new Runnable.\n     * The Run object contains information about the run, including its id,\n     * type, input, output, error, startTime, endTime, and any tags or metadata\n     * added to the run.\n     *\n     * @param {Object} params - The object containing the callback functions.\n     * @param {(run: Run) => void} params.onStart - Called before the runnable starts running, with the Run object.\n     * @param {(run: Run) => void} params.onEnd - Called after the runnable finishes running, with the Run object.\n     * @param {(run: Run) => void} params.onError - Called if the runnable throws an error, with the Run object.\n     */ withListeners({ onStart, onEnd, onError }) {\n        return new RunnableBinding({\n            bound: this.bound,\n            kwargs: this.kwargs,\n            config: this.config,\n            configFactories: [\n                (config)=>({\n                        callbacks: [\n                            new _tracers_root_listener_js__WEBPACK_IMPORTED_MODULE_7__.RootListenersTracer({\n                                config,\n                                onStart,\n                                onEnd,\n                                onError\n                            })\n                        ]\n                    })\n            ]\n        });\n    }\n}\n/**\n * A runnable that delegates calls to another runnable\n * with each element of the input sequence.\n */ class RunnableEach extends Runnable {\n    static lc_name() {\n        return \"RunnableEach\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"bound\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.bound = fields.bound;\n    }\n    /**\n     * Binds the runnable with the specified arguments.\n     * @param kwargs The arguments to bind the runnable with.\n     * @returns A new instance of the `RunnableEach` class that is bound with the specified arguments.\n     */ bind(kwargs) {\n        return new RunnableEach({\n            bound: this.bound.bind(kwargs)\n        });\n    }\n    /**\n     * Invokes the runnable with the specified input and configuration.\n     * @param input The input to invoke the runnable with.\n     * @param config The configuration to invoke the runnable with.\n     * @returns A promise that resolves to the output of the runnable.\n     */ async invoke(inputs, config) {\n        return this._callWithConfig(this._invoke, inputs, config);\n    }\n    /**\n     * A helper method that is used to invoke the runnable with the specified input and configuration.\n     * @param input The input to invoke the runnable with.\n     * @param config The configuration to invoke the runnable with.\n     * @returns A promise that resolves to the output of the runnable.\n     */ async _invoke(inputs, config, runManager) {\n        return this.bound.batch(inputs, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n            callbacks: runManager?.getChild()\n        }));\n    }\n    /**\n     * Bind lifecycle listeners to a Runnable, returning a new Runnable.\n     * The Run object contains information about the run, including its id,\n     * type, input, output, error, startTime, endTime, and any tags or metadata\n     * added to the run.\n     *\n     * @param {Object} params - The object containing the callback functions.\n     * @param {(run: Run) => void} params.onStart - Called before the runnable starts running, with the Run object.\n     * @param {(run: Run) => void} params.onEnd - Called after the runnable finishes running, with the Run object.\n     * @param {(run: Run) => void} params.onError - Called if the runnable throws an error, with the Run object.\n     */ withListeners({ onStart, onEnd, onError }) {\n        return new RunnableEach({\n            bound: this.bound.withListeners({\n                onStart,\n                onEnd,\n                onError\n            })\n        });\n    }\n}\n/**\n * Base class for runnables that can be retried a\n * specified number of times.\n */ class RunnableRetry extends RunnableBinding {\n    static lc_name() {\n        return \"RunnableRetry\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"maxAttemptNumber\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 3\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"onFailedAttempt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: ()=>{}\n        });\n        this.maxAttemptNumber = fields.maxAttemptNumber ?? this.maxAttemptNumber;\n        this.onFailedAttempt = fields.onFailedAttempt ?? this.onFailedAttempt;\n    }\n    _patchConfigForRetry(attempt, config, runManager) {\n        const tag = attempt > 1 ? `retry:attempt:${attempt}` : undefined;\n        return (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n            callbacks: runManager?.getChild(tag)\n        });\n    }\n    async _invoke(input, config, runManager) {\n        return p_retry__WEBPACK_IMPORTED_MODULE_0__((attemptNumber)=>super.invoke(input, this._patchConfigForRetry(attemptNumber, config, runManager)), {\n            onFailedAttempt: this.onFailedAttempt,\n            retries: Math.max(this.maxAttemptNumber - 1, 0),\n            randomize: true\n        });\n    }\n    /**\n     * Method that invokes the runnable with the specified input, run manager,\n     * and config. It handles the retry logic by catching any errors and\n     * recursively invoking itself with the updated config for the next retry\n     * attempt.\n     * @param input The input for the runnable.\n     * @param runManager The run manager for the runnable.\n     * @param config The config for the runnable.\n     * @returns A promise that resolves to the output of the runnable.\n     */ async invoke(input, config) {\n        return this._callWithConfig(this._invoke, input, config);\n    }\n    async _batch(inputs, configs, runManagers, batchOptions) {\n        const resultsMap = {};\n        try {\n            await p_retry__WEBPACK_IMPORTED_MODULE_0__(async (attemptNumber)=>{\n                const remainingIndexes = inputs.map((_, i)=>i).filter((i)=>resultsMap[i.toString()] === undefined || // eslint-disable-next-line no-instanceof/no-instanceof\n                    resultsMap[i.toString()] instanceof Error);\n                const remainingInputs = remainingIndexes.map((i)=>inputs[i]);\n                const patchedConfigs = remainingIndexes.map((i)=>this._patchConfigForRetry(attemptNumber, configs?.[i], runManagers?.[i]));\n                const results = await super.batch(remainingInputs, patchedConfigs, {\n                    ...batchOptions,\n                    returnExceptions: true\n                });\n                let firstException;\n                for(let i = 0; i < results.length; i += 1){\n                    const result = results[i];\n                    const resultMapIndex = remainingIndexes[i];\n                    // eslint-disable-next-line no-instanceof/no-instanceof\n                    if (result instanceof Error) {\n                        if (firstException === undefined) {\n                            firstException = result;\n                        }\n                    }\n                    resultsMap[resultMapIndex.toString()] = result;\n                }\n                if (firstException) {\n                    throw firstException;\n                }\n                return results;\n            }, {\n                onFailedAttempt: this.onFailedAttempt,\n                retries: Math.max(this.maxAttemptNumber - 1, 0),\n                randomize: true\n            });\n        } catch (e) {\n            if (batchOptions?.returnExceptions !== true) {\n                throw e;\n            }\n        }\n        return Object.keys(resultsMap).sort((a, b)=>parseInt(a, 10) - parseInt(b, 10)).map((key)=>resultsMap[parseInt(key, 10)]);\n    }\n    async batch(inputs, options, batchOptions) {\n        return this._batchWithConfig(this._batch.bind(this), inputs, options, batchOptions);\n    }\n}\n/**\n * A sequence of runnables, where the output of each is the input of the next.\n * @example\n * ```typescript\n * const promptTemplate = PromptTemplate.fromTemplate(\n *   \"Tell me a joke about {topic}\",\n * );\n * const chain = RunnableSequence.from([promptTemplate, new ChatOpenAI({})]);\n * const result = await chain.invoke({ topic: \"bears\" });\n * ```\n */ class RunnableSequence extends Runnable {\n    static lc_name() {\n        return \"RunnableSequence\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"first\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"middle\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"last\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        this.first = fields.first;\n        this.middle = fields.middle ?? this.middle;\n        this.last = fields.last;\n        this.name = fields.name;\n    }\n    get steps() {\n        return [\n            this.first,\n            ...this.middle,\n            this.last\n        ];\n    }\n    async invoke(input, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig)(config);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), undefined, undefined, undefined, undefined, config?.runName);\n        let nextStepInput = input;\n        let finalOutput;\n        try {\n            const initialSteps = [\n                this.first,\n                ...this.middle\n            ];\n            for(let i = 0; i < initialSteps.length; i += 1){\n                const step = initialSteps[i];\n                nextStepInput = await step.invoke(nextStepInput, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n                    callbacks: runManager?.getChild(`seq:step:${i + 1}`)\n                }));\n            }\n            // TypeScript can't detect that the last output of the sequence returns RunOutput, so call it out of the loop here\n            finalOutput = await this.last.invoke(nextStepInput, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n                callbacks: runManager?.getChild(`seq:step:${this.steps.length}`)\n            }));\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(finalOutput, \"output\"));\n        return finalOutput;\n    }\n    async batch(inputs, options, batchOptions) {\n        const configList = this._getOptionsList(options ?? {}, inputs.length);\n        const callbackManagers = await Promise.all(configList.map(_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig));\n        const runManagers = await Promise.all(callbackManagers.map((callbackManager, i)=>callbackManager?.handleChainStart(this.toJSON(), _coerceToDict(inputs[i], \"input\"), undefined, undefined, undefined, undefined, configList[i].runName)));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let nextStepInputs = inputs;\n        try {\n            for(let i = 0; i < this.steps.length; i += 1){\n                const step = this.steps[i];\n                nextStepInputs = await step.batch(nextStepInputs, runManagers.map((runManager, j)=>{\n                    const childRunManager = runManager?.getChild(`seq:step:${i + 1}`);\n                    return (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(configList[j], {\n                        callbacks: childRunManager\n                    });\n                }), batchOptions);\n            }\n        } catch (e) {\n            await Promise.all(runManagers.map((runManager)=>runManager?.handleChainError(e)));\n            throw e;\n        }\n        await Promise.all(runManagers.map((runManager)=>runManager?.handleChainEnd(_coerceToDict(nextStepInputs, \"output\"))));\n        return nextStepInputs;\n    }\n    async *_streamIterator(input, options) {\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig)(options);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), undefined, undefined, undefined, undefined, options?.runName);\n        const steps = [\n            this.first,\n            ...this.middle,\n            this.last\n        ];\n        let concatSupported = true;\n        let finalOutput;\n        async function* inputGenerator() {\n            yield input;\n        }\n        try {\n            let finalGenerator = steps[0].transform(inputGenerator(), (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(options, {\n                callbacks: runManager?.getChild(`seq:step:1`)\n            }));\n            for(let i = 1; i < steps.length; i += 1){\n                const step = steps[i];\n                finalGenerator = await step.transform(finalGenerator, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(options, {\n                    callbacks: runManager?.getChild(`seq:step:${i + 1}`)\n                }));\n            }\n            for await (const chunk of finalGenerator){\n                yield chunk;\n                if (concatSupported) {\n                    if (finalOutput === undefined) {\n                        finalOutput = chunk;\n                    } else {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            finalOutput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.concat)(finalOutput, chunk);\n                        } catch (e) {\n                            finalOutput = undefined;\n                            concatSupported = false;\n                        }\n                    }\n                }\n            }\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(finalOutput, \"output\"));\n    }\n    pipe(coerceable) {\n        if (RunnableSequence.isRunnableSequence(coerceable)) {\n            return new RunnableSequence({\n                first: this.first,\n                middle: this.middle.concat([\n                    this.last,\n                    coerceable.first,\n                    ...coerceable.middle\n                ]),\n                last: coerceable.last,\n                name: this.name ?? coerceable.name\n            });\n        } else {\n            return new RunnableSequence({\n                first: this.first,\n                middle: [\n                    ...this.middle,\n                    this.last\n                ],\n                last: _coerceToRunnable(coerceable),\n                name: this.name\n            });\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static isRunnableSequence(thing) {\n        return Array.isArray(thing.middle) && Runnable.isRunnable(thing);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static from([first, ...runnables], name) {\n        return new RunnableSequence({\n            first: _coerceToRunnable(first),\n            middle: runnables.slice(0, -1).map(_coerceToRunnable),\n            last: _coerceToRunnable(runnables[runnables.length - 1]),\n            name\n        });\n    }\n}\n/**\n * A runnable that runs a mapping of runnables in parallel,\n * and returns a mapping of their outputs.\n * @example\n * ```typescript\n * const mapChain = RunnableMap.from({\n *   joke: PromptTemplate.fromTemplate(\"Tell me a joke about {topic}\").pipe(\n *     new ChatAnthropic({}),\n *   ),\n *   poem: PromptTemplate.fromTemplate(\"write a 2-line poem about {topic}\").pipe(\n *     new ChatAnthropic({}),\n *   ),\n * });\n * const result = await mapChain.invoke({ topic: \"bear\" });\n * ```\n */ class RunnableMap extends Runnable {\n    static lc_name() {\n        return \"RunnableMap\";\n    }\n    getStepsKeys() {\n        return Object.keys(this.steps);\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"steps\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.steps = {};\n        for (const [key, value] of Object.entries(fields.steps)){\n            this.steps[key] = _coerceToRunnable(value);\n        }\n    }\n    static from(steps) {\n        return new RunnableMap({\n            steps\n        });\n    }\n    async invoke(input, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig)(config);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), {\n            input\n        }, undefined, undefined, undefined, undefined, config?.runName);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const output = {};\n        try {\n            await Promise.all(Object.entries(this.steps).map(async ([key, runnable])=>{\n                output[key] = await runnable.invoke(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n                    callbacks: runManager?.getChild(`map:key:${key}`)\n                }));\n            }));\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(output);\n        return output;\n    }\n    async *_transform(generator, runManager, options) {\n        // shallow copy steps to ignore changes while iterating\n        const steps = {\n            ...this.steps\n        };\n        // each step gets a copy of the input iterator\n        const inputCopies = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.atee)(generator, Object.keys(steps).length);\n        // start the first iteration of each output iterator\n        const tasks = new Map(Object.entries(steps).map(([key, runnable], i)=>{\n            const gen = runnable.transform(inputCopies[i], (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(options, {\n                callbacks: runManager?.getChild(`map:key:${key}`)\n            }));\n            return [\n                key,\n                gen.next().then((result)=>({\n                        key,\n                        gen,\n                        result\n                    }))\n            ];\n        }));\n        // yield chunks as they become available,\n        // starting new iterations as needed,\n        // until all iterators are done\n        while(tasks.size){\n            const { key, result, gen } = await Promise.race(tasks.values());\n            tasks.delete(key);\n            if (!result.done) {\n                yield {\n                    [key]: result.value\n                };\n                tasks.set(key, gen.next().then((result)=>({\n                        key,\n                        gen,\n                        result\n                    })));\n            }\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.AsyncGeneratorWithSetup(this.transform(generator(), options));\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\n/**\n * A runnable that runs a callable.\n */ class RunnableLambda extends Runnable {\n    static lc_name() {\n        return \"RunnableLambda\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"func\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.func = fields.func;\n    }\n    static from(func) {\n        return new RunnableLambda({\n            func\n        });\n    }\n    async _invoke(input, config, runManager) {\n        return new Promise((resolve, reject)=>{\n            const childConfig = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n                callbacks: runManager?.getChild(),\n                recursionLimit: (config?.recursionLimit ?? _config_js__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_RECURSION_LIMIT) - 1\n            });\n            void _singletons_index_js__WEBPACK_IMPORTED_MODULE_9__.AsyncLocalStorageProviderSingleton.getInstance().run(childConfig, async ()=>{\n                try {\n                    let output = await this.func(input, {\n                        ...childConfig,\n                        config: childConfig\n                    });\n                    if (output && Runnable.isRunnable(output)) {\n                        if (config?.recursionLimit === 0) {\n                            throw new Error(\"Recursion limit reached.\");\n                        }\n                        output = await output.invoke(input, {\n                            ...childConfig,\n                            recursionLimit: (childConfig.recursionLimit ?? _config_js__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_RECURSION_LIMIT) - 1\n                        });\n                    }\n                    resolve(output);\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    async invoke(input, options) {\n        return this._callWithConfig(this._invoke, input, options);\n    }\n    async *_transform(generator, runManager, config) {\n        let finalChunk;\n        for await (const chunk of generator){\n            if (finalChunk === undefined) {\n                finalChunk = chunk;\n            } else {\n                // Make a best effort to gather, for any type that supports concat.\n                try {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    finalChunk = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.concat)(finalChunk, chunk);\n                } catch (e) {\n                    finalChunk = chunk;\n                }\n            }\n        }\n        const output = await new Promise((resolve, reject)=>{\n            void _singletons_index_js__WEBPACK_IMPORTED_MODULE_9__.AsyncLocalStorageProviderSingleton.getInstance().run(config, async ()=>{\n                try {\n                    const res = await this.func(finalChunk, {\n                        ...config,\n                        config\n                    });\n                    resolve(res);\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        });\n        if (output && Runnable.isRunnable(output)) {\n            if (config?.recursionLimit === 0) {\n                throw new Error(\"Recursion limit reached.\");\n            }\n            const stream = await output.stream(finalChunk, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n                callbacks: runManager?.getChild(),\n                recursionLimit: (config?.recursionLimit ?? _config_js__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_RECURSION_LIMIT) - 1\n            }));\n            for await (const chunk of stream){\n                yield chunk;\n            }\n        } else {\n            yield output;\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.AsyncGeneratorWithSetup(this.transform(generator(), options));\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\nclass RunnableParallel extends RunnableMap {\n}\n/**\n * A Runnable that can fallback to other Runnables if it fails.\n */ class RunnableWithFallbacks extends Runnable {\n    static lc_name() {\n        return \"RunnableWithFallbacks\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"runnable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"fallbacks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.runnable = fields.runnable;\n        this.fallbacks = fields.fallbacks;\n    }\n    *runnables() {\n        yield this.runnable;\n        for (const fallback of this.fallbacks){\n            yield fallback;\n        }\n    }\n    async invoke(input, options) {\n        const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_1__.CallbackManager.configure(options?.callbacks, undefined, options?.tags, undefined, options?.metadata);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), undefined, undefined, undefined, undefined, options?.runName);\n        let firstError;\n        for (const runnable of this.runnables()){\n            try {\n                const output = await runnable.invoke(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(options, {\n                    callbacks: runManager?.getChild()\n                }));\n                await runManager?.handleChainEnd(_coerceToDict(output, \"output\"));\n                return output;\n            } catch (e) {\n                if (firstError === undefined) {\n                    firstError = e;\n                }\n            }\n        }\n        if (firstError === undefined) {\n            throw new Error(\"No error stored at end of fallback.\");\n        }\n        await runManager?.handleChainError(firstError);\n        throw firstError;\n    }\n    async batch(inputs, options, batchOptions) {\n        if (batchOptions?.returnExceptions) {\n            throw new Error(\"Not implemented.\");\n        }\n        const configList = this._getOptionsList(options ?? {}, inputs.length);\n        const callbackManagers = await Promise.all(configList.map((config)=>_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_1__.CallbackManager.configure(config?.callbacks, undefined, config?.tags, undefined, config?.metadata)));\n        const runManagers = await Promise.all(callbackManagers.map((callbackManager, i)=>callbackManager?.handleChainStart(this.toJSON(), _coerceToDict(inputs[i], \"input\"), undefined, undefined, undefined, undefined, configList[i].runName)));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let firstError;\n        for (const runnable of this.runnables()){\n            try {\n                const outputs = await runnable.batch(inputs, runManagers.map((runManager, j)=>(0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(configList[j], {\n                        callbacks: runManager?.getChild()\n                    })), batchOptions);\n                await Promise.all(runManagers.map((runManager, i)=>runManager?.handleChainEnd(_coerceToDict(outputs[i], \"output\"))));\n                return outputs;\n            } catch (e) {\n                if (firstError === undefined) {\n                    firstError = e;\n                }\n            }\n        }\n        if (!firstError) {\n            throw new Error(\"No error stored at end of fallbacks.\");\n        }\n        await Promise.all(runManagers.map((runManager)=>runManager?.handleChainError(firstError)));\n        throw firstError;\n    }\n}\n// TODO: Figure out why the compiler needs help eliminating Error as a RunOutput type\nfunction _coerceToRunnable(coerceable) {\n    if (typeof coerceable === \"function\") {\n        return new RunnableLambda({\n            func: coerceable\n        });\n    } else if (Runnable.isRunnable(coerceable)) {\n        return coerceable;\n    } else if (!Array.isArray(coerceable) && typeof coerceable === \"object\") {\n        const runnables = {};\n        for (const [key, value] of Object.entries(coerceable)){\n            runnables[key] = _coerceToRunnable(value);\n        }\n        return new RunnableMap({\n            steps: runnables\n        });\n    } else {\n        throw new Error(`Expected a Runnable, function or object.\\nInstead got an unsupported type.`);\n    }\n}\n/**\n * A runnable that assigns key-value pairs to inputs of type `Record<string, unknown>`.\n */ class RunnableAssign extends Runnable {\n    static lc_name() {\n        return \"RunnableAssign\";\n    }\n    constructor(fields){\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (fields instanceof RunnableMap) {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                mapper: fields\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"mapper\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.mapper = fields.mapper;\n    }\n    async invoke(input, options) {\n        const mapperResult = await this.mapper.invoke(input, options);\n        return {\n            ...input,\n            ...mapperResult\n        };\n    }\n    async *_transform(generator, runManager, options) {\n        // collect mapper keys\n        const mapperKeys = this.mapper.getStepsKeys();\n        // create two input gens, one for the mapper, one for the input\n        const [forPassthrough, forMapper] = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.atee)(generator);\n        // create mapper output gen\n        const mapperOutput = this.mapper.transform(forMapper, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(options, {\n            callbacks: runManager?.getChild()\n        }));\n        // start the mapper\n        const firstMapperChunkPromise = mapperOutput.next();\n        // yield the passthrough\n        for await (const chunk of forPassthrough){\n            if (typeof chunk !== \"object\" || Array.isArray(chunk)) {\n                throw new Error(`RunnableAssign can only be used with objects as input, got ${typeof chunk}`);\n            }\n            const filtered = Object.fromEntries(Object.entries(chunk).filter(([key])=>!mapperKeys.includes(key)));\n            if (Object.keys(filtered).length > 0) {\n                yield filtered;\n            }\n        }\n        // yield the mapper output\n        yield (await firstMapperChunkPromise).value;\n        for await (const chunk of mapperOutput){\n            yield chunk;\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.AsyncGeneratorWithSetup(this.transform(generator(), options));\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\n/**\n * A runnable that assigns key-value pairs to inputs of type `Record<string, unknown>`.\n */ class RunnablePick extends Runnable {\n    static lc_name() {\n        return \"RunnablePick\";\n    }\n    constructor(fields){\n        if (typeof fields === \"string\" || Array.isArray(fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                keys: fields\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"keys\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.keys = fields.keys;\n    }\n    async _pick(input) {\n        if (typeof this.keys === \"string\") {\n            return input[this.keys];\n        } else {\n            const picked = this.keys.map((key)=>[\n                    key,\n                    input[key]\n                ]).filter((v)=>v[1] !== undefined);\n            return picked.length === 0 ? undefined : Object.fromEntries(picked);\n        }\n    }\n    async invoke(input, options) {\n        return this._callWithConfig(this._pick.bind(this), input, options);\n    }\n    async *_transform(generator) {\n        for await (const chunk of generator){\n            const picked = await this._pick(chunk);\n            if (picked !== undefined) {\n                yield picked;\n            }\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.AsyncGeneratorWithSetup(this.transform(generator(), options));\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/config.js":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/config.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_RECURSION_LIMIT: () => (/* binding */ DEFAULT_RECURSION_LIMIT),\n/* harmony export */   ensureConfig: () => (/* binding */ ensureConfig),\n/* harmony export */   getCallbackManagerForConfig: () => (/* binding */ getCallbackManagerForConfig),\n/* harmony export */   mergeConfigs: () => (/* binding */ mergeConfigs),\n/* harmony export */   patchConfig: () => (/* binding */ patchConfig)\n/* harmony export */ });\n/* harmony import */ var _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../callbacks/manager.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.js\");\n/* harmony import */ var _singletons_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../singletons/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/index.js\");\n\n\nconst DEFAULT_RECURSION_LIMIT = 25;\nasync function getCallbackManagerForConfig(config) {\n    return _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.CallbackManager.configure(config?.callbacks, undefined, config?.tags, undefined, config?.metadata);\n}\nfunction mergeConfigs(...configs) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const copy = ensureConfig();\n    for (const options of configs.filter((c)=>!!c)){\n        for (const key of Object.keys(options)){\n            if (key === \"metadata\") {\n                copy[key] = {\n                    ...copy[key],\n                    ...options[key]\n                };\n            } else if (key === \"tags\") {\n                copy[key] = [\n                    ...new Set(copy[key].concat(options[key] ?? []))\n                ];\n            } else if (key === \"configurable\") {\n                copy[key] = {\n                    ...copy[key],\n                    ...options[key]\n                };\n            } else if (key === \"callbacks\") {\n                const baseCallbacks = copy.callbacks;\n                const providedCallbacks = options.callbacks;\n                // callbacks can be either undefined, Array<handler> or manager\n                // so merging two callbacks values has 6 cases\n                if (Array.isArray(providedCallbacks)) {\n                    if (!baseCallbacks) {\n                        copy.callbacks = providedCallbacks;\n                    } else if (Array.isArray(baseCallbacks)) {\n                        copy.callbacks = baseCallbacks.concat(providedCallbacks);\n                    } else {\n                        // baseCallbacks is a manager\n                        const manager = baseCallbacks.copy();\n                        for (const callback of providedCallbacks){\n                            manager.addHandler((0,_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.ensureHandler)(callback), true);\n                        }\n                        copy.callbacks = manager;\n                    }\n                } else if (providedCallbacks) {\n                    // providedCallbacks is a manager\n                    if (!baseCallbacks) {\n                        copy.callbacks = providedCallbacks;\n                    } else if (Array.isArray(baseCallbacks)) {\n                        const manager = providedCallbacks.copy();\n                        for (const callback of baseCallbacks){\n                            manager.addHandler((0,_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.ensureHandler)(callback), true);\n                        }\n                        copy.callbacks = manager;\n                    } else {\n                        // baseCallbacks is also a manager\n                        copy.callbacks = new _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.CallbackManager(providedCallbacks._parentRunId, {\n                            handlers: baseCallbacks.handlers.concat(providedCallbacks.handlers),\n                            inheritableHandlers: baseCallbacks.inheritableHandlers.concat(providedCallbacks.inheritableHandlers),\n                            tags: Array.from(new Set(baseCallbacks.tags.concat(providedCallbacks.tags))),\n                            inheritableTags: Array.from(new Set(baseCallbacks.inheritableTags.concat(providedCallbacks.inheritableTags))),\n                            metadata: {\n                                ...baseCallbacks.metadata,\n                                ...providedCallbacks.metadata\n                            }\n                        });\n                    }\n                }\n            } else {\n                const typedKey = key;\n                copy[typedKey] = options[typedKey] ?? copy[typedKey];\n            }\n        }\n    }\n    return copy;\n}\nconst PRIMITIVES = new Set([\n    \"string\",\n    \"number\",\n    \"boolean\"\n]);\n/**\n * Ensure that a passed config is an object with all required keys present.\n */ function ensureConfig(config) {\n    const loadedConfig = config ?? _singletons_index_js__WEBPACK_IMPORTED_MODULE_1__.AsyncLocalStorageProviderSingleton.getInstance().getStore();\n    let empty = {\n        tags: [],\n        metadata: {},\n        callbacks: undefined,\n        recursionLimit: 25\n    };\n    if (loadedConfig) {\n        empty = {\n            ...empty,\n            ...loadedConfig\n        };\n    }\n    if (loadedConfig?.configurable) {\n        for (const key of Object.keys(loadedConfig.configurable)){\n            if (PRIMITIVES.has(typeof loadedConfig.configurable[key]) && !empty.metadata?.[key]) {\n                if (!empty.metadata) {\n                    empty.metadata = {};\n                }\n                empty.metadata[key] = loadedConfig.configurable[key];\n            }\n        }\n    }\n    return empty;\n}\n/**\n * Helper function that patches runnable configs with updated properties.\n */ function patchConfig(config = {}, { callbacks, maxConcurrency, recursionLimit, runName, configurable } = {}) {\n    const newConfig = ensureConfig(config);\n    if (callbacks !== undefined) {\n        /**\n         * If we're replacing callbacks we need to unset runName\n         * since that should apply only to the same run as the original callbacks\n         */ delete newConfig.runName;\n        newConfig.callbacks = callbacks;\n    }\n    if (recursionLimit !== undefined) {\n        newConfig.recursionLimit = recursionLimit;\n    }\n    if (maxConcurrency !== undefined) {\n        newConfig.maxConcurrency = maxConcurrency;\n    }\n    if (runName !== undefined) {\n        newConfig.runName = runName;\n    }\n    if (configurable !== undefined) {\n        newConfig.configurable = {\n            ...newConfig.configurable,\n            ...configurable\n        };\n    }\n    return newConfig;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/utils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _RootEventFilter: () => (/* binding */ _RootEventFilter)\n/* harmony export */ });\n/**\n * Utility to filter the root event in the streamEvents implementation.\n * This is simply binding the arguments to the namespace to make save on\n * a bit of typing in the streamEvents implementation.\n *\n * TODO: Refactor and remove.\n */ class _RootEventFilter {\n    constructor(fields){\n        Object.defineProperty(this, \"includeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.includeNames = fields.includeNames;\n        this.includeTypes = fields.includeTypes;\n        this.includeTags = fields.includeTags;\n        this.excludeNames = fields.excludeNames;\n        this.excludeTypes = fields.excludeTypes;\n        this.excludeTags = fields.excludeTags;\n    }\n    includeEvent(event, rootType) {\n        let include = this.includeNames === undefined && this.includeTypes === undefined && this.includeTags === undefined;\n        const eventTags = event.tags ?? [];\n        if (this.includeNames !== undefined) {\n            include = include || this.includeNames.includes(event.name);\n        }\n        if (this.includeTypes !== undefined) {\n            include = include || this.includeTypes.includes(rootType);\n        }\n        if (this.includeTags !== undefined) {\n            include = include || eventTags.some((tag)=>this.includeTags?.includes(tag));\n        }\n        if (this.excludeNames !== undefined) {\n            include = include && !this.excludeNames.includes(event.name);\n        }\n        if (this.excludeTypes !== undefined) {\n            include = include && !this.excludeTypes.includes(rootType);\n        }\n        if (this.excludeTags !== undefined) {\n            include = include && eventTags.every((tag)=>!this.excludeTags?.includes(tag));\n        }\n        return include;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7O0NBTUMsR0FDTSxNQUFNQTtJQUNUQyxZQUFZQyxNQUFNLENBQUU7UUFDaEJDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGVBQWU7WUFDdkNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGdCQUFnQjtZQUN4Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxlQUFlO1lBQ3ZDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNDLFlBQVksR0FBR1AsT0FBT08sWUFBWTtRQUN2QyxJQUFJLENBQUNDLFlBQVksR0FBR1IsT0FBT1EsWUFBWTtRQUN2QyxJQUFJLENBQUNDLFdBQVcsR0FBR1QsT0FBT1MsV0FBVztRQUNyQyxJQUFJLENBQUNDLFlBQVksR0FBR1YsT0FBT1UsWUFBWTtRQUN2QyxJQUFJLENBQUNDLFlBQVksR0FBR1gsT0FBT1csWUFBWTtRQUN2QyxJQUFJLENBQUNDLFdBQVcsR0FBR1osT0FBT1ksV0FBVztJQUN6QztJQUNBQyxhQUFhQyxLQUFLLEVBQUVDLFFBQVEsRUFBRTtRQUMxQixJQUFJQyxVQUFVLElBQUksQ0FBQ1QsWUFBWSxLQUFLVSxhQUNoQyxJQUFJLENBQUNULFlBQVksS0FBS1MsYUFDdEIsSUFBSSxDQUFDUixXQUFXLEtBQUtRO1FBQ3pCLE1BQU1DLFlBQVlKLE1BQU1LLElBQUksSUFBSSxFQUFFO1FBQ2xDLElBQUksSUFBSSxDQUFDWixZQUFZLEtBQUtVLFdBQVc7WUFDakNELFVBQVVBLFdBQVcsSUFBSSxDQUFDVCxZQUFZLENBQUNhLFFBQVEsQ0FBQ04sTUFBTU8sSUFBSTtRQUM5RDtRQUNBLElBQUksSUFBSSxDQUFDYixZQUFZLEtBQUtTLFdBQVc7WUFDakNELFVBQVVBLFdBQVcsSUFBSSxDQUFDUixZQUFZLENBQUNZLFFBQVEsQ0FBQ0w7UUFDcEQ7UUFDQSxJQUFJLElBQUksQ0FBQ04sV0FBVyxLQUFLUSxXQUFXO1lBQ2hDRCxVQUNJQSxXQUFXRSxVQUFVSSxJQUFJLENBQUMsQ0FBQ0MsTUFBUSxJQUFJLENBQUNkLFdBQVcsRUFBRVcsU0FBU0c7UUFDdEU7UUFDQSxJQUFJLElBQUksQ0FBQ2IsWUFBWSxLQUFLTyxXQUFXO1lBQ2pDRCxVQUFVQSxXQUFXLENBQUMsSUFBSSxDQUFDTixZQUFZLENBQUNVLFFBQVEsQ0FBQ04sTUFBTU8sSUFBSTtRQUMvRDtRQUNBLElBQUksSUFBSSxDQUFDVixZQUFZLEtBQUtNLFdBQVc7WUFDakNELFVBQVVBLFdBQVcsQ0FBQyxJQUFJLENBQUNMLFlBQVksQ0FBQ1MsUUFBUSxDQUFDTDtRQUNyRDtRQUNBLElBQUksSUFBSSxDQUFDSCxXQUFXLEtBQUtLLFdBQVc7WUFDaENELFVBQ0lBLFdBQVdFLFVBQVVNLEtBQUssQ0FBQyxDQUFDRCxNQUFRLENBQUMsSUFBSSxDQUFDWCxXQUFXLEVBQUVRLFNBQVNHO1FBQ3hFO1FBQ0EsT0FBT1A7SUFDWDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL3V0aWxzLmpzPzgxZmIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBVdGlsaXR5IHRvIGZpbHRlciB0aGUgcm9vdCBldmVudCBpbiB0aGUgc3RyZWFtRXZlbnRzIGltcGxlbWVudGF0aW9uLlxuICogVGhpcyBpcyBzaW1wbHkgYmluZGluZyB0aGUgYXJndW1lbnRzIHRvIHRoZSBuYW1lc3BhY2UgdG8gbWFrZSBzYXZlIG9uXG4gKiBhIGJpdCBvZiB0eXBpbmcgaW4gdGhlIHN0cmVhbUV2ZW50cyBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBUT0RPOiBSZWZhY3RvciBhbmQgcmVtb3ZlLlxuICovXG5leHBvcnQgY2xhc3MgX1Jvb3RFdmVudEZpbHRlciB7XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImluY2x1ZGVOYW1lc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJpbmNsdWRlVHlwZXNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiaW5jbHVkZVRhZ3NcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZXhjbHVkZU5hbWVzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImV4Y2x1ZGVUeXBlc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJleGNsdWRlVGFnc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmluY2x1ZGVOYW1lcyA9IGZpZWxkcy5pbmNsdWRlTmFtZXM7XG4gICAgICAgIHRoaXMuaW5jbHVkZVR5cGVzID0gZmllbGRzLmluY2x1ZGVUeXBlcztcbiAgICAgICAgdGhpcy5pbmNsdWRlVGFncyA9IGZpZWxkcy5pbmNsdWRlVGFncztcbiAgICAgICAgdGhpcy5leGNsdWRlTmFtZXMgPSBmaWVsZHMuZXhjbHVkZU5hbWVzO1xuICAgICAgICB0aGlzLmV4Y2x1ZGVUeXBlcyA9IGZpZWxkcy5leGNsdWRlVHlwZXM7XG4gICAgICAgIHRoaXMuZXhjbHVkZVRhZ3MgPSBmaWVsZHMuZXhjbHVkZVRhZ3M7XG4gICAgfVxuICAgIGluY2x1ZGVFdmVudChldmVudCwgcm9vdFR5cGUpIHtcbiAgICAgICAgbGV0IGluY2x1ZGUgPSB0aGlzLmluY2x1ZGVOYW1lcyA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICB0aGlzLmluY2x1ZGVUeXBlcyA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICB0aGlzLmluY2x1ZGVUYWdzID09PSB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IGV2ZW50VGFncyA9IGV2ZW50LnRhZ3MgPz8gW107XG4gICAgICAgIGlmICh0aGlzLmluY2x1ZGVOYW1lcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbmNsdWRlID0gaW5jbHVkZSB8fCB0aGlzLmluY2x1ZGVOYW1lcy5pbmNsdWRlcyhldmVudC5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pbmNsdWRlVHlwZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaW5jbHVkZSA9IGluY2x1ZGUgfHwgdGhpcy5pbmNsdWRlVHlwZXMuaW5jbHVkZXMocm9vdFR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmluY2x1ZGVUYWdzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGluY2x1ZGUgPVxuICAgICAgICAgICAgICAgIGluY2x1ZGUgfHwgZXZlbnRUYWdzLnNvbWUoKHRhZykgPT4gdGhpcy5pbmNsdWRlVGFncz8uaW5jbHVkZXModGFnKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZXhjbHVkZU5hbWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGluY2x1ZGUgPSBpbmNsdWRlICYmICF0aGlzLmV4Y2x1ZGVOYW1lcy5pbmNsdWRlcyhldmVudC5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5leGNsdWRlVHlwZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaW5jbHVkZSA9IGluY2x1ZGUgJiYgIXRoaXMuZXhjbHVkZVR5cGVzLmluY2x1ZGVzKHJvb3RUeXBlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5leGNsdWRlVGFncyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbmNsdWRlID1cbiAgICAgICAgICAgICAgICBpbmNsdWRlICYmIGV2ZW50VGFncy5ldmVyeSgodGFnKSA9PiAhdGhpcy5leGNsdWRlVGFncz8uaW5jbHVkZXModGFnKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluY2x1ZGU7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIl9Sb290RXZlbnRGaWx0ZXIiLCJjb25zdHJ1Y3RvciIsImZpZWxkcyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJpbmNsdWRlTmFtZXMiLCJpbmNsdWRlVHlwZXMiLCJpbmNsdWRlVGFncyIsImV4Y2x1ZGVOYW1lcyIsImV4Y2x1ZGVUeXBlcyIsImV4Y2x1ZGVUYWdzIiwiaW5jbHVkZUV2ZW50IiwiZXZlbnQiLCJyb290VHlwZSIsImluY2x1ZGUiLCJ1bmRlZmluZWQiLCJldmVudFRhZ3MiLCJ0YWdzIiwiaW5jbHVkZXMiLCJuYW1lIiwic29tZSIsInRhZyIsImV2ZXJ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/singletons/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/singletons/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncLocalStorageProviderSingleton: () => (/* binding */ AsyncLocalStorageProviderSingleton),\n/* harmony export */   MockAsyncLocalStorage: () => (/* binding */ MockAsyncLocalStorage)\n/* harmony export */ });\n/* eslint-disable @typescript-eslint/no-explicit-any */ class MockAsyncLocalStorage {\n    getStore() {\n        return undefined;\n    }\n    run(_store, callback) {\n        callback();\n    }\n}\nclass AsyncLocalStorageProvider {\n    constructor(){\n        Object.defineProperty(this, \"asyncLocalStorage\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new MockAsyncLocalStorage()\n        });\n        Object.defineProperty(this, \"hasBeenInitialized\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n    }\n    getInstance() {\n        return this.asyncLocalStorage;\n    }\n    initializeGlobalInstance(instance) {\n        if (!this.hasBeenInitialized) {\n            this.hasBeenInitialized = true;\n            this.asyncLocalStorage = instance;\n        }\n    }\n}\nconst AsyncLocalStorageProviderSingleton = new AsyncLocalStorageProvider();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvc2luZ2xldG9ucy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHFEQUFxRCxHQUM5QyxNQUFNQTtJQUNUQyxXQUFXO1FBQ1AsT0FBT0M7SUFDWDtJQUNBQyxJQUFJQyxNQUFNLEVBQUVDLFFBQVEsRUFBRTtRQUNsQkE7SUFDSjtBQUNKO0FBQ0EsTUFBTUM7SUFDRkMsYUFBYztRQUNWQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLHFCQUFxQjtZQUM3Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxJQUFJYjtRQUNmO1FBQ0FRLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsc0JBQXNCO1lBQzlDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO1FBQ1g7SUFDSjtJQUNBQyxjQUFjO1FBQ1YsT0FBTyxJQUFJLENBQUNDLGlCQUFpQjtJQUNqQztJQUNBQyx5QkFBeUJDLFFBQVEsRUFBRTtRQUMvQixJQUFJLENBQUMsSUFBSSxDQUFDQyxrQkFBa0IsRUFBRTtZQUMxQixJQUFJLENBQUNBLGtCQUFrQixHQUFHO1lBQzFCLElBQUksQ0FBQ0gsaUJBQWlCLEdBQUdFO1FBQzdCO0lBQ0o7QUFDSjtBQUNBLE1BQU1FLHFDQUFxQyxJQUFJYjtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvc2luZ2xldG9ucy9pbmRleC5qcz82NGQ2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbmV4cG9ydCBjbGFzcyBNb2NrQXN5bmNMb2NhbFN0b3JhZ2Uge1xuICAgIGdldFN0b3JlKCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBydW4oX3N0b3JlLCBjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgIH1cbn1cbmNsYXNzIEFzeW5jTG9jYWxTdG9yYWdlUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJhc3luY0xvY2FsU3RvcmFnZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogbmV3IE1vY2tBc3luY0xvY2FsU3RvcmFnZSgpXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJoYXNCZWVuSW5pdGlhbGl6ZWRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRJbnN0YW5jZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXN5bmNMb2NhbFN0b3JhZ2U7XG4gICAgfVxuICAgIGluaXRpYWxpemVHbG9iYWxJbnN0YW5jZShpbnN0YW5jZSkge1xuICAgICAgICBpZiAoIXRoaXMuaGFzQmVlbkluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB0aGlzLmhhc0JlZW5Jbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmFzeW5jTG9jYWxTdG9yYWdlID0gaW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICB9XG59XG5jb25zdCBBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyU2luZ2xldG9uID0gbmV3IEFzeW5jTG9jYWxTdG9yYWdlUHJvdmlkZXIoKTtcbmV4cG9ydCB7IEFzeW5jTG9jYWxTdG9yYWdlUHJvdmlkZXJTaW5nbGV0b24gfTtcbiJdLCJuYW1lcyI6WyJNb2NrQXN5bmNMb2NhbFN0b3JhZ2UiLCJnZXRTdG9yZSIsInVuZGVmaW5lZCIsInJ1biIsIl9zdG9yZSIsImNhbGxiYWNrIiwiQXN5bmNMb2NhbFN0b3JhZ2VQcm92aWRlciIsImNvbnN0cnVjdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsImdldEluc3RhbmNlIiwiYXN5bmNMb2NhbFN0b3JhZ2UiLCJpbml0aWFsaXplR2xvYmFsSW5zdGFuY2UiLCJpbnN0YW5jZSIsImhhc0JlZW5Jbml0aWFsaXplZCIsIkFzeW5jTG9jYWxTdG9yYWdlUHJvdmlkZXJTaW5nbGV0b24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/singletons/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tools.js":
/*!****************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tools.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DynamicStructuredTool: () => (/* binding */ DynamicStructuredTool),\n/* harmony export */   DynamicTool: () => (/* binding */ DynamicTool),\n/* harmony export */   StructuredTool: () => (/* binding */ StructuredTool),\n/* harmony export */   Tool: () => (/* binding */ Tool),\n/* harmony export */   ToolInputParsingException: () => (/* binding */ ToolInputParsingException)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./callbacks/manager.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.js\");\n/* harmony import */ var _language_models_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./language_models/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/language_models/base.js\");\n/* harmony import */ var _runnables_config_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./runnables/config.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\");\n\n\n\n\n/**\n * Custom error class used to handle exceptions related to tool input parsing.\n * It extends the built-in `Error` class and adds an optional `output`\n * property that can hold the output that caused the exception.\n */ class ToolInputParsingException extends Error {\n    constructor(message, output){\n        super(message);\n        Object.defineProperty(this, \"output\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.output = output;\n    }\n}\n/**\n * Base class for Tools that accept input of any shape defined by a Zod schema.\n */ class StructuredTool extends _language_models_base_js__WEBPACK_IMPORTED_MODULE_1__.BaseLangChain {\n    get lc_namespace() {\n        return [\n            \"langchain\",\n            \"tools\"\n        ];\n    }\n    constructor(fields){\n        super(fields ?? {});\n        Object.defineProperty(this, \"returnDirect\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n    }\n    /**\n     * Invokes the tool with the provided input and configuration.\n     * @param input The input for the tool.\n     * @param config Optional configuration for the tool.\n     * @returns A Promise that resolves with a string.\n     */ async invoke(input, config) {\n        return this.call(input, (0,_runnables_config_js__WEBPACK_IMPORTED_MODULE_2__.ensureConfig)(config));\n    }\n    /**\n     * Calls the tool with the provided argument, configuration, and tags. It\n     * parses the input according to the schema, handles any errors, and\n     * manages callbacks.\n     * @param arg The input argument for the tool.\n     * @param configArg Optional configuration or callbacks for the tool.\n     * @param tags Optional tags for the tool.\n     * @returns A Promise that resolves with a string.\n     */ async call(arg, configArg, /** @deprecated */ tags) {\n        let parsed;\n        try {\n            parsed = await this.schema.parseAsync(arg);\n        } catch (e) {\n            throw new ToolInputParsingException(`Received tool input did not match expected schema`, JSON.stringify(arg));\n        }\n        const config = (0,_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.parseCallbackConfigArg)(configArg);\n        const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.CallbackManager.configure(config.callbacks, this.callbacks, config.tags || tags, this.tags, config.metadata, this.metadata, {\n            verbose: this.verbose\n        });\n        const runManager = await callbackManager_?.handleToolStart(this.toJSON(), typeof parsed === \"string\" ? parsed : JSON.stringify(parsed), undefined, undefined, undefined, undefined, config.runName);\n        let result;\n        try {\n            result = await this._call(parsed, runManager, config);\n        } catch (e) {\n            await runManager?.handleToolError(e);\n            throw e;\n        }\n        await runManager?.handleToolEnd(result);\n        return result;\n    }\n}\n/**\n * Base class for Tools that accept input as a string.\n */ class Tool extends StructuredTool {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"schema\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: zod__WEBPACK_IMPORTED_MODULE_3__.z.object({\n                input: zod__WEBPACK_IMPORTED_MODULE_3__.z.string().optional()\n            }).transform((obj)=>obj.input)\n        });\n    }\n    /**\n     * Calls the tool with the provided argument and callbacks. It handles\n     * string inputs specifically.\n     * @param arg The input argument for the tool, which can be a string, undefined, or an input of the tool's schema.\n     * @param callbacks Optional callbacks for the tool.\n     * @returns A Promise that resolves with a string.\n     */ call(arg, callbacks) {\n        return super.call(typeof arg === \"string\" || !arg ? {\n            input: arg\n        } : arg, callbacks);\n    }\n}\n/**\n * A tool that can be created dynamically from a function, name, and description.\n */ class DynamicTool extends Tool {\n    static lc_name() {\n        return \"DynamicTool\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"description\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"func\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = fields.name;\n        this.description = fields.description;\n        this.func = fields.func;\n        this.returnDirect = fields.returnDirect ?? this.returnDirect;\n    }\n    async call(arg, configArg) {\n        const config = (0,_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.parseCallbackConfigArg)(configArg);\n        if (config.runName === undefined) {\n            config.runName = this.name;\n        }\n        return super.call(arg, config);\n    }\n    /** @ignore */ async _call(input, runManager, config) {\n        return this.func(input, runManager, config);\n    }\n}\n/**\n * A tool that can be created dynamically from a function, name, and\n * description, designed to work with structured data. It extends the\n * StructuredTool class and overrides the _call method to execute the\n * provided function when the tool is called.\n */ class DynamicStructuredTool extends StructuredTool {\n    static lc_name() {\n        return \"DynamicStructuredTool\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"description\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"func\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"schema\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = fields.name;\n        this.description = fields.description;\n        this.func = fields.func;\n        this.returnDirect = fields.returnDirect ?? this.returnDirect;\n        this.schema = fields.schema;\n    }\n    async call(arg, configArg, /** @deprecated */ tags) {\n        const config = (0,_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.parseCallbackConfigArg)(configArg);\n        if (config.runName === undefined) {\n            config.runName = this.name;\n        }\n        return super.call(arg, config, tags);\n    }\n    _call(arg, runManager, config) {\n        return this.func(arg, runManager, config);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tools.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/base.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/base.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseTracer: () => (/* binding */ BaseTracer)\n/* harmony export */ });\n/* harmony import */ var _callbacks_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../callbacks/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/base.js\");\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _coerceToDict(value, defaultKey) {\n    return value && !Array.isArray(value) && typeof value === \"object\" ? value : {\n        [defaultKey]: value\n    };\n}\nfunction stripNonAlphanumeric(input) {\n    return input.replace(/[-:.]/g, \"\");\n}\nfunction convertToDottedOrderFormat(epoch, runId) {\n    return stripNonAlphanumeric(`${new Date(epoch).toISOString().slice(0, -1)}000Z`) + runId;\n}\nclass BaseTracer extends _callbacks_base_js__WEBPACK_IMPORTED_MODULE_0__.BaseCallbackHandler {\n    constructor(_fields){\n        super(...arguments);\n        Object.defineProperty(this, \"runMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n    }\n    copy() {\n        return this;\n    }\n    stringifyError(error) {\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (error instanceof Error) {\n            return error.message + (error?.stack ? `\\n\\n${error.stack}` : \"\");\n        }\n        if (typeof error === \"string\") {\n            return error;\n        }\n        return `${error}`;\n    }\n    _addChildRun(parentRun, childRun) {\n        parentRun.child_runs.push(childRun);\n    }\n    async _startTrace(run) {\n        const currentDottedOrder = convertToDottedOrderFormat(run.start_time, run.id);\n        const storedRun = {\n            ...run\n        };\n        if (storedRun.parent_run_id !== undefined) {\n            const parentRun = this.runMap.get(storedRun.parent_run_id);\n            if (parentRun) {\n                this._addChildRun(parentRun, storedRun);\n                parentRun.child_execution_order = Math.max(parentRun.child_execution_order, storedRun.child_execution_order);\n                storedRun.trace_id = parentRun.trace_id;\n                if (parentRun.dotted_order !== undefined) {\n                    storedRun.dotted_order = [\n                        parentRun.dotted_order,\n                        currentDottedOrder\n                    ].join(\".\");\n                } else {\n                // This can happen naturally for callbacks added within a run\n                // console.debug(`Parent run with UUID ${storedRun.parent_run_id} has no dotted order.`);\n                }\n            } else {\n            // This can happen naturally for callbacks added within a run\n            // console.debug(\n            //   `Parent run with UUID ${storedRun.parent_run_id} not found.`\n            // );\n            }\n        } else {\n            storedRun.trace_id = storedRun.id;\n            storedRun.dotted_order = currentDottedOrder;\n        }\n        this.runMap.set(storedRun.id, storedRun);\n        await this.onRunCreate?.(storedRun);\n    }\n    async _endTrace(run) {\n        const parentRun = run.parent_run_id !== undefined && this.runMap.get(run.parent_run_id);\n        if (parentRun) {\n            parentRun.child_execution_order = Math.max(parentRun.child_execution_order, run.child_execution_order);\n        } else {\n            await this.persistRun(run);\n        }\n        this.runMap.delete(run.id);\n        await this.onRunUpdate?.(run);\n    }\n    _getExecutionOrder(parentRunId) {\n        const parentRun = parentRunId !== undefined && this.runMap.get(parentRunId);\n        // If a run has no parent then execution order is 1\n        if (!parentRun) {\n            return 1;\n        }\n        return parentRun.child_execution_order + 1;\n    }\n    async handleLLMStart(llm, prompts, runId, parentRunId, extraParams, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const finalExtraParams = metadata ? {\n            ...extraParams,\n            metadata\n        } : extraParams;\n        const run = {\n            id: runId,\n            name: name ?? llm.id[llm.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: llm,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                prompts\n            },\n            execution_order,\n            child_runs: [],\n            child_execution_order: execution_order,\n            run_type: \"llm\",\n            extra: finalExtraParams ?? {},\n            tags: tags || []\n        };\n        await this._startTrace(run);\n        await this.onLLMStart?.(run);\n        return run;\n    }\n    async handleChatModelStart(llm, messages, runId, parentRunId, extraParams, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const finalExtraParams = metadata ? {\n            ...extraParams,\n            metadata\n        } : extraParams;\n        const run = {\n            id: runId,\n            name: name ?? llm.id[llm.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: llm,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                messages\n            },\n            execution_order,\n            child_runs: [],\n            child_execution_order: execution_order,\n            run_type: \"llm\",\n            extra: finalExtraParams ?? {},\n            tags: tags || []\n        };\n        await this._startTrace(run);\n        await this.onLLMStart?.(run);\n        return run;\n    }\n    async handleLLMEnd(output, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            throw new Error(\"No LLM run to end.\");\n        }\n        run.end_time = Date.now();\n        run.outputs = output;\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onLLMEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleLLMError(error, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            throw new Error(\"No LLM run to end.\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onLLMError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleChainStart(chain, inputs, runId, parentRunId, tags, metadata, runType, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: name ?? chain.id[chain.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: chain,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs,\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: runType ?? \"chain\",\n            child_runs: [],\n            extra: metadata ? {\n                metadata\n            } : {},\n            tags: tags || []\n        };\n        await this._startTrace(run);\n        await this.onChainStart?.(run);\n        return run;\n    }\n    async handleChainEnd(outputs, runId, _parentRunId, _tags, kwargs) {\n        const run = this.runMap.get(runId);\n        if (!run) {\n            throw new Error(\"No chain run to end.\");\n        }\n        run.end_time = Date.now();\n        run.outputs = _coerceToDict(outputs, \"output\");\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        if (kwargs?.inputs !== undefined) {\n            run.inputs = _coerceToDict(kwargs.inputs, \"input\");\n        }\n        await this.onChainEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleChainError(error, runId, _parentRunId, _tags, kwargs) {\n        const run = this.runMap.get(runId);\n        if (!run) {\n            throw new Error(\"No chain run to end.\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        if (kwargs?.inputs !== undefined) {\n            run.inputs = _coerceToDict(kwargs.inputs, \"input\");\n        }\n        await this.onChainError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleToolStart(tool, input, runId, parentRunId, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: name ?? tool.id[tool.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: tool,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                input\n            },\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: \"tool\",\n            child_runs: [],\n            extra: metadata ? {\n                metadata\n            } : {},\n            tags: tags || []\n        };\n        await this._startTrace(run);\n        await this.onToolStart?.(run);\n        return run;\n    }\n    async handleToolEnd(output, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"tool\") {\n            throw new Error(\"No tool run to end\");\n        }\n        run.end_time = Date.now();\n        run.outputs = {\n            output\n        };\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onToolEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleToolError(error, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"tool\") {\n            throw new Error(\"No tool run to end\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onToolError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleAgentAction(action, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        const agentRun = run;\n        agentRun.actions = agentRun.actions || [];\n        agentRun.actions.push(action);\n        agentRun.events.push({\n            name: \"agent_action\",\n            time: new Date().toISOString(),\n            kwargs: {\n                action\n            }\n        });\n        await this.onAgentAction?.(run);\n    }\n    async handleAgentEnd(action, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        run.events.push({\n            name: \"agent_end\",\n            time: new Date().toISOString(),\n            kwargs: {\n                action\n            }\n        });\n        await this.onAgentEnd?.(run);\n    }\n    async handleRetrieverStart(retriever, query, runId, parentRunId, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: name ?? retriever.id[retriever.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: retriever,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                query\n            },\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: \"retriever\",\n            child_runs: [],\n            extra: metadata ? {\n                metadata\n            } : {},\n            tags: tags || []\n        };\n        await this._startTrace(run);\n        await this.onRetrieverStart?.(run);\n        return run;\n    }\n    async handleRetrieverEnd(documents, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"retriever\") {\n            throw new Error(\"No retriever run to end\");\n        }\n        run.end_time = Date.now();\n        run.outputs = {\n            documents\n        };\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onRetrieverEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleRetrieverError(error, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"retriever\") {\n            throw new Error(\"No retriever run to end\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onRetrieverError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleText(text, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        run.events.push({\n            name: \"text\",\n            time: new Date().toISOString(),\n            kwargs: {\n                text\n            }\n        });\n        await this.onText?.(run);\n    }\n    async handleLLMNewToken(token, idx, runId, _parentRunId, _tags, fields) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            throw new Error(`Invalid \"runId\" provided to \"handleLLMNewToken\" callback.`);\n        }\n        run.events.push({\n            name: \"new_token\",\n            time: new Date().toISOString(),\n            kwargs: {\n                token,\n                idx,\n                chunk: fields?.chunk\n            }\n        });\n        await this.onLLMNewToken?.(run, token, {\n            chunk: fields?.chunk\n        });\n        return run;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/console.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/console.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConsoleCallbackHandler: () => (/* binding */ ConsoleCallbackHandler)\n/* harmony export */ });\n/* harmony import */ var ansi_styles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ansi-styles */ \"(rsc)/./node_modules/ansi-styles/index.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.js\");\n\n\nfunction wrap(style, text) {\n    return `${style.open}${text}${style.close}`;\n}\nfunction tryJsonStringify(obj, fallback) {\n    try {\n        return JSON.stringify(obj, null, 2);\n    } catch (err) {\n        return fallback;\n    }\n}\nfunction elapsed(run) {\n    if (!run.end_time) return \"\";\n    const elapsed = run.end_time - run.start_time;\n    if (elapsed < 1000) {\n        return `${elapsed}ms`;\n    }\n    return `${(elapsed / 1000).toFixed(2)}s`;\n}\nconst { color } = ansi_styles__WEBPACK_IMPORTED_MODULE_0__;\n/**\n * A tracer that logs all events to the console. It extends from the\n * `BaseTracer` class and overrides its methods to provide custom logging\n * functionality.\n * @example\n * ```typescript\n *\n * const llm = new ChatAnthropic({\n *   temperature: 0,\n *   tags: [\"example\", \"callbacks\", \"constructor\"],\n *   callbacks: [new ConsoleCallbackHandler()],\n * });\n *\n * ```\n */ class ConsoleCallbackHandler extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseTracer {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"console_callback_handler\"\n        });\n    }\n    /**\n     * Method used to persist the run. In this case, it simply returns a\n     * resolved promise as there's no persistence logic.\n     * @param _run The run to persist.\n     * @returns A resolved promise.\n     */ persistRun(_run) {\n        return Promise.resolve();\n    }\n    // utility methods\n    /**\n     * Method used to get all the parent runs of a given run.\n     * @param run The run whose parents are to be retrieved.\n     * @returns An array of parent runs.\n     */ getParents(run) {\n        const parents = [];\n        let currentRun = run;\n        while(currentRun.parent_run_id){\n            const parent = this.runMap.get(currentRun.parent_run_id);\n            if (parent) {\n                parents.push(parent);\n                currentRun = parent;\n            } else {\n                break;\n            }\n        }\n        return parents;\n    }\n    /**\n     * Method used to get a string representation of the run's lineage, which\n     * is used in logging.\n     * @param run The run whose lineage is to be retrieved.\n     * @returns A string representation of the run's lineage.\n     */ getBreadcrumbs(run) {\n        const parents = this.getParents(run).reverse();\n        const string = [\n            ...parents,\n            run\n        ].map((parent, i, arr)=>{\n            const name = `${parent.execution_order}:${parent.run_type}:${parent.name}`;\n            return i === arr.length - 1 ? wrap(ansi_styles__WEBPACK_IMPORTED_MODULE_0__.bold, name) : name;\n        }).join(\" > \");\n        return wrap(color.grey, string);\n    }\n    // logging methods\n    /**\n     * Method used to log the start of a chain run.\n     * @param run The chain run that has started.\n     * @returns void\n     */ onChainStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.green, \"[chain/start]\")} [${crumbs}] Entering Chain run with input: ${tryJsonStringify(run.inputs, \"[inputs]\")}`);\n    }\n    /**\n     * Method used to log the end of a chain run.\n     * @param run The chain run that has ended.\n     * @returns void\n     */ onChainEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[chain/end]\")} [${crumbs}] [${elapsed(run)}] Exiting Chain run with output: ${tryJsonStringify(run.outputs, \"[outputs]\")}`);\n    }\n    /**\n     * Method used to log any errors of a chain run.\n     * @param run The chain run that has errored.\n     * @returns void\n     */ onChainError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[chain/error]\")} [${crumbs}] [${elapsed(run)}] Chain run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the start of an LLM run.\n     * @param run The LLM run that has started.\n     * @returns void\n     */ onLLMStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        const inputs = \"prompts\" in run.inputs ? {\n            prompts: run.inputs.prompts.map((p)=>p.trim())\n        } : run.inputs;\n        console.log(`${wrap(color.green, \"[llm/start]\")} [${crumbs}] Entering LLM run with input: ${tryJsonStringify(inputs, \"[inputs]\")}`);\n    }\n    /**\n     * Method used to log the end of an LLM run.\n     * @param run The LLM run that has ended.\n     * @returns void\n     */ onLLMEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[llm/end]\")} [${crumbs}] [${elapsed(run)}] Exiting LLM run with output: ${tryJsonStringify(run.outputs, \"[response]\")}`);\n    }\n    /**\n     * Method used to log any errors of an LLM run.\n     * @param run The LLM run that has errored.\n     * @returns void\n     */ onLLMError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[llm/error]\")} [${crumbs}] [${elapsed(run)}] LLM run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the start of a tool run.\n     * @param run The tool run that has started.\n     * @returns void\n     */ onToolStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.green, \"[tool/start]\")} [${crumbs}] Entering Tool run with input: \"${run.inputs.input?.trim()}\"`);\n    }\n    /**\n     * Method used to log the end of a tool run.\n     * @param run The tool run that has ended.\n     * @returns void\n     */ onToolEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[tool/end]\")} [${crumbs}] [${elapsed(run)}] Exiting Tool run with output: \"${run.outputs?.output?.trim()}\"`);\n    }\n    /**\n     * Method used to log any errors of a tool run.\n     * @param run The tool run that has errored.\n     * @returns void\n     */ onToolError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[tool/error]\")} [${crumbs}] [${elapsed(run)}] Tool run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the start of a retriever run.\n     * @param run The retriever run that has started.\n     * @returns void\n     */ onRetrieverStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.green, \"[retriever/start]\")} [${crumbs}] Entering Retriever run with input: ${tryJsonStringify(run.inputs, \"[inputs]\")}`);\n    }\n    /**\n     * Method used to log the end of a retriever run.\n     * @param run The retriever run that has ended.\n     * @returns void\n     */ onRetrieverEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[retriever/end]\")} [${crumbs}] [${elapsed(run)}] Exiting Retriever run with output: ${tryJsonStringify(run.outputs, \"[outputs]\")}`);\n    }\n    /**\n     * Method used to log any errors of a retriever run.\n     * @param run The retriever run that has errored.\n     * @returns void\n     */ onRetrieverError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[retriever/error]\")} [${crumbs}] [${elapsed(run)}] Retriever run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the action selected by the agent.\n     * @param run The run in which the agent action occurred.\n     * @returns void\n     */ onAgentAction(run) {\n        const agentRun = run;\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.blue, \"[agent/action]\")} [${crumbs}] Agent selected action: ${tryJsonStringify(agentRun.actions[agentRun.actions.length - 1], \"[action]\")}`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/console.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/initialize.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/initialize.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTracingCallbackHandler: () => (/* binding */ getTracingCallbackHandler),\n/* harmony export */   getTracingV2CallbackHandler: () => (/* binding */ getTracingV2CallbackHandler)\n/* harmony export */ });\n/* harmony import */ var _tracer_langchain_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tracer_langchain.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/tracer_langchain.js\");\n/* harmony import */ var _tracer_langchain_v1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tracer_langchain_v1.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/tracer_langchain_v1.js\");\n\n\n/**\n * @deprecated Use the V2 handler instead.\n *\n * Function that returns an instance of `LangChainTracerV1`. If a session\n * is provided, it loads that session into the tracer; otherwise, it loads\n * a default session.\n * @param session Optional session to load into the tracer.\n * @returns An instance of `LangChainTracerV1`.\n */ async function getTracingCallbackHandler(session) {\n    const tracer = new _tracer_langchain_v1_js__WEBPACK_IMPORTED_MODULE_1__.LangChainTracerV1();\n    if (session) {\n        await tracer.loadSession(session);\n    } else {\n        await tracer.loadDefaultSession();\n    }\n    return tracer;\n}\n/**\n * Function that returns an instance of `LangChainTracer`. It does not\n * load any session data.\n * @returns An instance of `LangChainTracer`.\n */ async function getTracingV2CallbackHandler() {\n    return new _tracer_langchain_js__WEBPACK_IMPORTED_MODULE_0__.LangChainTracer();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdHJhY2Vycy9pbml0aWFsaXplLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBd0Q7QUFDSztBQUM3RDs7Ozs7Ozs7Q0FRQyxHQUNNLGVBQWVFLDBCQUEwQkMsT0FBTztJQUNuRCxNQUFNQyxTQUFTLElBQUlILHNFQUFpQkE7SUFDcEMsSUFBSUUsU0FBUztRQUNULE1BQU1DLE9BQU9DLFdBQVcsQ0FBQ0Y7SUFDN0IsT0FDSztRQUNELE1BQU1DLE9BQU9FLGtCQUFrQjtJQUNuQztJQUNBLE9BQU9GO0FBQ1g7QUFDQTs7OztDQUlDLEdBQ00sZUFBZUc7SUFDbEIsT0FBTyxJQUFJUCxpRUFBZUE7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC90cmFjZXJzL2luaXRpYWxpemUuanM/Nzc2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMYW5nQ2hhaW5UcmFjZXIgfSBmcm9tIFwiLi90cmFjZXJfbGFuZ2NoYWluLmpzXCI7XG5pbXBvcnQgeyBMYW5nQ2hhaW5UcmFjZXJWMSB9IGZyb20gXCIuL3RyYWNlcl9sYW5nY2hhaW5fdjEuanNcIjtcbi8qKlxuICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBWMiBoYW5kbGVyIGluc3RlYWQuXG4gKlxuICogRnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIGluc3RhbmNlIG9mIGBMYW5nQ2hhaW5UcmFjZXJWMWAuIElmIGEgc2Vzc2lvblxuICogaXMgcHJvdmlkZWQsIGl0IGxvYWRzIHRoYXQgc2Vzc2lvbiBpbnRvIHRoZSB0cmFjZXI7IG90aGVyd2lzZSwgaXQgbG9hZHNcbiAqIGEgZGVmYXVsdCBzZXNzaW9uLlxuICogQHBhcmFtIHNlc3Npb24gT3B0aW9uYWwgc2Vzc2lvbiB0byBsb2FkIGludG8gdGhlIHRyYWNlci5cbiAqIEByZXR1cm5zIEFuIGluc3RhbmNlIG9mIGBMYW5nQ2hhaW5UcmFjZXJWMWAuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRUcmFjaW5nQ2FsbGJhY2tIYW5kbGVyKHNlc3Npb24pIHtcbiAgICBjb25zdCB0cmFjZXIgPSBuZXcgTGFuZ0NoYWluVHJhY2VyVjEoKTtcbiAgICBpZiAoc2Vzc2lvbikge1xuICAgICAgICBhd2FpdCB0cmFjZXIubG9hZFNlc3Npb24oc2Vzc2lvbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhd2FpdCB0cmFjZXIubG9hZERlZmF1bHRTZXNzaW9uKCk7XG4gICAgfVxuICAgIHJldHVybiB0cmFjZXI7XG59XG4vKipcbiAqIEZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBpbnN0YW5jZSBvZiBgTGFuZ0NoYWluVHJhY2VyYC4gSXQgZG9lcyBub3RcbiAqIGxvYWQgYW55IHNlc3Npb24gZGF0YS5cbiAqIEByZXR1cm5zIEFuIGluc3RhbmNlIG9mIGBMYW5nQ2hhaW5UcmFjZXJgLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VHJhY2luZ1YyQ2FsbGJhY2tIYW5kbGVyKCkge1xuICAgIHJldHVybiBuZXcgTGFuZ0NoYWluVHJhY2VyKCk7XG59XG4iXSwibmFtZXMiOlsiTGFuZ0NoYWluVHJhY2VyIiwiTGFuZ0NoYWluVHJhY2VyVjEiLCJnZXRUcmFjaW5nQ2FsbGJhY2tIYW5kbGVyIiwic2Vzc2lvbiIsInRyYWNlciIsImxvYWRTZXNzaW9uIiwibG9hZERlZmF1bHRTZXNzaW9uIiwiZ2V0VHJhY2luZ1YyQ2FsbGJhY2tIYW5kbGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/initialize.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/log_stream.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/log_stream.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogStreamCallbackHandler: () => (/* binding */ LogStreamCallbackHandler),\n/* harmony export */   RunLog: () => (/* binding */ RunLog),\n/* harmony export */   RunLogPatch: () => (/* binding */ RunLogPatch)\n/* harmony export */ });\n/* harmony import */ var _utils_fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/fast-json-patch/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/index.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.js\");\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n\n\n\n\n/**\n * List of jsonpatch JSONPatchOperations, which describe how to create the run state\n * from an empty dict. This is the minimal representation of the log, designed to\n * be serialized as JSON and sent over the wire to reconstruct the log on the other\n * side. Reconstruction of the state can be done with any jsonpatch-compliant library,\n * see https://jsonpatch.com for more information.\n */ class RunLogPatch {\n    constructor(fields){\n        Object.defineProperty(this, \"ops\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.ops = fields.ops ?? [];\n    }\n    concat(other) {\n        const ops = this.ops.concat(other.ops);\n        const states = (0,_utils_fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch)({}, ops);\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunLog({\n            ops,\n            state: states[states.length - 1].newDocument\n        });\n    }\n}\nclass RunLog extends RunLogPatch {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"state\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.state = fields.state;\n    }\n    concat(other) {\n        const ops = this.ops.concat(other.ops);\n        const states = (0,_utils_fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch)(this.state, other.ops);\n        return new RunLog({\n            ops,\n            state: states[states.length - 1].newDocument\n        });\n    }\n    static fromRunLogPatch(patch) {\n        const states = (0,_utils_fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch)({}, patch.ops);\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunLog({\n            ops: patch.ops,\n            state: states[states.length - 1].newDocument\n        });\n    }\n}\n/**\n * Extract standardized inputs from a run.\n *\n * Standardizes the inputs based on the type of the runnable used.\n *\n * @param run - Run object\n * @param schemaFormat - The schema format to use.\n *\n * @returns Valid inputs are only dict. By conventions, inputs always represented\n * invocation using named arguments.\n * A null means that the input is not yet known!\n */ async function _getStandardizedInputs(run, schemaFormat) {\n    if (schemaFormat === \"original\") {\n        throw new Error(\"Do not assign inputs with original schema drop the key for now. \" + \"When inputs are added to streamLog they should be added with \" + \"standardized schema for streaming events.\");\n    }\n    const { inputs } = run;\n    if ([\n        \"retriever\",\n        \"llm\",\n        \"prompt\"\n    ].includes(run.run_type)) {\n        return inputs;\n    }\n    if (Object.keys(inputs).length === 1 && inputs?.input === \"\") {\n        return undefined;\n    }\n    // new style chains\n    // These nest an additional 'input' key inside the 'inputs' to make sure\n    // the input is always a dict. We need to unpack and user the inner value.\n    // We should try to fix this in Runnables and callbacks/tracers\n    // Runnables should be using a null type here not a placeholder\n    // dict.\n    return inputs.input;\n}\nasync function _getStandardizedOutputs(run, schemaFormat) {\n    const { outputs } = run;\n    if (schemaFormat === \"original\") {\n        // Return the old schema, without standardizing anything\n        return outputs;\n    }\n    if ([\n        \"retriever\",\n        \"llm\",\n        \"prompt\"\n    ].includes(run.run_type)) {\n        return outputs;\n    }\n    // TODO: Remove this hacky check\n    if (outputs !== undefined && Object.keys(outputs).length === 1 && outputs?.output !== undefined) {\n        return outputs.output;\n    }\n    return outputs;\n}\nfunction isChatGenerationChunk(x) {\n    return x !== undefined && x.message !== undefined;\n}\n/**\n * Class that extends the `BaseTracer` class from the\n * `langchain.callbacks.tracers.base` module. It represents a callback\n * handler that logs the execution of runs and emits `RunLog` instances to a\n * `RunLogStream`.\n */ class LogStreamCallbackHandler extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseTracer {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"autoClose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"includeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_schemaFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"original\"\n        });\n        Object.defineProperty(this, \"rootId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"keyMapByRunId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"counterMapByRunName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"transformStream\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"writer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"receiveStream\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"log_stream_tracer\"\n        });\n        this.autoClose = fields?.autoClose ?? true;\n        this.includeNames = fields?.includeNames;\n        this.includeTypes = fields?.includeTypes;\n        this.includeTags = fields?.includeTags;\n        this.excludeNames = fields?.excludeNames;\n        this.excludeTypes = fields?.excludeTypes;\n        this.excludeTags = fields?.excludeTags;\n        this._schemaFormat = fields?._schemaFormat ?? this._schemaFormat;\n        this.transformStream = new TransformStream();\n        this.writer = this.transformStream.writable.getWriter();\n        this.receiveStream = _utils_stream_js__WEBPACK_IMPORTED_MODULE_2__.IterableReadableStream.fromReadableStream(this.transformStream.readable);\n    }\n    [Symbol.asyncIterator]() {\n        return this.receiveStream;\n    }\n    async persistRun(_run) {\n    // This is a legacy method only called once for an entire run tree\n    // and is therefore not useful here\n    }\n    _includeRun(run) {\n        if (run.id === this.rootId) {\n            return false;\n        }\n        const runTags = run.tags ?? [];\n        let include = this.includeNames === undefined && this.includeTags === undefined && this.includeTypes === undefined;\n        if (this.includeNames !== undefined) {\n            include = include || this.includeNames.includes(run.name);\n        }\n        if (this.includeTypes !== undefined) {\n            include = include || this.includeTypes.includes(run.run_type);\n        }\n        if (this.includeTags !== undefined) {\n            include = include || runTags.find((tag)=>this.includeTags?.includes(tag)) !== undefined;\n        }\n        if (this.excludeNames !== undefined) {\n            include = include && !this.excludeNames.includes(run.name);\n        }\n        if (this.excludeTypes !== undefined) {\n            include = include && !this.excludeTypes.includes(run.run_type);\n        }\n        if (this.excludeTags !== undefined) {\n            include = include && runTags.every((tag)=>!this.excludeTags?.includes(tag));\n        }\n        return include;\n    }\n    async *tapOutputIterable(runId, output) {\n        // Tap an output async iterator to stream its values to the log.\n        for await (const chunk of output){\n            // root run is handled in .streamLog()\n            if (runId !== this.rootId) {\n                // if we can't find the run silently ignore\n                // eg. because this run wasn't included in the log\n                const key = this.keyMapByRunId[runId];\n                if (key) {\n                    await this.writer.write(new RunLogPatch({\n                        ops: [\n                            {\n                                op: \"add\",\n                                path: `/logs/${key}/streamed_output/-`,\n                                value: chunk\n                            }\n                        ]\n                    }));\n                }\n            }\n            yield chunk;\n        }\n    }\n    async onRunCreate(run) {\n        if (this.rootId === undefined) {\n            this.rootId = run.id;\n            await this.writer.write(new RunLogPatch({\n                ops: [\n                    {\n                        op: \"replace\",\n                        path: \"\",\n                        value: {\n                            id: run.id,\n                            name: run.name,\n                            type: run.run_type,\n                            streamed_output: [],\n                            final_output: undefined,\n                            logs: {}\n                        }\n                    }\n                ]\n            }));\n        }\n        if (!this._includeRun(run)) {\n            return;\n        }\n        if (this.counterMapByRunName[run.name] === undefined) {\n            this.counterMapByRunName[run.name] = 0;\n        }\n        this.counterMapByRunName[run.name] += 1;\n        const count = this.counterMapByRunName[run.name];\n        this.keyMapByRunId[run.id] = count === 1 ? run.name : `${run.name}:${count}`;\n        const logEntry = {\n            id: run.id,\n            name: run.name,\n            type: run.run_type,\n            tags: run.tags ?? [],\n            metadata: run.extra?.metadata ?? {},\n            start_time: new Date(run.start_time).toISOString(),\n            streamed_output: [],\n            streamed_output_str: [],\n            final_output: undefined,\n            end_time: undefined\n        };\n        if (this._schemaFormat === \"streaming_events\") {\n            logEntry.inputs = await _getStandardizedInputs(run, this._schemaFormat);\n        }\n        await this.writer.write(new RunLogPatch({\n            ops: [\n                {\n                    op: \"add\",\n                    path: `/logs/${this.keyMapByRunId[run.id]}`,\n                    value: logEntry\n                }\n            ]\n        }));\n    }\n    async onRunUpdate(run) {\n        try {\n            const runName = this.keyMapByRunId[run.id];\n            if (runName === undefined) {\n                return;\n            }\n            const ops = [];\n            if (this._schemaFormat === \"streaming_events\") {\n                ops.push({\n                    op: \"replace\",\n                    path: `/logs/${runName}/inputs`,\n                    value: await _getStandardizedInputs(run, this._schemaFormat)\n                });\n            }\n            ops.push({\n                op: \"add\",\n                path: `/logs/${runName}/final_output`,\n                value: await _getStandardizedOutputs(run, this._schemaFormat)\n            });\n            if (run.end_time !== undefined) {\n                ops.push({\n                    op: \"add\",\n                    path: `/logs/${runName}/end_time`,\n                    value: new Date(run.end_time).toISOString()\n                });\n            }\n            const patch = new RunLogPatch({\n                ops\n            });\n            await this.writer.write(patch);\n        } finally{\n            if (run.id === this.rootId) {\n                const patch = new RunLogPatch({\n                    ops: [\n                        {\n                            op: \"replace\",\n                            path: \"/final_output\",\n                            value: await _getStandardizedOutputs(run, this._schemaFormat)\n                        }\n                    ]\n                });\n                await this.writer.write(patch);\n                if (this.autoClose) {\n                    await this.writer.close();\n                }\n            }\n        }\n    }\n    async onLLMNewToken(run, token, kwargs) {\n        const runName = this.keyMapByRunId[run.id];\n        if (runName === undefined) {\n            return;\n        }\n        // TODO: Remove hack\n        const isChatModel = run.inputs.messages !== undefined;\n        let streamedOutputValue;\n        if (isChatModel) {\n            if (isChatGenerationChunk(kwargs?.chunk)) {\n                streamedOutputValue = kwargs?.chunk;\n            } else {\n                streamedOutputValue = new _messages_index_js__WEBPACK_IMPORTED_MODULE_3__.AIMessageChunk(token);\n            }\n        } else {\n            streamedOutputValue = token;\n        }\n        const patch = new RunLogPatch({\n            ops: [\n                {\n                    op: \"add\",\n                    path: `/logs/${runName}/streamed_output_str/-`,\n                    value: token\n                },\n                {\n                    op: \"add\",\n                    path: `/logs/${runName}/streamed_output/-`,\n                    value: streamedOutputValue\n                }\n            ]\n        });\n        await this.writer.write(patch);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/log_stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/root_listener.js":
/*!********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/root_listener.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RootListenersTracer: () => (/* binding */ RootListenersTracer)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.js\");\n\nclass RootListenersTracer extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseTracer {\n    constructor({ config, onStart, onEnd, onError }){\n        super();\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"RootListenersTracer\"\n        });\n        /** The Run's ID. Type UUID */ Object.defineProperty(this, \"rootId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"config\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"argOnStart\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"argOnEnd\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"argOnError\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.config = config;\n        this.argOnStart = onStart;\n        this.argOnEnd = onEnd;\n        this.argOnError = onError;\n    }\n    /**\n     * This is a legacy method only called once for an entire run tree\n     * therefore not useful here\n     * @param {Run} _ Not used\n     */ persistRun(_) {\n        return Promise.resolve();\n    }\n    async onRunCreate(run) {\n        if (this.rootId) {\n            return;\n        }\n        this.rootId = run.id;\n        if (this.argOnStart) {\n            if (this.argOnStart.length === 1) {\n                await this.argOnStart(run);\n            } else if (this.argOnStart.length === 2) {\n                await this.argOnStart(run, this.config);\n            }\n        }\n    }\n    async onRunUpdate(run) {\n        if (run.id !== this.rootId) {\n            return;\n        }\n        if (!run.error) {\n            if (this.argOnEnd) {\n                if (this.argOnEnd.length === 1) {\n                    await this.argOnEnd(run);\n                } else if (this.argOnEnd.length === 2) {\n                    await this.argOnEnd(run, this.config);\n                }\n            }\n        } else if (this.argOnError) {\n            if (this.argOnError.length === 1) {\n                await this.argOnError(run);\n            } else if (this.argOnError.length === 2) {\n                await this.argOnError(run, this.config);\n            }\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdHJhY2Vycy9yb290X2xpc3RlbmVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXVDO0FBQ2hDLE1BQU1DLDRCQUE0QkQsZ0RBQVVBO0lBQy9DRSxZQUFZLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRyxDQUFFO1FBQzlDLEtBQUs7UUFDTEMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxRQUFRO1lBQ2hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO1FBQ1g7UUFDQSw0QkFBNEIsR0FDNUJMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsVUFBVTtZQUNsQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsVUFBVTtZQUNsQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsY0FBYztZQUN0Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsWUFBWTtZQUNwQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsY0FBYztZQUN0Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsSUFBSSxDQUFDVCxNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDVSxVQUFVLEdBQUdUO1FBQ2xCLElBQUksQ0FBQ1UsUUFBUSxHQUFHVDtRQUNoQixJQUFJLENBQUNVLFVBQVUsR0FBR1Q7SUFDdEI7SUFDQTs7OztLQUlDLEdBQ0RVLFdBQVdDLENBQUMsRUFBRTtRQUNWLE9BQU9DLFFBQVFDLE9BQU87SUFDMUI7SUFDQSxNQUFNQyxZQUFZQyxHQUFHLEVBQUU7UUFDbkIsSUFBSSxJQUFJLENBQUNDLE1BQU0sRUFBRTtZQUNiO1FBQ0o7UUFDQSxJQUFJLENBQUNBLE1BQU0sR0FBR0QsSUFBSUUsRUFBRTtRQUNwQixJQUFJLElBQUksQ0FBQ1YsVUFBVSxFQUFFO1lBQ2pCLElBQUksSUFBSSxDQUFDQSxVQUFVLENBQUNXLE1BQU0sS0FBSyxHQUFHO2dCQUM5QixNQUFNLElBQUksQ0FBQ1gsVUFBVSxDQUFDUTtZQUMxQixPQUNLLElBQUksSUFBSSxDQUFDUixVQUFVLENBQUNXLE1BQU0sS0FBSyxHQUFHO2dCQUNuQyxNQUFNLElBQUksQ0FBQ1gsVUFBVSxDQUFDUSxLQUFLLElBQUksQ0FBQ2xCLE1BQU07WUFDMUM7UUFDSjtJQUNKO0lBQ0EsTUFBTXNCLFlBQVlKLEdBQUcsRUFBRTtRQUNuQixJQUFJQSxJQUFJRSxFQUFFLEtBQUssSUFBSSxDQUFDRCxNQUFNLEVBQUU7WUFDeEI7UUFDSjtRQUNBLElBQUksQ0FBQ0QsSUFBSUssS0FBSyxFQUFFO1lBQ1osSUFBSSxJQUFJLENBQUNaLFFBQVEsRUFBRTtnQkFDZixJQUFJLElBQUksQ0FBQ0EsUUFBUSxDQUFDVSxNQUFNLEtBQUssR0FBRztvQkFDNUIsTUFBTSxJQUFJLENBQUNWLFFBQVEsQ0FBQ087Z0JBQ3hCLE9BQ0ssSUFBSSxJQUFJLENBQUNQLFFBQVEsQ0FBQ1UsTUFBTSxLQUFLLEdBQUc7b0JBQ2pDLE1BQU0sSUFBSSxDQUFDVixRQUFRLENBQUNPLEtBQUssSUFBSSxDQUFDbEIsTUFBTTtnQkFDeEM7WUFDSjtRQUNKLE9BQ0ssSUFBSSxJQUFJLENBQUNZLFVBQVUsRUFBRTtZQUN0QixJQUFJLElBQUksQ0FBQ0EsVUFBVSxDQUFDUyxNQUFNLEtBQUssR0FBRztnQkFDOUIsTUFBTSxJQUFJLENBQUNULFVBQVUsQ0FBQ007WUFDMUIsT0FDSyxJQUFJLElBQUksQ0FBQ04sVUFBVSxDQUFDUyxNQUFNLEtBQUssR0FBRztnQkFDbkMsTUFBTSxJQUFJLENBQUNULFVBQVUsQ0FBQ00sS0FBSyxJQUFJLENBQUNsQixNQUFNO1lBQzFDO1FBQ0o7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdHJhY2Vycy9yb290X2xpc3RlbmVyLmpzPzBkNGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZVRyYWNlciB9IGZyb20gXCIuL2Jhc2UuanNcIjtcbmV4cG9ydCBjbGFzcyBSb290TGlzdGVuZXJzVHJhY2VyIGV4dGVuZHMgQmFzZVRyYWNlciB7XG4gICAgY29uc3RydWN0b3IoeyBjb25maWcsIG9uU3RhcnQsIG9uRW5kLCBvbkVycm9yLCB9KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5hbWVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFwiUm9vdExpc3RlbmVyc1RyYWNlclwiXG4gICAgICAgIH0pO1xuICAgICAgICAvKiogVGhlIFJ1bidzIElELiBUeXBlIFVVSUQgKi9cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicm9vdElkXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNvbmZpZ1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJhcmdPblN0YXJ0XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImFyZ09uRW5kXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImFyZ09uRXJyb3JcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgICAgIHRoaXMuYXJnT25TdGFydCA9IG9uU3RhcnQ7XG4gICAgICAgIHRoaXMuYXJnT25FbmQgPSBvbkVuZDtcbiAgICAgICAgdGhpcy5hcmdPbkVycm9yID0gb25FcnJvcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBpcyBhIGxlZ2FjeSBtZXRob2Qgb25seSBjYWxsZWQgb25jZSBmb3IgYW4gZW50aXJlIHJ1biB0cmVlXG4gICAgICogdGhlcmVmb3JlIG5vdCB1c2VmdWwgaGVyZVxuICAgICAqIEBwYXJhbSB7UnVufSBfIE5vdCB1c2VkXG4gICAgICovXG4gICAgcGVyc2lzdFJ1bihfKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgYXN5bmMgb25SdW5DcmVhdGUocnVuKSB7XG4gICAgICAgIGlmICh0aGlzLnJvb3RJZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucm9vdElkID0gcnVuLmlkO1xuICAgICAgICBpZiAodGhpcy5hcmdPblN0YXJ0KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hcmdPblN0YXJ0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYXJnT25TdGFydChydW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5hcmdPblN0YXJ0Lmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYXJnT25TdGFydChydW4sIHRoaXMuY29uZmlnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBvblJ1blVwZGF0ZShydW4pIHtcbiAgICAgICAgaWYgKHJ1bi5pZCAhPT0gdGhpcy5yb290SWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJ1bi5lcnJvcikge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXJnT25FbmQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hcmdPbkVuZC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hcmdPbkVuZChydW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmFyZ09uRW5kLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFyZ09uRW5kKHJ1biwgdGhpcy5jb25maWcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmFyZ09uRXJyb3IpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFyZ09uRXJyb3IubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hcmdPbkVycm9yKHJ1bik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmFyZ09uRXJyb3IubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hcmdPbkVycm9yKHJ1biwgdGhpcy5jb25maWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkJhc2VUcmFjZXIiLCJSb290TGlzdGVuZXJzVHJhY2VyIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJvblN0YXJ0Iiwib25FbmQiLCJvbkVycm9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsImFyZ09uU3RhcnQiLCJhcmdPbkVuZCIsImFyZ09uRXJyb3IiLCJwZXJzaXN0UnVuIiwiXyIsIlByb21pc2UiLCJyZXNvbHZlIiwib25SdW5DcmVhdGUiLCJydW4iLCJyb290SWQiLCJpZCIsImxlbmd0aCIsIm9uUnVuVXBkYXRlIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/root_listener.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/tracer_langchain.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/tracer_langchain.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LangChainTracer: () => (/* binding */ LangChainTracer)\n/* harmony export */ });\n/* harmony import */ var langsmith__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! langsmith */ \"(rsc)/./node_modules/langsmith/index.js\");\n/* harmony import */ var _utils_env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/env.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.js\");\n\n\n\nclass LangChainTracer extends _base_js__WEBPACK_IMPORTED_MODULE_2__.BaseTracer {\n    constructor(fields = {}){\n        super(fields);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"langchain_tracer\"\n        });\n        Object.defineProperty(this, \"projectName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const { exampleId, projectName, client } = fields;\n        this.projectName = projectName ?? (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_PROJECT\") ?? (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_SESSION\");\n        this.exampleId = exampleId;\n        this.client = client ?? new langsmith__WEBPACK_IMPORTED_MODULE_0__.Client({});\n    }\n    async _convertToCreate(run, example_id = undefined) {\n        return {\n            ...run,\n            extra: {\n                ...run.extra,\n                runtime: await (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getRuntimeEnvironment)()\n            },\n            child_runs: undefined,\n            session_name: this.projectName,\n            reference_example_id: run.parent_run_id ? undefined : example_id\n        };\n    }\n    async persistRun(_run) {}\n    async onRunCreate(run) {\n        const persistedRun = await this._convertToCreate(run, this.exampleId);\n        await this.client.createRun(persistedRun);\n    }\n    async onRunUpdate(run) {\n        const runUpdate = {\n            end_time: run.end_time,\n            error: run.error,\n            outputs: run.outputs,\n            events: run.events,\n            inputs: run.inputs,\n            trace_id: run.trace_id,\n            dotted_order: run.dotted_order,\n            parent_run_id: run.parent_run_id\n        };\n        await this.client.updateRun(run.id, runUpdate);\n    }\n    getRun(id) {\n        return this.runMap.get(id);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdHJhY2Vycy90cmFjZXJfbGFuZ2NoYWluLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBbUM7QUFDNkM7QUFDekM7QUFDaEMsTUFBTUksd0JBQXdCRCxnREFBVUE7SUFDM0NFLFlBQVlDLFNBQVMsQ0FBQyxDQUFDLENBQUU7UUFDckIsS0FBSyxDQUFDQTtRQUNOQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVE7WUFDaENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87UUFDWDtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGVBQWU7WUFDdkNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGFBQWE7WUFDckNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVU7WUFDbENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLE1BQU0sRUFBRUMsU0FBUyxFQUFFQyxXQUFXLEVBQUVDLE1BQU0sRUFBRSxHQUFHVDtRQUMzQyxJQUFJLENBQUNRLFdBQVcsR0FDWkEsZUFDSWIscUVBQXNCQSxDQUFDLHdCQUN2QkEscUVBQXNCQSxDQUFDO1FBQy9CLElBQUksQ0FBQ1ksU0FBUyxHQUFHQTtRQUNqQixJQUFJLENBQUNFLE1BQU0sR0FBR0EsVUFBVSxJQUFJZiw2Q0FBTUEsQ0FBQyxDQUFDO0lBQ3hDO0lBQ0EsTUFBTWdCLGlCQUFpQkMsR0FBRyxFQUFFQyxhQUFhQyxTQUFTLEVBQUU7UUFDaEQsT0FBTztZQUNILEdBQUdGLEdBQUc7WUFDTkcsT0FBTztnQkFDSCxHQUFHSCxJQUFJRyxLQUFLO2dCQUNaQyxTQUFTLE1BQU1uQixvRUFBcUJBO1lBQ3hDO1lBQ0FvQixZQUFZSDtZQUNaSSxjQUFjLElBQUksQ0FBQ1QsV0FBVztZQUM5QlUsc0JBQXNCUCxJQUFJUSxhQUFhLEdBQUdOLFlBQVlEO1FBQzFEO0lBQ0o7SUFDQSxNQUFNUSxXQUFXQyxJQUFJLEVBQUUsQ0FBRTtJQUN6QixNQUFNQyxZQUFZWCxHQUFHLEVBQUU7UUFDbkIsTUFBTVksZUFBZSxNQUFNLElBQUksQ0FBQ2IsZ0JBQWdCLENBQUNDLEtBQUssSUFBSSxDQUFDSixTQUFTO1FBQ3BFLE1BQU0sSUFBSSxDQUFDRSxNQUFNLENBQUNlLFNBQVMsQ0FBQ0Q7SUFDaEM7SUFDQSxNQUFNRSxZQUFZZCxHQUFHLEVBQUU7UUFDbkIsTUFBTWUsWUFBWTtZQUNkQyxVQUFVaEIsSUFBSWdCLFFBQVE7WUFDdEJDLE9BQU9qQixJQUFJaUIsS0FBSztZQUNoQkMsU0FBU2xCLElBQUlrQixPQUFPO1lBQ3BCQyxRQUFRbkIsSUFBSW1CLE1BQU07WUFDbEJDLFFBQVFwQixJQUFJb0IsTUFBTTtZQUNsQkMsVUFBVXJCLElBQUlxQixRQUFRO1lBQ3RCQyxjQUFjdEIsSUFBSXNCLFlBQVk7WUFDOUJkLGVBQWVSLElBQUlRLGFBQWE7UUFDcEM7UUFDQSxNQUFNLElBQUksQ0FBQ1YsTUFBTSxDQUFDeUIsU0FBUyxDQUFDdkIsSUFBSXdCLEVBQUUsRUFBRVQ7SUFDeEM7SUFDQVUsT0FBT0QsRUFBRSxFQUFFO1FBQ1AsT0FBTyxJQUFJLENBQUNFLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDSDtJQUMzQjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdHJhY2Vycy90cmFjZXJfbGFuZ2NoYWluLmpzPzRkODYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2xpZW50IH0gZnJvbSBcImxhbmdzbWl0aFwiO1xuaW1wb3J0IHsgZ2V0RW52aXJvbm1lbnRWYXJpYWJsZSwgZ2V0UnVudGltZUVudmlyb25tZW50IH0gZnJvbSBcIi4uL3V0aWxzL2Vudi5qc1wiO1xuaW1wb3J0IHsgQmFzZVRyYWNlciB9IGZyb20gXCIuL2Jhc2UuanNcIjtcbmV4cG9ydCBjbGFzcyBMYW5nQ2hhaW5UcmFjZXIgZXh0ZW5kcyBCYXNlVHJhY2VyIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMgPSB7fSkge1xuICAgICAgICBzdXBlcihmaWVsZHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBcImxhbmdjaGFpbl90cmFjZXJcIlxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicHJvamVjdE5hbWVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZXhhbXBsZUlkXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNsaWVudFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB7IGV4YW1wbGVJZCwgcHJvamVjdE5hbWUsIGNsaWVudCB9ID0gZmllbGRzO1xuICAgICAgICB0aGlzLnByb2plY3ROYW1lID1cbiAgICAgICAgICAgIHByb2plY3ROYW1lID8/XG4gICAgICAgICAgICAgICAgZ2V0RW52aXJvbm1lbnRWYXJpYWJsZShcIkxBTkdDSEFJTl9QUk9KRUNUXCIpID8/XG4gICAgICAgICAgICAgICAgZ2V0RW52aXJvbm1lbnRWYXJpYWJsZShcIkxBTkdDSEFJTl9TRVNTSU9OXCIpO1xuICAgICAgICB0aGlzLmV4YW1wbGVJZCA9IGV4YW1wbGVJZDtcbiAgICAgICAgdGhpcy5jbGllbnQgPSBjbGllbnQgPz8gbmV3IENsaWVudCh7fSk7XG4gICAgfVxuICAgIGFzeW5jIF9jb252ZXJ0VG9DcmVhdGUocnVuLCBleGFtcGxlX2lkID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5ydW4sXG4gICAgICAgICAgICBleHRyYToge1xuICAgICAgICAgICAgICAgIC4uLnJ1bi5leHRyYSxcbiAgICAgICAgICAgICAgICBydW50aW1lOiBhd2FpdCBnZXRSdW50aW1lRW52aXJvbm1lbnQoKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGlsZF9ydW5zOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBzZXNzaW9uX25hbWU6IHRoaXMucHJvamVjdE5hbWUsXG4gICAgICAgICAgICByZWZlcmVuY2VfZXhhbXBsZV9pZDogcnVuLnBhcmVudF9ydW5faWQgPyB1bmRlZmluZWQgOiBleGFtcGxlX2lkLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBhc3luYyBwZXJzaXN0UnVuKF9ydW4pIHsgfVxuICAgIGFzeW5jIG9uUnVuQ3JlYXRlKHJ1bikge1xuICAgICAgICBjb25zdCBwZXJzaXN0ZWRSdW4gPSBhd2FpdCB0aGlzLl9jb252ZXJ0VG9DcmVhdGUocnVuLCB0aGlzLmV4YW1wbGVJZCk7XG4gICAgICAgIGF3YWl0IHRoaXMuY2xpZW50LmNyZWF0ZVJ1bihwZXJzaXN0ZWRSdW4pO1xuICAgIH1cbiAgICBhc3luYyBvblJ1blVwZGF0ZShydW4pIHtcbiAgICAgICAgY29uc3QgcnVuVXBkYXRlID0ge1xuICAgICAgICAgICAgZW5kX3RpbWU6IHJ1bi5lbmRfdGltZSxcbiAgICAgICAgICAgIGVycm9yOiBydW4uZXJyb3IsXG4gICAgICAgICAgICBvdXRwdXRzOiBydW4ub3V0cHV0cyxcbiAgICAgICAgICAgIGV2ZW50czogcnVuLmV2ZW50cyxcbiAgICAgICAgICAgIGlucHV0czogcnVuLmlucHV0cyxcbiAgICAgICAgICAgIHRyYWNlX2lkOiBydW4udHJhY2VfaWQsXG4gICAgICAgICAgICBkb3R0ZWRfb3JkZXI6IHJ1bi5kb3R0ZWRfb3JkZXIsXG4gICAgICAgICAgICBwYXJlbnRfcnVuX2lkOiBydW4ucGFyZW50X3J1bl9pZCxcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgdGhpcy5jbGllbnQudXBkYXRlUnVuKHJ1bi5pZCwgcnVuVXBkYXRlKTtcbiAgICB9XG4gICAgZ2V0UnVuKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJ1bk1hcC5nZXQoaWQpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJDbGllbnQiLCJnZXRFbnZpcm9ubWVudFZhcmlhYmxlIiwiZ2V0UnVudGltZUVudmlyb25tZW50IiwiQmFzZVRyYWNlciIsIkxhbmdDaGFpblRyYWNlciIsImNvbnN0cnVjdG9yIiwiZmllbGRzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsImV4YW1wbGVJZCIsInByb2plY3ROYW1lIiwiY2xpZW50IiwiX2NvbnZlcnRUb0NyZWF0ZSIsInJ1biIsImV4YW1wbGVfaWQiLCJ1bmRlZmluZWQiLCJleHRyYSIsInJ1bnRpbWUiLCJjaGlsZF9ydW5zIiwic2Vzc2lvbl9uYW1lIiwicmVmZXJlbmNlX2V4YW1wbGVfaWQiLCJwYXJlbnRfcnVuX2lkIiwicGVyc2lzdFJ1biIsIl9ydW4iLCJvblJ1bkNyZWF0ZSIsInBlcnNpc3RlZFJ1biIsImNyZWF0ZVJ1biIsIm9uUnVuVXBkYXRlIiwicnVuVXBkYXRlIiwiZW5kX3RpbWUiLCJlcnJvciIsIm91dHB1dHMiLCJldmVudHMiLCJpbnB1dHMiLCJ0cmFjZV9pZCIsImRvdHRlZF9vcmRlciIsInVwZGF0ZVJ1biIsImlkIiwiZ2V0UnVuIiwicnVuTWFwIiwiZ2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/tracer_langchain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/tracer_langchain_v1.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/tracer_langchain_v1.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LangChainTracerV1: () => (/* binding */ LangChainTracerV1)\n/* harmony export */ });\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _utils_env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/env.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.js\");\n\n\n\n/** @deprecated Use LangChainTracer instead. */ class LangChainTracerV1 extends _base_js__WEBPACK_IMPORTED_MODULE_2__.BaseTracer {\n    constructor(){\n        super();\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"langchain_tracer\"\n        });\n        Object.defineProperty(this, \"endpoint\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_ENDPOINT\") || \"http://localhost:1984\"\n        });\n        Object.defineProperty(this, \"headers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        Object.defineProperty(this, \"session\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const apiKey = (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_API_KEY\");\n        if (apiKey) {\n            this.headers[\"x-api-key\"] = apiKey;\n        }\n    }\n    async newSession(sessionName) {\n        const sessionCreate = {\n            start_time: Date.now(),\n            name: sessionName\n        };\n        const session = await this.persistSession(sessionCreate);\n        this.session = session;\n        return session;\n    }\n    async loadSession(sessionName) {\n        const endpoint = `${this.endpoint}/sessions?name=${sessionName}`;\n        return this._handleSessionResponse(endpoint);\n    }\n    async loadDefaultSession() {\n        const endpoint = `${this.endpoint}/sessions?name=default`;\n        return this._handleSessionResponse(endpoint);\n    }\n    async convertV2RunToRun(run) {\n        const session = this.session ?? await this.loadDefaultSession();\n        const serialized = run.serialized;\n        let runResult;\n        if (run.run_type === \"llm\") {\n            const prompts = run.inputs.prompts ? run.inputs.prompts : run.inputs.messages.map((x)=>(0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.getBufferString)(x));\n            const llmRun = {\n                uuid: run.id,\n                start_time: run.start_time,\n                end_time: run.end_time,\n                execution_order: run.execution_order,\n                child_execution_order: run.child_execution_order,\n                serialized,\n                type: run.run_type,\n                session_id: session.id,\n                prompts,\n                response: run.outputs\n            };\n            runResult = llmRun;\n        } else if (run.run_type === \"chain\") {\n            const child_runs = await Promise.all(run.child_runs.map((child_run)=>this.convertV2RunToRun(child_run)));\n            const chainRun = {\n                uuid: run.id,\n                start_time: run.start_time,\n                end_time: run.end_time,\n                execution_order: run.execution_order,\n                child_execution_order: run.child_execution_order,\n                serialized,\n                type: run.run_type,\n                session_id: session.id,\n                inputs: run.inputs,\n                outputs: run.outputs,\n                child_llm_runs: child_runs.filter((child_run)=>child_run.type === \"llm\"),\n                child_chain_runs: child_runs.filter((child_run)=>child_run.type === \"chain\"),\n                child_tool_runs: child_runs.filter((child_run)=>child_run.type === \"tool\")\n            };\n            runResult = chainRun;\n        } else if (run.run_type === \"tool\") {\n            const child_runs = await Promise.all(run.child_runs.map((child_run)=>this.convertV2RunToRun(child_run)));\n            const toolRun = {\n                uuid: run.id,\n                start_time: run.start_time,\n                end_time: run.end_time,\n                execution_order: run.execution_order,\n                child_execution_order: run.child_execution_order,\n                serialized,\n                type: run.run_type,\n                session_id: session.id,\n                tool_input: run.inputs.input,\n                output: run.outputs?.output,\n                action: JSON.stringify(serialized),\n                child_llm_runs: child_runs.filter((child_run)=>child_run.type === \"llm\"),\n                child_chain_runs: child_runs.filter((child_run)=>child_run.type === \"chain\"),\n                child_tool_runs: child_runs.filter((child_run)=>child_run.type === \"tool\")\n            };\n            runResult = toolRun;\n        } else {\n            throw new Error(`Unknown run type: ${run.run_type}`);\n        }\n        return runResult;\n    }\n    async persistRun(run) {\n        let endpoint;\n        let v1Run;\n        if (run.run_type !== undefined) {\n            v1Run = await this.convertV2RunToRun(run);\n        } else {\n            v1Run = run;\n        }\n        if (v1Run.type === \"llm\") {\n            endpoint = `${this.endpoint}/llm-runs`;\n        } else if (v1Run.type === \"chain\") {\n            endpoint = `${this.endpoint}/chain-runs`;\n        } else {\n            endpoint = `${this.endpoint}/tool-runs`;\n        }\n        const response = await fetch(endpoint, {\n            method: \"POST\",\n            headers: this.headers,\n            body: JSON.stringify(v1Run)\n        });\n        if (!response.ok) {\n            console.error(`Failed to persist run: ${response.status} ${response.statusText}`);\n        }\n    }\n    async persistSession(sessionCreate) {\n        const endpoint = `${this.endpoint}/sessions`;\n        const response = await fetch(endpoint, {\n            method: \"POST\",\n            headers: this.headers,\n            body: JSON.stringify(sessionCreate)\n        });\n        if (!response.ok) {\n            console.error(`Failed to persist session: ${response.status} ${response.statusText}, using default session.`);\n            return {\n                id: 1,\n                ...sessionCreate\n            };\n        }\n        return {\n            id: (await response.json()).id,\n            ...sessionCreate\n        };\n    }\n    async _handleSessionResponse(endpoint) {\n        const response = await fetch(endpoint, {\n            method: \"GET\",\n            headers: this.headers\n        });\n        let tracerSession;\n        if (!response.ok) {\n            console.error(`Failed to load session: ${response.status} ${response.statusText}`);\n            tracerSession = {\n                id: 1,\n                start_time: Date.now()\n            };\n            this.session = tracerSession;\n            return tracerSession;\n        }\n        const resp = await response.json();\n        if (resp.length === 0) {\n            tracerSession = {\n                id: 1,\n                start_time: Date.now()\n            };\n            this.session = tracerSession;\n            return tracerSession;\n        }\n        [tracerSession] = resp;\n        this.session = tracerSession;\n        return tracerSession;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdHJhY2Vycy90cmFjZXJfbGFuZ2NoYWluX3YxLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBdUQ7QUFDRTtBQUNsQjtBQUN2Qyw2Q0FBNkMsR0FDdEMsTUFBTUcsMEJBQTBCRCxnREFBVUE7SUFDN0NFLGFBQWM7UUFDVixLQUFLO1FBQ0xDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUTtZQUNoQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsWUFBWTtZQUNwQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBT1QscUVBQXNCQSxDQUFDLHlCQUF5QjtRQUMzRDtRQUNBSSxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFdBQVc7WUFDbkNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87Z0JBQ0gsZ0JBQWdCO1lBQ3BCO1FBQ0o7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxXQUFXO1lBQ25DQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxNQUFNQyxTQUFTVixxRUFBc0JBLENBQUM7UUFDdEMsSUFBSVUsUUFBUTtZQUNSLElBQUksQ0FBQ0MsT0FBTyxDQUFDLFlBQVksR0FBR0Q7UUFDaEM7SUFDSjtJQUNBLE1BQU1FLFdBQVdDLFdBQVcsRUFBRTtRQUMxQixNQUFNQyxnQkFBZ0I7WUFDbEJDLFlBQVlDLEtBQUtDLEdBQUc7WUFDcEJDLE1BQU1MO1FBQ1Y7UUFDQSxNQUFNTSxVQUFVLE1BQU0sSUFBSSxDQUFDQyxjQUFjLENBQUNOO1FBQzFDLElBQUksQ0FBQ0ssT0FBTyxHQUFHQTtRQUNmLE9BQU9BO0lBQ1g7SUFDQSxNQUFNRSxZQUFZUixXQUFXLEVBQUU7UUFDM0IsTUFBTVMsV0FBVyxDQUFDLEVBQUUsSUFBSSxDQUFDQSxRQUFRLENBQUMsZUFBZSxFQUFFVCxZQUFZLENBQUM7UUFDaEUsT0FBTyxJQUFJLENBQUNVLHNCQUFzQixDQUFDRDtJQUN2QztJQUNBLE1BQU1FLHFCQUFxQjtRQUN2QixNQUFNRixXQUFXLENBQUMsRUFBRSxJQUFJLENBQUNBLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQztRQUN6RCxPQUFPLElBQUksQ0FBQ0Msc0JBQXNCLENBQUNEO0lBQ3ZDO0lBQ0EsTUFBTUcsa0JBQWtCQyxHQUFHLEVBQUU7UUFDekIsTUFBTVAsVUFBVSxJQUFJLENBQUNBLE9BQU8sSUFBSyxNQUFNLElBQUksQ0FBQ0ssa0JBQWtCO1FBQzlELE1BQU1HLGFBQWFELElBQUlDLFVBQVU7UUFDakMsSUFBSUM7UUFDSixJQUFJRixJQUFJRyxRQUFRLEtBQUssT0FBTztZQUN4QixNQUFNQyxVQUFVSixJQUFJSyxNQUFNLENBQUNELE9BQU8sR0FDNUJKLElBQUlLLE1BQU0sQ0FBQ0QsT0FBTyxHQUNsQkosSUFBSUssTUFBTSxDQUFDQyxRQUFRLENBQUNDLEdBQUcsQ0FBQyxDQUFDQyxJQUFNbkMsbUVBQWVBLENBQUNtQztZQUNyRCxNQUFNQyxTQUFTO2dCQUNYQyxNQUFNVixJQUFJVyxFQUFFO2dCQUNadEIsWUFBWVcsSUFBSVgsVUFBVTtnQkFDMUJ1QixVQUFVWixJQUFJWSxRQUFRO2dCQUN0QkMsaUJBQWlCYixJQUFJYSxlQUFlO2dCQUNwQ0MsdUJBQXVCZCxJQUFJYyxxQkFBcUI7Z0JBQ2hEYjtnQkFDQWMsTUFBTWYsSUFBSUcsUUFBUTtnQkFDbEJhLFlBQVl2QixRQUFRa0IsRUFBRTtnQkFDdEJQO2dCQUNBYSxVQUFVakIsSUFBSWtCLE9BQU87WUFDekI7WUFDQWhCLFlBQVlPO1FBQ2hCLE9BQ0ssSUFBSVQsSUFBSUcsUUFBUSxLQUFLLFNBQVM7WUFDL0IsTUFBTWdCLGFBQWEsTUFBTUMsUUFBUUMsR0FBRyxDQUFDckIsSUFBSW1CLFVBQVUsQ0FBQ1osR0FBRyxDQUFDLENBQUNlLFlBQWMsSUFBSSxDQUFDdkIsaUJBQWlCLENBQUN1QjtZQUM5RixNQUFNQyxXQUFXO2dCQUNiYixNQUFNVixJQUFJVyxFQUFFO2dCQUNadEIsWUFBWVcsSUFBSVgsVUFBVTtnQkFDMUJ1QixVQUFVWixJQUFJWSxRQUFRO2dCQUN0QkMsaUJBQWlCYixJQUFJYSxlQUFlO2dCQUNwQ0MsdUJBQXVCZCxJQUFJYyxxQkFBcUI7Z0JBQ2hEYjtnQkFDQWMsTUFBTWYsSUFBSUcsUUFBUTtnQkFDbEJhLFlBQVl2QixRQUFRa0IsRUFBRTtnQkFDdEJOLFFBQVFMLElBQUlLLE1BQU07Z0JBQ2xCYSxTQUFTbEIsSUFBSWtCLE9BQU87Z0JBQ3BCTSxnQkFBZ0JMLFdBQVdNLE1BQU0sQ0FBQyxDQUFDSCxZQUFjQSxVQUFVUCxJQUFJLEtBQUs7Z0JBQ3BFVyxrQkFBa0JQLFdBQVdNLE1BQU0sQ0FBQyxDQUFDSCxZQUFjQSxVQUFVUCxJQUFJLEtBQUs7Z0JBQ3RFWSxpQkFBaUJSLFdBQVdNLE1BQU0sQ0FBQyxDQUFDSCxZQUFjQSxVQUFVUCxJQUFJLEtBQUs7WUFDekU7WUFDQWIsWUFBWXFCO1FBQ2hCLE9BQ0ssSUFBSXZCLElBQUlHLFFBQVEsS0FBSyxRQUFRO1lBQzlCLE1BQU1nQixhQUFhLE1BQU1DLFFBQVFDLEdBQUcsQ0FBQ3JCLElBQUltQixVQUFVLENBQUNaLEdBQUcsQ0FBQyxDQUFDZSxZQUFjLElBQUksQ0FBQ3ZCLGlCQUFpQixDQUFDdUI7WUFDOUYsTUFBTU0sVUFBVTtnQkFDWmxCLE1BQU1WLElBQUlXLEVBQUU7Z0JBQ1p0QixZQUFZVyxJQUFJWCxVQUFVO2dCQUMxQnVCLFVBQVVaLElBQUlZLFFBQVE7Z0JBQ3RCQyxpQkFBaUJiLElBQUlhLGVBQWU7Z0JBQ3BDQyx1QkFBdUJkLElBQUljLHFCQUFxQjtnQkFDaERiO2dCQUNBYyxNQUFNZixJQUFJRyxRQUFRO2dCQUNsQmEsWUFBWXZCLFFBQVFrQixFQUFFO2dCQUN0QmtCLFlBQVk3QixJQUFJSyxNQUFNLENBQUN5QixLQUFLO2dCQUM1QkMsUUFBUS9CLElBQUlrQixPQUFPLEVBQUVhO2dCQUNyQkMsUUFBUUMsS0FBS0MsU0FBUyxDQUFDakM7Z0JBQ3ZCdUIsZ0JBQWdCTCxXQUFXTSxNQUFNLENBQUMsQ0FBQ0gsWUFBY0EsVUFBVVAsSUFBSSxLQUFLO2dCQUNwRVcsa0JBQWtCUCxXQUFXTSxNQUFNLENBQUMsQ0FBQ0gsWUFBY0EsVUFBVVAsSUFBSSxLQUFLO2dCQUN0RVksaUJBQWlCUixXQUFXTSxNQUFNLENBQUMsQ0FBQ0gsWUFBY0EsVUFBVVAsSUFBSSxLQUFLO1lBQ3pFO1lBQ0FiLFlBQVkwQjtRQUNoQixPQUNLO1lBQ0QsTUFBTSxJQUFJTyxNQUFNLENBQUMsa0JBQWtCLEVBQUVuQyxJQUFJRyxRQUFRLENBQUMsQ0FBQztRQUN2RDtRQUNBLE9BQU9EO0lBQ1g7SUFDQSxNQUFNa0MsV0FBV3BDLEdBQUcsRUFBRTtRQUNsQixJQUFJSjtRQUNKLElBQUl5QztRQUNKLElBQUlyQyxJQUFJRyxRQUFRLEtBQUttQyxXQUFXO1lBQzVCRCxRQUFRLE1BQU0sSUFBSSxDQUFDdEMsaUJBQWlCLENBQUNDO1FBQ3pDLE9BQ0s7WUFDRHFDLFFBQVFyQztRQUNaO1FBQ0EsSUFBSXFDLE1BQU10QixJQUFJLEtBQUssT0FBTztZQUN0Qm5CLFdBQVcsQ0FBQyxFQUFFLElBQUksQ0FBQ0EsUUFBUSxDQUFDLFNBQVMsQ0FBQztRQUMxQyxPQUNLLElBQUl5QyxNQUFNdEIsSUFBSSxLQUFLLFNBQVM7WUFDN0JuQixXQUFXLENBQUMsRUFBRSxJQUFJLENBQUNBLFFBQVEsQ0FBQyxXQUFXLENBQUM7UUFDNUMsT0FDSztZQUNEQSxXQUFXLENBQUMsRUFBRSxJQUFJLENBQUNBLFFBQVEsQ0FBQyxVQUFVLENBQUM7UUFDM0M7UUFDQSxNQUFNcUIsV0FBVyxNQUFNc0IsTUFBTTNDLFVBQVU7WUFDbkM0QyxRQUFRO1lBQ1J2RCxTQUFTLElBQUksQ0FBQ0EsT0FBTztZQUNyQndELE1BQU1SLEtBQUtDLFNBQVMsQ0FBQ0c7UUFDekI7UUFDQSxJQUFJLENBQUNwQixTQUFTeUIsRUFBRSxFQUFFO1lBQ2RDLFFBQVFDLEtBQUssQ0FBQyxDQUFDLHVCQUF1QixFQUFFM0IsU0FBUzRCLE1BQU0sQ0FBQyxDQUFDLEVBQUU1QixTQUFTNkIsVUFBVSxDQUFDLENBQUM7UUFDcEY7SUFDSjtJQUNBLE1BQU1wRCxlQUFlTixhQUFhLEVBQUU7UUFDaEMsTUFBTVEsV0FBVyxDQUFDLEVBQUUsSUFBSSxDQUFDQSxRQUFRLENBQUMsU0FBUyxDQUFDO1FBQzVDLE1BQU1xQixXQUFXLE1BQU1zQixNQUFNM0MsVUFBVTtZQUNuQzRDLFFBQVE7WUFDUnZELFNBQVMsSUFBSSxDQUFDQSxPQUFPO1lBQ3JCd0QsTUFBTVIsS0FBS0MsU0FBUyxDQUFDOUM7UUFDekI7UUFDQSxJQUFJLENBQUM2QixTQUFTeUIsRUFBRSxFQUFFO1lBQ2RDLFFBQVFDLEtBQUssQ0FBQyxDQUFDLDJCQUEyQixFQUFFM0IsU0FBUzRCLE1BQU0sQ0FBQyxDQUFDLEVBQUU1QixTQUFTNkIsVUFBVSxDQUFDLHdCQUF3QixDQUFDO1lBQzVHLE9BQU87Z0JBQ0huQyxJQUFJO2dCQUNKLEdBQUd2QixhQUFhO1lBQ3BCO1FBQ0o7UUFDQSxPQUFPO1lBQ0h1QixJQUFJLENBQUMsTUFBTU0sU0FBUzhCLElBQUksRUFBQyxFQUFHcEMsRUFBRTtZQUM5QixHQUFHdkIsYUFBYTtRQUNwQjtJQUNKO0lBQ0EsTUFBTVMsdUJBQXVCRCxRQUFRLEVBQUU7UUFDbkMsTUFBTXFCLFdBQVcsTUFBTXNCLE1BQU0zQyxVQUFVO1lBQ25DNEMsUUFBUTtZQUNSdkQsU0FBUyxJQUFJLENBQUNBLE9BQU87UUFDekI7UUFDQSxJQUFJK0Q7UUFDSixJQUFJLENBQUMvQixTQUFTeUIsRUFBRSxFQUFFO1lBQ2RDLFFBQVFDLEtBQUssQ0FBQyxDQUFDLHdCQUF3QixFQUFFM0IsU0FBUzRCLE1BQU0sQ0FBQyxDQUFDLEVBQUU1QixTQUFTNkIsVUFBVSxDQUFDLENBQUM7WUFDakZFLGdCQUFnQjtnQkFDWnJDLElBQUk7Z0JBQ0p0QixZQUFZQyxLQUFLQyxHQUFHO1lBQ3hCO1lBQ0EsSUFBSSxDQUFDRSxPQUFPLEdBQUd1RDtZQUNmLE9BQU9BO1FBQ1g7UUFDQSxNQUFNQyxPQUFRLE1BQU1oQyxTQUFTOEIsSUFBSTtRQUNqQyxJQUFJRSxLQUFLQyxNQUFNLEtBQUssR0FBRztZQUNuQkYsZ0JBQWdCO2dCQUNackMsSUFBSTtnQkFDSnRCLFlBQVlDLEtBQUtDLEdBQUc7WUFDeEI7WUFDQSxJQUFJLENBQUNFLE9BQU8sR0FBR3VEO1lBQ2YsT0FBT0E7UUFDWDtRQUNBLENBQUNBLGNBQWMsR0FBR0M7UUFDbEIsSUFBSSxDQUFDeEQsT0FBTyxHQUFHdUQ7UUFDZixPQUFPQTtJQUNYO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC90cmFjZXJzL3RyYWNlcl9sYW5nY2hhaW5fdjEuanM/ZDQzNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRCdWZmZXJTdHJpbmcgfSBmcm9tIFwiLi4vbWVzc2FnZXMvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldEVudmlyb25tZW50VmFyaWFibGUgfSBmcm9tIFwiLi4vdXRpbHMvZW52LmpzXCI7XG5pbXBvcnQgeyBCYXNlVHJhY2VyIH0gZnJvbSBcIi4vYmFzZS5qc1wiO1xuLyoqIEBkZXByZWNhdGVkIFVzZSBMYW5nQ2hhaW5UcmFjZXIgaW5zdGVhZC4gKi9cbmV4cG9ydCBjbGFzcyBMYW5nQ2hhaW5UcmFjZXJWMSBleHRlbmRzIEJhc2VUcmFjZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBcImxhbmdjaGFpbl90cmFjZXJcIlxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZW5kcG9pbnRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IGdldEVudmlyb25tZW50VmFyaWFibGUoXCJMQU5HQ0hBSU5fRU5EUE9JTlRcIikgfHwgXCJodHRwOi8vbG9jYWxob3N0OjE5ODRcIlxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiaGVhZGVyc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwic2Vzc2lvblwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBhcGlLZXkgPSBnZXRFbnZpcm9ubWVudFZhcmlhYmxlKFwiTEFOR0NIQUlOX0FQSV9LRVlcIik7XG4gICAgICAgIGlmIChhcGlLZXkpIHtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyc1tcIngtYXBpLWtleVwiXSA9IGFwaUtleTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBuZXdTZXNzaW9uKHNlc3Npb25OYW1lKSB7XG4gICAgICAgIGNvbnN0IHNlc3Npb25DcmVhdGUgPSB7XG4gICAgICAgICAgICBzdGFydF90aW1lOiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgbmFtZTogc2Vzc2lvbk5hbWUsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHNlc3Npb24gPSBhd2FpdCB0aGlzLnBlcnNpc3RTZXNzaW9uKHNlc3Npb25DcmVhdGUpO1xuICAgICAgICB0aGlzLnNlc3Npb24gPSBzZXNzaW9uO1xuICAgICAgICByZXR1cm4gc2Vzc2lvbjtcbiAgICB9XG4gICAgYXN5bmMgbG9hZFNlc3Npb24oc2Vzc2lvbk5hbWUpIHtcbiAgICAgICAgY29uc3QgZW5kcG9pbnQgPSBgJHt0aGlzLmVuZHBvaW50fS9zZXNzaW9ucz9uYW1lPSR7c2Vzc2lvbk5hbWV9YDtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhbmRsZVNlc3Npb25SZXNwb25zZShlbmRwb2ludCk7XG4gICAgfVxuICAgIGFzeW5jIGxvYWREZWZhdWx0U2Vzc2lvbigpIHtcbiAgICAgICAgY29uc3QgZW5kcG9pbnQgPSBgJHt0aGlzLmVuZHBvaW50fS9zZXNzaW9ucz9uYW1lPWRlZmF1bHRgO1xuICAgICAgICByZXR1cm4gdGhpcy5faGFuZGxlU2Vzc2lvblJlc3BvbnNlKGVuZHBvaW50KTtcbiAgICB9XG4gICAgYXN5bmMgY29udmVydFYyUnVuVG9SdW4ocnVuKSB7XG4gICAgICAgIGNvbnN0IHNlc3Npb24gPSB0aGlzLnNlc3Npb24gPz8gKGF3YWl0IHRoaXMubG9hZERlZmF1bHRTZXNzaW9uKCkpO1xuICAgICAgICBjb25zdCBzZXJpYWxpemVkID0gcnVuLnNlcmlhbGl6ZWQ7XG4gICAgICAgIGxldCBydW5SZXN1bHQ7XG4gICAgICAgIGlmIChydW4ucnVuX3R5cGUgPT09IFwibGxtXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHByb21wdHMgPSBydW4uaW5wdXRzLnByb21wdHNcbiAgICAgICAgICAgICAgICA/IHJ1bi5pbnB1dHMucHJvbXB0c1xuICAgICAgICAgICAgICAgIDogcnVuLmlucHV0cy5tZXNzYWdlcy5tYXAoKHgpID0+IGdldEJ1ZmZlclN0cmluZyh4KSk7XG4gICAgICAgICAgICBjb25zdCBsbG1SdW4gPSB7XG4gICAgICAgICAgICAgICAgdXVpZDogcnVuLmlkLFxuICAgICAgICAgICAgICAgIHN0YXJ0X3RpbWU6IHJ1bi5zdGFydF90aW1lLFxuICAgICAgICAgICAgICAgIGVuZF90aW1lOiBydW4uZW5kX3RpbWUsXG4gICAgICAgICAgICAgICAgZXhlY3V0aW9uX29yZGVyOiBydW4uZXhlY3V0aW9uX29yZGVyLFxuICAgICAgICAgICAgICAgIGNoaWxkX2V4ZWN1dGlvbl9vcmRlcjogcnVuLmNoaWxkX2V4ZWN1dGlvbl9vcmRlcixcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkLFxuICAgICAgICAgICAgICAgIHR5cGU6IHJ1bi5ydW5fdHlwZSxcbiAgICAgICAgICAgICAgICBzZXNzaW9uX2lkOiBzZXNzaW9uLmlkLFxuICAgICAgICAgICAgICAgIHByb21wdHMsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2U6IHJ1bi5vdXRwdXRzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJ1blJlc3VsdCA9IGxsbVJ1bjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChydW4ucnVuX3R5cGUgPT09IFwiY2hhaW5cIikge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRfcnVucyA9IGF3YWl0IFByb21pc2UuYWxsKHJ1bi5jaGlsZF9ydW5zLm1hcCgoY2hpbGRfcnVuKSA9PiB0aGlzLmNvbnZlcnRWMlJ1blRvUnVuKGNoaWxkX3J1bikpKTtcbiAgICAgICAgICAgIGNvbnN0IGNoYWluUnVuID0ge1xuICAgICAgICAgICAgICAgIHV1aWQ6IHJ1bi5pZCxcbiAgICAgICAgICAgICAgICBzdGFydF90aW1lOiBydW4uc3RhcnRfdGltZSxcbiAgICAgICAgICAgICAgICBlbmRfdGltZTogcnVuLmVuZF90aW1lLFxuICAgICAgICAgICAgICAgIGV4ZWN1dGlvbl9vcmRlcjogcnVuLmV4ZWN1dGlvbl9vcmRlcixcbiAgICAgICAgICAgICAgICBjaGlsZF9leGVjdXRpb25fb3JkZXI6IHJ1bi5jaGlsZF9leGVjdXRpb25fb3JkZXIsXG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZCxcbiAgICAgICAgICAgICAgICB0eXBlOiBydW4ucnVuX3R5cGUsXG4gICAgICAgICAgICAgICAgc2Vzc2lvbl9pZDogc2Vzc2lvbi5pZCxcbiAgICAgICAgICAgICAgICBpbnB1dHM6IHJ1bi5pbnB1dHMsXG4gICAgICAgICAgICAgICAgb3V0cHV0czogcnVuLm91dHB1dHMsXG4gICAgICAgICAgICAgICAgY2hpbGRfbGxtX3J1bnM6IGNoaWxkX3J1bnMuZmlsdGVyKChjaGlsZF9ydW4pID0+IGNoaWxkX3J1bi50eXBlID09PSBcImxsbVwiKSxcbiAgICAgICAgICAgICAgICBjaGlsZF9jaGFpbl9ydW5zOiBjaGlsZF9ydW5zLmZpbHRlcigoY2hpbGRfcnVuKSA9PiBjaGlsZF9ydW4udHlwZSA9PT0gXCJjaGFpblwiKSxcbiAgICAgICAgICAgICAgICBjaGlsZF90b29sX3J1bnM6IGNoaWxkX3J1bnMuZmlsdGVyKChjaGlsZF9ydW4pID0+IGNoaWxkX3J1bi50eXBlID09PSBcInRvb2xcIiksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcnVuUmVzdWx0ID0gY2hhaW5SdW47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocnVuLnJ1bl90eXBlID09PSBcInRvb2xcIikge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRfcnVucyA9IGF3YWl0IFByb21pc2UuYWxsKHJ1bi5jaGlsZF9ydW5zLm1hcCgoY2hpbGRfcnVuKSA9PiB0aGlzLmNvbnZlcnRWMlJ1blRvUnVuKGNoaWxkX3J1bikpKTtcbiAgICAgICAgICAgIGNvbnN0IHRvb2xSdW4gPSB7XG4gICAgICAgICAgICAgICAgdXVpZDogcnVuLmlkLFxuICAgICAgICAgICAgICAgIHN0YXJ0X3RpbWU6IHJ1bi5zdGFydF90aW1lLFxuICAgICAgICAgICAgICAgIGVuZF90aW1lOiBydW4uZW5kX3RpbWUsXG4gICAgICAgICAgICAgICAgZXhlY3V0aW9uX29yZGVyOiBydW4uZXhlY3V0aW9uX29yZGVyLFxuICAgICAgICAgICAgICAgIGNoaWxkX2V4ZWN1dGlvbl9vcmRlcjogcnVuLmNoaWxkX2V4ZWN1dGlvbl9vcmRlcixcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkLFxuICAgICAgICAgICAgICAgIHR5cGU6IHJ1bi5ydW5fdHlwZSxcbiAgICAgICAgICAgICAgICBzZXNzaW9uX2lkOiBzZXNzaW9uLmlkLFxuICAgICAgICAgICAgICAgIHRvb2xfaW5wdXQ6IHJ1bi5pbnB1dHMuaW5wdXQsXG4gICAgICAgICAgICAgICAgb3V0cHV0OiBydW4ub3V0cHV0cz8ub3V0cHV0LFxuICAgICAgICAgICAgICAgIGFjdGlvbjogSlNPTi5zdHJpbmdpZnkoc2VyaWFsaXplZCksXG4gICAgICAgICAgICAgICAgY2hpbGRfbGxtX3J1bnM6IGNoaWxkX3J1bnMuZmlsdGVyKChjaGlsZF9ydW4pID0+IGNoaWxkX3J1bi50eXBlID09PSBcImxsbVwiKSxcbiAgICAgICAgICAgICAgICBjaGlsZF9jaGFpbl9ydW5zOiBjaGlsZF9ydW5zLmZpbHRlcigoY2hpbGRfcnVuKSA9PiBjaGlsZF9ydW4udHlwZSA9PT0gXCJjaGFpblwiKSxcbiAgICAgICAgICAgICAgICBjaGlsZF90b29sX3J1bnM6IGNoaWxkX3J1bnMuZmlsdGVyKChjaGlsZF9ydW4pID0+IGNoaWxkX3J1bi50eXBlID09PSBcInRvb2xcIiksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcnVuUmVzdWx0ID0gdG9vbFJ1bjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBydW4gdHlwZTogJHtydW4ucnVuX3R5cGV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJ1blJlc3VsdDtcbiAgICB9XG4gICAgYXN5bmMgcGVyc2lzdFJ1bihydW4pIHtcbiAgICAgICAgbGV0IGVuZHBvaW50O1xuICAgICAgICBsZXQgdjFSdW47XG4gICAgICAgIGlmIChydW4ucnVuX3R5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdjFSdW4gPSBhd2FpdCB0aGlzLmNvbnZlcnRWMlJ1blRvUnVuKHJ1bik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2MVJ1biA9IHJ1bjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodjFSdW4udHlwZSA9PT0gXCJsbG1cIikge1xuICAgICAgICAgICAgZW5kcG9pbnQgPSBgJHt0aGlzLmVuZHBvaW50fS9sbG0tcnVuc2A7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodjFSdW4udHlwZSA9PT0gXCJjaGFpblwiKSB7XG4gICAgICAgICAgICBlbmRwb2ludCA9IGAke3RoaXMuZW5kcG9pbnR9L2NoYWluLXJ1bnNgO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZW5kcG9pbnQgPSBgJHt0aGlzLmVuZHBvaW50fS90b29sLXJ1bnNgO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goZW5kcG9pbnQsIHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh2MVJ1biksXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gcGVyc2lzdCBydW46ICR7cmVzcG9uc2Uuc3RhdHVzfSAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgcGVyc2lzdFNlc3Npb24oc2Vzc2lvbkNyZWF0ZSkge1xuICAgICAgICBjb25zdCBlbmRwb2ludCA9IGAke3RoaXMuZW5kcG9pbnR9L3Nlc3Npb25zYDtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChlbmRwb2ludCwge1xuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHNlc3Npb25DcmVhdGUpLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIHBlcnNpc3Qgc2Vzc2lvbjogJHtyZXNwb25zZS5zdGF0dXN9ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH0sIHVzaW5nIGRlZmF1bHQgc2Vzc2lvbi5gKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaWQ6IDEsXG4gICAgICAgICAgICAgICAgLi4uc2Vzc2lvbkNyZWF0ZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiAoYXdhaXQgcmVzcG9uc2UuanNvbigpKS5pZCxcbiAgICAgICAgICAgIC4uLnNlc3Npb25DcmVhdGUsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGFzeW5jIF9oYW5kbGVTZXNzaW9uUmVzcG9uc2UoZW5kcG9pbnQpIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChlbmRwb2ludCwge1xuICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHRyYWNlclNlc3Npb247XG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBsb2FkIHNlc3Npb246ICR7cmVzcG9uc2Uuc3RhdHVzfSAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgICAgICAgICB0cmFjZXJTZXNzaW9uID0ge1xuICAgICAgICAgICAgICAgIGlkOiAxLFxuICAgICAgICAgICAgICAgIHN0YXJ0X3RpbWU6IERhdGUubm93KCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5zZXNzaW9uID0gdHJhY2VyU2Vzc2lvbjtcbiAgICAgICAgICAgIHJldHVybiB0cmFjZXJTZXNzaW9uO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3AgPSAoYXdhaXQgcmVzcG9uc2UuanNvbigpKTtcbiAgICAgICAgaWYgKHJlc3AubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0cmFjZXJTZXNzaW9uID0ge1xuICAgICAgICAgICAgICAgIGlkOiAxLFxuICAgICAgICAgICAgICAgIHN0YXJ0X3RpbWU6IERhdGUubm93KCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5zZXNzaW9uID0gdHJhY2VyU2Vzc2lvbjtcbiAgICAgICAgICAgIHJldHVybiB0cmFjZXJTZXNzaW9uO1xuICAgICAgICB9XG4gICAgICAgIFt0cmFjZXJTZXNzaW9uXSA9IHJlc3A7XG4gICAgICAgIHRoaXMuc2Vzc2lvbiA9IHRyYWNlclNlc3Npb247XG4gICAgICAgIHJldHVybiB0cmFjZXJTZXNzaW9uO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJnZXRCdWZmZXJTdHJpbmciLCJnZXRFbnZpcm9ubWVudFZhcmlhYmxlIiwiQmFzZVRyYWNlciIsIkxhbmdDaGFpblRyYWNlclYxIiwiY29uc3RydWN0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwiYXBpS2V5IiwiaGVhZGVycyIsIm5ld1Nlc3Npb24iLCJzZXNzaW9uTmFtZSIsInNlc3Npb25DcmVhdGUiLCJzdGFydF90aW1lIiwiRGF0ZSIsIm5vdyIsIm5hbWUiLCJzZXNzaW9uIiwicGVyc2lzdFNlc3Npb24iLCJsb2FkU2Vzc2lvbiIsImVuZHBvaW50IiwiX2hhbmRsZVNlc3Npb25SZXNwb25zZSIsImxvYWREZWZhdWx0U2Vzc2lvbiIsImNvbnZlcnRWMlJ1blRvUnVuIiwicnVuIiwic2VyaWFsaXplZCIsInJ1blJlc3VsdCIsInJ1bl90eXBlIiwicHJvbXB0cyIsImlucHV0cyIsIm1lc3NhZ2VzIiwibWFwIiwieCIsImxsbVJ1biIsInV1aWQiLCJpZCIsImVuZF90aW1lIiwiZXhlY3V0aW9uX29yZGVyIiwiY2hpbGRfZXhlY3V0aW9uX29yZGVyIiwidHlwZSIsInNlc3Npb25faWQiLCJyZXNwb25zZSIsIm91dHB1dHMiLCJjaGlsZF9ydW5zIiwiUHJvbWlzZSIsImFsbCIsImNoaWxkX3J1biIsImNoYWluUnVuIiwiY2hpbGRfbGxtX3J1bnMiLCJmaWx0ZXIiLCJjaGlsZF9jaGFpbl9ydW5zIiwiY2hpbGRfdG9vbF9ydW5zIiwidG9vbFJ1biIsInRvb2xfaW5wdXQiLCJpbnB1dCIsIm91dHB1dCIsImFjdGlvbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJFcnJvciIsInBlcnNpc3RSdW4iLCJ2MVJ1biIsInVuZGVmaW5lZCIsImZldGNoIiwibWV0aG9kIiwiYm9keSIsIm9rIiwiY29uc29sZSIsImVycm9yIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImpzb24iLCJ0cmFjZXJTZXNzaW9uIiwicmVzcCIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/tracer_langchain_v1.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/async_caller.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncCaller: () => (/* binding */ AsyncCaller)\n/* harmony export */ });\n/* harmony import */ var p_retry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-retry */ \"(rsc)/./node_modules/p-retry/index.js\");\n/* harmony import */ var p_queue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! p-queue */ \"(rsc)/./node_modules/p-queue/dist/index.js\");\n\n\nconst STATUS_NO_RETRY = [\n    400,\n    401,\n    402,\n    403,\n    404,\n    405,\n    406,\n    407,\n    409\n];\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst defaultFailedAttemptHandler = (error)=>{\n    if (error.message.startsWith(\"Cancel\") || error.message.startsWith(\"AbortError\") || error.name === \"AbortError\") {\n        throw error;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (error?.code === \"ECONNABORTED\") {\n        throw error;\n    }\n    const status = // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    error?.response?.status ?? error?.status;\n    if (status && STATUS_NO_RETRY.includes(+status)) {\n        throw error;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (error?.error?.code === \"insufficient_quota\") {\n        const err = new Error(error?.message);\n        err.name = \"InsufficientQuotaError\";\n        throw err;\n    }\n};\n/**\n * A class that can be used to make async calls with concurrency and retry logic.\n *\n * This is useful for making calls to any kind of \"expensive\" external resource,\n * be it because it's rate-limited, subject to network issues, etc.\n *\n * Concurrent calls are limited by the `maxConcurrency` parameter, which defaults\n * to `Infinity`. This means that by default, all calls will be made in parallel.\n *\n * Retries are limited by the `maxRetries` parameter, which defaults to 6. This\n * means that by default, each call will be retried up to 6 times, with an\n * exponential backoff between each attempt.\n */ class AsyncCaller {\n    constructor(params){\n        Object.defineProperty(this, \"maxConcurrency\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxRetries\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"onFailedAttempt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"queue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.maxConcurrency = params.maxConcurrency ?? Infinity;\n        this.maxRetries = params.maxRetries ?? 6;\n        this.onFailedAttempt = params.onFailedAttempt ?? defaultFailedAttemptHandler;\n        const PQueue =  true ? p_queue__WEBPACK_IMPORTED_MODULE_1__[\"default\"] : p_queue__WEBPACK_IMPORTED_MODULE_1__;\n        this.queue = new PQueue({\n            concurrency: this.maxConcurrency\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    call(callable, ...args) {\n        return this.queue.add(()=>p_retry__WEBPACK_IMPORTED_MODULE_0__(()=>callable(...args).catch((error)=>{\n                    // eslint-disable-next-line no-instanceof/no-instanceof\n                    if (error instanceof Error) {\n                        throw error;\n                    } else {\n                        throw new Error(error);\n                    }\n                }), {\n                onFailedAttempt: this.onFailedAttempt,\n                retries: this.maxRetries,\n                randomize: true\n            }), {\n            throwOnTimeout: true\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callWithOptions(options, callable, ...args) {\n        // Note this doesn't cancel the underlying request,\n        // when available prefer to use the signal option of the underlying call\n        if (options.signal) {\n            return Promise.race([\n                this.call(callable, ...args),\n                new Promise((_, reject)=>{\n                    options.signal?.addEventListener(\"abort\", ()=>{\n                        reject(new Error(\"AbortError\"));\n                    });\n                })\n            ]);\n        }\n        return this.call(callable, ...args);\n    }\n    fetch(...args) {\n        return this.call(()=>fetch(...args).then((res)=>res.ok ? res : Promise.reject(res)));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/env.js":
/*!********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/env.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnv: () => (/* binding */ getEnv),\n/* harmony export */   getEnvironmentVariable: () => (/* binding */ getEnvironmentVariable),\n/* harmony export */   getRuntimeEnvironment: () => (/* binding */ getRuntimeEnvironment),\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser),\n/* harmony export */   isDeno: () => (/* binding */ isDeno),\n/* harmony export */   isJsDom: () => (/* binding */ isJsDom),\n/* harmony export */   isNode: () => (/* binding */ isNode),\n/* harmony export */   isWebWorker: () => (/* binding */ isWebWorker)\n/* harmony export */ });\nconst isBrowser = ()=> false && 0;\nconst isWebWorker = ()=>typeof globalThis === \"object\" && globalThis.constructor && globalThis.constructor.name === \"DedicatedWorkerGlobalScope\";\nconst isJsDom = ()=> false || typeof navigator !== \"undefined\" && (navigator.userAgent.includes(\"Node.js\") || navigator.userAgent.includes(\"jsdom\"));\n// Supabase Edge Function provides a `Deno` global object\n// without `version` property\nconst isDeno = ()=>typeof Deno !== \"undefined\";\n// Mark not-as-node if in Supabase Edge Function\nconst isNode = ()=>typeof process !== \"undefined\" && typeof process.versions !== \"undefined\" && typeof process.versions.node !== \"undefined\" && !isDeno();\nconst getEnv = ()=>{\n    let env;\n    if (isBrowser()) {\n        env = \"browser\";\n    } else if (isNode()) {\n        env = \"node\";\n    } else if (isWebWorker()) {\n        env = \"webworker\";\n    } else if (isJsDom()) {\n        env = \"jsdom\";\n    } else if (isDeno()) {\n        env = \"deno\";\n    } else {\n        env = \"other\";\n    }\n    return env;\n};\nlet runtimeEnvironment;\nasync function getRuntimeEnvironment() {\n    if (runtimeEnvironment === undefined) {\n        const env = getEnv();\n        runtimeEnvironment = {\n            library: \"langchain-js\",\n            runtime: env\n        };\n    }\n    return runtimeEnvironment;\n}\nfunction getEnvironmentVariable(name) {\n    // Certain Deno setups will throw an error if you try to access environment variables\n    // https://github.com/langchain-ai/langchainjs/issues/1412\n    try {\n        return typeof process !== \"undefined\" ? process.env?.[name] : undefined;\n    } catch (e) {\n        return undefined;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvZW52LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQU8sTUFBTUEsWUFBWSxJQUFNLE1BQTZCLElBQUksQ0FBc0MsQ0FBQztBQUNoRyxNQUFNRyxjQUFjLElBQU0sT0FBT0MsZUFBZSxZQUNuREEsV0FBV0MsV0FBVyxJQUN0QkQsV0FBV0MsV0FBVyxDQUFDQyxJQUFJLEtBQUssNkJBQTZCO0FBQzFELE1BQU1DLFVBQVUsSUFBTSxNQUEwRCxJQUNsRixPQUFPQyxjQUFjLGVBQ2pCQSxDQUFBQSxVQUFVQyxTQUFTLENBQUNDLFFBQVEsQ0FBQyxjQUMxQkYsVUFBVUMsU0FBUyxDQUFDQyxRQUFRLENBQUMsUUFBTyxFQUFJO0FBQ3BELHlEQUF5RDtBQUN6RCw2QkFBNkI7QUFDdEIsTUFBTUMsU0FBUyxJQUFNLE9BQU9DLFNBQVMsWUFBWTtBQUN4RCxnREFBZ0Q7QUFDekMsTUFBTUMsU0FBUyxJQUFNLE9BQU9DLFlBQVksZUFDM0MsT0FBT0EsUUFBUUMsUUFBUSxLQUFLLGVBQzVCLE9BQU9ELFFBQVFDLFFBQVEsQ0FBQ0MsSUFBSSxLQUFLLGVBQ2pDLENBQUNMLFNBQVM7QUFDUCxNQUFNTSxTQUFTO0lBQ2xCLElBQUlDO0lBQ0osSUFBSWxCLGFBQWE7UUFDYmtCLE1BQU07SUFDVixPQUNLLElBQUlMLFVBQVU7UUFDZkssTUFBTTtJQUNWLE9BQ0ssSUFBSWYsZUFBZTtRQUNwQmUsTUFBTTtJQUNWLE9BQ0ssSUFBSVgsV0FBVztRQUNoQlcsTUFBTTtJQUNWLE9BQ0ssSUFBSVAsVUFBVTtRQUNmTyxNQUFNO0lBQ1YsT0FDSztRQUNEQSxNQUFNO0lBQ1Y7SUFDQSxPQUFPQTtBQUNYLEVBQUU7QUFDRixJQUFJQztBQUNHLGVBQWVDO0lBQ2xCLElBQUlELHVCQUF1QkUsV0FBVztRQUNsQyxNQUFNSCxNQUFNRDtRQUNaRSxxQkFBcUI7WUFDakJHLFNBQVM7WUFDVEMsU0FBU0w7UUFDYjtJQUNKO0lBQ0EsT0FBT0M7QUFDWDtBQUNPLFNBQVNLLHVCQUF1QmxCLElBQUk7SUFDdkMscUZBQXFGO0lBQ3JGLDBEQUEwRDtJQUMxRCxJQUFJO1FBQ0EsT0FBTyxPQUFPUSxZQUFZLGNBRWxCQSxRQUFRSSxHQUFHLEVBQUUsQ0FBQ1osS0FBSyxHQUNyQmU7SUFDVixFQUNBLE9BQU9JLEdBQUc7UUFDTixPQUFPSjtJQUNYO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC91dGlscy9lbnYuanM/NDJmZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgaXNCcm93c2VyID0gKCkgPT4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiO1xuZXhwb3J0IGNvbnN0IGlzV2ViV29ya2VyID0gKCkgPT4gdHlwZW9mIGdsb2JhbFRoaXMgPT09IFwib2JqZWN0XCIgJiZcbiAgICBnbG9iYWxUaGlzLmNvbnN0cnVjdG9yICYmXG4gICAgZ2xvYmFsVGhpcy5jb25zdHJ1Y3Rvci5uYW1lID09PSBcIkRlZGljYXRlZFdvcmtlckdsb2JhbFNjb3BlXCI7XG5leHBvcnQgY29uc3QgaXNKc0RvbSA9ICgpID0+ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5uYW1lID09PSBcIm5vZGVqc1wiKSB8fFxuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIChuYXZpZ2F0b3IudXNlckFnZW50LmluY2x1ZGVzKFwiTm9kZS5qc1wiKSB8fFxuICAgICAgICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcyhcImpzZG9tXCIpKSk7XG4vLyBTdXBhYmFzZSBFZGdlIEZ1bmN0aW9uIHByb3ZpZGVzIGEgYERlbm9gIGdsb2JhbCBvYmplY3Rcbi8vIHdpdGhvdXQgYHZlcnNpb25gIHByb3BlcnR5XG5leHBvcnQgY29uc3QgaXNEZW5vID0gKCkgPT4gdHlwZW9mIERlbm8gIT09IFwidW5kZWZpbmVkXCI7XG4vLyBNYXJrIG5vdC1hcy1ub2RlIGlmIGluIFN1cGFiYXNlIEVkZ2UgRnVuY3Rpb25cbmV4cG9ydCBjb25zdCBpc05vZGUgPSAoKSA9PiB0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICFpc0Rlbm8oKTtcbmV4cG9ydCBjb25zdCBnZXRFbnYgPSAoKSA9PiB7XG4gICAgbGV0IGVudjtcbiAgICBpZiAoaXNCcm93c2VyKCkpIHtcbiAgICAgICAgZW52ID0gXCJicm93c2VyXCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzTm9kZSgpKSB7XG4gICAgICAgIGVudiA9IFwibm9kZVwiO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1dlYldvcmtlcigpKSB7XG4gICAgICAgIGVudiA9IFwid2Vid29ya2VyXCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzSnNEb20oKSkge1xuICAgICAgICBlbnYgPSBcImpzZG9tXCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzRGVubygpKSB7XG4gICAgICAgIGVudiA9IFwiZGVub1wiO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZW52ID0gXCJvdGhlclwiO1xuICAgIH1cbiAgICByZXR1cm4gZW52O1xufTtcbmxldCBydW50aW1lRW52aXJvbm1lbnQ7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UnVudGltZUVudmlyb25tZW50KCkge1xuICAgIGlmIChydW50aW1lRW52aXJvbm1lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBlbnYgPSBnZXRFbnYoKTtcbiAgICAgICAgcnVudGltZUVudmlyb25tZW50ID0ge1xuICAgICAgICAgICAgbGlicmFyeTogXCJsYW5nY2hhaW4tanNcIixcbiAgICAgICAgICAgIHJ1bnRpbWU6IGVudixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHJ1bnRpbWVFbnZpcm9ubWVudDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbnZpcm9ubWVudFZhcmlhYmxlKG5hbWUpIHtcbiAgICAvLyBDZXJ0YWluIERlbm8gc2V0dXBzIHdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgeW91IHRyeSB0byBhY2Nlc3MgZW52aXJvbm1lbnQgdmFyaWFibGVzXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2xhbmdjaGFpbi1haS9sYW5nY2hhaW5qcy9pc3N1ZXMvMTQxMlxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICAgICAgPyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvY2Vzcy1lbnZcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudj8uW25hbWVdXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiaXNCcm93c2VyIiwid2luZG93IiwiZG9jdW1lbnQiLCJpc1dlYldvcmtlciIsImdsb2JhbFRoaXMiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJpc0pzRG9tIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaW5jbHVkZXMiLCJpc0Rlbm8iLCJEZW5vIiwiaXNOb2RlIiwicHJvY2VzcyIsInZlcnNpb25zIiwibm9kZSIsImdldEVudiIsImVudiIsInJ1bnRpbWVFbnZpcm9ubWVudCIsImdldFJ1bnRpbWVFbnZpcm9ubWVudCIsInVuZGVmaW5lZCIsImxpYnJhcnkiLCJydW50aW1lIiwiZ2V0RW52aXJvbm1lbnRWYXJpYWJsZSIsImUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/env.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/fast-json-patch/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonPatchError: () => (/* reexport safe */ _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.PatchError),\n/* harmony export */   _areEquals: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__._areEquals),\n/* harmony export */   applyOperation: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.applyOperation),\n/* harmony export */   applyPatch: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch),\n/* harmony export */   applyReducer: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.applyReducer),\n/* harmony export */   compare: () => (/* reexport safe */ _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__.compare),\n/* harmony export */   deepClone: () => (/* reexport safe */ _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__._deepClone),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   escapePathComponent: () => (/* reexport safe */ _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.escapePathComponent),\n/* harmony export */   generate: () => (/* reexport safe */ _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__.generate),\n/* harmony export */   getValueByPointer: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.getValueByPointer),\n/* harmony export */   observe: () => (/* reexport safe */ _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__.observe),\n/* harmony export */   unescapePathComponent: () => (/* reexport safe */ _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.unescapePathComponent),\n/* harmony export */   unobserve: () => (/* reexport safe */ _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__.unobserve),\n/* harmony export */   validate: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.validate),\n/* harmony export */   validator: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.validator)\n/* harmony export */ });\n/* harmony import */ var _src_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/core.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js\");\n/* harmony import */ var _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/duplex.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.js\");\n/* harmony import */ var _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/helpers.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js\");\n\n\n\n/**\n * Default export for backwards compat\n */ \n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    ..._src_core_js__WEBPACK_IMPORTED_MODULE_0__,\n    // ...duplex,\n    JsonPatchError: _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.PatchError,\n    deepClone: _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__._deepClone,\n    escapePathComponent: _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.escapePathComponent,\n    unescapePathComponent: _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.unescapePathComponent\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvZmFzdC1qc29uLXBhdGNoL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBOEI7QUFDRTtBQUNzRztBQUN0STs7Q0FFQyxHQUNxQztBQUNnRztBQUN0SSxpRUFBZTtJQUNYLEdBQUdNLHlDQUFJO0lBQ1AsYUFBYTtJQUNiTCxjQUFjQSx5REFBQUE7SUFDZEUsU0FBU0EseURBQUFBO0lBQ1RDLG1CQUFtQkEsa0VBQUFBO0lBQ25CQyxxQkFBcUJBLG9FQUFBQTtBQUN6QixDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC91dGlscy9mYXN0LWpzb24tcGF0Y2gvaW5kZXguanM/NGM5MyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9zcmMvY29yZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc3JjL2R1cGxleC5qc1wiO1xuZXhwb3J0IHsgUGF0Y2hFcnJvciBhcyBKc29uUGF0Y2hFcnJvciwgX2RlZXBDbG9uZSBhcyBkZWVwQ2xvbmUsIGVzY2FwZVBhdGhDb21wb25lbnQsIHVuZXNjYXBlUGF0aENvbXBvbmVudCwgfSBmcm9tIFwiLi9zcmMvaGVscGVycy5qc1wiO1xuLyoqXG4gKiBEZWZhdWx0IGV4cG9ydCBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICovXG5pbXBvcnQgKiBhcyBjb3JlIGZyb20gXCIuL3NyYy9jb3JlLmpzXCI7XG5pbXBvcnQgeyBQYXRjaEVycm9yIGFzIEpzb25QYXRjaEVycm9yLCBfZGVlcENsb25lIGFzIGRlZXBDbG9uZSwgZXNjYXBlUGF0aENvbXBvbmVudCwgdW5lc2NhcGVQYXRoQ29tcG9uZW50LCB9IGZyb20gXCIuL3NyYy9oZWxwZXJzLmpzXCI7XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgLi4uY29yZSxcbiAgICAvLyAuLi5kdXBsZXgsXG4gICAgSnNvblBhdGNoRXJyb3IsXG4gICAgZGVlcENsb25lLFxuICAgIGVzY2FwZVBhdGhDb21wb25lbnQsXG4gICAgdW5lc2NhcGVQYXRoQ29tcG9uZW50LFxufTtcbiJdLCJuYW1lcyI6WyJQYXRjaEVycm9yIiwiSnNvblBhdGNoRXJyb3IiLCJfZGVlcENsb25lIiwiZGVlcENsb25lIiwiZXNjYXBlUGF0aENvbXBvbmVudCIsInVuZXNjYXBlUGF0aENvbXBvbmVudCIsImNvcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonPatchError: () => (/* binding */ JsonPatchError),\n/* harmony export */   _areEquals: () => (/* binding */ _areEquals),\n/* harmony export */   applyOperation: () => (/* binding */ applyOperation),\n/* harmony export */   applyPatch: () => (/* binding */ applyPatch),\n/* harmony export */   applyReducer: () => (/* binding */ applyReducer),\n/* harmony export */   deepClone: () => (/* binding */ deepClone),\n/* harmony export */   getValueByPointer: () => (/* binding */ getValueByPointer),\n/* harmony export */   validate: () => (/* binding */ validate),\n/* harmony export */   validator: () => (/* binding */ validator)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js\");\n// @ts-nocheck\n\nconst JsonPatchError = _helpers_js__WEBPACK_IMPORTED_MODULE_0__.PatchError;\nconst deepClone = _helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone;\n/* We use a Javascript hash to store each\n function. Each hash entry (property) uses\n the operation identifiers specified in rfc6902.\n In this way, we can map each patch operation\n to its dedicated function in efficient way.\n */ /* The operations applicable to an object */ const objOps = {\n    add: function(obj, key, document) {\n        obj[key] = this.value;\n        return {\n            newDocument: document\n        };\n    },\n    remove: function(obj, key, document) {\n        var removed = obj[key];\n        delete obj[key];\n        return {\n            newDocument: document,\n            removed\n        };\n    },\n    replace: function(obj, key, document) {\n        var removed = obj[key];\n        obj[key] = this.value;\n        return {\n            newDocument: document,\n            removed\n        };\n    },\n    move: function(obj, key, document) {\n        /* in case move target overwrites an existing value,\n        return the removed value, this can be taxing performance-wise,\n        and is potentially unneeded */ let removed = getValueByPointer(document, this.path);\n        if (removed) {\n            removed = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(removed);\n        }\n        const originalValue = applyOperation(document, {\n            op: \"remove\",\n            path: this.from\n        }).removed;\n        applyOperation(document, {\n            op: \"add\",\n            path: this.path,\n            value: originalValue\n        });\n        return {\n            newDocument: document,\n            removed\n        };\n    },\n    copy: function(obj, key, document) {\n        const valueToCopy = getValueByPointer(document, this.from);\n        // enforce copy by value so further operations don't affect source (see issue #177)\n        applyOperation(document, {\n            op: \"add\",\n            path: this.path,\n            value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(valueToCopy)\n        });\n        return {\n            newDocument: document\n        };\n    },\n    test: function(obj, key, document) {\n        return {\n            newDocument: document,\n            test: _areEquals(obj[key], this.value)\n        };\n    },\n    _get: function(obj, key, document) {\n        this.value = obj[key];\n        return {\n            newDocument: document\n        };\n    }\n};\n/* The operations applicable to an array. Many are the same as for the object */ var arrOps = {\n    add: function(arr, i, document) {\n        if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(i)) {\n            arr.splice(i, 0, this.value);\n        } else {\n            // array props\n            arr[i] = this.value;\n        }\n        // this may be needed when using '-' in an array\n        return {\n            newDocument: document,\n            index: i\n        };\n    },\n    remove: function(arr, i, document) {\n        var removedList = arr.splice(i, 1);\n        return {\n            newDocument: document,\n            removed: removedList[0]\n        };\n    },\n    replace: function(arr, i, document) {\n        var removed = arr[i];\n        arr[i] = this.value;\n        return {\n            newDocument: document,\n            removed\n        };\n    },\n    move: objOps.move,\n    copy: objOps.copy,\n    test: objOps.test,\n    _get: objOps._get\n};\n/**\n * Retrieves a value from a JSON document by a JSON pointer.\n * Returns the value.\n *\n * @param document The document to get the value from\n * @param pointer an escaped JSON pointer\n * @return The retrieved value\n */ function getValueByPointer(document, pointer) {\n    if (pointer == \"\") {\n        return document;\n    }\n    var getOriginalDestination = {\n        op: \"_get\",\n        path: pointer\n    };\n    applyOperation(document, getOriginalDestination);\n    return getOriginalDestination.value;\n}\n/**\n * Apply a single JSON Patch Operation on a JSON document.\n * Returns the {newDocument, result} of the operation.\n * It modifies the `document` and `operation` objects - it gets the values by reference.\n * If you would like to avoid touching your values, clone them:\n * `jsonpatch.applyOperation(document, jsonpatch._deepClone(operation))`.\n *\n * @param document The document to patch\n * @param operation The operation to apply\n * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.\n * @param mutateDocument Whether to mutate the original document or clone it before applying\n * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.\n * @return `{newDocument, result}` after the operation\n */ function applyOperation(document, operation, validateOperation = false, mutateDocument = true, banPrototypeModifications = true, index = 0) {\n    if (validateOperation) {\n        if (typeof validateOperation == \"function\") {\n            validateOperation(operation, 0, document, operation.path);\n        } else {\n            validator(operation, 0);\n        }\n    }\n    /* ROOT OPERATIONS */ if (operation.path === \"\") {\n        let returnValue = {\n            newDocument: document\n        };\n        if (operation.op === \"add\") {\n            returnValue.newDocument = operation.value;\n            return returnValue;\n        } else if (operation.op === \"replace\") {\n            returnValue.newDocument = operation.value;\n            returnValue.removed = document; //document we removed\n            return returnValue;\n        } else if (operation.op === \"move\" || operation.op === \"copy\") {\n            // it's a move or copy to root\n            returnValue.newDocument = getValueByPointer(document, operation.from); // get the value by json-pointer in `from` field\n            if (operation.op === \"move\") {\n                // report removed item\n                returnValue.removed = document;\n            }\n            return returnValue;\n        } else if (operation.op === \"test\") {\n            returnValue.test = _areEquals(document, operation.value);\n            if (returnValue.test === false) {\n                throw new JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n            }\n            returnValue.newDocument = document;\n            return returnValue;\n        } else if (operation.op === \"remove\") {\n            // a remove on root\n            returnValue.removed = document;\n            returnValue.newDocument = null;\n            return returnValue;\n        } else if (operation.op === \"_get\") {\n            operation.value = document;\n            return returnValue;\n        } else {\n            /* bad operation */ if (validateOperation) {\n                throw new JsonPatchError(\"Operation `op` property is not one of operations defined in RFC-6902\", \"OPERATION_OP_INVALID\", index, operation, document);\n            } else {\n                return returnValue;\n            }\n        }\n    } else {\n        if (!mutateDocument) {\n            document = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(document);\n        }\n        const path = operation.path || \"\";\n        const keys = path.split(\"/\");\n        let obj = document;\n        let t = 1; //skip empty element - http://jsperf.com/to-shift-or-not-to-shift\n        let len = keys.length;\n        let existingPathFragment = undefined;\n        let key;\n        let validateFunction;\n        if (typeof validateOperation == \"function\") {\n            validateFunction = validateOperation;\n        } else {\n            validateFunction = validator;\n        }\n        while(true){\n            key = keys[t];\n            if (key && key.indexOf(\"~\") != -1) {\n                key = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.unescapePathComponent)(key);\n            }\n            if (banPrototypeModifications && (key == \"__proto__\" || key == \"prototype\" && t > 0 && keys[t - 1] == \"constructor\")) {\n                throw new TypeError(\"JSON-Patch: modifying `__proto__` or `constructor/prototype` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README\");\n            }\n            if (validateOperation) {\n                if (existingPathFragment === undefined) {\n                    if (obj[key] === undefined) {\n                        existingPathFragment = keys.slice(0, t).join(\"/\");\n                    } else if (t == len - 1) {\n                        existingPathFragment = operation.path;\n                    }\n                    if (existingPathFragment !== undefined) {\n                        validateFunction(operation, 0, document, existingPathFragment);\n                    }\n                }\n            }\n            t++;\n            if (Array.isArray(obj)) {\n                if (key === \"-\") {\n                    key = obj.length;\n                } else {\n                    if (validateOperation && !(0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(key)) {\n                        throw new JsonPatchError(\"Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index\", \"OPERATION_PATH_ILLEGAL_ARRAY_INDEX\", index, operation, document);\n                    } else if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(key)) {\n                        key = ~~key;\n                    }\n                }\n                if (t >= len) {\n                    if (validateOperation && operation.op === \"add\" && key > obj.length) {\n                        throw new JsonPatchError(\"The specified index MUST NOT be greater than the number of elements in the array\", \"OPERATION_VALUE_OUT_OF_BOUNDS\", index, operation, document);\n                    }\n                    const returnValue = arrOps[operation.op].call(operation, obj, key, document); // Apply patch\n                    if (returnValue.test === false) {\n                        throw new JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n                    }\n                    return returnValue;\n                }\n            } else {\n                if (t >= len) {\n                    const returnValue = objOps[operation.op].call(operation, obj, key, document); // Apply patch\n                    if (returnValue.test === false) {\n                        throw new JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n                    }\n                    return returnValue;\n                }\n            }\n            obj = obj[key];\n            // If we have more keys in the path, but the next value isn't a non-null object,\n            // throw an OPERATION_PATH_UNRESOLVABLE error instead of iterating again.\n            if (validateOperation && t < len && (!obj || typeof obj !== \"object\")) {\n                throw new JsonPatchError(\"Cannot perform operation at the desired path\", \"OPERATION_PATH_UNRESOLVABLE\", index, operation, document);\n            }\n        }\n    }\n}\n/**\n * Apply a full JSON Patch array on a JSON document.\n * Returns the {newDocument, result} of the patch.\n * It modifies the `document` object and `patch` - it gets the values by reference.\n * If you would like to avoid touching your values, clone them:\n * `jsonpatch.applyPatch(document, jsonpatch._deepClone(patch))`.\n *\n * @param document The document to patch\n * @param patch The patch to apply\n * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.\n * @param mutateDocument Whether to mutate the original document or clone it before applying\n * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.\n * @return An array of `{newDocument, result}` after the patch\n */ function applyPatch(document, patch, validateOperation, mutateDocument = true, banPrototypeModifications = true) {\n    if (validateOperation) {\n        if (!Array.isArray(patch)) {\n            throw new JsonPatchError(\"Patch sequence must be an array\", \"SEQUENCE_NOT_AN_ARRAY\");\n        }\n    }\n    if (!mutateDocument) {\n        document = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(document);\n    }\n    const results = new Array(patch.length);\n    for(let i = 0, length = patch.length; i < length; i++){\n        // we don't need to pass mutateDocument argument because if it was true, we already deep cloned the object, we'll just pass `true`\n        results[i] = applyOperation(document, patch[i], validateOperation, true, banPrototypeModifications, i);\n        document = results[i].newDocument; // in case root was replaced\n    }\n    results.newDocument = document;\n    return results;\n}\n/**\n * Apply a single JSON Patch Operation on a JSON document.\n * Returns the updated document.\n * Suitable as a reducer.\n *\n * @param document The document to patch\n * @param operation The operation to apply\n * @return The updated document\n */ function applyReducer(document, operation, index) {\n    const operationResult = applyOperation(document, operation);\n    if (operationResult.test === false) {\n        // failed test\n        throw new JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n    }\n    return operationResult.newDocument;\n}\n/**\n * Validates a single operation. Called from `jsonpatch.validate`. Throws `JsonPatchError` in case of an error.\n * @param {object} operation - operation object (patch)\n * @param {number} index - index of operation in the sequence\n * @param {object} [document] - object where the operation is supposed to be applied\n * @param {string} [existingPathFragment] - comes along with `document`\n */ function validator(operation, index, document, existingPathFragment) {\n    if (typeof operation !== \"object\" || operation === null || Array.isArray(operation)) {\n        throw new JsonPatchError(\"Operation is not an object\", \"OPERATION_NOT_AN_OBJECT\", index, operation, document);\n    } else if (!objOps[operation.op]) {\n        throw new JsonPatchError(\"Operation `op` property is not one of operations defined in RFC-6902\", \"OPERATION_OP_INVALID\", index, operation, document);\n    } else if (typeof operation.path !== \"string\") {\n        throw new JsonPatchError(\"Operation `path` property is not a string\", \"OPERATION_PATH_INVALID\", index, operation, document);\n    } else if (operation.path.indexOf(\"/\") !== 0 && operation.path.length > 0) {\n        // paths that aren't empty string should start with \"/\"\n        throw new JsonPatchError('Operation `path` property must start with \"/\"', \"OPERATION_PATH_INVALID\", index, operation, document);\n    } else if ((operation.op === \"move\" || operation.op === \"copy\") && typeof operation.from !== \"string\") {\n        throw new JsonPatchError(\"Operation `from` property is not present (applicable in `move` and `copy` operations)\", \"OPERATION_FROM_REQUIRED\", index, operation, document);\n    } else if ((operation.op === \"add\" || operation.op === \"replace\" || operation.op === \"test\") && operation.value === undefined) {\n        throw new JsonPatchError(\"Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)\", \"OPERATION_VALUE_REQUIRED\", index, operation, document);\n    } else if ((operation.op === \"add\" || operation.op === \"replace\" || operation.op === \"test\") && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.hasUndefined)(operation.value)) {\n        throw new JsonPatchError(\"Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)\", \"OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED\", index, operation, document);\n    } else if (document) {\n        if (operation.op == \"add\") {\n            var pathLen = operation.path.split(\"/\").length;\n            var existingPathLen = existingPathFragment.split(\"/\").length;\n            if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) {\n                throw new JsonPatchError(\"Cannot perform an `add` operation at the desired path\", \"OPERATION_PATH_CANNOT_ADD\", index, operation, document);\n            }\n        } else if (operation.op === \"replace\" || operation.op === \"remove\" || operation.op === \"_get\") {\n            if (operation.path !== existingPathFragment) {\n                throw new JsonPatchError(\"Cannot perform the operation at a path that does not exist\", \"OPERATION_PATH_UNRESOLVABLE\", index, operation, document);\n            }\n        } else if (operation.op === \"move\" || operation.op === \"copy\") {\n            var existingValue = {\n                op: \"_get\",\n                path: operation.from,\n                value: undefined\n            };\n            var error = validate([\n                existingValue\n            ], document);\n            if (error && error.name === \"OPERATION_PATH_UNRESOLVABLE\") {\n                throw new JsonPatchError(\"Cannot perform the operation from a path that does not exist\", \"OPERATION_FROM_UNRESOLVABLE\", index, operation, document);\n            }\n        }\n    }\n}\n/**\n * Validates a sequence of operations. If `document` parameter is provided, the sequence is additionally validated against the object document.\n * If error is encountered, returns a JsonPatchError object\n * @param sequence\n * @param document\n * @returns {JsonPatchError|undefined}\n */ function validate(sequence, document, externalValidator) {\n    try {\n        if (!Array.isArray(sequence)) {\n            throw new JsonPatchError(\"Patch sequence must be an array\", \"SEQUENCE_NOT_AN_ARRAY\");\n        }\n        if (document) {\n            //clone document and sequence so that we can safely try applying operations\n            applyPatch((0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(document), (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(sequence), externalValidator || true);\n        } else {\n            externalValidator = externalValidator || validator;\n            for(var i = 0; i < sequence.length; i++){\n                externalValidator(sequence[i], i, document, undefined);\n            }\n        }\n    } catch (e) {\n        if (e instanceof JsonPatchError) {\n            return e;\n        } else {\n            throw e;\n        }\n    }\n}\n// based on https://github.com/epoberezkin/fast-deep-equal\n// MIT License\n// Copyright (c) 2017 Evgeny Poberezkin\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nfunction _areEquals(a, b) {\n    if (a === b) return true;\n    if (a && b && typeof a == \"object\" && typeof b == \"object\") {\n        var arrA = Array.isArray(a), arrB = Array.isArray(b), i, length, key;\n        if (arrA && arrB) {\n            length = a.length;\n            if (length != b.length) return false;\n            for(i = length; i-- !== 0;)if (!_areEquals(a[i], b[i])) return false;\n            return true;\n        }\n        if (arrA != arrB) return false;\n        var keys = Object.keys(a);\n        length = keys.length;\n        if (length !== Object.keys(b).length) return false;\n        for(i = length; i-- !== 0;)if (!b.hasOwnProperty(keys[i])) return false;\n        for(i = length; i-- !== 0;){\n            key = keys[i];\n            if (!_areEquals(a[key], b[key])) return false;\n        }\n        return true;\n    }\n    return a !== a && b !== b;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvZmFzdC1qc29uLXBhdGNoL3NyYy9jb3JlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxjQUFjO0FBQ3lGO0FBQ2hHLE1BQU1LLGlCQUFpQkwsbURBQVVBLENBQUM7QUFDbEMsTUFBTU0sWUFBWUwsbURBQVVBLENBQUM7QUFDcEM7Ozs7O0NBS0MsR0FDRCwwQ0FBMEMsR0FDMUMsTUFBTU0sU0FBUztJQUNYQyxLQUFLLFNBQVVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxRQUFRO1FBQzdCRixHQUFHLENBQUNDLElBQUksR0FBRyxJQUFJLENBQUNFLEtBQUs7UUFDckIsT0FBTztZQUFFQyxhQUFhRjtRQUFTO0lBQ25DO0lBQ0FHLFFBQVEsU0FBVUwsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLFFBQVE7UUFDaEMsSUFBSUksVUFBVU4sR0FBRyxDQUFDQyxJQUFJO1FBQ3RCLE9BQU9ELEdBQUcsQ0FBQ0MsSUFBSTtRQUNmLE9BQU87WUFBRUcsYUFBYUY7WUFBVUk7UUFBUTtJQUM1QztJQUNBQyxTQUFTLFNBQVVQLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxRQUFRO1FBQ2pDLElBQUlJLFVBQVVOLEdBQUcsQ0FBQ0MsSUFBSTtRQUN0QkQsR0FBRyxDQUFDQyxJQUFJLEdBQUcsSUFBSSxDQUFDRSxLQUFLO1FBQ3JCLE9BQU87WUFBRUMsYUFBYUY7WUFBVUk7UUFBUTtJQUM1QztJQUNBRSxNQUFNLFNBQVVSLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxRQUFRO1FBQzlCOztvQ0FFNEIsR0FDNUIsSUFBSUksVUFBVUcsa0JBQWtCUCxVQUFVLElBQUksQ0FBQ1EsSUFBSTtRQUNuRCxJQUFJSixTQUFTO1lBQ1RBLFVBQVVkLHVEQUFVQSxDQUFDYztRQUN6QjtRQUNBLE1BQU1LLGdCQUFnQkMsZUFBZVYsVUFBVTtZQUMzQ1csSUFBSTtZQUNKSCxNQUFNLElBQUksQ0FBQ0ksSUFBSTtRQUNuQixHQUFHUixPQUFPO1FBQ1ZNLGVBQWVWLFVBQVU7WUFDckJXLElBQUk7WUFDSkgsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFDZlAsT0FBT1E7UUFDWDtRQUNBLE9BQU87WUFBRVAsYUFBYUY7WUFBVUk7UUFBUTtJQUM1QztJQUNBUyxNQUFNLFNBQVVmLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxRQUFRO1FBQzlCLE1BQU1jLGNBQWNQLGtCQUFrQlAsVUFBVSxJQUFJLENBQUNZLElBQUk7UUFDekQsbUZBQW1GO1FBQ25GRixlQUFlVixVQUFVO1lBQ3JCVyxJQUFJO1lBQ0pILE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ2ZQLE9BQU9YLHVEQUFVQSxDQUFDd0I7UUFDdEI7UUFDQSxPQUFPO1lBQUVaLGFBQWFGO1FBQVM7SUFDbkM7SUFDQWUsTUFBTSxTQUFVakIsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLFFBQVE7UUFDOUIsT0FBTztZQUFFRSxhQUFhRjtZQUFVZSxNQUFNQyxXQUFXbEIsR0FBRyxDQUFDQyxJQUFJLEVBQUUsSUFBSSxDQUFDRSxLQUFLO1FBQUU7SUFDM0U7SUFDQWdCLE1BQU0sU0FBVW5CLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxRQUFRO1FBQzlCLElBQUksQ0FBQ0MsS0FBSyxHQUFHSCxHQUFHLENBQUNDLElBQUk7UUFDckIsT0FBTztZQUFFRyxhQUFhRjtRQUFTO0lBQ25DO0FBQ0o7QUFDQSw4RUFBOEUsR0FDOUUsSUFBSWtCLFNBQVM7SUFDVHJCLEtBQUssU0FBVXNCLEdBQUcsRUFBRUMsQ0FBQyxFQUFFcEIsUUFBUTtRQUMzQixJQUFJVCxzREFBU0EsQ0FBQzZCLElBQUk7WUFDZEQsSUFBSUUsTUFBTSxDQUFDRCxHQUFHLEdBQUcsSUFBSSxDQUFDbkIsS0FBSztRQUMvQixPQUNLO1lBQ0QsY0FBYztZQUNka0IsR0FBRyxDQUFDQyxFQUFFLEdBQUcsSUFBSSxDQUFDbkIsS0FBSztRQUN2QjtRQUNBLGdEQUFnRDtRQUNoRCxPQUFPO1lBQUVDLGFBQWFGO1lBQVVzQixPQUFPRjtRQUFFO0lBQzdDO0lBQ0FqQixRQUFRLFNBQVVnQixHQUFHLEVBQUVDLENBQUMsRUFBRXBCLFFBQVE7UUFDOUIsSUFBSXVCLGNBQWNKLElBQUlFLE1BQU0sQ0FBQ0QsR0FBRztRQUNoQyxPQUFPO1lBQUVsQixhQUFhRjtZQUFVSSxTQUFTbUIsV0FBVyxDQUFDLEVBQUU7UUFBQztJQUM1RDtJQUNBbEIsU0FBUyxTQUFVYyxHQUFHLEVBQUVDLENBQUMsRUFBRXBCLFFBQVE7UUFDL0IsSUFBSUksVUFBVWUsR0FBRyxDQUFDQyxFQUFFO1FBQ3BCRCxHQUFHLENBQUNDLEVBQUUsR0FBRyxJQUFJLENBQUNuQixLQUFLO1FBQ25CLE9BQU87WUFBRUMsYUFBYUY7WUFBVUk7UUFBUTtJQUM1QztJQUNBRSxNQUFNVixPQUFPVSxJQUFJO0lBQ2pCTyxNQUFNakIsT0FBT2lCLElBQUk7SUFDakJFLE1BQU1uQixPQUFPbUIsSUFBSTtJQUNqQkUsTUFBTXJCLE9BQU9xQixJQUFJO0FBQ3JCO0FBQ0E7Ozs7Ozs7Q0FPQyxHQUNNLFNBQVNWLGtCQUFrQlAsUUFBUSxFQUFFd0IsT0FBTztJQUMvQyxJQUFJQSxXQUFXLElBQUk7UUFDZixPQUFPeEI7SUFDWDtJQUNBLElBQUl5Qix5QkFBeUI7UUFBRWQsSUFBSTtRQUFRSCxNQUFNZ0I7SUFBUTtJQUN6RGQsZUFBZVYsVUFBVXlCO0lBQ3pCLE9BQU9BLHVCQUF1QnhCLEtBQUs7QUFDdkM7QUFDQTs7Ozs7Ozs7Ozs7OztDQWFDLEdBQ00sU0FBU1MsZUFBZVYsUUFBUSxFQUFFMEIsU0FBUyxFQUFFQyxvQkFBb0IsS0FBSyxFQUFFQyxpQkFBaUIsSUFBSSxFQUFFQyw0QkFBNEIsSUFBSSxFQUFFUCxRQUFRLENBQUM7SUFDN0ksSUFBSUssbUJBQW1CO1FBQ25CLElBQUksT0FBT0EscUJBQXFCLFlBQVk7WUFDeENBLGtCQUFrQkQsV0FBVyxHQUFHMUIsVUFBVTBCLFVBQVVsQixJQUFJO1FBQzVELE9BQ0s7WUFDRHNCLFVBQVVKLFdBQVc7UUFDekI7SUFDSjtJQUNBLG1CQUFtQixHQUNuQixJQUFJQSxVQUFVbEIsSUFBSSxLQUFLLElBQUk7UUFDdkIsSUFBSXVCLGNBQWM7WUFBRTdCLGFBQWFGO1FBQVM7UUFDMUMsSUFBSTBCLFVBQVVmLEVBQUUsS0FBSyxPQUFPO1lBQ3hCb0IsWUFBWTdCLFdBQVcsR0FBR3dCLFVBQVV6QixLQUFLO1lBQ3pDLE9BQU84QjtRQUNYLE9BQ0ssSUFBSUwsVUFBVWYsRUFBRSxLQUFLLFdBQVc7WUFDakNvQixZQUFZN0IsV0FBVyxHQUFHd0IsVUFBVXpCLEtBQUs7WUFDekM4QixZQUFZM0IsT0FBTyxHQUFHSixVQUFVLHFCQUFxQjtZQUNyRCxPQUFPK0I7UUFDWCxPQUNLLElBQUlMLFVBQVVmLEVBQUUsS0FBSyxVQUFVZSxVQUFVZixFQUFFLEtBQUssUUFBUTtZQUN6RCw4QkFBOEI7WUFDOUJvQixZQUFZN0IsV0FBVyxHQUFHSyxrQkFBa0JQLFVBQVUwQixVQUFVZCxJQUFJLEdBQUcsZ0RBQWdEO1lBQ3ZILElBQUljLFVBQVVmLEVBQUUsS0FBSyxRQUFRO2dCQUN6QixzQkFBc0I7Z0JBQ3RCb0IsWUFBWTNCLE9BQU8sR0FBR0o7WUFDMUI7WUFDQSxPQUFPK0I7UUFDWCxPQUNLLElBQUlMLFVBQVVmLEVBQUUsS0FBSyxRQUFRO1lBQzlCb0IsWUFBWWhCLElBQUksR0FBR0MsV0FBV2hCLFVBQVUwQixVQUFVekIsS0FBSztZQUN2RCxJQUFJOEIsWUFBWWhCLElBQUksS0FBSyxPQUFPO2dCQUM1QixNQUFNLElBQUlyQixlQUFlLHlCQUF5Qix5QkFBeUI0QixPQUFPSSxXQUFXMUI7WUFDakc7WUFDQStCLFlBQVk3QixXQUFXLEdBQUdGO1lBQzFCLE9BQU8rQjtRQUNYLE9BQ0ssSUFBSUwsVUFBVWYsRUFBRSxLQUFLLFVBQVU7WUFDaEMsbUJBQW1CO1lBQ25Cb0IsWUFBWTNCLE9BQU8sR0FBR0o7WUFDdEIrQixZQUFZN0IsV0FBVyxHQUFHO1lBQzFCLE9BQU82QjtRQUNYLE9BQ0ssSUFBSUwsVUFBVWYsRUFBRSxLQUFLLFFBQVE7WUFDOUJlLFVBQVV6QixLQUFLLEdBQUdEO1lBQ2xCLE9BQU8rQjtRQUNYLE9BQ0s7WUFDRCxpQkFBaUIsR0FDakIsSUFBSUosbUJBQW1CO2dCQUNuQixNQUFNLElBQUlqQyxlQUFlLHdFQUF3RSx3QkFBd0I0QixPQUFPSSxXQUFXMUI7WUFDL0ksT0FDSztnQkFDRCxPQUFPK0I7WUFDWDtRQUNKO0lBQ0osT0FDSztRQUNELElBQUksQ0FBQ0gsZ0JBQWdCO1lBQ2pCNUIsV0FBV1YsdURBQVVBLENBQUNVO1FBQzFCO1FBQ0EsTUFBTVEsT0FBT2tCLFVBQVVsQixJQUFJLElBQUk7UUFDL0IsTUFBTXdCLE9BQU94QixLQUFLeUIsS0FBSyxDQUFDO1FBQ3hCLElBQUluQyxNQUFNRTtRQUNWLElBQUlrQyxJQUFJLEdBQUcsaUVBQWlFO1FBQzVFLElBQUlDLE1BQU1ILEtBQUtJLE1BQU07UUFDckIsSUFBSUMsdUJBQXVCQztRQUMzQixJQUFJdkM7UUFDSixJQUFJd0M7UUFDSixJQUFJLE9BQU9aLHFCQUFxQixZQUFZO1lBQ3hDWSxtQkFBbUJaO1FBQ3ZCLE9BQ0s7WUFDRFksbUJBQW1CVDtRQUN2QjtRQUNBLE1BQU8sS0FBTTtZQUNUL0IsTUFBTWlDLElBQUksQ0FBQ0UsRUFBRTtZQUNiLElBQUluQyxPQUFPQSxJQUFJeUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHO2dCQUMvQnpDLE1BQU1QLGtFQUFxQkEsQ0FBQ087WUFDaEM7WUFDQSxJQUFJOEIsNkJBQ0M5QixDQUFBQSxPQUFPLGVBQ0hBLE9BQU8sZUFBZW1DLElBQUksS0FBS0YsSUFBSSxDQUFDRSxJQUFJLEVBQUUsSUFBSSxhQUFhLEdBQUk7Z0JBQ3BFLE1BQU0sSUFBSU8sVUFBVTtZQUN4QjtZQUNBLElBQUlkLG1CQUFtQjtnQkFDbkIsSUFBSVUseUJBQXlCQyxXQUFXO29CQUNwQyxJQUFJeEMsR0FBRyxDQUFDQyxJQUFJLEtBQUt1QyxXQUFXO3dCQUN4QkQsdUJBQXVCTCxLQUFLVSxLQUFLLENBQUMsR0FBR1IsR0FBR1MsSUFBSSxDQUFDO29CQUNqRCxPQUNLLElBQUlULEtBQUtDLE1BQU0sR0FBRzt3QkFDbkJFLHVCQUF1QlgsVUFBVWxCLElBQUk7b0JBQ3pDO29CQUNBLElBQUk2Qix5QkFBeUJDLFdBQVc7d0JBQ3BDQyxpQkFBaUJiLFdBQVcsR0FBRzFCLFVBQVVxQztvQkFDN0M7Z0JBQ0o7WUFDSjtZQUNBSDtZQUNBLElBQUlVLE1BQU1DLE9BQU8sQ0FBQy9DLE1BQU07Z0JBQ3BCLElBQUlDLFFBQVEsS0FBSztvQkFDYkEsTUFBTUQsSUFBSXNDLE1BQU07Z0JBQ3BCLE9BQ0s7b0JBQ0QsSUFBSVQscUJBQXFCLENBQUNwQyxzREFBU0EsQ0FBQ1EsTUFBTTt3QkFDdEMsTUFBTSxJQUFJTCxlQUFlLDJIQUEySCxzQ0FBc0M0QixPQUFPSSxXQUFXMUI7b0JBQ2hOLE9BQ0ssSUFBSVQsc0RBQVNBLENBQUNRLE1BQU07d0JBQ3JCQSxNQUFNLENBQUMsQ0FBQ0E7b0JBQ1o7Z0JBQ0o7Z0JBQ0EsSUFBSW1DLEtBQUtDLEtBQUs7b0JBQ1YsSUFBSVIscUJBQXFCRCxVQUFVZixFQUFFLEtBQUssU0FBU1osTUFBTUQsSUFBSXNDLE1BQU0sRUFBRTt3QkFDakUsTUFBTSxJQUFJMUMsZUFBZSxvRkFBb0YsaUNBQWlDNEIsT0FBT0ksV0FBVzFCO29CQUNwSztvQkFDQSxNQUFNK0IsY0FBY2IsTUFBTSxDQUFDUSxVQUFVZixFQUFFLENBQUMsQ0FBQ21DLElBQUksQ0FBQ3BCLFdBQVc1QixLQUFLQyxLQUFLQyxXQUFXLGNBQWM7b0JBQzVGLElBQUkrQixZQUFZaEIsSUFBSSxLQUFLLE9BQU87d0JBQzVCLE1BQU0sSUFBSXJCLGVBQWUseUJBQXlCLHlCQUF5QjRCLE9BQU9JLFdBQVcxQjtvQkFDakc7b0JBQ0EsT0FBTytCO2dCQUNYO1lBQ0osT0FDSztnQkFDRCxJQUFJRyxLQUFLQyxLQUFLO29CQUNWLE1BQU1KLGNBQWNuQyxNQUFNLENBQUM4QixVQUFVZixFQUFFLENBQUMsQ0FBQ21DLElBQUksQ0FBQ3BCLFdBQVc1QixLQUFLQyxLQUFLQyxXQUFXLGNBQWM7b0JBQzVGLElBQUkrQixZQUFZaEIsSUFBSSxLQUFLLE9BQU87d0JBQzVCLE1BQU0sSUFBSXJCLGVBQWUseUJBQXlCLHlCQUF5QjRCLE9BQU9JLFdBQVcxQjtvQkFDakc7b0JBQ0EsT0FBTytCO2dCQUNYO1lBQ0o7WUFDQWpDLE1BQU1BLEdBQUcsQ0FBQ0MsSUFBSTtZQUNkLGdGQUFnRjtZQUNoRix5RUFBeUU7WUFDekUsSUFBSTRCLHFCQUFxQk8sSUFBSUMsT0FBUSxFQUFDckMsT0FBTyxPQUFPQSxRQUFRLFFBQU8sR0FBSTtnQkFDbkUsTUFBTSxJQUFJSixlQUFlLGdEQUFnRCwrQkFBK0I0QixPQUFPSSxXQUFXMUI7WUFDOUg7UUFDSjtJQUNKO0FBQ0o7QUFDQTs7Ozs7Ozs7Ozs7OztDQWFDLEdBQ00sU0FBUytDLFdBQVcvQyxRQUFRLEVBQUVnRCxLQUFLLEVBQUVyQixpQkFBaUIsRUFBRUMsaUJBQWlCLElBQUksRUFBRUMsNEJBQTRCLElBQUk7SUFDbEgsSUFBSUYsbUJBQW1CO1FBQ25CLElBQUksQ0FBQ2lCLE1BQU1DLE9BQU8sQ0FBQ0csUUFBUTtZQUN2QixNQUFNLElBQUl0RCxlQUFlLG1DQUFtQztRQUNoRTtJQUNKO0lBQ0EsSUFBSSxDQUFDa0MsZ0JBQWdCO1FBQ2pCNUIsV0FBV1YsdURBQVVBLENBQUNVO0lBQzFCO0lBQ0EsTUFBTWlELFVBQVUsSUFBSUwsTUFBTUksTUFBTVosTUFBTTtJQUN0QyxJQUFLLElBQUloQixJQUFJLEdBQUdnQixTQUFTWSxNQUFNWixNQUFNLEVBQUVoQixJQUFJZ0IsUUFBUWhCLElBQUs7UUFDcEQsa0lBQWtJO1FBQ2xJNkIsT0FBTyxDQUFDN0IsRUFBRSxHQUFHVixlQUFlVixVQUFVZ0QsS0FBSyxDQUFDNUIsRUFBRSxFQUFFTyxtQkFBbUIsTUFBTUUsMkJBQTJCVDtRQUNwR3BCLFdBQVdpRCxPQUFPLENBQUM3QixFQUFFLENBQUNsQixXQUFXLEVBQUUsNEJBQTRCO0lBQ25FO0lBQ0ErQyxRQUFRL0MsV0FBVyxHQUFHRjtJQUN0QixPQUFPaUQ7QUFDWDtBQUNBOzs7Ozs7OztDQVFDLEdBQ00sU0FBU0MsYUFBYWxELFFBQVEsRUFBRTBCLFNBQVMsRUFBRUosS0FBSztJQUNuRCxNQUFNNkIsa0JBQWtCekMsZUFBZVYsVUFBVTBCO0lBQ2pELElBQUl5QixnQkFBZ0JwQyxJQUFJLEtBQUssT0FBTztRQUNoQyxjQUFjO1FBQ2QsTUFBTSxJQUFJckIsZUFBZSx5QkFBeUIseUJBQXlCNEIsT0FBT0ksV0FBVzFCO0lBQ2pHO0lBQ0EsT0FBT21ELGdCQUFnQmpELFdBQVc7QUFDdEM7QUFDQTs7Ozs7O0NBTUMsR0FDTSxTQUFTNEIsVUFBVUosU0FBUyxFQUFFSixLQUFLLEVBQUV0QixRQUFRLEVBQUVxQyxvQkFBb0I7SUFDdEUsSUFBSSxPQUFPWCxjQUFjLFlBQ3JCQSxjQUFjLFFBQ2RrQixNQUFNQyxPQUFPLENBQUNuQixZQUFZO1FBQzFCLE1BQU0sSUFBSWhDLGVBQWUsOEJBQThCLDJCQUEyQjRCLE9BQU9JLFdBQVcxQjtJQUN4RyxPQUNLLElBQUksQ0FBQ0osTUFBTSxDQUFDOEIsVUFBVWYsRUFBRSxDQUFDLEVBQUU7UUFDNUIsTUFBTSxJQUFJakIsZUFBZSx3RUFBd0Usd0JBQXdCNEIsT0FBT0ksV0FBVzFCO0lBQy9JLE9BQ0ssSUFBSSxPQUFPMEIsVUFBVWxCLElBQUksS0FBSyxVQUFVO1FBQ3pDLE1BQU0sSUFBSWQsZUFBZSw2Q0FBNkMsMEJBQTBCNEIsT0FBT0ksV0FBVzFCO0lBQ3RILE9BQ0ssSUFBSTBCLFVBQVVsQixJQUFJLENBQUNnQyxPQUFPLENBQUMsU0FBUyxLQUFLZCxVQUFVbEIsSUFBSSxDQUFDNEIsTUFBTSxHQUFHLEdBQUc7UUFDckUsdURBQXVEO1FBQ3ZELE1BQU0sSUFBSTFDLGVBQWUsaURBQWlELDBCQUEwQjRCLE9BQU9JLFdBQVcxQjtJQUMxSCxPQUNLLElBQUksQ0FBQzBCLFVBQVVmLEVBQUUsS0FBSyxVQUFVZSxVQUFVZixFQUFFLEtBQUssTUFBSyxLQUN2RCxPQUFPZSxVQUFVZCxJQUFJLEtBQUssVUFBVTtRQUNwQyxNQUFNLElBQUlsQixlQUFlLHlGQUF5RiwyQkFBMkI0QixPQUFPSSxXQUFXMUI7SUFDbkssT0FDSyxJQUFJLENBQUMwQixVQUFVZixFQUFFLEtBQUssU0FDdkJlLFVBQVVmLEVBQUUsS0FBSyxhQUNqQmUsVUFBVWYsRUFBRSxLQUFLLE1BQUssS0FDdEJlLFVBQVV6QixLQUFLLEtBQUtxQyxXQUFXO1FBQy9CLE1BQU0sSUFBSTVDLGVBQWUsb0dBQW9HLDRCQUE0QjRCLE9BQU9JLFdBQVcxQjtJQUMvSyxPQUNLLElBQUksQ0FBQzBCLFVBQVVmLEVBQUUsS0FBSyxTQUN2QmUsVUFBVWYsRUFBRSxLQUFLLGFBQ2pCZSxVQUFVZixFQUFFLEtBQUssTUFBSyxLQUN0QmxCLHlEQUFZQSxDQUFDaUMsVUFBVXpCLEtBQUssR0FBRztRQUMvQixNQUFNLElBQUlQLGVBQWUsb0dBQW9HLDRDQUE0QzRCLE9BQU9JLFdBQVcxQjtJQUMvTCxPQUNLLElBQUlBLFVBQVU7UUFDZixJQUFJMEIsVUFBVWYsRUFBRSxJQUFJLE9BQU87WUFDdkIsSUFBSXlDLFVBQVUxQixVQUFVbEIsSUFBSSxDQUFDeUIsS0FBSyxDQUFDLEtBQUtHLE1BQU07WUFDOUMsSUFBSWlCLGtCQUFrQmhCLHFCQUFxQkosS0FBSyxDQUFDLEtBQUtHLE1BQU07WUFDNUQsSUFBSWdCLFlBQVlDLGtCQUFrQixLQUFLRCxZQUFZQyxpQkFBaUI7Z0JBQ2hFLE1BQU0sSUFBSTNELGVBQWUseURBQXlELDZCQUE2QjRCLE9BQU9JLFdBQVcxQjtZQUNySTtRQUNKLE9BQ0ssSUFBSTBCLFVBQVVmLEVBQUUsS0FBSyxhQUN0QmUsVUFBVWYsRUFBRSxLQUFLLFlBQ2pCZSxVQUFVZixFQUFFLEtBQUssUUFBUTtZQUN6QixJQUFJZSxVQUFVbEIsSUFBSSxLQUFLNkIsc0JBQXNCO2dCQUN6QyxNQUFNLElBQUkzQyxlQUFlLDhEQUE4RCwrQkFBK0I0QixPQUFPSSxXQUFXMUI7WUFDNUk7UUFDSixPQUNLLElBQUkwQixVQUFVZixFQUFFLEtBQUssVUFBVWUsVUFBVWYsRUFBRSxLQUFLLFFBQVE7WUFDekQsSUFBSTJDLGdCQUFnQjtnQkFDaEIzQyxJQUFJO2dCQUNKSCxNQUFNa0IsVUFBVWQsSUFBSTtnQkFDcEJYLE9BQU9xQztZQUNYO1lBQ0EsSUFBSWlCLFFBQVFDLFNBQVM7Z0JBQUNGO2FBQWMsRUFBRXREO1lBQ3RDLElBQUl1RCxTQUFTQSxNQUFNRSxJQUFJLEtBQUssK0JBQStCO2dCQUN2RCxNQUFNLElBQUkvRCxlQUFlLGdFQUFnRSwrQkFBK0I0QixPQUFPSSxXQUFXMUI7WUFDOUk7UUFDSjtJQUNKO0FBQ0o7QUFDQTs7Ozs7O0NBTUMsR0FDTSxTQUFTd0QsU0FBU0UsUUFBUSxFQUFFMUQsUUFBUSxFQUFFMkQsaUJBQWlCO0lBQzFELElBQUk7UUFDQSxJQUFJLENBQUNmLE1BQU1DLE9BQU8sQ0FBQ2EsV0FBVztZQUMxQixNQUFNLElBQUloRSxlQUFlLG1DQUFtQztRQUNoRTtRQUNBLElBQUlNLFVBQVU7WUFDViwyRUFBMkU7WUFDM0UrQyxXQUFXekQsdURBQVVBLENBQUNVLFdBQVdWLHVEQUFVQSxDQUFDb0UsV0FBV0MscUJBQXFCO1FBQ2hGLE9BQ0s7WUFDREEsb0JBQW9CQSxxQkFBcUI3QjtZQUN6QyxJQUFLLElBQUlWLElBQUksR0FBR0EsSUFBSXNDLFNBQVN0QixNQUFNLEVBQUVoQixJQUFLO2dCQUN0Q3VDLGtCQUFrQkQsUUFBUSxDQUFDdEMsRUFBRSxFQUFFQSxHQUFHcEIsVUFBVXNDO1lBQ2hEO1FBQ0o7SUFDSixFQUNBLE9BQU9zQixHQUFHO1FBQ04sSUFBSUEsYUFBYWxFLGdCQUFnQjtZQUM3QixPQUFPa0U7UUFDWCxPQUNLO1lBQ0QsTUFBTUE7UUFDVjtJQUNKO0FBQ0o7QUFDQSwwREFBMEQ7QUFDMUQsY0FBYztBQUNkLHVDQUF1QztBQUN2QywrRUFBK0U7QUFDL0UsZ0ZBQWdGO0FBQ2hGLCtFQUErRTtBQUMvRSw0RUFBNEU7QUFDNUUsd0VBQXdFO0FBQ3hFLDJEQUEyRDtBQUMzRCxpRkFBaUY7QUFDakYsa0RBQWtEO0FBQ2xELDZFQUE2RTtBQUM3RSwyRUFBMkU7QUFDM0UsOEVBQThFO0FBQzlFLHlFQUF5RTtBQUN6RSxnRkFBZ0Y7QUFDaEYsZ0ZBQWdGO0FBQ2hGLFlBQVk7QUFDTCxTQUFTNUMsV0FBVzZDLENBQUMsRUFBRUMsQ0FBQztJQUMzQixJQUFJRCxNQUFNQyxHQUNOLE9BQU87SUFDWCxJQUFJRCxLQUFLQyxLQUFLLE9BQU9ELEtBQUssWUFBWSxPQUFPQyxLQUFLLFVBQVU7UUFDeEQsSUFBSUMsT0FBT25CLE1BQU1DLE9BQU8sQ0FBQ2dCLElBQUlHLE9BQU9wQixNQUFNQyxPQUFPLENBQUNpQixJQUFJMUMsR0FBR2dCLFFBQVFyQztRQUNqRSxJQUFJZ0UsUUFBUUMsTUFBTTtZQUNkNUIsU0FBU3lCLEVBQUV6QixNQUFNO1lBQ2pCLElBQUlBLFVBQVUwQixFQUFFMUIsTUFBTSxFQUNsQixPQUFPO1lBQ1gsSUFBS2hCLElBQUlnQixRQUFRaEIsUUFBUSxHQUNyQixJQUFJLENBQUNKLFdBQVc2QyxDQUFDLENBQUN6QyxFQUFFLEVBQUUwQyxDQUFDLENBQUMxQyxFQUFFLEdBQ3RCLE9BQU87WUFDZixPQUFPO1FBQ1g7UUFDQSxJQUFJMkMsUUFBUUMsTUFDUixPQUFPO1FBQ1gsSUFBSWhDLE9BQU9pQyxPQUFPakMsSUFBSSxDQUFDNkI7UUFDdkJ6QixTQUFTSixLQUFLSSxNQUFNO1FBQ3BCLElBQUlBLFdBQVc2QixPQUFPakMsSUFBSSxDQUFDOEIsR0FBRzFCLE1BQU0sRUFDaEMsT0FBTztRQUNYLElBQUtoQixJQUFJZ0IsUUFBUWhCLFFBQVEsR0FDckIsSUFBSSxDQUFDMEMsRUFBRUksY0FBYyxDQUFDbEMsSUFBSSxDQUFDWixFQUFFLEdBQ3pCLE9BQU87UUFDZixJQUFLQSxJQUFJZ0IsUUFBUWhCLFFBQVEsR0FBSTtZQUN6QnJCLE1BQU1pQyxJQUFJLENBQUNaLEVBQUU7WUFDYixJQUFJLENBQUNKLFdBQVc2QyxDQUFDLENBQUM5RCxJQUFJLEVBQUUrRCxDQUFDLENBQUMvRCxJQUFJLEdBQzFCLE9BQU87UUFDZjtRQUNBLE9BQU87SUFDWDtJQUNBLE9BQU84RCxNQUFNQSxLQUFLQyxNQUFNQTtBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL2Zhc3QtanNvbi1wYXRjaC9zcmMvY29yZS5qcz9kZjk4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEB0cy1ub2NoZWNrXG5pbXBvcnQgeyBQYXRjaEVycm9yLCBfZGVlcENsb25lLCBpc0ludGVnZXIsIHVuZXNjYXBlUGF0aENvbXBvbmVudCwgaGFzVW5kZWZpbmVkLCB9IGZyb20gXCIuL2hlbHBlcnMuanNcIjtcbmV4cG9ydCBjb25zdCBKc29uUGF0Y2hFcnJvciA9IFBhdGNoRXJyb3I7XG5leHBvcnQgY29uc3QgZGVlcENsb25lID0gX2RlZXBDbG9uZTtcbi8qIFdlIHVzZSBhIEphdmFzY3JpcHQgaGFzaCB0byBzdG9yZSBlYWNoXG4gZnVuY3Rpb24uIEVhY2ggaGFzaCBlbnRyeSAocHJvcGVydHkpIHVzZXNcbiB0aGUgb3BlcmF0aW9uIGlkZW50aWZpZXJzIHNwZWNpZmllZCBpbiByZmM2OTAyLlxuIEluIHRoaXMgd2F5LCB3ZSBjYW4gbWFwIGVhY2ggcGF0Y2ggb3BlcmF0aW9uXG4gdG8gaXRzIGRlZGljYXRlZCBmdW5jdGlvbiBpbiBlZmZpY2llbnQgd2F5LlxuICovXG4vKiBUaGUgb3BlcmF0aW9ucyBhcHBsaWNhYmxlIHRvIGFuIG9iamVjdCAqL1xuY29uc3Qgb2JqT3BzID0ge1xuICAgIGFkZDogZnVuY3Rpb24gKG9iaiwga2V5LCBkb2N1bWVudCkge1xuICAgICAgICBvYmpba2V5XSA9IHRoaXMudmFsdWU7XG4gICAgICAgIHJldHVybiB7IG5ld0RvY3VtZW50OiBkb2N1bWVudCB9O1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiAob2JqLCBrZXksIGRvY3VtZW50KSB7XG4gICAgICAgIHZhciByZW1vdmVkID0gb2JqW2tleV07XG4gICAgICAgIGRlbGV0ZSBvYmpba2V5XTtcbiAgICAgICAgcmV0dXJuIHsgbmV3RG9jdW1lbnQ6IGRvY3VtZW50LCByZW1vdmVkIH07XG4gICAgfSxcbiAgICByZXBsYWNlOiBmdW5jdGlvbiAob2JqLCBrZXksIGRvY3VtZW50KSB7XG4gICAgICAgIHZhciByZW1vdmVkID0gb2JqW2tleV07XG4gICAgICAgIG9ialtrZXldID0gdGhpcy52YWx1ZTtcbiAgICAgICAgcmV0dXJuIHsgbmV3RG9jdW1lbnQ6IGRvY3VtZW50LCByZW1vdmVkIH07XG4gICAgfSxcbiAgICBtb3ZlOiBmdW5jdGlvbiAob2JqLCBrZXksIGRvY3VtZW50KSB7XG4gICAgICAgIC8qIGluIGNhc2UgbW92ZSB0YXJnZXQgb3ZlcndyaXRlcyBhbiBleGlzdGluZyB2YWx1ZSxcbiAgICAgICAgcmV0dXJuIHRoZSByZW1vdmVkIHZhbHVlLCB0aGlzIGNhbiBiZSB0YXhpbmcgcGVyZm9ybWFuY2Utd2lzZSxcbiAgICAgICAgYW5kIGlzIHBvdGVudGlhbGx5IHVubmVlZGVkICovXG4gICAgICAgIGxldCByZW1vdmVkID0gZ2V0VmFsdWVCeVBvaW50ZXIoZG9jdW1lbnQsIHRoaXMucGF0aCk7XG4gICAgICAgIGlmIChyZW1vdmVkKSB7XG4gICAgICAgICAgICByZW1vdmVkID0gX2RlZXBDbG9uZShyZW1vdmVkKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcmlnaW5hbFZhbHVlID0gYXBwbHlPcGVyYXRpb24oZG9jdW1lbnQsIHtcbiAgICAgICAgICAgIG9wOiBcInJlbW92ZVwiLFxuICAgICAgICAgICAgcGF0aDogdGhpcy5mcm9tLFxuICAgICAgICB9KS5yZW1vdmVkO1xuICAgICAgICBhcHBseU9wZXJhdGlvbihkb2N1bWVudCwge1xuICAgICAgICAgICAgb3A6IFwiYWRkXCIsXG4gICAgICAgICAgICBwYXRoOiB0aGlzLnBhdGgsXG4gICAgICAgICAgICB2YWx1ZTogb3JpZ2luYWxWYWx1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7IG5ld0RvY3VtZW50OiBkb2N1bWVudCwgcmVtb3ZlZCB9O1xuICAgIH0sXG4gICAgY29weTogZnVuY3Rpb24gKG9iaiwga2V5LCBkb2N1bWVudCkge1xuICAgICAgICBjb25zdCB2YWx1ZVRvQ29weSA9IGdldFZhbHVlQnlQb2ludGVyKGRvY3VtZW50LCB0aGlzLmZyb20pO1xuICAgICAgICAvLyBlbmZvcmNlIGNvcHkgYnkgdmFsdWUgc28gZnVydGhlciBvcGVyYXRpb25zIGRvbid0IGFmZmVjdCBzb3VyY2UgKHNlZSBpc3N1ZSAjMTc3KVxuICAgICAgICBhcHBseU9wZXJhdGlvbihkb2N1bWVudCwge1xuICAgICAgICAgICAgb3A6IFwiYWRkXCIsXG4gICAgICAgICAgICBwYXRoOiB0aGlzLnBhdGgsXG4gICAgICAgICAgICB2YWx1ZTogX2RlZXBDbG9uZSh2YWx1ZVRvQ29weSksXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4geyBuZXdEb2N1bWVudDogZG9jdW1lbnQgfTtcbiAgICB9LFxuICAgIHRlc3Q6IGZ1bmN0aW9uIChvYmosIGtleSwgZG9jdW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHsgbmV3RG9jdW1lbnQ6IGRvY3VtZW50LCB0ZXN0OiBfYXJlRXF1YWxzKG9ialtrZXldLCB0aGlzLnZhbHVlKSB9O1xuICAgIH0sXG4gICAgX2dldDogZnVuY3Rpb24gKG9iaiwga2V5LCBkb2N1bWVudCkge1xuICAgICAgICB0aGlzLnZhbHVlID0gb2JqW2tleV07XG4gICAgICAgIHJldHVybiB7IG5ld0RvY3VtZW50OiBkb2N1bWVudCB9O1xuICAgIH0sXG59O1xuLyogVGhlIG9wZXJhdGlvbnMgYXBwbGljYWJsZSB0byBhbiBhcnJheS4gTWFueSBhcmUgdGhlIHNhbWUgYXMgZm9yIHRoZSBvYmplY3QgKi9cbnZhciBhcnJPcHMgPSB7XG4gICAgYWRkOiBmdW5jdGlvbiAoYXJyLCBpLCBkb2N1bWVudCkge1xuICAgICAgICBpZiAoaXNJbnRlZ2VyKGkpKSB7XG4gICAgICAgICAgICBhcnIuc3BsaWNlKGksIDAsIHRoaXMudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gYXJyYXkgcHJvcHNcbiAgICAgICAgICAgIGFycltpXSA9IHRoaXMudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhpcyBtYXkgYmUgbmVlZGVkIHdoZW4gdXNpbmcgJy0nIGluIGFuIGFycmF5XG4gICAgICAgIHJldHVybiB7IG5ld0RvY3VtZW50OiBkb2N1bWVudCwgaW5kZXg6IGkgfTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gKGFyciwgaSwgZG9jdW1lbnQpIHtcbiAgICAgICAgdmFyIHJlbW92ZWRMaXN0ID0gYXJyLnNwbGljZShpLCAxKTtcbiAgICAgICAgcmV0dXJuIHsgbmV3RG9jdW1lbnQ6IGRvY3VtZW50LCByZW1vdmVkOiByZW1vdmVkTGlzdFswXSB9O1xuICAgIH0sXG4gICAgcmVwbGFjZTogZnVuY3Rpb24gKGFyciwgaSwgZG9jdW1lbnQpIHtcbiAgICAgICAgdmFyIHJlbW92ZWQgPSBhcnJbaV07XG4gICAgICAgIGFycltpXSA9IHRoaXMudmFsdWU7XG4gICAgICAgIHJldHVybiB7IG5ld0RvY3VtZW50OiBkb2N1bWVudCwgcmVtb3ZlZCB9O1xuICAgIH0sXG4gICAgbW92ZTogb2JqT3BzLm1vdmUsXG4gICAgY29weTogb2JqT3BzLmNvcHksXG4gICAgdGVzdDogb2JqT3BzLnRlc3QsXG4gICAgX2dldDogb2JqT3BzLl9nZXQsXG59O1xuLyoqXG4gKiBSZXRyaWV2ZXMgYSB2YWx1ZSBmcm9tIGEgSlNPTiBkb2N1bWVudCBieSBhIEpTT04gcG9pbnRlci5cbiAqIFJldHVybnMgdGhlIHZhbHVlLlxuICpcbiAqIEBwYXJhbSBkb2N1bWVudCBUaGUgZG9jdW1lbnQgdG8gZ2V0IHRoZSB2YWx1ZSBmcm9tXG4gKiBAcGFyYW0gcG9pbnRlciBhbiBlc2NhcGVkIEpTT04gcG9pbnRlclxuICogQHJldHVybiBUaGUgcmV0cmlldmVkIHZhbHVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRWYWx1ZUJ5UG9pbnRlcihkb2N1bWVudCwgcG9pbnRlcikge1xuICAgIGlmIChwb2ludGVyID09IFwiXCIpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50O1xuICAgIH1cbiAgICB2YXIgZ2V0T3JpZ2luYWxEZXN0aW5hdGlvbiA9IHsgb3A6IFwiX2dldFwiLCBwYXRoOiBwb2ludGVyIH07XG4gICAgYXBwbHlPcGVyYXRpb24oZG9jdW1lbnQsIGdldE9yaWdpbmFsRGVzdGluYXRpb24pO1xuICAgIHJldHVybiBnZXRPcmlnaW5hbERlc3RpbmF0aW9uLnZhbHVlO1xufVxuLyoqXG4gKiBBcHBseSBhIHNpbmdsZSBKU09OIFBhdGNoIE9wZXJhdGlvbiBvbiBhIEpTT04gZG9jdW1lbnQuXG4gKiBSZXR1cm5zIHRoZSB7bmV3RG9jdW1lbnQsIHJlc3VsdH0gb2YgdGhlIG9wZXJhdGlvbi5cbiAqIEl0IG1vZGlmaWVzIHRoZSBgZG9jdW1lbnRgIGFuZCBgb3BlcmF0aW9uYCBvYmplY3RzIC0gaXQgZ2V0cyB0aGUgdmFsdWVzIGJ5IHJlZmVyZW5jZS5cbiAqIElmIHlvdSB3b3VsZCBsaWtlIHRvIGF2b2lkIHRvdWNoaW5nIHlvdXIgdmFsdWVzLCBjbG9uZSB0aGVtOlxuICogYGpzb25wYXRjaC5hcHBseU9wZXJhdGlvbihkb2N1bWVudCwganNvbnBhdGNoLl9kZWVwQ2xvbmUob3BlcmF0aW9uKSlgLlxuICpcbiAqIEBwYXJhbSBkb2N1bWVudCBUaGUgZG9jdW1lbnQgdG8gcGF0Y2hcbiAqIEBwYXJhbSBvcGVyYXRpb24gVGhlIG9wZXJhdGlvbiB0byBhcHBseVxuICogQHBhcmFtIHZhbGlkYXRlT3BlcmF0aW9uIGBmYWxzZWAgaXMgd2l0aG91dCB2YWxpZGF0aW9uLCBgdHJ1ZWAgdG8gdXNlIGRlZmF1bHQganNvbnBhdGNoJ3MgdmFsaWRhdGlvbiwgb3IgeW91IGNhbiBwYXNzIGEgYHZhbGlkYXRlT3BlcmF0aW9uYCBjYWxsYmFjayB0byBiZSB1c2VkIGZvciB2YWxpZGF0aW9uLlxuICogQHBhcmFtIG11dGF0ZURvY3VtZW50IFdoZXRoZXIgdG8gbXV0YXRlIHRoZSBvcmlnaW5hbCBkb2N1bWVudCBvciBjbG9uZSBpdCBiZWZvcmUgYXBwbHlpbmdcbiAqIEBwYXJhbSBiYW5Qcm90b3R5cGVNb2RpZmljYXRpb25zIFdoZXRoZXIgdG8gYmFuIG1vZGlmaWNhdGlvbnMgdG8gYF9fcHJvdG9fX2AsIGRlZmF1bHRzIHRvIGB0cnVlYC5cbiAqIEByZXR1cm4gYHtuZXdEb2N1bWVudCwgcmVzdWx0fWAgYWZ0ZXIgdGhlIG9wZXJhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlPcGVyYXRpb24oZG9jdW1lbnQsIG9wZXJhdGlvbiwgdmFsaWRhdGVPcGVyYXRpb24gPSBmYWxzZSwgbXV0YXRlRG9jdW1lbnQgPSB0cnVlLCBiYW5Qcm90b3R5cGVNb2RpZmljYXRpb25zID0gdHJ1ZSwgaW5kZXggPSAwKSB7XG4gICAgaWYgKHZhbGlkYXRlT3BlcmF0aW9uKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsaWRhdGVPcGVyYXRpb24gPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB2YWxpZGF0ZU9wZXJhdGlvbihvcGVyYXRpb24sIDAsIGRvY3VtZW50LCBvcGVyYXRpb24ucGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YWxpZGF0b3Iob3BlcmF0aW9uLCAwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiBST09UIE9QRVJBVElPTlMgKi9cbiAgICBpZiAob3BlcmF0aW9uLnBhdGggPT09IFwiXCIpIHtcbiAgICAgICAgbGV0IHJldHVyblZhbHVlID0geyBuZXdEb2N1bWVudDogZG9jdW1lbnQgfTtcbiAgICAgICAgaWYgKG9wZXJhdGlvbi5vcCA9PT0gXCJhZGRcIikge1xuICAgICAgICAgICAgcmV0dXJuVmFsdWUubmV3RG9jdW1lbnQgPSBvcGVyYXRpb24udmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3BlcmF0aW9uLm9wID09PSBcInJlcGxhY2VcIikge1xuICAgICAgICAgICAgcmV0dXJuVmFsdWUubmV3RG9jdW1lbnQgPSBvcGVyYXRpb24udmFsdWU7XG4gICAgICAgICAgICByZXR1cm5WYWx1ZS5yZW1vdmVkID0gZG9jdW1lbnQ7IC8vZG9jdW1lbnQgd2UgcmVtb3ZlZFxuICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wZXJhdGlvbi5vcCA9PT0gXCJtb3ZlXCIgfHwgb3BlcmF0aW9uLm9wID09PSBcImNvcHlcIikge1xuICAgICAgICAgICAgLy8gaXQncyBhIG1vdmUgb3IgY29weSB0byByb290XG4gICAgICAgICAgICByZXR1cm5WYWx1ZS5uZXdEb2N1bWVudCA9IGdldFZhbHVlQnlQb2ludGVyKGRvY3VtZW50LCBvcGVyYXRpb24uZnJvbSk7IC8vIGdldCB0aGUgdmFsdWUgYnkganNvbi1wb2ludGVyIGluIGBmcm9tYCBmaWVsZFxuICAgICAgICAgICAgaWYgKG9wZXJhdGlvbi5vcCA9PT0gXCJtb3ZlXCIpIHtcbiAgICAgICAgICAgICAgICAvLyByZXBvcnQgcmVtb3ZlZCBpdGVtXG4gICAgICAgICAgICAgICAgcmV0dXJuVmFsdWUucmVtb3ZlZCA9IGRvY3VtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wZXJhdGlvbi5vcCA9PT0gXCJ0ZXN0XCIpIHtcbiAgICAgICAgICAgIHJldHVyblZhbHVlLnRlc3QgPSBfYXJlRXF1YWxzKGRvY3VtZW50LCBvcGVyYXRpb24udmFsdWUpO1xuICAgICAgICAgICAgaWYgKHJldHVyblZhbHVlLnRlc3QgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEpzb25QYXRjaEVycm9yKFwiVGVzdCBvcGVyYXRpb24gZmFpbGVkXCIsIFwiVEVTVF9PUEVSQVRJT05fRkFJTEVEXCIsIGluZGV4LCBvcGVyYXRpb24sIGRvY3VtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVyblZhbHVlLm5ld0RvY3VtZW50ID0gZG9jdW1lbnQ7XG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3BlcmF0aW9uLm9wID09PSBcInJlbW92ZVwiKSB7XG4gICAgICAgICAgICAvLyBhIHJlbW92ZSBvbiByb290XG4gICAgICAgICAgICByZXR1cm5WYWx1ZS5yZW1vdmVkID0gZG9jdW1lbnQ7XG4gICAgICAgICAgICByZXR1cm5WYWx1ZS5uZXdEb2N1bWVudCA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3BlcmF0aW9uLm9wID09PSBcIl9nZXRcIikge1xuICAgICAgICAgICAgb3BlcmF0aW9uLnZhbHVlID0gZG9jdW1lbnQ7XG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvKiBiYWQgb3BlcmF0aW9uICovXG4gICAgICAgICAgICBpZiAodmFsaWRhdGVPcGVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSnNvblBhdGNoRXJyb3IoXCJPcGVyYXRpb24gYG9wYCBwcm9wZXJ0eSBpcyBub3Qgb25lIG9mIG9wZXJhdGlvbnMgZGVmaW5lZCBpbiBSRkMtNjkwMlwiLCBcIk9QRVJBVElPTl9PUF9JTlZBTElEXCIsIGluZGV4LCBvcGVyYXRpb24sIGRvY3VtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gLyogRU5EIFJPT1QgT1BFUkFUSU9OUyAqL1xuICAgIGVsc2Uge1xuICAgICAgICBpZiAoIW11dGF0ZURvY3VtZW50KSB7XG4gICAgICAgICAgICBkb2N1bWVudCA9IF9kZWVwQ2xvbmUoZG9jdW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhdGggPSBvcGVyYXRpb24ucGF0aCB8fCBcIlwiO1xuICAgICAgICBjb25zdCBrZXlzID0gcGF0aC5zcGxpdChcIi9cIik7XG4gICAgICAgIGxldCBvYmogPSBkb2N1bWVudDtcbiAgICAgICAgbGV0IHQgPSAxOyAvL3NraXAgZW1wdHkgZWxlbWVudCAtIGh0dHA6Ly9qc3BlcmYuY29tL3RvLXNoaWZ0LW9yLW5vdC10by1zaGlmdFxuICAgICAgICBsZXQgbGVuID0ga2V5cy5sZW5ndGg7XG4gICAgICAgIGxldCBleGlzdGluZ1BhdGhGcmFnbWVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IGtleTtcbiAgICAgICAgbGV0IHZhbGlkYXRlRnVuY3Rpb247XG4gICAgICAgIGlmICh0eXBlb2YgdmFsaWRhdGVPcGVyYXRpb24gPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB2YWxpZGF0ZUZ1bmN0aW9uID0gdmFsaWRhdGVPcGVyYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YWxpZGF0ZUZ1bmN0aW9uID0gdmFsaWRhdG9yO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBrZXkgPSBrZXlzW3RdO1xuICAgICAgICAgICAgaWYgKGtleSAmJiBrZXkuaW5kZXhPZihcIn5cIikgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICBrZXkgPSB1bmVzY2FwZVBhdGhDb21wb25lbnQoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChiYW5Qcm90b3R5cGVNb2RpZmljYXRpb25zICYmXG4gICAgICAgICAgICAgICAgKGtleSA9PSBcIl9fcHJvdG9fX1wiIHx8XG4gICAgICAgICAgICAgICAgICAgIChrZXkgPT0gXCJwcm90b3R5cGVcIiAmJiB0ID4gMCAmJiBrZXlzW3QgLSAxXSA9PSBcImNvbnN0cnVjdG9yXCIpKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJKU09OLVBhdGNoOiBtb2RpZnlpbmcgYF9fcHJvdG9fX2Agb3IgYGNvbnN0cnVjdG9yL3Byb3RvdHlwZWAgcHJvcCBpcyBiYW5uZWQgZm9yIHNlY3VyaXR5IHJlYXNvbnMsIGlmIHRoaXMgd2FzIG9uIHB1cnBvc2UsIHBsZWFzZSBzZXQgYGJhblByb3RvdHlwZU1vZGlmaWNhdGlvbnNgIGZsYWcgZmFsc2UgYW5kIHBhc3MgaXQgdG8gdGhpcyBmdW5jdGlvbi4gTW9yZSBpbmZvIGluIGZhc3QtanNvbi1wYXRjaCBSRUFETUVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsaWRhdGVPcGVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdQYXRoRnJhZ21lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob2JqW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdQYXRoRnJhZ21lbnQgPSBrZXlzLnNsaWNlKDAsIHQpLmpvaW4oXCIvXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHQgPT0gbGVuIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdQYXRoRnJhZ21lbnQgPSBvcGVyYXRpb24ucGF0aDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdQYXRoRnJhZ21lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVGdW5jdGlvbihvcGVyYXRpb24sIDAsIGRvY3VtZW50LCBleGlzdGluZ1BhdGhGcmFnbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0Kys7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gXCItXCIpIHtcbiAgICAgICAgICAgICAgICAgICAga2V5ID0gb2JqLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0ZU9wZXJhdGlvbiAmJiAhaXNJbnRlZ2VyKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBKc29uUGF0Y2hFcnJvcihcIkV4cGVjdGVkIGFuIHVuc2lnbmVkIGJhc2UtMTAgaW50ZWdlciB2YWx1ZSwgbWFraW5nIHRoZSBuZXcgcmVmZXJlbmNlZCB2YWx1ZSB0aGUgYXJyYXkgZWxlbWVudCB3aXRoIHRoZSB6ZXJvLWJhc2VkIGluZGV4XCIsIFwiT1BFUkFUSU9OX1BBVEhfSUxMRUdBTF9BUlJBWV9JTkRFWFwiLCBpbmRleCwgb3BlcmF0aW9uLCBkb2N1bWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH0gLy8gb25seSBwYXJzZSBrZXkgd2hlbiBpdCdzIGFuIGludGVnZXIgZm9yIGBhcnIucHJvcGAgdG8gd29ya1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpc0ludGVnZXIoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5ID0gfn5rZXk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHQgPj0gbGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0ZU9wZXJhdGlvbiAmJiBvcGVyYXRpb24ub3AgPT09IFwiYWRkXCIgJiYga2V5ID4gb2JqLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEpzb25QYXRjaEVycm9yKFwiVGhlIHNwZWNpZmllZCBpbmRleCBNVVNUIE5PVCBiZSBncmVhdGVyIHRoYW4gdGhlIG51bWJlciBvZiBlbGVtZW50cyBpbiB0aGUgYXJyYXlcIiwgXCJPUEVSQVRJT05fVkFMVUVfT1VUX09GX0JPVU5EU1wiLCBpbmRleCwgb3BlcmF0aW9uLCBkb2N1bWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmV0dXJuVmFsdWUgPSBhcnJPcHNbb3BlcmF0aW9uLm9wXS5jYWxsKG9wZXJhdGlvbiwgb2JqLCBrZXksIGRvY3VtZW50KTsgLy8gQXBwbHkgcGF0Y2hcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJldHVyblZhbHVlLnRlc3QgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSnNvblBhdGNoRXJyb3IoXCJUZXN0IG9wZXJhdGlvbiBmYWlsZWRcIiwgXCJURVNUX09QRVJBVElPTl9GQUlMRURcIiwgaW5kZXgsIG9wZXJhdGlvbiwgZG9jdW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodCA+PSBsZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmV0dXJuVmFsdWUgPSBvYmpPcHNbb3BlcmF0aW9uLm9wXS5jYWxsKG9wZXJhdGlvbiwgb2JqLCBrZXksIGRvY3VtZW50KTsgLy8gQXBwbHkgcGF0Y2hcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJldHVyblZhbHVlLnRlc3QgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSnNvblBhdGNoRXJyb3IoXCJUZXN0IG9wZXJhdGlvbiBmYWlsZWRcIiwgXCJURVNUX09QRVJBVElPTl9GQUlMRURcIiwgaW5kZXgsIG9wZXJhdGlvbiwgZG9jdW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvYmogPSBvYmpba2V5XTtcbiAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgbW9yZSBrZXlzIGluIHRoZSBwYXRoLCBidXQgdGhlIG5leHQgdmFsdWUgaXNuJ3QgYSBub24tbnVsbCBvYmplY3QsXG4gICAgICAgICAgICAvLyB0aHJvdyBhbiBPUEVSQVRJT05fUEFUSF9VTlJFU09MVkFCTEUgZXJyb3IgaW5zdGVhZCBvZiBpdGVyYXRpbmcgYWdhaW4uXG4gICAgICAgICAgICBpZiAodmFsaWRhdGVPcGVyYXRpb24gJiYgdCA8IGxlbiAmJiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBKc29uUGF0Y2hFcnJvcihcIkNhbm5vdCBwZXJmb3JtIG9wZXJhdGlvbiBhdCB0aGUgZGVzaXJlZCBwYXRoXCIsIFwiT1BFUkFUSU9OX1BBVEhfVU5SRVNPTFZBQkxFXCIsIGluZGV4LCBvcGVyYXRpb24sIGRvY3VtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQXBwbHkgYSBmdWxsIEpTT04gUGF0Y2ggYXJyYXkgb24gYSBKU09OIGRvY3VtZW50LlxuICogUmV0dXJucyB0aGUge25ld0RvY3VtZW50LCByZXN1bHR9IG9mIHRoZSBwYXRjaC5cbiAqIEl0IG1vZGlmaWVzIHRoZSBgZG9jdW1lbnRgIG9iamVjdCBhbmQgYHBhdGNoYCAtIGl0IGdldHMgdGhlIHZhbHVlcyBieSByZWZlcmVuY2UuXG4gKiBJZiB5b3Ugd291bGQgbGlrZSB0byBhdm9pZCB0b3VjaGluZyB5b3VyIHZhbHVlcywgY2xvbmUgdGhlbTpcbiAqIGBqc29ucGF0Y2guYXBwbHlQYXRjaChkb2N1bWVudCwganNvbnBhdGNoLl9kZWVwQ2xvbmUocGF0Y2gpKWAuXG4gKlxuICogQHBhcmFtIGRvY3VtZW50IFRoZSBkb2N1bWVudCB0byBwYXRjaFxuICogQHBhcmFtIHBhdGNoIFRoZSBwYXRjaCB0byBhcHBseVxuICogQHBhcmFtIHZhbGlkYXRlT3BlcmF0aW9uIGBmYWxzZWAgaXMgd2l0aG91dCB2YWxpZGF0aW9uLCBgdHJ1ZWAgdG8gdXNlIGRlZmF1bHQganNvbnBhdGNoJ3MgdmFsaWRhdGlvbiwgb3IgeW91IGNhbiBwYXNzIGEgYHZhbGlkYXRlT3BlcmF0aW9uYCBjYWxsYmFjayB0byBiZSB1c2VkIGZvciB2YWxpZGF0aW9uLlxuICogQHBhcmFtIG11dGF0ZURvY3VtZW50IFdoZXRoZXIgdG8gbXV0YXRlIHRoZSBvcmlnaW5hbCBkb2N1bWVudCBvciBjbG9uZSBpdCBiZWZvcmUgYXBwbHlpbmdcbiAqIEBwYXJhbSBiYW5Qcm90b3R5cGVNb2RpZmljYXRpb25zIFdoZXRoZXIgdG8gYmFuIG1vZGlmaWNhdGlvbnMgdG8gYF9fcHJvdG9fX2AsIGRlZmF1bHRzIHRvIGB0cnVlYC5cbiAqIEByZXR1cm4gQW4gYXJyYXkgb2YgYHtuZXdEb2N1bWVudCwgcmVzdWx0fWAgYWZ0ZXIgdGhlIHBhdGNoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVBhdGNoKGRvY3VtZW50LCBwYXRjaCwgdmFsaWRhdGVPcGVyYXRpb24sIG11dGF0ZURvY3VtZW50ID0gdHJ1ZSwgYmFuUHJvdG90eXBlTW9kaWZpY2F0aW9ucyA9IHRydWUpIHtcbiAgICBpZiAodmFsaWRhdGVPcGVyYXRpb24pIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHBhdGNoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEpzb25QYXRjaEVycm9yKFwiUGF0Y2ggc2VxdWVuY2UgbXVzdCBiZSBhbiBhcnJheVwiLCBcIlNFUVVFTkNFX05PVF9BTl9BUlJBWVwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIW11dGF0ZURvY3VtZW50KSB7XG4gICAgICAgIGRvY3VtZW50ID0gX2RlZXBDbG9uZShkb2N1bWVudCk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdHMgPSBuZXcgQXJyYXkocGF0Y2gubGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gcGF0Y2gubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gd2UgZG9uJ3QgbmVlZCB0byBwYXNzIG11dGF0ZURvY3VtZW50IGFyZ3VtZW50IGJlY2F1c2UgaWYgaXQgd2FzIHRydWUsIHdlIGFscmVhZHkgZGVlcCBjbG9uZWQgdGhlIG9iamVjdCwgd2UnbGwganVzdCBwYXNzIGB0cnVlYFxuICAgICAgICByZXN1bHRzW2ldID0gYXBwbHlPcGVyYXRpb24oZG9jdW1lbnQsIHBhdGNoW2ldLCB2YWxpZGF0ZU9wZXJhdGlvbiwgdHJ1ZSwgYmFuUHJvdG90eXBlTW9kaWZpY2F0aW9ucywgaSk7XG4gICAgICAgIGRvY3VtZW50ID0gcmVzdWx0c1tpXS5uZXdEb2N1bWVudDsgLy8gaW4gY2FzZSByb290IHdhcyByZXBsYWNlZFxuICAgIH1cbiAgICByZXN1bHRzLm5ld0RvY3VtZW50ID0gZG9jdW1lbnQ7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG59XG4vKipcbiAqIEFwcGx5IGEgc2luZ2xlIEpTT04gUGF0Y2ggT3BlcmF0aW9uIG9uIGEgSlNPTiBkb2N1bWVudC5cbiAqIFJldHVybnMgdGhlIHVwZGF0ZWQgZG9jdW1lbnQuXG4gKiBTdWl0YWJsZSBhcyBhIHJlZHVjZXIuXG4gKlxuICogQHBhcmFtIGRvY3VtZW50IFRoZSBkb2N1bWVudCB0byBwYXRjaFxuICogQHBhcmFtIG9wZXJhdGlvbiBUaGUgb3BlcmF0aW9uIHRvIGFwcGx5XG4gKiBAcmV0dXJuIFRoZSB1cGRhdGVkIGRvY3VtZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVJlZHVjZXIoZG9jdW1lbnQsIG9wZXJhdGlvbiwgaW5kZXgpIHtcbiAgICBjb25zdCBvcGVyYXRpb25SZXN1bHQgPSBhcHBseU9wZXJhdGlvbihkb2N1bWVudCwgb3BlcmF0aW9uKTtcbiAgICBpZiAob3BlcmF0aW9uUmVzdWx0LnRlc3QgPT09IGZhbHNlKSB7XG4gICAgICAgIC8vIGZhaWxlZCB0ZXN0XG4gICAgICAgIHRocm93IG5ldyBKc29uUGF0Y2hFcnJvcihcIlRlc3Qgb3BlcmF0aW9uIGZhaWxlZFwiLCBcIlRFU1RfT1BFUkFUSU9OX0ZBSUxFRFwiLCBpbmRleCwgb3BlcmF0aW9uLCBkb2N1bWVudCk7XG4gICAgfVxuICAgIHJldHVybiBvcGVyYXRpb25SZXN1bHQubmV3RG9jdW1lbnQ7XG59XG4vKipcbiAqIFZhbGlkYXRlcyBhIHNpbmdsZSBvcGVyYXRpb24uIENhbGxlZCBmcm9tIGBqc29ucGF0Y2gudmFsaWRhdGVgLiBUaHJvd3MgYEpzb25QYXRjaEVycm9yYCBpbiBjYXNlIG9mIGFuIGVycm9yLlxuICogQHBhcmFtIHtvYmplY3R9IG9wZXJhdGlvbiAtIG9wZXJhdGlvbiBvYmplY3QgKHBhdGNoKVxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gaW5kZXggb2Ygb3BlcmF0aW9uIGluIHRoZSBzZXF1ZW5jZVxuICogQHBhcmFtIHtvYmplY3R9IFtkb2N1bWVudF0gLSBvYmplY3Qgd2hlcmUgdGhlIG9wZXJhdGlvbiBpcyBzdXBwb3NlZCB0byBiZSBhcHBsaWVkXG4gKiBAcGFyYW0ge3N0cmluZ30gW2V4aXN0aW5nUGF0aEZyYWdtZW50XSAtIGNvbWVzIGFsb25nIHdpdGggYGRvY3VtZW50YFxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdG9yKG9wZXJhdGlvbiwgaW5kZXgsIGRvY3VtZW50LCBleGlzdGluZ1BhdGhGcmFnbWVudCkge1xuICAgIGlmICh0eXBlb2Ygb3BlcmF0aW9uICE9PSBcIm9iamVjdFwiIHx8XG4gICAgICAgIG9wZXJhdGlvbiA9PT0gbnVsbCB8fFxuICAgICAgICBBcnJheS5pc0FycmF5KG9wZXJhdGlvbikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpzb25QYXRjaEVycm9yKFwiT3BlcmF0aW9uIGlzIG5vdCBhbiBvYmplY3RcIiwgXCJPUEVSQVRJT05fTk9UX0FOX09CSkVDVFwiLCBpbmRleCwgb3BlcmF0aW9uLCBkb2N1bWVudCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFvYmpPcHNbb3BlcmF0aW9uLm9wXSkge1xuICAgICAgICB0aHJvdyBuZXcgSnNvblBhdGNoRXJyb3IoXCJPcGVyYXRpb24gYG9wYCBwcm9wZXJ0eSBpcyBub3Qgb25lIG9mIG9wZXJhdGlvbnMgZGVmaW5lZCBpbiBSRkMtNjkwMlwiLCBcIk9QRVJBVElPTl9PUF9JTlZBTElEXCIsIGluZGV4LCBvcGVyYXRpb24sIGRvY3VtZW50KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIG9wZXJhdGlvbi5wYXRoICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBKc29uUGF0Y2hFcnJvcihcIk9wZXJhdGlvbiBgcGF0aGAgcHJvcGVydHkgaXMgbm90IGEgc3RyaW5nXCIsIFwiT1BFUkFUSU9OX1BBVEhfSU5WQUxJRFwiLCBpbmRleCwgb3BlcmF0aW9uLCBkb2N1bWVudCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKG9wZXJhdGlvbi5wYXRoLmluZGV4T2YoXCIvXCIpICE9PSAwICYmIG9wZXJhdGlvbi5wYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gcGF0aHMgdGhhdCBhcmVuJ3QgZW1wdHkgc3RyaW5nIHNob3VsZCBzdGFydCB3aXRoIFwiL1wiXG4gICAgICAgIHRocm93IG5ldyBKc29uUGF0Y2hFcnJvcignT3BlcmF0aW9uIGBwYXRoYCBwcm9wZXJ0eSBtdXN0IHN0YXJ0IHdpdGggXCIvXCInLCBcIk9QRVJBVElPTl9QQVRIX0lOVkFMSURcIiwgaW5kZXgsIG9wZXJhdGlvbiwgZG9jdW1lbnQpO1xuICAgIH1cbiAgICBlbHNlIGlmICgob3BlcmF0aW9uLm9wID09PSBcIm1vdmVcIiB8fCBvcGVyYXRpb24ub3AgPT09IFwiY29weVwiKSAmJlxuICAgICAgICB0eXBlb2Ygb3BlcmF0aW9uLmZyb20gIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEpzb25QYXRjaEVycm9yKFwiT3BlcmF0aW9uIGBmcm9tYCBwcm9wZXJ0eSBpcyBub3QgcHJlc2VudCAoYXBwbGljYWJsZSBpbiBgbW92ZWAgYW5kIGBjb3B5YCBvcGVyYXRpb25zKVwiLCBcIk9QRVJBVElPTl9GUk9NX1JFUVVJUkVEXCIsIGluZGV4LCBvcGVyYXRpb24sIGRvY3VtZW50KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoKG9wZXJhdGlvbi5vcCA9PT0gXCJhZGRcIiB8fFxuICAgICAgICBvcGVyYXRpb24ub3AgPT09IFwicmVwbGFjZVwiIHx8XG4gICAgICAgIG9wZXJhdGlvbi5vcCA9PT0gXCJ0ZXN0XCIpICYmXG4gICAgICAgIG9wZXJhdGlvbi52YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBKc29uUGF0Y2hFcnJvcihcIk9wZXJhdGlvbiBgdmFsdWVgIHByb3BlcnR5IGlzIG5vdCBwcmVzZW50IChhcHBsaWNhYmxlIGluIGBhZGRgLCBgcmVwbGFjZWAgYW5kIGB0ZXN0YCBvcGVyYXRpb25zKVwiLCBcIk9QRVJBVElPTl9WQUxVRV9SRVFVSVJFRFwiLCBpbmRleCwgb3BlcmF0aW9uLCBkb2N1bWVudCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKChvcGVyYXRpb24ub3AgPT09IFwiYWRkXCIgfHxcbiAgICAgICAgb3BlcmF0aW9uLm9wID09PSBcInJlcGxhY2VcIiB8fFxuICAgICAgICBvcGVyYXRpb24ub3AgPT09IFwidGVzdFwiKSAmJlxuICAgICAgICBoYXNVbmRlZmluZWQob3BlcmF0aW9uLnZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgSnNvblBhdGNoRXJyb3IoXCJPcGVyYXRpb24gYHZhbHVlYCBwcm9wZXJ0eSBpcyBub3QgcHJlc2VudCAoYXBwbGljYWJsZSBpbiBgYWRkYCwgYHJlcGxhY2VgIGFuZCBgdGVzdGAgb3BlcmF0aW9ucylcIiwgXCJPUEVSQVRJT05fVkFMVUVfQ0FOTk9UX0NPTlRBSU5fVU5ERUZJTkVEXCIsIGluZGV4LCBvcGVyYXRpb24sIGRvY3VtZW50KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZG9jdW1lbnQpIHtcbiAgICAgICAgaWYgKG9wZXJhdGlvbi5vcCA9PSBcImFkZFwiKSB7XG4gICAgICAgICAgICB2YXIgcGF0aExlbiA9IG9wZXJhdGlvbi5wYXRoLnNwbGl0KFwiL1wiKS5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgZXhpc3RpbmdQYXRoTGVuID0gZXhpc3RpbmdQYXRoRnJhZ21lbnQuc3BsaXQoXCIvXCIpLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChwYXRoTGVuICE9PSBleGlzdGluZ1BhdGhMZW4gKyAxICYmIHBhdGhMZW4gIT09IGV4aXN0aW5nUGF0aExlbikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBKc29uUGF0Y2hFcnJvcihcIkNhbm5vdCBwZXJmb3JtIGFuIGBhZGRgIG9wZXJhdGlvbiBhdCB0aGUgZGVzaXJlZCBwYXRoXCIsIFwiT1BFUkFUSU9OX1BBVEhfQ0FOTk9UX0FERFwiLCBpbmRleCwgb3BlcmF0aW9uLCBkb2N1bWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3BlcmF0aW9uLm9wID09PSBcInJlcGxhY2VcIiB8fFxuICAgICAgICAgICAgb3BlcmF0aW9uLm9wID09PSBcInJlbW92ZVwiIHx8XG4gICAgICAgICAgICBvcGVyYXRpb24ub3AgPT09IFwiX2dldFwiKSB7XG4gICAgICAgICAgICBpZiAob3BlcmF0aW9uLnBhdGggIT09IGV4aXN0aW5nUGF0aEZyYWdtZW50KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEpzb25QYXRjaEVycm9yKFwiQ2Fubm90IHBlcmZvcm0gdGhlIG9wZXJhdGlvbiBhdCBhIHBhdGggdGhhdCBkb2VzIG5vdCBleGlzdFwiLCBcIk9QRVJBVElPTl9QQVRIX1VOUkVTT0xWQUJMRVwiLCBpbmRleCwgb3BlcmF0aW9uLCBkb2N1bWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3BlcmF0aW9uLm9wID09PSBcIm1vdmVcIiB8fCBvcGVyYXRpb24ub3AgPT09IFwiY29weVwiKSB7XG4gICAgICAgICAgICB2YXIgZXhpc3RpbmdWYWx1ZSA9IHtcbiAgICAgICAgICAgICAgICBvcDogXCJfZ2V0XCIsXG4gICAgICAgICAgICAgICAgcGF0aDogb3BlcmF0aW9uLmZyb20sXG4gICAgICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgZXJyb3IgPSB2YWxpZGF0ZShbZXhpc3RpbmdWYWx1ZV0sIGRvY3VtZW50KTtcbiAgICAgICAgICAgIGlmIChlcnJvciAmJiBlcnJvci5uYW1lID09PSBcIk9QRVJBVElPTl9QQVRIX1VOUkVTT0xWQUJMRVwiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEpzb25QYXRjaEVycm9yKFwiQ2Fubm90IHBlcmZvcm0gdGhlIG9wZXJhdGlvbiBmcm9tIGEgcGF0aCB0aGF0IGRvZXMgbm90IGV4aXN0XCIsIFwiT1BFUkFUSU9OX0ZST01fVU5SRVNPTFZBQkxFXCIsIGluZGV4LCBvcGVyYXRpb24sIGRvY3VtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogVmFsaWRhdGVzIGEgc2VxdWVuY2Ugb2Ygb3BlcmF0aW9ucy4gSWYgYGRvY3VtZW50YCBwYXJhbWV0ZXIgaXMgcHJvdmlkZWQsIHRoZSBzZXF1ZW5jZSBpcyBhZGRpdGlvbmFsbHkgdmFsaWRhdGVkIGFnYWluc3QgdGhlIG9iamVjdCBkb2N1bWVudC5cbiAqIElmIGVycm9yIGlzIGVuY291bnRlcmVkLCByZXR1cm5zIGEgSnNvblBhdGNoRXJyb3Igb2JqZWN0XG4gKiBAcGFyYW0gc2VxdWVuY2VcbiAqIEBwYXJhbSBkb2N1bWVudFxuICogQHJldHVybnMge0pzb25QYXRjaEVycm9yfHVuZGVmaW5lZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlKHNlcXVlbmNlLCBkb2N1bWVudCwgZXh0ZXJuYWxWYWxpZGF0b3IpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoc2VxdWVuY2UpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSnNvblBhdGNoRXJyb3IoXCJQYXRjaCBzZXF1ZW5jZSBtdXN0IGJlIGFuIGFycmF5XCIsIFwiU0VRVUVOQ0VfTk9UX0FOX0FSUkFZXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkb2N1bWVudCkge1xuICAgICAgICAgICAgLy9jbG9uZSBkb2N1bWVudCBhbmQgc2VxdWVuY2Ugc28gdGhhdCB3ZSBjYW4gc2FmZWx5IHRyeSBhcHBseWluZyBvcGVyYXRpb25zXG4gICAgICAgICAgICBhcHBseVBhdGNoKF9kZWVwQ2xvbmUoZG9jdW1lbnQpLCBfZGVlcENsb25lKHNlcXVlbmNlKSwgZXh0ZXJuYWxWYWxpZGF0b3IgfHwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBleHRlcm5hbFZhbGlkYXRvciA9IGV4dGVybmFsVmFsaWRhdG9yIHx8IHZhbGlkYXRvcjtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VxdWVuY2UubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBleHRlcm5hbFZhbGlkYXRvcihzZXF1ZW5jZVtpXSwgaSwgZG9jdW1lbnQsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBKc29uUGF0Y2hFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Vwb2JlcmV6a2luL2Zhc3QtZGVlcC1lcXVhbFxuLy8gTUlUIExpY2Vuc2Vcbi8vIENvcHlyaWdodCAoYykgMjAxNyBFdmdlbnkgUG9iZXJlemtpblxuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4vLyBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuLy8gU09GVFdBUkUuXG5leHBvcnQgZnVuY3Rpb24gX2FyZUVxdWFscyhhLCBiKSB7XG4gICAgaWYgKGEgPT09IGIpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGlmIChhICYmIGIgJiYgdHlwZW9mIGEgPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgYiA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHZhciBhcnJBID0gQXJyYXkuaXNBcnJheShhKSwgYXJyQiA9IEFycmF5LmlzQXJyYXkoYiksIGksIGxlbmd0aCwga2V5O1xuICAgICAgICBpZiAoYXJyQSAmJiBhcnJCKSB7XG4gICAgICAgICAgICBsZW5ndGggPSBhLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChsZW5ndGggIT0gYi5sZW5ndGgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KVxuICAgICAgICAgICAgICAgIGlmICghX2FyZUVxdWFscyhhW2ldLCBiW2ldKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFyckEgIT0gYXJyQilcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhKTtcbiAgICAgICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgICAgIGlmIChsZW5ndGggIT09IE9iamVjdC5rZXlzKGIpLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KVxuICAgICAgICAgICAgaWYgKCFiLmhhc093blByb3BlcnR5KGtleXNbaV0pKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KSB7XG4gICAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgaWYgKCFfYXJlRXF1YWxzKGFba2V5XSwgYltrZXldKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBhICE9PSBhICYmIGIgIT09IGI7XG59XG4iXSwibmFtZXMiOlsiUGF0Y2hFcnJvciIsIl9kZWVwQ2xvbmUiLCJpc0ludGVnZXIiLCJ1bmVzY2FwZVBhdGhDb21wb25lbnQiLCJoYXNVbmRlZmluZWQiLCJKc29uUGF0Y2hFcnJvciIsImRlZXBDbG9uZSIsIm9iak9wcyIsImFkZCIsIm9iaiIsImtleSIsImRvY3VtZW50IiwidmFsdWUiLCJuZXdEb2N1bWVudCIsInJlbW92ZSIsInJlbW92ZWQiLCJyZXBsYWNlIiwibW92ZSIsImdldFZhbHVlQnlQb2ludGVyIiwicGF0aCIsIm9yaWdpbmFsVmFsdWUiLCJhcHBseU9wZXJhdGlvbiIsIm9wIiwiZnJvbSIsImNvcHkiLCJ2YWx1ZVRvQ29weSIsInRlc3QiLCJfYXJlRXF1YWxzIiwiX2dldCIsImFyck9wcyIsImFyciIsImkiLCJzcGxpY2UiLCJpbmRleCIsInJlbW92ZWRMaXN0IiwicG9pbnRlciIsImdldE9yaWdpbmFsRGVzdGluYXRpb24iLCJvcGVyYXRpb24iLCJ2YWxpZGF0ZU9wZXJhdGlvbiIsIm11dGF0ZURvY3VtZW50IiwiYmFuUHJvdG90eXBlTW9kaWZpY2F0aW9ucyIsInZhbGlkYXRvciIsInJldHVyblZhbHVlIiwia2V5cyIsInNwbGl0IiwidCIsImxlbiIsImxlbmd0aCIsImV4aXN0aW5nUGF0aEZyYWdtZW50IiwidW5kZWZpbmVkIiwidmFsaWRhdGVGdW5jdGlvbiIsImluZGV4T2YiLCJUeXBlRXJyb3IiLCJzbGljZSIsImpvaW4iLCJBcnJheSIsImlzQXJyYXkiLCJjYWxsIiwiYXBwbHlQYXRjaCIsInBhdGNoIiwicmVzdWx0cyIsImFwcGx5UmVkdWNlciIsIm9wZXJhdGlvblJlc3VsdCIsInBhdGhMZW4iLCJleGlzdGluZ1BhdGhMZW4iLCJleGlzdGluZ1ZhbHVlIiwiZXJyb3IiLCJ2YWxpZGF0ZSIsIm5hbWUiLCJzZXF1ZW5jZSIsImV4dGVybmFsVmFsaWRhdG9yIiwiZSIsImEiLCJiIiwiYXJyQSIsImFyckIiLCJPYmplY3QiLCJoYXNPd25Qcm9wZXJ0eSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compare: () => (/* binding */ compare),\n/* harmony export */   generate: () => (/* binding */ generate),\n/* harmony export */   observe: () => (/* binding */ observe),\n/* harmony export */   unobserve: () => (/* binding */ unobserve)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js\");\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js\");\n// @ts-nocheck\n// Inlined because of ESM import issues\n/*!\n * https://github.com/Starcounter-Jack/JSON-Patch\n * (c) 2013-2021 Joachim Wester\n * MIT license\n */ \n\nvar beforeDict = new WeakMap();\nclass Mirror {\n    constructor(obj){\n        Object.defineProperty(this, \"obj\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"observers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n        Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.obj = obj;\n    }\n}\nclass ObserverInfo {\n    constructor(callback, observer){\n        Object.defineProperty(this, \"callback\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"observer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.callback = callback;\n        this.observer = observer;\n    }\n}\nfunction getMirror(obj) {\n    return beforeDict.get(obj);\n}\nfunction getObserverFromMirror(mirror, callback) {\n    return mirror.observers.get(callback);\n}\nfunction removeObserverFromMirror(mirror, observer) {\n    mirror.observers.delete(observer.callback);\n}\n/**\n * Detach an observer from an object\n */ function unobserve(root, observer) {\n    observer.unobserve();\n}\n/**\n * Observes changes made to an object, which can then be retrieved using generate\n */ function observe(obj, callback) {\n    var patches = [];\n    var observer;\n    var mirror = getMirror(obj);\n    if (!mirror) {\n        mirror = new Mirror(obj);\n        beforeDict.set(obj, mirror);\n    } else {\n        const observerInfo = getObserverFromMirror(mirror, callback);\n        observer = observerInfo && observerInfo.observer;\n    }\n    if (observer) {\n        return observer;\n    }\n    observer = {};\n    mirror.value = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(obj);\n    if (callback) {\n        observer.callback = callback;\n        observer.next = null;\n        var dirtyCheck = ()=>{\n            generate(observer);\n        };\n        var fastCheck = ()=>{\n            clearTimeout(observer.next);\n            observer.next = setTimeout(dirtyCheck);\n        };\n        if (false) {}\n    }\n    observer.patches = patches;\n    observer.object = obj;\n    observer.unobserve = ()=>{\n        generate(observer);\n        clearTimeout(observer.next);\n        removeObserverFromMirror(mirror, observer);\n        if (false) {}\n    };\n    mirror.observers.set(callback, new ObserverInfo(callback, observer));\n    return observer;\n}\n/**\n * Generate an array of patches from an observer\n */ function generate(observer, invertible = false) {\n    var mirror = beforeDict.get(observer.object);\n    _generate(mirror.value, observer.object, observer.patches, \"\", invertible);\n    if (observer.patches.length) {\n        (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.applyPatch)(mirror.value, observer.patches);\n    }\n    var temp = observer.patches;\n    if (temp.length > 0) {\n        observer.patches = [];\n        if (observer.callback) {\n            observer.callback(temp);\n        }\n    }\n    return temp;\n}\n// Dirty check if obj is different from mirror, generate patches and update mirror\nfunction _generate(mirror, obj, patches, path, invertible) {\n    if (obj === mirror) {\n        return;\n    }\n    if (typeof obj.toJSON === \"function\") {\n        obj = obj.toJSON();\n    }\n    var newKeys = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._objectKeys)(obj);\n    var oldKeys = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._objectKeys)(mirror);\n    var changed = false;\n    var deleted = false;\n    //if ever \"move\" operation is implemented here, make sure this test runs OK: \"should not generate the same patch twice (move)\"\n    for(var t = oldKeys.length - 1; t >= 0; t--){\n        var key = oldKeys[t];\n        var oldVal = mirror[key];\n        if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.hasOwnProperty)(obj, key) && !(obj[key] === undefined && oldVal !== undefined && Array.isArray(obj) === false)) {\n            var newVal = obj[key];\n            if (typeof oldVal == \"object\" && oldVal != null && typeof newVal == \"object\" && newVal != null && Array.isArray(oldVal) === Array.isArray(newVal)) {\n                _generate(oldVal, newVal, patches, path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key), invertible);\n            } else {\n                if (oldVal !== newVal) {\n                    changed = true;\n                    if (invertible) {\n                        patches.push({\n                            op: \"test\",\n                            path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key),\n                            value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(oldVal)\n                        });\n                    }\n                    patches.push({\n                        op: \"replace\",\n                        path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key),\n                        value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(newVal)\n                    });\n                }\n            }\n        } else if (Array.isArray(mirror) === Array.isArray(obj)) {\n            if (invertible) {\n                patches.push({\n                    op: \"test\",\n                    path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key),\n                    value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(oldVal)\n                });\n            }\n            patches.push({\n                op: \"remove\",\n                path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key)\n            });\n            deleted = true; // property has been deleted\n        } else {\n            if (invertible) {\n                patches.push({\n                    op: \"test\",\n                    path,\n                    value: mirror\n                });\n            }\n            patches.push({\n                op: \"replace\",\n                path,\n                value: obj\n            });\n            changed = true;\n        }\n    }\n    if (!deleted && newKeys.length == oldKeys.length) {\n        return;\n    }\n    for(var t = 0; t < newKeys.length; t++){\n        var key = newKeys[t];\n        if (!(0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.hasOwnProperty)(mirror, key) && obj[key] !== undefined) {\n            patches.push({\n                op: \"add\",\n                path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key),\n                value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(obj[key])\n            });\n        }\n    }\n}\n/**\n * Create an array of patches from the differences in two objects\n */ function compare(tree1, tree2, invertible = false) {\n    var patches = [];\n    _generate(tree1, tree2, patches, \"\", invertible);\n    return patches;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PatchError: () => (/* binding */ PatchError),\n/* harmony export */   _deepClone: () => (/* binding */ _deepClone),\n/* harmony export */   _getPathRecursive: () => (/* binding */ _getPathRecursive),\n/* harmony export */   _objectKeys: () => (/* binding */ _objectKeys),\n/* harmony export */   escapePathComponent: () => (/* binding */ escapePathComponent),\n/* harmony export */   getPath: () => (/* binding */ getPath),\n/* harmony export */   hasOwnProperty: () => (/* binding */ hasOwnProperty),\n/* harmony export */   hasUndefined: () => (/* binding */ hasUndefined),\n/* harmony export */   isInteger: () => (/* binding */ isInteger),\n/* harmony export */   unescapePathComponent: () => (/* binding */ unescapePathComponent)\n/* harmony export */ });\n// @ts-nocheck\n// Inlined because of ESM import issues\n/*!\n * https://github.com/Starcounter-Jack/JSON-Patch\n * (c) 2017-2022 Joachim Wester\n * MIT licensed\n */ const _hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwnProperty(obj, key) {\n    return _hasOwnProperty.call(obj, key);\n}\nfunction _objectKeys(obj) {\n    if (Array.isArray(obj)) {\n        const keys = new Array(obj.length);\n        for(let k = 0; k < keys.length; k++){\n            keys[k] = \"\" + k;\n        }\n        return keys;\n    }\n    if (Object.keys) {\n        return Object.keys(obj);\n    }\n    let keys = [];\n    for(let i in obj){\n        if (hasOwnProperty(obj, i)) {\n            keys.push(i);\n        }\n    }\n    return keys;\n}\n/**\n * Deeply clone the object.\n * https://jsperf.com/deep-copy-vs-json-stringify-json-parse/25 (recursiveDeepCopy)\n * @param  {any} obj value to clone\n * @return {any} cloned obj\n */ function _deepClone(obj) {\n    switch(typeof obj){\n        case \"object\":\n            return JSON.parse(JSON.stringify(obj)); //Faster than ES5 clone - http://jsperf.com/deep-cloning-of-objects/5\n        case \"undefined\":\n            return null; //this is how JSON.stringify behaves for array items\n        default:\n            return obj; //no need to clone primitives\n    }\n}\n//3x faster than cached /^\\d+$/.test(str)\nfunction isInteger(str) {\n    let i = 0;\n    const len = str.length;\n    let charCode;\n    while(i < len){\n        charCode = str.charCodeAt(i);\n        if (charCode >= 48 && charCode <= 57) {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\n/**\n * Escapes a json pointer path\n * @param path The raw pointer\n * @return the Escaped path\n */ function escapePathComponent(path) {\n    if (path.indexOf(\"/\") === -1 && path.indexOf(\"~\") === -1) return path;\n    return path.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n}\n/**\n * Unescapes a json pointer path\n * @param path The escaped pointer\n * @return The unescaped path\n */ function unescapePathComponent(path) {\n    return path.replace(/~1/g, \"/\").replace(/~0/g, \"~\");\n}\nfunction _getPathRecursive(root, obj) {\n    let found;\n    for(let key in root){\n        if (hasOwnProperty(root, key)) {\n            if (root[key] === obj) {\n                return escapePathComponent(key) + \"/\";\n            } else if (typeof root[key] === \"object\") {\n                found = _getPathRecursive(root[key], obj);\n                if (found != \"\") {\n                    return escapePathComponent(key) + \"/\" + found;\n                }\n            }\n        }\n    }\n    return \"\";\n}\nfunction getPath(root, obj) {\n    if (root === obj) {\n        return \"/\";\n    }\n    const path = _getPathRecursive(root, obj);\n    if (path === \"\") {\n        throw new Error(\"Object not found in root\");\n    }\n    return `/${path}`;\n}\n/**\n * Recursively checks whether an object has any undefined values inside.\n */ function hasUndefined(obj) {\n    if (obj === undefined) {\n        return true;\n    }\n    if (obj) {\n        if (Array.isArray(obj)) {\n            for(let i = 0, len = obj.length; i < len; i++){\n                if (hasUndefined(obj[i])) {\n                    return true;\n                }\n            }\n        } else if (typeof obj === \"object\") {\n            const objKeys = _objectKeys(obj);\n            const objKeysLength = objKeys.length;\n            for(var i = 0; i < objKeysLength; i++){\n                if (hasUndefined(obj[objKeys[i]])) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nfunction patchErrorMessageFormatter(message, args) {\n    const messageParts = [\n        message\n    ];\n    for(const key in args){\n        const value = typeof args[key] === \"object\" ? JSON.stringify(args[key], null, 2) : args[key]; // pretty print\n        if (typeof value !== \"undefined\") {\n            messageParts.push(`${key}: ${value}`);\n        }\n    }\n    return messageParts.join(\"\\n\");\n}\nclass PatchError extends Error {\n    constructor(message, name, index, operation, tree){\n        super(patchErrorMessageFormatter(message, {\n            name,\n            index,\n            operation,\n            tree\n        }));\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: name\n        });\n        Object.defineProperty(this, \"index\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: index\n        });\n        Object.defineProperty(this, \"operation\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: operation\n        });\n        Object.defineProperty(this, \"tree\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: tree\n        });\n        Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain, see https://stackoverflow.com/a/48342359\n        this.message = patchErrorMessageFormatter(message, {\n            name,\n            index,\n            operation,\n            tree\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/hash.js":
/*!*********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/hash.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   insecureHash: () => (/* reexport safe */ _js_sha1_hash_js__WEBPACK_IMPORTED_MODULE_0__.insecureHash)\n/* harmony export */ });\n/* harmony import */ var _js_sha1_hash_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js-sha1/hash.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/js-sha1/hash.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvaGFzaC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL2hhc2guanM/NGI0YiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBpbnNlY3VyZUhhc2ggfSBmcm9tIFwiLi9qcy1zaGExL2hhc2guanNcIjtcbiJdLCJuYW1lcyI6WyJpbnNlY3VyZUhhc2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/hash.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/js-sha1/hash.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/js-sha1/hash.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   insecureHash: () => (/* binding */ insecureHash)\n/* harmony export */ });\n// @ts-nocheck\n// Inlined to deal with portability issues with importing crypto module\n/*\n * [js-sha1]{@link https://github.com/emn178/js-sha1}\n *\n * @version 0.6.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */ /*jslint bitwise: true */ \nvar root =  false ? 0 : {};\nvar HEX_CHARS = \"0123456789abcdef\".split(\"\");\nvar EXTRA = [\n    -2147483648,\n    8388608,\n    32768,\n    128\n];\nvar SHIFT = [\n    24,\n    16,\n    8,\n    0\n];\nvar OUTPUT_TYPES = [\n    \"hex\",\n    \"array\",\n    \"digest\",\n    \"arrayBuffer\"\n];\nvar blocks = [];\nfunction Sha1(sharedMemory) {\n    if (sharedMemory) {\n        blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n        this.blocks = blocks;\n    } else {\n        this.blocks = [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ];\n    }\n    this.h0 = 0x67452301;\n    this.h1 = 0xefcdab89;\n    this.h2 = 0x98badcfe;\n    this.h3 = 0x10325476;\n    this.h4 = 0xc3d2e1f0;\n    this.block = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n}\nSha1.prototype.update = function(message) {\n    if (this.finalized) {\n        return;\n    }\n    var notString = typeof message !== \"string\";\n    if (notString && message.constructor === root.ArrayBuffer) {\n        message = new Uint8Array(message);\n    }\n    var code, index = 0, i, length = message.length || 0, blocks = this.blocks;\n    while(index < length){\n        if (this.hashed) {\n            this.hashed = false;\n            blocks[0] = this.block;\n            blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n        }\n        if (notString) {\n            for(i = this.start; index < length && i < 64; ++index){\n                blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n            }\n        } else {\n            for(i = this.start; index < length && i < 64; ++index){\n                code = message.charCodeAt(index);\n                if (code < 0x80) {\n                    blocks[i >> 2] |= code << SHIFT[i++ & 3];\n                } else if (code < 0x800) {\n                    blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                } else if (code < 0xd800 || code >= 0xe000) {\n                    blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                } else {\n                    code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);\n                    blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                }\n            }\n        }\n        this.lastByteIndex = i;\n        this.bytes += i - this.start;\n        if (i >= 64) {\n            this.block = blocks[16];\n            this.start = i - 64;\n            this.hash();\n            this.hashed = true;\n        } else {\n            this.start = i;\n        }\n    }\n    if (this.bytes > 4294967295) {\n        this.hBytes += this.bytes / 4294967296 << 0;\n        this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n};\nSha1.prototype.finalize = function() {\n    if (this.finalized) {\n        return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[16] = this.block;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    this.block = blocks[16];\n    if (i >= 56) {\n        if (!this.hashed) {\n            this.hash();\n        }\n        blocks[0] = this.block;\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;\n    blocks[15] = this.bytes << 3;\n    this.hash();\n};\nSha1.prototype.hash = function() {\n    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4;\n    var f, j, t, blocks = this.blocks;\n    for(j = 16; j < 80; ++j){\n        t = blocks[j - 3] ^ blocks[j - 8] ^ blocks[j - 14] ^ blocks[j - 16];\n        blocks[j] = t << 1 | t >>> 31;\n    }\n    for(j = 0; j < 20; j += 5){\n        f = b & c | ~b & d;\n        t = a << 5 | a >>> 27;\n        e = t + f + e + 1518500249 + blocks[j] << 0;\n        b = b << 30 | b >>> 2;\n        f = a & b | ~a & c;\n        t = e << 5 | e >>> 27;\n        d = t + f + d + 1518500249 + blocks[j + 1] << 0;\n        a = a << 30 | a >>> 2;\n        f = e & a | ~e & b;\n        t = d << 5 | d >>> 27;\n        c = t + f + c + 1518500249 + blocks[j + 2] << 0;\n        e = e << 30 | e >>> 2;\n        f = d & e | ~d & a;\n        t = c << 5 | c >>> 27;\n        b = t + f + b + 1518500249 + blocks[j + 3] << 0;\n        d = d << 30 | d >>> 2;\n        f = c & d | ~c & e;\n        t = b << 5 | b >>> 27;\n        a = t + f + a + 1518500249 + blocks[j + 4] << 0;\n        c = c << 30 | c >>> 2;\n    }\n    for(; j < 40; j += 5){\n        f = b ^ c ^ d;\n        t = a << 5 | a >>> 27;\n        e = t + f + e + 1859775393 + blocks[j] << 0;\n        b = b << 30 | b >>> 2;\n        f = a ^ b ^ c;\n        t = e << 5 | e >>> 27;\n        d = t + f + d + 1859775393 + blocks[j + 1] << 0;\n        a = a << 30 | a >>> 2;\n        f = e ^ a ^ b;\n        t = d << 5 | d >>> 27;\n        c = t + f + c + 1859775393 + blocks[j + 2] << 0;\n        e = e << 30 | e >>> 2;\n        f = d ^ e ^ a;\n        t = c << 5 | c >>> 27;\n        b = t + f + b + 1859775393 + blocks[j + 3] << 0;\n        d = d << 30 | d >>> 2;\n        f = c ^ d ^ e;\n        t = b << 5 | b >>> 27;\n        a = t + f + a + 1859775393 + blocks[j + 4] << 0;\n        c = c << 30 | c >>> 2;\n    }\n    for(; j < 60; j += 5){\n        f = b & c | b & d | c & d;\n        t = a << 5 | a >>> 27;\n        e = t + f + e - 1894007588 + blocks[j] << 0;\n        b = b << 30 | b >>> 2;\n        f = a & b | a & c | b & c;\n        t = e << 5 | e >>> 27;\n        d = t + f + d - 1894007588 + blocks[j + 1] << 0;\n        a = a << 30 | a >>> 2;\n        f = e & a | e & b | a & b;\n        t = d << 5 | d >>> 27;\n        c = t + f + c - 1894007588 + blocks[j + 2] << 0;\n        e = e << 30 | e >>> 2;\n        f = d & e | d & a | e & a;\n        t = c << 5 | c >>> 27;\n        b = t + f + b - 1894007588 + blocks[j + 3] << 0;\n        d = d << 30 | d >>> 2;\n        f = c & d | c & e | d & e;\n        t = b << 5 | b >>> 27;\n        a = t + f + a - 1894007588 + blocks[j + 4] << 0;\n        c = c << 30 | c >>> 2;\n    }\n    for(; j < 80; j += 5){\n        f = b ^ c ^ d;\n        t = a << 5 | a >>> 27;\n        e = t + f + e - 899497514 + blocks[j] << 0;\n        b = b << 30 | b >>> 2;\n        f = a ^ b ^ c;\n        t = e << 5 | e >>> 27;\n        d = t + f + d - 899497514 + blocks[j + 1] << 0;\n        a = a << 30 | a >>> 2;\n        f = e ^ a ^ b;\n        t = d << 5 | d >>> 27;\n        c = t + f + c - 899497514 + blocks[j + 2] << 0;\n        e = e << 30 | e >>> 2;\n        f = d ^ e ^ a;\n        t = c << 5 | c >>> 27;\n        b = t + f + b - 899497514 + blocks[j + 3] << 0;\n        d = d << 30 | d >>> 2;\n        f = c ^ d ^ e;\n        t = b << 5 | b >>> 27;\n        a = t + f + a - 899497514 + blocks[j + 4] << 0;\n        c = c << 30 | c >>> 2;\n    }\n    this.h0 = this.h0 + a << 0;\n    this.h1 = this.h1 + b << 0;\n    this.h2 = this.h2 + c << 0;\n    this.h3 = this.h3 + d << 0;\n    this.h4 = this.h4 + e << 0;\n};\nSha1.prototype.hex = function() {\n    this.finalize();\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;\n    return HEX_CHARS[h0 >> 28 & 0x0f] + HEX_CHARS[h0 >> 24 & 0x0f] + HEX_CHARS[h0 >> 20 & 0x0f] + HEX_CHARS[h0 >> 16 & 0x0f] + HEX_CHARS[h0 >> 12 & 0x0f] + HEX_CHARS[h0 >> 8 & 0x0f] + HEX_CHARS[h0 >> 4 & 0x0f] + HEX_CHARS[h0 & 0x0f] + HEX_CHARS[h1 >> 28 & 0x0f] + HEX_CHARS[h1 >> 24 & 0x0f] + HEX_CHARS[h1 >> 20 & 0x0f] + HEX_CHARS[h1 >> 16 & 0x0f] + HEX_CHARS[h1 >> 12 & 0x0f] + HEX_CHARS[h1 >> 8 & 0x0f] + HEX_CHARS[h1 >> 4 & 0x0f] + HEX_CHARS[h1 & 0x0f] + HEX_CHARS[h2 >> 28 & 0x0f] + HEX_CHARS[h2 >> 24 & 0x0f] + HEX_CHARS[h2 >> 20 & 0x0f] + HEX_CHARS[h2 >> 16 & 0x0f] + HEX_CHARS[h2 >> 12 & 0x0f] + HEX_CHARS[h2 >> 8 & 0x0f] + HEX_CHARS[h2 >> 4 & 0x0f] + HEX_CHARS[h2 & 0x0f] + HEX_CHARS[h3 >> 28 & 0x0f] + HEX_CHARS[h3 >> 24 & 0x0f] + HEX_CHARS[h3 >> 20 & 0x0f] + HEX_CHARS[h3 >> 16 & 0x0f] + HEX_CHARS[h3 >> 12 & 0x0f] + HEX_CHARS[h3 >> 8 & 0x0f] + HEX_CHARS[h3 >> 4 & 0x0f] + HEX_CHARS[h3 & 0x0f] + HEX_CHARS[h4 >> 28 & 0x0f] + HEX_CHARS[h4 >> 24 & 0x0f] + HEX_CHARS[h4 >> 20 & 0x0f] + HEX_CHARS[h4 >> 16 & 0x0f] + HEX_CHARS[h4 >> 12 & 0x0f] + HEX_CHARS[h4 >> 8 & 0x0f] + HEX_CHARS[h4 >> 4 & 0x0f] + HEX_CHARS[h4 & 0x0f];\n};\nSha1.prototype.toString = Sha1.prototype.hex;\nSha1.prototype.digest = function() {\n    this.finalize();\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;\n    return [\n        h0 >> 24 & 0xff,\n        h0 >> 16 & 0xff,\n        h0 >> 8 & 0xff,\n        h0 & 0xff,\n        h1 >> 24 & 0xff,\n        h1 >> 16 & 0xff,\n        h1 >> 8 & 0xff,\n        h1 & 0xff,\n        h2 >> 24 & 0xff,\n        h2 >> 16 & 0xff,\n        h2 >> 8 & 0xff,\n        h2 & 0xff,\n        h3 >> 24 & 0xff,\n        h3 >> 16 & 0xff,\n        h3 >> 8 & 0xff,\n        h3 & 0xff,\n        h4 >> 24 & 0xff,\n        h4 >> 16 & 0xff,\n        h4 >> 8 & 0xff,\n        h4 & 0xff\n    ];\n};\nSha1.prototype.array = Sha1.prototype.digest;\nSha1.prototype.arrayBuffer = function() {\n    this.finalize();\n    var buffer = new ArrayBuffer(20);\n    var dataView = new DataView(buffer);\n    dataView.setUint32(0, this.h0);\n    dataView.setUint32(4, this.h1);\n    dataView.setUint32(8, this.h2);\n    dataView.setUint32(12, this.h3);\n    dataView.setUint32(16, this.h4);\n    return buffer;\n};\nconst insecureHash = (message)=>{\n    return new Sha1(true).update(message)[\"hex\"]();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/js-sha1/hash.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/math.js":
/*!*********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/math.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cosineSimilarity: () => (/* binding */ cosineSimilarity),\n/* harmony export */   euclideanDistance: () => (/* binding */ euclideanDistance),\n/* harmony export */   innerProduct: () => (/* binding */ innerProduct),\n/* harmony export */   matrixFunc: () => (/* binding */ matrixFunc),\n/* harmony export */   maximalMarginalRelevance: () => (/* binding */ maximalMarginalRelevance),\n/* harmony export */   normalize: () => (/* binding */ normalize)\n/* harmony export */ });\n/* harmony import */ var ml_distance__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ml-distance */ \"(rsc)/./node_modules/ml-distance/lib-esm/index.js\");\n\n/**\n * Apply a row-wise function between two matrices with the same number of columns.\n *\n * @param {number[][]} X - The first matrix.\n * @param {number[][]} Y - The second matrix.\n * @param {VectorFunction} func - The function to apply.\n *\n * @throws {Error} If the number of columns in X and Y are not the same.\n *\n * @returns {number[][] | [[]]} A matrix where each row represents the result of applying the function between the corresponding rows of X and Y.\n */ function matrixFunc(X, Y, func) {\n    if (X.length === 0 || X[0].length === 0 || Y.length === 0 || Y[0].length === 0) {\n        return [\n            []\n        ];\n    }\n    if (X[0].length !== Y[0].length) {\n        throw new Error(`Number of columns in X and Y must be the same. X has shape ${[\n            X.length,\n            X[0].length\n        ]} and Y has shape ${[\n            Y.length,\n            Y[0].length\n        ]}.`);\n    }\n    return X.map((xVector)=>Y.map((yVector)=>func(xVector, yVector)).map((similarity)=>Number.isNaN(similarity) ? 0 : similarity));\n}\nfunction normalize(M, similarity = false) {\n    const max = matrixMaxVal(M);\n    return M.map((row)=>row.map((val)=>similarity ? 1 - val / max : val / max));\n}\n/**\n * This function calculates the row-wise cosine similarity between two matrices with the same number of columns.\n *\n * @param {number[][]} X - The first matrix.\n * @param {number[][]} Y - The second matrix.\n *\n * @throws {Error} If the number of columns in X and Y are not the same.\n *\n * @returns {number[][] | [[]]} A matrix where each row represents the cosine similarity values between the corresponding rows of X and Y.\n */ function cosineSimilarity(X, Y) {\n    return matrixFunc(X, Y, ml_distance__WEBPACK_IMPORTED_MODULE_0__.similarity.cosine);\n}\nfunction innerProduct(X, Y) {\n    return matrixFunc(X, Y, ml_distance__WEBPACK_IMPORTED_MODULE_0__.distance.innerProduct);\n}\nfunction euclideanDistance(X, Y) {\n    return matrixFunc(X, Y, ml_distance__WEBPACK_IMPORTED_MODULE_0__.distance.euclidean);\n}\n/**\n * This function implements the Maximal Marginal Relevance algorithm\n * to select a set of embeddings that maximizes the diversity and relevance to a query embedding.\n *\n * @param {number[]|number[][]} queryEmbedding - The query embedding.\n * @param {number[][]} embeddingList - The list of embeddings to select from.\n * @param {number} [lambda=0.5] - The trade-off parameter between relevance and diversity.\n * @param {number} [k=4] - The maximum number of embeddings to select.\n *\n * @returns {number[]} The indexes of the selected embeddings in the embeddingList.\n */ function maximalMarginalRelevance(queryEmbedding, embeddingList, lambda = 0.5, k = 4) {\n    if (Math.min(k, embeddingList.length) <= 0) {\n        return [];\n    }\n    const queryEmbeddingExpanded = Array.isArray(queryEmbedding[0]) ? queryEmbedding : [\n        queryEmbedding\n    ];\n    const similarityToQuery = cosineSimilarity(queryEmbeddingExpanded, embeddingList)[0];\n    const mostSimilarEmbeddingIndex = argMax(similarityToQuery).maxIndex;\n    const selectedEmbeddings = [\n        embeddingList[mostSimilarEmbeddingIndex]\n    ];\n    const selectedEmbeddingsIndexes = [\n        mostSimilarEmbeddingIndex\n    ];\n    while(selectedEmbeddingsIndexes.length < Math.min(k, embeddingList.length)){\n        let bestScore = -Infinity;\n        let bestIndex = -1;\n        const similarityToSelected = cosineSimilarity(embeddingList, selectedEmbeddings);\n        similarityToQuery.forEach((queryScore, queryScoreIndex)=>{\n            if (selectedEmbeddingsIndexes.includes(queryScoreIndex)) {\n                return;\n            }\n            const maxSimilarityToSelected = Math.max(...similarityToSelected[queryScoreIndex]);\n            const score = lambda * queryScore - (1 - lambda) * maxSimilarityToSelected;\n            if (score > bestScore) {\n                bestScore = score;\n                bestIndex = queryScoreIndex;\n            }\n        });\n        selectedEmbeddings.push(embeddingList[bestIndex]);\n        selectedEmbeddingsIndexes.push(bestIndex);\n    }\n    return selectedEmbeddingsIndexes;\n}\n/**\n * Finds the index of the maximum value in the given array.\n * @param {number[]} array - The input array.\n *\n * @returns {number} The index of the maximum value in the array. If the array is empty, returns -1.\n */ function argMax(array) {\n    if (array.length === 0) {\n        return {\n            maxIndex: -1,\n            maxValue: NaN\n        };\n    }\n    let maxValue = array[0];\n    let maxIndex = 0;\n    for(let i = 1; i < array.length; i += 1){\n        if (array[i] > maxValue) {\n            maxIndex = i;\n            maxValue = array[i];\n        }\n    }\n    return {\n        maxIndex,\n        maxValue\n    };\n}\nfunction matrixMaxVal(arrays) {\n    return arrays.reduce((acc, array)=>Math.max(acc, argMax(array).maxValue), 0);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/math.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/stream.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/stream.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncGeneratorWithSetup: () => (/* binding */ AsyncGeneratorWithSetup),\n/* harmony export */   IterableReadableStream: () => (/* binding */ IterableReadableStream),\n/* harmony export */   atee: () => (/* binding */ atee),\n/* harmony export */   concat: () => (/* binding */ concat),\n/* harmony export */   pipeGeneratorWithSetup: () => (/* binding */ pipeGeneratorWithSetup)\n/* harmony export */ });\n/*\n * Support async iterator syntax for ReadableStreams in all environments.\n * Source: https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */ class IterableReadableStream extends ReadableStream {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"reader\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    ensureReader() {\n        if (!this.reader) {\n            this.reader = this.getReader();\n        }\n    }\n    async next() {\n        this.ensureReader();\n        try {\n            const result = await this.reader.read();\n            if (result.done) {\n                this.reader.releaseLock(); // release lock when stream becomes closed\n                return {\n                    done: true,\n                    value: undefined\n                };\n            } else {\n                return {\n                    done: false,\n                    value: result.value\n                };\n            }\n        } catch (e) {\n            this.reader.releaseLock(); // release lock when stream becomes errored\n            throw e;\n        }\n    }\n    async return() {\n        this.ensureReader();\n        // If wrapped in a Node stream, cancel is already called.\n        if (this.locked) {\n            const cancelPromise = this.reader.cancel(); // cancel first, but don't await yet\n            this.reader.releaseLock(); // release lock first\n            await cancelPromise; // now await it\n        }\n        return {\n            done: true,\n            value: undefined\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async throw(e) {\n        this.ensureReader();\n        if (this.locked) {\n            const cancelPromise = this.reader.cancel(); // cancel first, but don't await yet\n            this.reader.releaseLock(); // release lock first\n            await cancelPromise; // now await it\n        }\n        throw e;\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    static fromReadableStream(stream) {\n        // From https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_streams#reading_the_stream\n        const reader = stream.getReader();\n        return new IterableReadableStream({\n            start (controller) {\n                return pump();\n                function pump() {\n                    return reader.read().then(({ done, value })=>{\n                        // When no more data needs to be consumed, close the stream\n                        if (done) {\n                            controller.close();\n                            return;\n                        }\n                        // Enqueue the next data chunk into our target stream\n                        controller.enqueue(value);\n                        return pump();\n                    });\n                }\n            },\n            cancel () {\n                reader.releaseLock();\n            }\n        });\n    }\n    static fromAsyncGenerator(generator) {\n        return new IterableReadableStream({\n            async pull (controller) {\n                const { value, done } = await generator.next();\n                // When no more data needs to be consumed, close the stream\n                if (done) {\n                    controller.close();\n                }\n                // Fix: `else if (value)` will hang the streaming when nullish value (e.g. empty string) is pulled\n                controller.enqueue(value);\n            },\n            async cancel (reason) {\n                await generator.return(reason);\n            }\n        });\n    }\n}\nfunction atee(iter, length = 2) {\n    const buffers = Array.from({\n        length\n    }, ()=>[]);\n    return buffers.map(async function* makeIter(buffer) {\n        while(true){\n            if (buffer.length === 0) {\n                const result = await iter.next();\n                for (const buffer of buffers){\n                    buffer.push(result);\n                }\n            } else if (buffer[0].done) {\n                return;\n            } else {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                yield buffer.shift().value;\n            }\n        }\n    });\n}\nfunction concat(first, second) {\n    if (Array.isArray(first) && Array.isArray(second)) {\n        return first.concat(second);\n    } else if (typeof first === \"string\" && typeof second === \"string\") {\n        return first + second;\n    } else if (typeof first === \"number\" && typeof second === \"number\") {\n        return first + second;\n    } else if (// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    \"concat\" in first && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof first.concat === \"function\") {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return first.concat(second);\n    } else if (typeof first === \"object\" && typeof second === \"object\") {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const chunk = {\n            ...first\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        for (const [key, value] of Object.entries(second)){\n            if (key in chunk && !Array.isArray(chunk[key])) {\n                chunk[key] = concat(chunk[key], value);\n            } else {\n                chunk[key] = value;\n            }\n        }\n        return chunk;\n    } else {\n        throw new Error(`Cannot concat ${typeof first} and ${typeof second}`);\n    }\n}\nclass AsyncGeneratorWithSetup {\n    constructor(generator, startSetup){\n        Object.defineProperty(this, \"generator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"setup\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"firstResult\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"firstResultUsed\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        this.generator = generator;\n        // setup is a promise that resolves only after the first iterator value\n        // is available. this is useful when setup of several piped generators\n        // needs to happen in logical order, ie. in the order in which input to\n        // to each generator is available.\n        this.setup = new Promise((resolve, reject)=>{\n            this.firstResult = generator.next();\n            if (startSetup) {\n                this.firstResult.then(startSetup).then(resolve, reject);\n            } else {\n                this.firstResult.then((_result)=>resolve(undefined), reject);\n            }\n        });\n    }\n    async next(...args) {\n        if (!this.firstResultUsed) {\n            this.firstResultUsed = true;\n            return this.firstResult;\n        }\n        return this.generator.next(...args);\n    }\n    async return(value) {\n        return this.generator.return(value);\n    }\n    async throw(e) {\n        return this.generator.throw(e);\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n}\nasync function pipeGeneratorWithSetup(to, generator, startSetup, ...args) {\n    const gen = new AsyncGeneratorWithSetup(generator, startSetup);\n    const setup = await gen.setup;\n    return {\n        output: to(gen, setup, ...args),\n        setup\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/tiktoken.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/tiktoken.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodingForModel: () => (/* binding */ encodingForModel),\n/* harmony export */   getEncoding: () => (/* binding */ getEncoding)\n/* harmony export */ });\n/* harmony import */ var js_tiktoken_lite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-tiktoken/lite */ \"(rsc)/./node_modules/js-tiktoken/dist/lite.js\");\n/* harmony import */ var _async_caller_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./async_caller.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.js\");\n\n\nconst cache = {};\nconst caller = /* #__PURE__ */ new _async_caller_js__WEBPACK_IMPORTED_MODULE_1__.AsyncCaller({});\nasync function getEncoding(encoding) {\n    if (!(encoding in cache)) {\n        cache[encoding] = caller.fetch(`https://tiktoken.pages.dev/js/${encoding}.json`).then((res)=>res.json()).then((data)=>new js_tiktoken_lite__WEBPACK_IMPORTED_MODULE_0__.Tiktoken(data)).catch((e)=>{\n            delete cache[encoding];\n            throw e;\n        });\n    }\n    return await cache[encoding];\n}\nasync function encodingForModel(model) {\n    return getEncoding((0,js_tiktoken_lite__WEBPACK_IMPORTED_MODULE_0__.getEncodingNameForModel)(model));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvdGlrdG9rZW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFzRTtBQUN0QjtBQUNoRCxNQUFNRyxRQUFRLENBQUM7QUFDZixNQUFNQyxTQUFTLGFBQWEsR0FBRyxJQUFJRix5REFBV0EsQ0FBQyxDQUFDO0FBQ3pDLGVBQWVHLFlBQVlDLFFBQVE7SUFDdEMsSUFBSSxDQUFFQSxDQUFBQSxZQUFZSCxLQUFJLEdBQUk7UUFDdEJBLEtBQUssQ0FBQ0csU0FBUyxHQUFHRixPQUNiRyxLQUFLLENBQUMsQ0FBQyw4QkFBOEIsRUFBRUQsU0FBUyxLQUFLLENBQUMsRUFDdERFLElBQUksQ0FBQyxDQUFDQyxNQUFRQSxJQUFJQyxJQUFJLElBQ3RCRixJQUFJLENBQUMsQ0FBQ0csT0FBUyxJQUFJWCxzREFBUUEsQ0FBQ1csT0FDNUJDLEtBQUssQ0FBQyxDQUFDQztZQUNSLE9BQU9WLEtBQUssQ0FBQ0csU0FBUztZQUN0QixNQUFNTztRQUNWO0lBQ0o7SUFDQSxPQUFPLE1BQU1WLEtBQUssQ0FBQ0csU0FBUztBQUNoQztBQUNPLGVBQWVRLGlCQUFpQkMsS0FBSztJQUN4QyxPQUFPVixZQUFZSix5RUFBdUJBLENBQUNjO0FBQy9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvdGlrdG9rZW4uanM/OGU2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUaWt0b2tlbiwgZ2V0RW5jb2RpbmdOYW1lRm9yTW9kZWwsIH0gZnJvbSBcImpzLXRpa3Rva2VuL2xpdGVcIjtcbmltcG9ydCB7IEFzeW5jQ2FsbGVyIH0gZnJvbSBcIi4vYXN5bmNfY2FsbGVyLmpzXCI7XG5jb25zdCBjYWNoZSA9IHt9O1xuY29uc3QgY2FsbGVyID0gLyogI19fUFVSRV9fICovIG5ldyBBc3luY0NhbGxlcih7fSk7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0RW5jb2RpbmcoZW5jb2RpbmcpIHtcbiAgICBpZiAoIShlbmNvZGluZyBpbiBjYWNoZSkpIHtcbiAgICAgICAgY2FjaGVbZW5jb2RpbmddID0gY2FsbGVyXG4gICAgICAgICAgICAuZmV0Y2goYGh0dHBzOi8vdGlrdG9rZW4ucGFnZXMuZGV2L2pzLyR7ZW5jb2Rpbmd9Lmpzb25gKVxuICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4gcmVzLmpzb24oKSlcbiAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiBuZXcgVGlrdG9rZW4oZGF0YSkpXG4gICAgICAgICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgIGRlbGV0ZSBjYWNoZVtlbmNvZGluZ107XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IGNhY2hlW2VuY29kaW5nXTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBlbmNvZGluZ0Zvck1vZGVsKG1vZGVsKSB7XG4gICAgcmV0dXJuIGdldEVuY29kaW5nKGdldEVuY29kaW5nTmFtZUZvck1vZGVsKG1vZGVsKSk7XG59XG4iXSwibmFtZXMiOlsiVGlrdG9rZW4iLCJnZXRFbmNvZGluZ05hbWVGb3JNb2RlbCIsIkFzeW5jQ2FsbGVyIiwiY2FjaGUiLCJjYWxsZXIiLCJnZXRFbmNvZGluZyIsImVuY29kaW5nIiwiZmV0Y2giLCJ0aGVuIiwicmVzIiwianNvbiIsImRhdGEiLCJjYXRjaCIsImUiLCJlbmNvZGluZ0Zvck1vZGVsIiwibW9kZWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/tiktoken.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/vectorstores.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/vectorstores.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SaveableVectorStore: () => (/* binding */ SaveableVectorStore),\n/* harmony export */   VectorStore: () => (/* binding */ VectorStore),\n/* harmony export */   VectorStoreRetriever: () => (/* binding */ VectorStoreRetriever)\n/* harmony export */ });\n/* harmony import */ var _retrievers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./retrievers.js */ \"(rsc)/./node_modules/@langchain/core/dist/retrievers.js\");\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./load/serializable.js */ \"(rsc)/./node_modules/@langchain/core/dist/load/serializable.js\");\n\n\n/**\n * Class for performing document retrieval from a VectorStore. Can perform\n * similarity search or maximal marginal relevance search.\n */ class VectorStoreRetriever extends _retrievers_js__WEBPACK_IMPORTED_MODULE_0__.BaseRetriever {\n    static lc_name() {\n        return \"VectorStoreRetriever\";\n    }\n    get lc_namespace() {\n        return [\n            \"langchain_core\",\n            \"vectorstores\"\n        ];\n    }\n    _vectorstoreType() {\n        return this.vectorStore._vectorstoreType();\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"vectorStore\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"k\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 4\n        });\n        Object.defineProperty(this, \"searchType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"similarity\"\n        });\n        Object.defineProperty(this, \"searchKwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"filter\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.vectorStore = fields.vectorStore;\n        this.k = fields.k ?? this.k;\n        this.searchType = fields.searchType ?? this.searchType;\n        this.filter = fields.filter;\n        if (fields.searchType === \"mmr\") {\n            this.searchKwargs = fields.searchKwargs;\n        }\n    }\n    async _getRelevantDocuments(query, runManager) {\n        if (this.searchType === \"mmr\") {\n            if (typeof this.vectorStore.maxMarginalRelevanceSearch !== \"function\") {\n                throw new Error(`The vector store backing this retriever, ${this._vectorstoreType()} does not support max marginal relevance search.`);\n            }\n            return this.vectorStore.maxMarginalRelevanceSearch(query, {\n                k: this.k,\n                filter: this.filter,\n                ...this.searchKwargs\n            }, runManager?.getChild(\"vectorstore\"));\n        }\n        return this.vectorStore.similaritySearch(query, this.k, this.filter, runManager?.getChild(\"vectorstore\"));\n    }\n    async addDocuments(documents, options) {\n        return this.vectorStore.addDocuments(documents, options);\n    }\n}\n/**\n * Abstract class representing a store of vectors. Provides methods for\n * adding vectors and documents, deleting from the store, and searching\n * the store.\n */ class VectorStore extends _load_serializable_js__WEBPACK_IMPORTED_MODULE_1__.Serializable {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(embeddings, dbConfig){\n        super(dbConfig);\n        // Only ever instantiated in main LangChain\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"vectorstores\",\n                this._vectorstoreType()\n            ]\n        });\n        Object.defineProperty(this, \"embeddings\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.embeddings = embeddings;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async delete(_params) {\n        throw new Error(\"Not implemented.\");\n    }\n    async similaritySearch(query, k = 4, filter = undefined, _callbacks = undefined // implement passing to embedQuery later\n    ) {\n        const results = await this.similaritySearchVectorWithScore(await this.embeddings.embedQuery(query), k, filter);\n        return results.map((result)=>result[0]);\n    }\n    async similaritySearchWithScore(query, k = 4, filter = undefined, _callbacks = undefined // implement passing to embedQuery later\n    ) {\n        return this.similaritySearchVectorWithScore(await this.embeddings.embedQuery(query), k, filter);\n    }\n    static fromTexts(_texts, _metadatas, _embeddings, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _dbConfig) {\n        throw new Error(\"the Langchain vectorstore implementation you are using forgot to override this, please report a bug\");\n    }\n    static fromDocuments(_docs, _embeddings, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _dbConfig) {\n        throw new Error(\"the Langchain vectorstore implementation you are using forgot to override this, please report a bug\");\n    }\n    asRetriever(kOrFields, filter, callbacks, tags, metadata, verbose) {\n        if (typeof kOrFields === \"number\") {\n            return new VectorStoreRetriever({\n                vectorStore: this,\n                k: kOrFields,\n                filter,\n                tags: [\n                    ...tags ?? [],\n                    this._vectorstoreType()\n                ],\n                metadata,\n                verbose,\n                callbacks\n            });\n        } else {\n            const params = {\n                vectorStore: this,\n                k: kOrFields?.k,\n                filter: kOrFields?.filter,\n                tags: [\n                    ...kOrFields?.tags ?? [],\n                    this._vectorstoreType()\n                ],\n                metadata: kOrFields?.metadata,\n                verbose: kOrFields?.verbose,\n                callbacks: kOrFields?.callbacks,\n                searchType: kOrFields?.searchType\n            };\n            if (kOrFields?.searchType === \"mmr\") {\n                return new VectorStoreRetriever({\n                    ...params,\n                    searchKwargs: kOrFields.searchKwargs\n                });\n            }\n            return new VectorStoreRetriever({\n                ...params\n            });\n        }\n    }\n}\n/**\n * Abstract class extending VectorStore with functionality for saving and\n * loading the vector store.\n */ class SaveableVectorStore extends VectorStore {\n    static load(_directory, _embeddings) {\n        throw new Error(\"Not implemented\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/vectorstores.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/documents.js":
/*!***************************************************!*\
  !*** ./node_modules/@langchain/core/documents.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseDocumentTransformer: () => (/* reexport safe */ _dist_documents_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseDocumentTransformer),\n/* harmony export */   Document: () => (/* reexport safe */ _dist_documents_index_js__WEBPACK_IMPORTED_MODULE_0__.Document),\n/* harmony export */   MappingDocumentTransformer: () => (/* reexport safe */ _dist_documents_index_js__WEBPACK_IMPORTED_MODULE_0__.MappingDocumentTransformer)\n/* harmony export */ });\n/* harmony import */ var _dist_documents_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/documents/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/documents/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2RvY3VtZW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2RvY3VtZW50cy5qcz82ZDE4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vZGlzdC9kb2N1bWVudHMvaW5kZXguanMnIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/documents.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/messages.js":
/*!**************************************************!*\
  !*** ./node_modules/@langchain/core/messages.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.AIMessage),\n/* harmony export */   AIMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.AIMessageChunk),\n/* harmony export */   BaseMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage),\n/* harmony export */   BaseMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageChunk),\n/* harmony export */   ChatMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.ChatMessage),\n/* harmony export */   ChatMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.ChatMessageChunk),\n/* harmony export */   FunctionMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.FunctionMessage),\n/* harmony export */   FunctionMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.FunctionMessageChunk),\n/* harmony export */   HumanMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.HumanMessage),\n/* harmony export */   HumanMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.HumanMessageChunk),\n/* harmony export */   SystemMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.SystemMessage),\n/* harmony export */   SystemMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.SystemMessageChunk),\n/* harmony export */   ToolMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.ToolMessage),\n/* harmony export */   ToolMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.ToolMessageChunk),\n/* harmony export */   coerceMessageLikeToMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.coerceMessageLikeToMessage),\n/* harmony export */   getBufferString: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.getBufferString),\n/* harmony export */   isBaseMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessage),\n/* harmony export */   isBaseMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessageChunk),\n/* harmony export */   mapChatMessagesToStoredMessages: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.mapChatMessagesToStoredMessages),\n/* harmony export */   mapStoredMessageToChatMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.mapStoredMessageToChatMessage),\n/* harmony export */   mapStoredMessagesToChatMessages: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.mapStoredMessagesToChatMessages)\n/* harmony export */ });\n/* harmony import */ var _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL21lc3NhZ2VzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvbWVzc2FnZXMuanM/ODI5MCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2Rpc3QvbWVzc2FnZXMvaW5kZXguanMnIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/messages.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/tools.js":
/*!***********************************************!*\
  !*** ./node_modules/@langchain/core/tools.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DynamicStructuredTool: () => (/* reexport safe */ _dist_tools_js__WEBPACK_IMPORTED_MODULE_0__.DynamicStructuredTool),\n/* harmony export */   DynamicTool: () => (/* reexport safe */ _dist_tools_js__WEBPACK_IMPORTED_MODULE_0__.DynamicTool),\n/* harmony export */   StructuredTool: () => (/* reexport safe */ _dist_tools_js__WEBPACK_IMPORTED_MODULE_0__.StructuredTool),\n/* harmony export */   Tool: () => (/* reexport safe */ _dist_tools_js__WEBPACK_IMPORTED_MODULE_0__.Tool),\n/* harmony export */   ToolInputParsingException: () => (/* reexport safe */ _dist_tools_js__WEBPACK_IMPORTED_MODULE_0__.ToolInputParsingException)\n/* harmony export */ });\n/* harmony import */ var _dist_tools_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/tools.js */ \"(rsc)/./node_modules/@langchain/core/dist/tools.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3Rvb2xzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS90b29scy5qcz84ODg5Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vZGlzdC90b29scy5qcyciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/tools.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/utils/async_caller.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/utils/async_caller.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncCaller: () => (/* reexport safe */ _dist_utils_async_caller_js__WEBPACK_IMPORTED_MODULE_0__.AsyncCaller)\n/* harmony export */ });\n/* harmony import */ var _dist_utils_async_caller_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/utils/async_caller.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2FzeW5jX2NhbGxlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS91dGlscy9hc3luY19jYWxsZXIuanM/MzJhZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuLi9kaXN0L3V0aWxzL2FzeW5jX2NhbGxlci5qcyciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/utils/async_caller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/utils/env.js":
/*!***************************************************!*\
  !*** ./node_modules/@langchain/core/utils/env.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnv: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.getEnv),\n/* harmony export */   getEnvironmentVariable: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable),\n/* harmony export */   getRuntimeEnvironment: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.getRuntimeEnvironment),\n/* harmony export */   isBrowser: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isBrowser),\n/* harmony export */   isDeno: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isDeno),\n/* harmony export */   isJsDom: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isJsDom),\n/* harmony export */   isNode: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isNode),\n/* harmony export */   isWebWorker: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isWebWorker)\n/* harmony export */ });\n/* harmony import */ var _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/utils/env.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2Vudi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvdXRpbHMvZW52LmpzPzQ2NzEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi4vZGlzdC91dGlscy9lbnYuanMnIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/utils/env.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/utils/math.js":
/*!****************************************************!*\
  !*** ./node_modules/@langchain/core/utils/math.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cosineSimilarity: () => (/* reexport safe */ _dist_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.cosineSimilarity),\n/* harmony export */   euclideanDistance: () => (/* reexport safe */ _dist_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.euclideanDistance),\n/* harmony export */   innerProduct: () => (/* reexport safe */ _dist_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.innerProduct),\n/* harmony export */   matrixFunc: () => (/* reexport safe */ _dist_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.matrixFunc),\n/* harmony export */   maximalMarginalRelevance: () => (/* reexport safe */ _dist_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.maximalMarginalRelevance),\n/* harmony export */   normalize: () => (/* reexport safe */ _dist_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.normalize)\n/* harmony export */ });\n/* harmony import */ var _dist_utils_math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/utils/math.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/math.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL21hdGguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS91dGlscy9tYXRoLmpzP2M0MDciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi4vZGlzdC91dGlscy9tYXRoLmpzJyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/utils/math.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/vectorstores.js":
/*!******************************************************!*\
  !*** ./node_modules/@langchain/core/vectorstores.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SaveableVectorStore: () => (/* reexport safe */ _dist_vectorstores_js__WEBPACK_IMPORTED_MODULE_0__.SaveableVectorStore),\n/* harmony export */   VectorStore: () => (/* reexport safe */ _dist_vectorstores_js__WEBPACK_IMPORTED_MODULE_0__.VectorStore),\n/* harmony export */   VectorStoreRetriever: () => (/* reexport safe */ _dist_vectorstores_js__WEBPACK_IMPORTED_MODULE_0__.VectorStoreRetriever)\n/* harmony export */ });\n/* harmony import */ var _dist_vectorstores_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/vectorstores.js */ \"(rsc)/./node_modules/@langchain/core/dist/vectorstores.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3ZlY3RvcnN0b3Jlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3ZlY3RvcnN0b3Jlcy5qcz8xZGE2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vZGlzdC92ZWN0b3JzdG9yZXMuanMnIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/vectorstores.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/dist/chat_models.js":
/*!******************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/dist/chat_models.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatGoogleGenerativeAI: () => (/* binding */ ChatGoogleGenerativeAI)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/utils/env.js\");\n/* harmony import */ var _langchain_core_language_models_chat_models__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/language_models/chat_models */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/language_models/chat_models.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@langchain/google-genai/dist/utils.js\");\n\n\n\n\n/**\n * A class that wraps the Google Palm chat model.\n * @example\n * ```typescript\n * const model = new ChatGoogleGenerativeAI({\n *   apiKey: \"<YOUR API KEY>\",\n *   temperature: 0.7,\n *   modelName: \"gemini-pro\",\n *   topK: 40,\n *   topP: 1,\n * });\n * const questions = [\n *   new HumanMessage({\n *     content: [\n *       {\n *         type: \"text\",\n *         text: \"You are a funny assistant that answers in pirate language.\",\n *       },\n *       {\n *         type: \"text\",\n *         text: \"What is your favorite food?\",\n *       },\n *     ]\n *   })\n * ];\n * const res = await model.invoke(questions);\n * console.log({ res });\n * ```\n */ class ChatGoogleGenerativeAI extends _langchain_core_language_models_chat_models__WEBPACK_IMPORTED_MODULE_2__.BaseChatModel {\n    static lc_name() {\n        return \"googlegenerativeai\";\n    }\n    get lc_secrets() {\n        return {\n            apiKey: \"GOOGLE_API_KEY\"\n        };\n    }\n    get _isMultimodalModel() {\n        return this.model.includes(\"vision\") || this.model.startsWith(\"gemini-1.5\");\n    }\n    constructor(fields){\n        super(fields ?? {});\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"gemini-pro\"\n        });\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"gemini-pro\"\n        });\n        Object.defineProperty(this, \"temperature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        }); // default value chosen based on model\n        Object.defineProperty(this, \"maxOutputTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"topP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        }); // default value chosen based on model\n        Object.defineProperty(this, \"topK\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        }); // default value chosen based on model\n        Object.defineProperty(this, \"stopSequences\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"safetySettings\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"apiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.modelName = fields?.model?.replace(/^models\\//, \"\") ?? fields?.modelName?.replace(/^models\\//, \"\") ?? this.model;\n        this.model = this.modelName;\n        this.maxOutputTokens = fields?.maxOutputTokens ?? this.maxOutputTokens;\n        if (this.maxOutputTokens && this.maxOutputTokens < 0) {\n            throw new Error(\"`maxOutputTokens` must be a positive integer\");\n        }\n        this.temperature = fields?.temperature ?? this.temperature;\n        if (this.temperature && (this.temperature < 0 || this.temperature > 1)) {\n            throw new Error(\"`temperature` must be in the range of [0.0,1.0]\");\n        }\n        this.topP = fields?.topP ?? this.topP;\n        if (this.topP && this.topP < 0) {\n            throw new Error(\"`topP` must be a positive integer\");\n        }\n        if (this.topP && this.topP > 1) {\n            throw new Error(\"`topP` must be below 1.\");\n        }\n        this.topK = fields?.topK ?? this.topK;\n        if (this.topK && this.topK < 0) {\n            throw new Error(\"`topK` must be a positive integer\");\n        }\n        this.stopSequences = fields?.stopSequences ?? this.stopSequences;\n        this.apiKey = fields?.apiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"GOOGLE_API_KEY\");\n        if (!this.apiKey) {\n            throw new Error(\"Please set an API key for Google GenerativeAI \" + \"in the environment variable GOOGLE_API_KEY \" + \"or in the `apiKey` field of the \" + \"ChatGoogleGenerativeAI constructor\");\n        }\n        this.safetySettings = fields?.safetySettings ?? this.safetySettings;\n        if (this.safetySettings && this.safetySettings.length > 0) {\n            const safetySettingsSet = new Set(this.safetySettings.map((s)=>s.category));\n            if (safetySettingsSet.size !== this.safetySettings.length) {\n                throw new Error(\"The categories in `safetySettings` array must be unique\");\n            }\n        }\n        this.streaming = fields?.streaming ?? this.streaming;\n        this.client = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(this.apiKey).getGenerativeModel({\n            model: this.model,\n            safetySettings: this.safetySettings,\n            generationConfig: {\n                candidateCount: 1,\n                stopSequences: this.stopSequences,\n                maxOutputTokens: this.maxOutputTokens,\n                temperature: this.temperature,\n                topP: this.topP,\n                topK: this.topK\n            }\n        });\n    }\n    _combineLLMOutput() {\n        return [];\n    }\n    _llmType() {\n        return \"googlegenerativeai\";\n    }\n    async _generate(messages, options, runManager) {\n        const prompt = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.convertBaseMessagesToContent)(messages, this._isMultimodalModel);\n        // Handle streaming\n        if (this.streaming) {\n            const tokenUsage = {};\n            const stream = this._streamResponseChunks(messages, options, runManager);\n            const finalChunks = {};\n            for await (const chunk of stream){\n                const index = chunk.generationInfo?.completion ?? 0;\n                if (finalChunks[index] === undefined) {\n                    finalChunks[index] = chunk;\n                } else {\n                    finalChunks[index] = finalChunks[index].concat(chunk);\n                }\n            }\n            const generations = Object.entries(finalChunks).sort(([aKey], [bKey])=>parseInt(aKey, 10) - parseInt(bKey, 10)).map(([_, value])=>value);\n            return {\n                generations,\n                llmOutput: {\n                    estimatedTokenUsage: tokenUsage\n                }\n            };\n        }\n        const res = await this.caller.callWithOptions({\n            signal: options?.signal\n        }, async ()=>{\n            let output;\n            try {\n                output = await this.client.generateContent({\n                    contents: prompt\n                });\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            } catch (e) {\n                // TODO: Improve error handling\n                if (e.message?.includes(\"400 Bad Request\")) {\n                    e.status = 400;\n                }\n                throw e;\n            }\n            return output;\n        });\n        const generationResult = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.mapGenerateContentResultToChatResult)(res.response);\n        await runManager?.handleLLMNewToken(generationResult.generations[0].text ?? \"\");\n        return generationResult;\n    }\n    async *_streamResponseChunks(messages, options, runManager) {\n        const prompt = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.convertBaseMessagesToContent)(messages, this._isMultimodalModel);\n        const stream = await this.caller.callWithOptions({\n            signal: options?.signal\n        }, async ()=>{\n            const { stream } = await this.client.generateContentStream({\n                contents: prompt\n            });\n            return stream;\n        });\n        for await (const response of stream){\n            const chunk = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.convertResponseContentToChatGenerationChunk)(response);\n            if (!chunk) {\n                continue;\n            }\n            yield chunk;\n            await runManager?.handleLLMNewToken(chunk.text ?? \"\");\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/dist/chat_models.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/dist/embeddings.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/dist/embeddings.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GoogleGenerativeAIEmbeddings: () => (/* binding */ GoogleGenerativeAIEmbeddings)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/utils/env.js\");\n/* harmony import */ var _langchain_core_embeddings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/embeddings */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/embeddings.js\");\n/* harmony import */ var _langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @langchain/core/utils/chunk_array */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/utils/chunk_array.js\");\n\n\n\n\n/**\n * Class that extends the Embeddings class and provides methods for\n * generating embeddings using the Google Palm API.\n * @example\n * ```typescript\n * const model = new GoogleGenerativeAIEmbeddings({\n *   apiKey: \"<YOUR API KEY>\",\n *   modelName: \"embedding-001\",\n * });\n *\n * // Embed a single query\n * const res = await model.embedQuery(\n *   \"What would be a good company name for a company that makes colorful socks?\"\n * );\n * console.log({ res });\n *\n * // Embed multiple documents\n * const documentRes = await model.embedDocuments([\"Hello world\", \"Bye bye\"]);\n * console.log({ documentRes });\n * ```\n */ class GoogleGenerativeAIEmbeddings extends _langchain_core_embeddings__WEBPACK_IMPORTED_MODULE_2__.Embeddings {\n    constructor(fields){\n        super(fields ?? {});\n        Object.defineProperty(this, \"apiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"embedding-001\"\n        });\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"embedding-001\"\n        });\n        Object.defineProperty(this, \"taskType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"title\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stripNewLines\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"maxBatchSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 100\n        }); // Max batch size for embedDocuments set by GenerativeModel client's batchEmbedContents call\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.modelName = fields?.model?.replace(/^models\\//, \"\") ?? fields?.modelName?.replace(/^models\\//, \"\") ?? this.modelName;\n        this.model = this.modelName;\n        this.taskType = fields?.taskType ?? this.taskType;\n        this.title = fields?.title ?? this.title;\n        if (this.title && this.taskType !== \"RETRIEVAL_DOCUMENT\") {\n            throw new Error(\"title can only be sepcified with TaskType.RETRIEVAL_DOCUMENT\");\n        }\n        this.apiKey = fields?.apiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"GOOGLE_API_KEY\");\n        if (!this.apiKey) {\n            throw new Error(\"Please set an API key for Google GenerativeAI \" + \"in the environmentb variable GOOGLE_API_KEY \" + \"or in the `apiKey` field of the \" + \"GoogleGenerativeAIEmbeddings constructor\");\n        }\n        this.client = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(this.apiKey).getGenerativeModel({\n            model: this.model\n        });\n    }\n    _convertToContent(text) {\n        const cleanedText = this.stripNewLines ? text.replace(/\\n/g, \" \") : text;\n        return {\n            content: {\n                role: \"user\",\n                parts: [\n                    {\n                        text: cleanedText\n                    }\n                ]\n            },\n            taskType: this.taskType,\n            title: this.title\n        };\n    }\n    async _embedQueryContent(text) {\n        const req = this._convertToContent(text);\n        const res = await this.client.embedContent(req);\n        return res.embedding.values ?? [];\n    }\n    async _embedDocumentsContent(documents) {\n        const batchEmbedChunks = (0,_langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_3__.chunkArray)(documents, this.maxBatchSize);\n        const batchEmbedRequests = batchEmbedChunks.map((chunk)=>({\n                requests: chunk.map((doc)=>this._convertToContent(doc))\n            }));\n        const responses = await Promise.allSettled(batchEmbedRequests.map((req)=>this.client.batchEmbedContents(req)));\n        const embeddings = responses.flatMap((res, idx)=>{\n            if (res.status === \"fulfilled\") {\n                return res.value.embeddings.map((e)=>e.values || []);\n            } else {\n                return Array(batchEmbedChunks[idx].length).fill([]);\n            }\n        });\n        return embeddings;\n    }\n    /**\n     * Method that takes a document as input and returns a promise that\n     * resolves to an embedding for the document. It calls the _embedText\n     * method with the document as the input.\n     * @param document Document for which to generate an embedding.\n     * @returns Promise that resolves to an embedding for the input document.\n     */ embedQuery(document) {\n        return this.caller.call(this._embedQueryContent.bind(this), document);\n    }\n    /**\n     * Method that takes an array of documents as input and returns a promise\n     * that resolves to a 2D array of embeddings for each document. It calls\n     * the _embedText method for each document in the array.\n     * @param documents Array of documents for which to generate embeddings.\n     * @returns Promise that resolves to a 2D array of embeddings for each input document.\n     */ embedDocuments(documents) {\n        return this.caller.call(this._embedDocumentsContent.bind(this), documents);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/dist/embeddings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/dist/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/dist/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatGoogleGenerativeAI: () => (/* reexport safe */ _chat_models_js__WEBPACK_IMPORTED_MODULE_0__.ChatGoogleGenerativeAI),\n/* harmony export */   GoogleGenerativeAIEmbeddings: () => (/* reexport safe */ _embeddings_js__WEBPACK_IMPORTED_MODULE_1__.GoogleGenerativeAIEmbeddings)\n/* harmony export */ });\n/* harmony import */ var _chat_models_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chat_models.js */ \"(rsc)/./node_modules/@langchain/google-genai/dist/chat_models.js\");\n/* harmony import */ var _embeddings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./embeddings.js */ \"(rsc)/./node_modules/@langchain/google-genai/dist/embeddings.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWlDO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1nZW5haS9kaXN0L2luZGV4LmpzPzEwNWIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vY2hhdF9tb2RlbHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2VtYmVkZGluZ3MuanNcIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/dist/utils.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/dist/utils.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertAuthorToRole: () => (/* binding */ convertAuthorToRole),\n/* harmony export */   convertBaseMessagesToContent: () => (/* binding */ convertBaseMessagesToContent),\n/* harmony export */   convertMessageContentToParts: () => (/* binding */ convertMessageContentToParts),\n/* harmony export */   convertResponseContentToChatGenerationChunk: () => (/* binding */ convertResponseContentToChatGenerationChunk),\n/* harmony export */   getMessageAuthor: () => (/* binding */ getMessageAuthor),\n/* harmony export */   mapGenerateContentResultToChatResult: () => (/* binding */ mapGenerateContentResultToChatResult)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/messages.js\");\n/* harmony import */ var _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/outputs.js\");\n\n\nfunction getMessageAuthor(message) {\n    const type = message._getType();\n    if (_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.ChatMessage.isInstance(message)) {\n        return message.role;\n    }\n    return message.name ?? type;\n}\n/**\n * Maps a message type to a Google Generative AI chat author.\n * @param message The message to map.\n * @param model The model to use for mapping.\n * @returns The message type mapped to a Google Generative AI chat author.\n */ function convertAuthorToRole(author) {\n    switch(author){\n        /**\n         *  Note: Gemini currently is not supporting system messages\n         *  we will convert them to human messages and merge with following\n         * */ case \"ai\":\n        case \"model\":\n            return \"model\";\n        case \"system\":\n        case \"human\":\n            return \"user\";\n        default:\n            throw new Error(`Unknown / unsupported author: ${author}`);\n    }\n}\nfunction convertMessageContentToParts(content, isMultimodalModel) {\n    if (typeof content === \"string\") {\n        return [\n            {\n                text: content\n            }\n        ];\n    }\n    return content.map((c)=>{\n        if (c.type === \"text\") {\n            return {\n                text: c.text\n            };\n        }\n        if (c.type === \"image_url\") {\n            if (!isMultimodalModel) {\n                throw new Error(`This model does not support images`);\n            }\n            let source;\n            if (typeof c.image_url === \"string\") {\n                source = c.image_url;\n            } else if (typeof c.image_url === \"object\" && \"url\" in c.image_url) {\n                source = c.image_url.url;\n            } else {\n                throw new Error(\"Please provide image as base64 encoded data URL\");\n            }\n            const [dm, data] = source.split(\",\");\n            if (!dm.startsWith(\"data:\")) {\n                throw new Error(\"Please provide image as base64 encoded data URL\");\n            }\n            const [mimeType, encoding] = dm.replace(/^data:/, \"\").split(\";\");\n            if (encoding !== \"base64\") {\n                throw new Error(\"Please provide image as base64 encoded data URL\");\n            }\n            return {\n                inlineData: {\n                    data,\n                    mimeType\n                }\n            };\n        }\n        throw new Error(`Unknown content type ${c.type}`);\n    });\n}\nfunction convertBaseMessagesToContent(messages, isMultimodalModel) {\n    return messages.reduce((acc, message, index)=>{\n        if (!(0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.isBaseMessage)(message)) {\n            throw new Error(\"Unsupported message input\");\n        }\n        const author = getMessageAuthor(message);\n        if (author === \"system\" && index !== 0) {\n            throw new Error(\"System message should be the first one\");\n        }\n        const role = convertAuthorToRole(author);\n        const prevContent = acc.content[acc.content.length];\n        if (!acc.mergeWithPreviousContent && prevContent && prevContent.role === role) {\n            throw new Error(\"Google Generative AI requires alternate messages between authors\");\n        }\n        const parts = convertMessageContentToParts(message.content, isMultimodalModel);\n        if (acc.mergeWithPreviousContent) {\n            const prevContent = acc.content[acc.content.length - 1];\n            if (!prevContent) {\n                throw new Error(\"There was a problem parsing your system message. Please try a prompt without one.\");\n            }\n            prevContent.parts.push(...parts);\n            return {\n                mergeWithPreviousContent: false,\n                content: acc.content\n            };\n        }\n        const content = {\n            role,\n            parts\n        };\n        return {\n            mergeWithPreviousContent: author === \"system\",\n            content: [\n                ...acc.content,\n                content\n            ]\n        };\n    }, {\n        content: [],\n        mergeWithPreviousContent: false\n    }).content;\n}\nfunction mapGenerateContentResultToChatResult(response) {\n    // if rejected or error, return empty generations with reason in filters\n    if (!response.candidates || response.candidates.length === 0 || !response.candidates[0]) {\n        return {\n            generations: [],\n            llmOutput: {\n                filters: response.promptFeedback\n            }\n        };\n    }\n    const [candidate] = response.candidates;\n    const { content, ...generationInfo } = candidate;\n    const text = content?.parts[0]?.text ?? \"\";\n    const generation = {\n        text,\n        message: new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.AIMessage({\n            content: text,\n            name: !content ? undefined : content.role,\n            additional_kwargs: generationInfo\n        }),\n        generationInfo\n    };\n    return {\n        generations: [\n            generation\n        ]\n    };\n}\nfunction convertResponseContentToChatGenerationChunk(response) {\n    if (!response.candidates || response.candidates.length === 0) {\n        return null;\n    }\n    const [candidate] = response.candidates;\n    const { content, ...generationInfo } = candidate;\n    const text = content?.parts[0]?.text ?? \"\";\n    return new _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_1__.ChatGenerationChunk({\n        text,\n        message: new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.AIMessageChunk({\n            content: text,\n            name: !content ? undefined : content.role,\n            // Each chunk can have unique \"generationInfo\", and merging strategy is unclear,\n            // so leave blank for now.\n            additional_kwargs: {}\n        }),\n        generationInfo\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/dist/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@langchain/google-genai/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatGoogleGenerativeAI: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.ChatGoogleGenerativeAI),\n/* harmony export */   GoogleGenerativeAIEmbeddings: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAIEmbeddings)\n/* harmony export */ });\n/* harmony import */ var _dist_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/index.js */ \"(rsc)/./node_modules/@langchain/google-genai/dist/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvaW5kZXguanM/Yzk1NCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2Rpc3QvaW5kZXguanMnIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/caches.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/caches.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseCache: () => (/* binding */ BaseCache),\n/* harmony export */   InMemoryCache: () => (/* binding */ InMemoryCache),\n/* harmony export */   deserializeStoredGeneration: () => (/* binding */ deserializeStoredGeneration),\n/* harmony export */   getCacheKey: () => (/* binding */ getCacheKey),\n/* harmony export */   serializeGeneration: () => (/* binding */ serializeGeneration)\n/* harmony export */ });\n/* harmony import */ var _utils_hash_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/hash.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/hash.js\");\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./messages/index.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/index.js\");\n\n\n/**\n * This cache key should be consistent across all versions of langchain.\n * It is currently NOT consistent across versions of langchain.\n *\n * A huge benefit of having a remote cache (like redis) is that you can\n * access the cache from different processes/machines. The allows you to\n * seperate concerns and scale horizontally.\n *\n * TODO: Make cache key consistent across versions of langchain.\n */ const getCacheKey = (...strings)=>(0,_utils_hash_js__WEBPACK_IMPORTED_MODULE_0__.insecureHash)(strings.join(\"_\"));\nfunction deserializeStoredGeneration(storedGeneration) {\n    if (storedGeneration.message !== undefined) {\n        return {\n            text: storedGeneration.text,\n            message: (0,_messages_index_js__WEBPACK_IMPORTED_MODULE_1__.mapStoredMessageToChatMessage)(storedGeneration.message)\n        };\n    } else {\n        return {\n            text: storedGeneration.text\n        };\n    }\n}\nfunction serializeGeneration(generation) {\n    const serializedValue = {\n        text: generation.text\n    };\n    if (generation.message !== undefined) {\n        serializedValue.message = generation.message.toDict();\n    }\n    return serializedValue;\n}\n/**\n * Base class for all caches. All caches should extend this class.\n */ class BaseCache {\n}\nconst GLOBAL_MAP = new Map();\n/**\n * A cache for storing LLM generations that stores data in memory.\n */ class InMemoryCache extends BaseCache {\n    constructor(map){\n        super();\n        Object.defineProperty(this, \"cache\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.cache = map ?? new Map();\n    }\n    /**\n     * Retrieves data from the cache using a prompt and an LLM key. If the\n     * data is not found, it returns null.\n     * @param prompt The prompt used to find the data.\n     * @param llmKey The LLM key used to find the data.\n     * @returns The data corresponding to the prompt and LLM key, or null if not found.\n     */ lookup(prompt, llmKey) {\n        return Promise.resolve(this.cache.get(getCacheKey(prompt, llmKey)) ?? null);\n    }\n    /**\n     * Updates the cache with new data using a prompt and an LLM key.\n     * @param prompt The prompt used to store the data.\n     * @param llmKey The LLM key used to store the data.\n     * @param value The data to be stored.\n     */ async update(prompt, llmKey, value) {\n        this.cache.set(getCacheKey(prompt, llmKey), value);\n    }\n    /**\n     * Returns a global instance of InMemoryCache using a predefined global\n     * map as the initial cache.\n     * @returns A global instance of InMemoryCache.\n     */ static global() {\n        return new InMemoryCache(GLOBAL_MAP);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L2NhY2hlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQStDO0FBQ3NCO0FBQ3JFOzs7Ozs7Ozs7Q0FTQyxHQUNNLE1BQU1FLGNBQWMsQ0FBQyxHQUFHQyxVQUFZSCw0REFBWUEsQ0FBQ0csUUFBUUMsSUFBSSxDQUFDLE1BQU07QUFDcEUsU0FBU0MsNEJBQTRCQyxnQkFBZ0I7SUFDeEQsSUFBSUEsaUJBQWlCQyxPQUFPLEtBQUtDLFdBQVc7UUFDeEMsT0FBTztZQUNIQyxNQUFNSCxpQkFBaUJHLElBQUk7WUFDM0JGLFNBQVNOLGlGQUE2QkEsQ0FBQ0ssaUJBQWlCQyxPQUFPO1FBQ25FO0lBQ0osT0FDSztRQUNELE9BQU87WUFBRUUsTUFBTUgsaUJBQWlCRyxJQUFJO1FBQUM7SUFDekM7QUFDSjtBQUNPLFNBQVNDLG9CQUFvQkMsVUFBVTtJQUMxQyxNQUFNQyxrQkFBa0I7UUFDcEJILE1BQU1FLFdBQVdGLElBQUk7SUFDekI7SUFDQSxJQUFJRSxXQUFXSixPQUFPLEtBQUtDLFdBQVc7UUFDbENJLGdCQUFnQkwsT0FBTyxHQUFHSSxXQUFXSixPQUFPLENBQUNNLE1BQU07SUFDdkQ7SUFDQSxPQUFPRDtBQUNYO0FBQ0E7O0NBRUMsR0FDTSxNQUFNRTtBQUNiO0FBQ0EsTUFBTUMsYUFBYSxJQUFJQztBQUN2Qjs7Q0FFQyxHQUNNLE1BQU1DLHNCQUFzQkg7SUFDL0JJLFlBQVlDLEdBQUcsQ0FBRTtRQUNiLEtBQUs7UUFDTEMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxTQUFTO1lBQ2pDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNDLEtBQUssR0FBR1AsT0FBTyxJQUFJSDtJQUM1QjtJQUNBOzs7Ozs7S0FNQyxHQUNEVyxPQUFPQyxNQUFNLEVBQUVDLE1BQU0sRUFBRTtRQUNuQixPQUFPQyxRQUFRQyxPQUFPLENBQUMsSUFBSSxDQUFDTCxLQUFLLENBQUNNLEdBQUcsQ0FBQzlCLFlBQVkwQixRQUFRQyxZQUFZO0lBQzFFO0lBQ0E7Ozs7O0tBS0MsR0FDRCxNQUFNSSxPQUFPTCxNQUFNLEVBQUVDLE1BQU0sRUFBRUosS0FBSyxFQUFFO1FBQ2hDLElBQUksQ0FBQ0MsS0FBSyxDQUFDUSxHQUFHLENBQUNoQyxZQUFZMEIsUUFBUUMsU0FBU0o7SUFDaEQ7SUFDQTs7OztLQUlDLEdBQ0QsT0FBT1UsU0FBUztRQUNaLE9BQU8sSUFBSWxCLGNBQWNGO0lBQzdCO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1nZW5haS9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvY2FjaGVzLmpzPzg3YzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5zZWN1cmVIYXNoIH0gZnJvbSBcIi4vdXRpbHMvaGFzaC5qc1wiO1xuaW1wb3J0IHsgbWFwU3RvcmVkTWVzc2FnZVRvQ2hhdE1lc3NhZ2UsIH0gZnJvbSBcIi4vbWVzc2FnZXMvaW5kZXguanNcIjtcbi8qKlxuICogVGhpcyBjYWNoZSBrZXkgc2hvdWxkIGJlIGNvbnNpc3RlbnQgYWNyb3NzIGFsbCB2ZXJzaW9ucyBvZiBsYW5nY2hhaW4uXG4gKiBJdCBpcyBjdXJyZW50bHkgTk9UIGNvbnNpc3RlbnQgYWNyb3NzIHZlcnNpb25zIG9mIGxhbmdjaGFpbi5cbiAqXG4gKiBBIGh1Z2UgYmVuZWZpdCBvZiBoYXZpbmcgYSByZW1vdGUgY2FjaGUgKGxpa2UgcmVkaXMpIGlzIHRoYXQgeW91IGNhblxuICogYWNjZXNzIHRoZSBjYWNoZSBmcm9tIGRpZmZlcmVudCBwcm9jZXNzZXMvbWFjaGluZXMuIFRoZSBhbGxvd3MgeW91IHRvXG4gKiBzZXBlcmF0ZSBjb25jZXJucyBhbmQgc2NhbGUgaG9yaXpvbnRhbGx5LlxuICpcbiAqIFRPRE86IE1ha2UgY2FjaGUga2V5IGNvbnNpc3RlbnQgYWNyb3NzIHZlcnNpb25zIG9mIGxhbmdjaGFpbi5cbiAqL1xuZXhwb3J0IGNvbnN0IGdldENhY2hlS2V5ID0gKC4uLnN0cmluZ3MpID0+IGluc2VjdXJlSGFzaChzdHJpbmdzLmpvaW4oXCJfXCIpKTtcbmV4cG9ydCBmdW5jdGlvbiBkZXNlcmlhbGl6ZVN0b3JlZEdlbmVyYXRpb24oc3RvcmVkR2VuZXJhdGlvbikge1xuICAgIGlmIChzdG9yZWRHZW5lcmF0aW9uLm1lc3NhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGV4dDogc3RvcmVkR2VuZXJhdGlvbi50ZXh0LFxuICAgICAgICAgICAgbWVzc2FnZTogbWFwU3RvcmVkTWVzc2FnZVRvQ2hhdE1lc3NhZ2Uoc3RvcmVkR2VuZXJhdGlvbi5tZXNzYWdlKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB7IHRleHQ6IHN0b3JlZEdlbmVyYXRpb24udGV4dCB9O1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemVHZW5lcmF0aW9uKGdlbmVyYXRpb24pIHtcbiAgICBjb25zdCBzZXJpYWxpemVkVmFsdWUgPSB7XG4gICAgICAgIHRleHQ6IGdlbmVyYXRpb24udGV4dCxcbiAgICB9O1xuICAgIGlmIChnZW5lcmF0aW9uLm1lc3NhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzZXJpYWxpemVkVmFsdWUubWVzc2FnZSA9IGdlbmVyYXRpb24ubWVzc2FnZS50b0RpY3QoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlcmlhbGl6ZWRWYWx1ZTtcbn1cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgYWxsIGNhY2hlcy4gQWxsIGNhY2hlcyBzaG91bGQgZXh0ZW5kIHRoaXMgY2xhc3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBCYXNlQ2FjaGUge1xufVxuY29uc3QgR0xPQkFMX01BUCA9IG5ldyBNYXAoKTtcbi8qKlxuICogQSBjYWNoZSBmb3Igc3RvcmluZyBMTE0gZ2VuZXJhdGlvbnMgdGhhdCBzdG9yZXMgZGF0YSBpbiBtZW1vcnkuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbk1lbW9yeUNhY2hlIGV4dGVuZHMgQmFzZUNhY2hlIHtcbiAgICBjb25zdHJ1Y3RvcihtYXApIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiY2FjaGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jYWNoZSA9IG1hcCA/PyBuZXcgTWFwKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBkYXRhIGZyb20gdGhlIGNhY2hlIHVzaW5nIGEgcHJvbXB0IGFuZCBhbiBMTE0ga2V5LiBJZiB0aGVcbiAgICAgKiBkYXRhIGlzIG5vdCBmb3VuZCwgaXQgcmV0dXJucyBudWxsLlxuICAgICAqIEBwYXJhbSBwcm9tcHQgVGhlIHByb21wdCB1c2VkIHRvIGZpbmQgdGhlIGRhdGEuXG4gICAgICogQHBhcmFtIGxsbUtleSBUaGUgTExNIGtleSB1c2VkIHRvIGZpbmQgdGhlIGRhdGEuXG4gICAgICogQHJldHVybnMgVGhlIGRhdGEgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvbXB0IGFuZCBMTE0ga2V5LCBvciBudWxsIGlmIG5vdCBmb3VuZC5cbiAgICAgKi9cbiAgICBsb29rdXAocHJvbXB0LCBsbG1LZXkpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLmNhY2hlLmdldChnZXRDYWNoZUtleShwcm9tcHQsIGxsbUtleSkpID8/IG51bGwpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjYWNoZSB3aXRoIG5ldyBkYXRhIHVzaW5nIGEgcHJvbXB0IGFuZCBhbiBMTE0ga2V5LlxuICAgICAqIEBwYXJhbSBwcm9tcHQgVGhlIHByb21wdCB1c2VkIHRvIHN0b3JlIHRoZSBkYXRhLlxuICAgICAqIEBwYXJhbSBsbG1LZXkgVGhlIExMTSBrZXkgdXNlZCB0byBzdG9yZSB0aGUgZGF0YS5cbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIGRhdGEgdG8gYmUgc3RvcmVkLlxuICAgICAqL1xuICAgIGFzeW5jIHVwZGF0ZShwcm9tcHQsIGxsbUtleSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5jYWNoZS5zZXQoZ2V0Q2FjaGVLZXkocHJvbXB0LCBsbG1LZXkpLCB2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBnbG9iYWwgaW5zdGFuY2Ugb2YgSW5NZW1vcnlDYWNoZSB1c2luZyBhIHByZWRlZmluZWQgZ2xvYmFsXG4gICAgICogbWFwIGFzIHRoZSBpbml0aWFsIGNhY2hlLlxuICAgICAqIEByZXR1cm5zIEEgZ2xvYmFsIGluc3RhbmNlIG9mIEluTWVtb3J5Q2FjaGUuXG4gICAgICovXG4gICAgc3RhdGljIGdsb2JhbCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJbk1lbW9yeUNhY2hlKEdMT0JBTF9NQVApO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJpbnNlY3VyZUhhc2giLCJtYXBTdG9yZWRNZXNzYWdlVG9DaGF0TWVzc2FnZSIsImdldENhY2hlS2V5Iiwic3RyaW5ncyIsImpvaW4iLCJkZXNlcmlhbGl6ZVN0b3JlZEdlbmVyYXRpb24iLCJzdG9yZWRHZW5lcmF0aW9uIiwibWVzc2FnZSIsInVuZGVmaW5lZCIsInRleHQiLCJzZXJpYWxpemVHZW5lcmF0aW9uIiwiZ2VuZXJhdGlvbiIsInNlcmlhbGl6ZWRWYWx1ZSIsInRvRGljdCIsIkJhc2VDYWNoZSIsIkdMT0JBTF9NQVAiLCJNYXAiLCJJbk1lbW9yeUNhY2hlIiwiY29uc3RydWN0b3IiLCJtYXAiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwiY2FjaGUiLCJsb29rdXAiLCJwcm9tcHQiLCJsbG1LZXkiLCJQcm9taXNlIiwicmVzb2x2ZSIsImdldCIsInVwZGF0ZSIsInNldCIsImdsb2JhbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/caches.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/callbacks/base.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/callbacks/base.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseCallbackHandler: () => (/* binding */ BaseCallbackHandler)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../load/serializable.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/load/serializable.js\");\n/* harmony import */ var _utils_env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/env.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/env.js\");\n\n\n\n/**\n * Abstract class that provides a set of optional methods that can be\n * overridden in derived classes to handle various events during the\n * execution of a LangChain application.\n */ class BaseCallbackHandlerMethodsClass {\n}\n/**\n * Abstract base class for creating callback handlers in the LangChain\n * framework. It provides a set of optional methods that can be overridden\n * in derived classes to handle various events during the execution of a\n * LangChain application.\n */ class BaseCallbackHandler extends BaseCallbackHandlerMethodsClass {\n    get lc_namespace() {\n        return [\n            \"langchain_core\",\n            \"callbacks\",\n            this.name\n        ];\n    }\n    get lc_secrets() {\n        return undefined;\n    }\n    get lc_attributes() {\n        return undefined;\n    }\n    get lc_aliases() {\n        return undefined;\n    }\n    /**\n     * The name of the serializable. Override to provide an alias or\n     * to preserve the serialized module name in minified environments.\n     *\n     * Implemented as a static method to support loading logic.\n     */ static lc_name() {\n        return this.name;\n    }\n    /**\n     * The final serialized identifier for the module.\n     */ get lc_id() {\n        return [\n            ...this.lc_namespace,\n            (0,_load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.get_lc_unique_name)(this.constructor)\n        ];\n    }\n    constructor(input){\n        super();\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"ignoreLLM\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreAgent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreRetriever\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"awaitHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_CALLBACKS_BACKGROUND\") !== \"true\"\n        });\n        this.lc_kwargs = input || {};\n        if (input) {\n            this.ignoreLLM = input.ignoreLLM ?? this.ignoreLLM;\n            this.ignoreChain = input.ignoreChain ?? this.ignoreChain;\n            this.ignoreAgent = input.ignoreAgent ?? this.ignoreAgent;\n            this.ignoreRetriever = input.ignoreRetriever ?? this.ignoreRetriever;\n            this.awaitHandlers = input._awaitHandler ?? this.awaitHandlers;\n        }\n    }\n    copy() {\n        return new this.constructor(this);\n    }\n    toJSON() {\n        return _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable.prototype.toJSON.call(this);\n    }\n    toJSONNotImplemented() {\n        return _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable.prototype.toJSONNotImplemented.call(this);\n    }\n    static fromMethods(methods) {\n        class Handler extends BaseCallbackHandler {\n            constructor(){\n                super();\n                Object.defineProperty(this, \"name\", {\n                    enumerable: true,\n                    configurable: true,\n                    writable: true,\n                    value: uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"]()\n                });\n                Object.assign(this, methods);\n            }\n        }\n        return new Handler();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/callbacks/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/callbacks/manager.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/callbacks/manager.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseCallbackManager: () => (/* binding */ BaseCallbackManager),\n/* harmony export */   CallbackManager: () => (/* binding */ CallbackManager),\n/* harmony export */   CallbackManagerForChainRun: () => (/* binding */ CallbackManagerForChainRun),\n/* harmony export */   CallbackManagerForLLMRun: () => (/* binding */ CallbackManagerForLLMRun),\n/* harmony export */   CallbackManagerForRetrieverRun: () => (/* binding */ CallbackManagerForRetrieverRun),\n/* harmony export */   CallbackManagerForToolRun: () => (/* binding */ CallbackManagerForToolRun),\n/* harmony export */   TraceGroup: () => (/* binding */ TraceGroup),\n/* harmony export */   ensureHandler: () => (/* binding */ ensureHandler),\n/* harmony export */   parseCallbackConfigArg: () => (/* binding */ parseCallbackConfigArg),\n/* harmony export */   traceAsGroup: () => (/* binding */ traceAsGroup)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/callbacks/base.js\");\n/* harmony import */ var _tracers_console_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tracers/console.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/console.js\");\n/* harmony import */ var _tracers_initialize_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tracers/initialize.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/initialize.js\");\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../messages/index.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _utils_env_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/env.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/env.js\");\n/* harmony import */ var _tracers_tracer_langchain_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../tracers/tracer_langchain.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/tracer_langchain.js\");\n/* harmony import */ var _promises_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./promises.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/callbacks/promises.js\");\n\n\n\n\n\n\n\n\nif (/* #__PURE__ */ (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"LANGCHAIN_TRACING_V2\") === \"true\" && /* #__PURE__ */ (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"LANGCHAIN_CALLBACKS_BACKGROUND\") !== \"true\") {\n    /* #__PURE__ */ console.warn([\n        \"[WARN]: You have enabled LangSmith tracing without backgrounding callbacks.\",\n        \"[WARN]: If you are not using a serverless environment where you must wait for tracing calls to finish,\",\n        `[WARN]: we suggest setting \"process.env.LANGCHAIN_CALLBACKS_BACKGROUND=true\" to avoid additional latency.`\n    ].join(\"\\n\"));\n}\nfunction parseCallbackConfigArg(arg) {\n    if (!arg) {\n        return {};\n    } else if (Array.isArray(arg) || \"name\" in arg) {\n        return {\n            callbacks: arg\n        };\n    } else {\n        return arg;\n    }\n}\n/**\n * Manage callbacks from different components of LangChain.\n */ class BaseCallbackManager {\n    setHandler(handler) {\n        return this.setHandlers([\n            handler\n        ]);\n    }\n}\n/**\n * Base class for run manager in LangChain.\n */ class BaseRunManager {\n    constructor(runId, handlers, inheritableHandlers, tags, inheritableTags, metadata, inheritableMetadata, _parentRunId){\n        Object.defineProperty(this, \"runId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: runId\n        });\n        Object.defineProperty(this, \"handlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: handlers\n        });\n        Object.defineProperty(this, \"inheritableHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: inheritableHandlers\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: tags\n        });\n        Object.defineProperty(this, \"inheritableTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: inheritableTags\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: metadata\n        });\n        Object.defineProperty(this, \"inheritableMetadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: inheritableMetadata\n        });\n        Object.defineProperty(this, \"_parentRunId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _parentRunId\n        });\n    }\n    async handleText(text) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                try {\n                    await handler.handleText?.(text, this.runId, this._parentRunId, this.tags);\n                } catch (err) {\n                    console.error(`Error in handler ${handler.constructor.name}, handleText: ${err}`);\n                }\n            }, handler.awaitHandlers)));\n    }\n}\n/**\n * Manages callbacks for retriever runs.\n */ class CallbackManagerForRetrieverRun extends BaseRunManager {\n    getChild(tag) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const manager = new CallbackManager(this.runId);\n        manager.setHandlers(this.inheritableHandlers);\n        manager.addTags(this.inheritableTags);\n        manager.addMetadata(this.inheritableMetadata);\n        if (tag) {\n            manager.addTags([\n                tag\n            ], false);\n        }\n        return manager;\n    }\n    async handleRetrieverEnd(documents) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreRetriever) {\n                    try {\n                        await handler.handleRetrieverEnd?.(documents, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleRetriever`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleRetrieverError(err) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreRetriever) {\n                    try {\n                        await handler.handleRetrieverError?.(err, this.runId, this._parentRunId, this.tags);\n                    } catch (error) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleRetrieverError: ${error}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\nclass CallbackManagerForLLMRun extends BaseRunManager {\n    async handleLLMNewToken(token, idx, _runId, _parentRunId, _tags, fields) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreLLM) {\n                    try {\n                        await handler.handleLLMNewToken?.(token, idx ?? {\n                            prompt: 0,\n                            completion: 0\n                        }, this.runId, this._parentRunId, this.tags, fields);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleLLMNewToken: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleLLMError(err) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreLLM) {\n                    try {\n                        await handler.handleLLMError?.(err, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleLLMError: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleLLMEnd(output) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreLLM) {\n                    try {\n                        await handler.handleLLMEnd?.(output, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleLLMEnd: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\nclass CallbackManagerForChainRun extends BaseRunManager {\n    getChild(tag) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const manager = new CallbackManager(this.runId);\n        manager.setHandlers(this.inheritableHandlers);\n        manager.addTags(this.inheritableTags);\n        manager.addMetadata(this.inheritableMetadata);\n        if (tag) {\n            manager.addTags([\n                tag\n            ], false);\n        }\n        return manager;\n    }\n    async handleChainError(err, _runId, _parentRunId, _tags, kwargs) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreChain) {\n                    try {\n                        await handler.handleChainError?.(err, this.runId, this._parentRunId, this.tags, kwargs);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleChainError: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleChainEnd(output, _runId, _parentRunId, _tags, kwargs) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreChain) {\n                    try {\n                        await handler.handleChainEnd?.(output, this.runId, this._parentRunId, this.tags, kwargs);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleChainEnd: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleAgentAction(action) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleAgentAction?.(action, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleAgentAction: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleAgentEnd(action) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleAgentEnd?.(action, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleAgentEnd: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\nclass CallbackManagerForToolRun extends BaseRunManager {\n    getChild(tag) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const manager = new CallbackManager(this.runId);\n        manager.setHandlers(this.inheritableHandlers);\n        manager.addTags(this.inheritableTags);\n        manager.addMetadata(this.inheritableMetadata);\n        if (tag) {\n            manager.addTags([\n                tag\n            ], false);\n        }\n        return manager;\n    }\n    async handleToolError(err) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleToolError?.(err, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleToolError: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleToolEnd(output) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleToolEnd?.(output, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleToolEnd: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\n/**\n * @example\n * ```typescript\n * const prompt = PromptTemplate.fromTemplate(\"What is the answer to {question}?\");\n *\n * // Example of using LLMChain with OpenAI and a simple prompt\n * const chain = new LLMChain({\n *   llm: new ChatOpenAI({ temperature: 0.9 }),\n *   prompt,\n * });\n *\n * // Running the chain with a single question\n * const result = await chain.call({\n *   question: \"What is the airspeed velocity of an unladen swallow?\",\n * });\n * console.log(\"The answer is:\", result);\n * ```\n */ class CallbackManager extends BaseCallbackManager {\n    constructor(parentRunId, options){\n        super();\n        Object.defineProperty(this, \"handlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"inheritableHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"inheritableTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"inheritableMetadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"callback_manager\"\n        });\n        Object.defineProperty(this, \"_parentRunId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.handlers = options?.handlers ?? this.handlers;\n        this.inheritableHandlers = options?.inheritableHandlers ?? this.inheritableHandlers;\n        this.tags = options?.tags ?? this.tags;\n        this.inheritableTags = options?.inheritableTags ?? this.inheritableTags;\n        this.metadata = options?.metadata ?? this.metadata;\n        this.inheritableMetadata = options?.inheritableMetadata ?? this.inheritableMetadata;\n        this._parentRunId = parentRunId;\n    }\n    /**\n     * Gets the parent run ID, if any.\n     *\n     * @returns The parent run ID.\n     */ getParentRunId() {\n        return this._parentRunId;\n    }\n    async handleLLMStart(llm, prompts, runId = undefined, _parentRunId = undefined, extraParams = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        return Promise.all(prompts.map(async (prompt, idx)=>{\n            // Can't have duplicate runs with the same run ID (if provided)\n            const runId_ = idx === 0 && runId ? runId : (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])();\n            await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                    if (!handler.ignoreLLM) {\n                        try {\n                            await handler.handleLLMStart?.(llm, [\n                                prompt\n                            ], runId_, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                        } catch (err) {\n                            console.error(`Error in handler ${handler.constructor.name}, handleLLMStart: ${err}`);\n                        }\n                    }\n                }, handler.awaitHandlers)));\n            return new CallbackManagerForLLMRun(runId_, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n        }));\n    }\n    async handleChatModelStart(llm, messages, runId = undefined, _parentRunId = undefined, extraParams = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        return Promise.all(messages.map(async (messageGroup, idx)=>{\n            // Can't have duplicate runs with the same run ID (if provided)\n            const runId_ = idx === 0 && runId ? runId : (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])();\n            await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                    if (!handler.ignoreLLM) {\n                        try {\n                            if (handler.handleChatModelStart) {\n                                await handler.handleChatModelStart?.(llm, [\n                                    messageGroup\n                                ], runId_, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                            } else if (handler.handleLLMStart) {\n                                const messageString = (0,_messages_index_js__WEBPACK_IMPORTED_MODULE_3__.getBufferString)(messageGroup);\n                                await handler.handleLLMStart?.(llm, [\n                                    messageString\n                                ], runId_, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                            }\n                        } catch (err) {\n                            console.error(`Error in handler ${handler.constructor.name}, handleLLMStart: ${err}`);\n                        }\n                    }\n                }, handler.awaitHandlers)));\n            return new CallbackManagerForLLMRun(runId_, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n        }));\n    }\n    async handleChainStart(chain, inputs, runId = (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(), runType = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreChain) {\n                    try {\n                        await handler.handleChainStart?.(chain, inputs, runId, this._parentRunId, this.tags, this.metadata, runType, runName);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleChainStart: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n        return new CallbackManagerForChainRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n    }\n    async handleToolStart(tool, input, runId = (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(), _parentRunId = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleToolStart?.(tool, input, runId, this._parentRunId, this.tags, this.metadata, runName);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleToolStart: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n        return new CallbackManagerForToolRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n    }\n    async handleRetrieverStart(retriever, query, runId = (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(), _parentRunId = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreRetriever) {\n                    try {\n                        await handler.handleRetrieverStart?.(retriever, query, runId, this._parentRunId, this.tags, this.metadata, runName);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleRetrieverStart: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n        return new CallbackManagerForRetrieverRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n    }\n    addHandler(handler, inherit = true) {\n        this.handlers.push(handler);\n        if (inherit) {\n            this.inheritableHandlers.push(handler);\n        }\n    }\n    removeHandler(handler) {\n        this.handlers = this.handlers.filter((_handler)=>_handler !== handler);\n        this.inheritableHandlers = this.inheritableHandlers.filter((_handler)=>_handler !== handler);\n    }\n    setHandlers(handlers, inherit = true) {\n        this.handlers = [];\n        this.inheritableHandlers = [];\n        for (const handler of handlers){\n            this.addHandler(handler, inherit);\n        }\n    }\n    addTags(tags, inherit = true) {\n        this.removeTags(tags); // Remove duplicates\n        this.tags.push(...tags);\n        if (inherit) {\n            this.inheritableTags.push(...tags);\n        }\n    }\n    removeTags(tags) {\n        this.tags = this.tags.filter((tag)=>!tags.includes(tag));\n        this.inheritableTags = this.inheritableTags.filter((tag)=>!tags.includes(tag));\n    }\n    addMetadata(metadata, inherit = true) {\n        this.metadata = {\n            ...this.metadata,\n            ...metadata\n        };\n        if (inherit) {\n            this.inheritableMetadata = {\n                ...this.inheritableMetadata,\n                ...metadata\n            };\n        }\n    }\n    removeMetadata(metadata) {\n        for (const key of Object.keys(metadata)){\n            delete this.metadata[key];\n            delete this.inheritableMetadata[key];\n        }\n    }\n    copy(additionalHandlers = [], inherit = true) {\n        const manager = new CallbackManager(this._parentRunId);\n        for (const handler of this.handlers){\n            const inheritable = this.inheritableHandlers.includes(handler);\n            manager.addHandler(handler, inheritable);\n        }\n        for (const tag of this.tags){\n            const inheritable = this.inheritableTags.includes(tag);\n            manager.addTags([\n                tag\n            ], inheritable);\n        }\n        for (const key of Object.keys(this.metadata)){\n            const inheritable = Object.keys(this.inheritableMetadata).includes(key);\n            manager.addMetadata({\n                [key]: this.metadata[key]\n            }, inheritable);\n        }\n        for (const handler of additionalHandlers){\n            if (// Prevent multiple copies of console_callback_handler\n            manager.handlers.filter((h)=>h.name === \"console_callback_handler\").some((h)=>h.name === handler.name)) {\n                continue;\n            }\n            manager.addHandler(handler, inherit);\n        }\n        return manager;\n    }\n    static fromHandlers(handlers) {\n        class Handler extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseCallbackHandler {\n            constructor(){\n                super();\n                Object.defineProperty(this, \"name\", {\n                    enumerable: true,\n                    configurable: true,\n                    writable: true,\n                    value: (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])()\n                });\n                Object.assign(this, handlers);\n            }\n        }\n        const manager = new this();\n        manager.addHandler(new Handler());\n        return manager;\n    }\n    static async configure(inheritableHandlers, localHandlers, inheritableTags, localTags, inheritableMetadata, localMetadata, options) {\n        let callbackManager;\n        if (inheritableHandlers || localHandlers) {\n            if (Array.isArray(inheritableHandlers) || !inheritableHandlers) {\n                callbackManager = new CallbackManager();\n                callbackManager.setHandlers(inheritableHandlers?.map(ensureHandler) ?? [], true);\n            } else {\n                callbackManager = inheritableHandlers;\n            }\n            callbackManager = callbackManager.copy(Array.isArray(localHandlers) ? localHandlers.map(ensureHandler) : localHandlers?.handlers, false);\n        }\n        const verboseEnabled = (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"LANGCHAIN_VERBOSE\") === \"true\" || options?.verbose;\n        const tracingV2Enabled = (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"LANGCHAIN_TRACING_V2\") === \"true\";\n        const tracingEnabled = tracingV2Enabled || ((0,_utils_env_js__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"LANGCHAIN_TRACING\") ?? false);\n        if (verboseEnabled || tracingEnabled) {\n            if (!callbackManager) {\n                callbackManager = new CallbackManager();\n            }\n            if (verboseEnabled && !callbackManager.handlers.some((handler)=>handler.name === _tracers_console_js__WEBPACK_IMPORTED_MODULE_1__.ConsoleCallbackHandler.prototype.name)) {\n                const consoleHandler = new _tracers_console_js__WEBPACK_IMPORTED_MODULE_1__.ConsoleCallbackHandler();\n                callbackManager.addHandler(consoleHandler, true);\n            }\n            if (tracingEnabled && !callbackManager.handlers.some((handler)=>handler.name === \"langchain_tracer\")) {\n                if (tracingV2Enabled) {\n                    callbackManager.addHandler(await (0,_tracers_initialize_js__WEBPACK_IMPORTED_MODULE_2__.getTracingV2CallbackHandler)(), true);\n                }\n            }\n        }\n        if (inheritableTags || localTags) {\n            if (callbackManager) {\n                callbackManager.addTags(inheritableTags ?? []);\n                callbackManager.addTags(localTags ?? [], false);\n            }\n        }\n        if (inheritableMetadata || localMetadata) {\n            if (callbackManager) {\n                callbackManager.addMetadata(inheritableMetadata ?? {});\n                callbackManager.addMetadata(localMetadata ?? {}, false);\n            }\n        }\n        return callbackManager;\n    }\n}\nfunction ensureHandler(handler) {\n    if (\"name\" in handler) {\n        return handler;\n    }\n    return _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseCallbackHandler.fromMethods(handler);\n}\n/**\n * @example\n * ```typescript\n * const prompt = PromptTemplate.fromTemplate(`What is the answer to {question}?`);\n *\n * // Example of using LLMChain to process a series of questions\n * const chain = new LLMChain({\n *   llm: new ChatOpenAI({ temperature: 0.9 }),\n *   prompt,\n * });\n *\n * // Process questions using the chain\n * const processQuestions = async (questions) => {\n *   for (const question of questions) {\n *     const result = await chain.call({ question });\n *     console.log(result);\n *   }\n * };\n *\n * // Example questions\n * const questions = [\n *   \"What is your name?\",\n *   \"What is your quest?\",\n *   \"What is your favorite color?\",\n * ];\n *\n * // Run the example\n * processQuestions(questions).catch(console.error);\n *\n * ```\n */ class TraceGroup {\n    constructor(groupName, options){\n        Object.defineProperty(this, \"groupName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: groupName\n        });\n        Object.defineProperty(this, \"options\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: options\n        });\n        Object.defineProperty(this, \"runManager\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    async getTraceGroupCallbackManager(group_name, inputs, options) {\n        const cb = new _tracers_tracer_langchain_js__WEBPACK_IMPORTED_MODULE_5__.LangChainTracer(options);\n        const cm = await CallbackManager.configure([\n            cb\n        ]);\n        const runManager = await cm?.handleChainStart({\n            lc: 1,\n            type: \"not_implemented\",\n            id: [\n                \"langchain\",\n                \"callbacks\",\n                \"groups\",\n                group_name\n            ]\n        }, inputs ?? {});\n        if (!runManager) {\n            throw new Error(\"Failed to create run group callback manager.\");\n        }\n        return runManager;\n    }\n    async start(inputs) {\n        if (!this.runManager) {\n            this.runManager = await this.getTraceGroupCallbackManager(this.groupName, inputs, this.options);\n        }\n        return this.runManager.getChild();\n    }\n    async error(err) {\n        if (this.runManager) {\n            await this.runManager.handleChainError(err);\n            this.runManager = undefined;\n        }\n    }\n    async end(output) {\n        if (this.runManager) {\n            await this.runManager.handleChainEnd(output ?? {});\n            this.runManager = undefined;\n        }\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _coerceToDict(value, defaultKey) {\n    return value && !Array.isArray(value) && typeof value === \"object\" ? value : {\n        [defaultKey]: value\n    };\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function traceAsGroup(groupOptions, enclosedCode, ...args) {\n    const traceGroup = new TraceGroup(groupOptions.name, groupOptions);\n    const callbackManager = await traceGroup.start({\n        ...args\n    });\n    try {\n        const result = await enclosedCode(callbackManager, ...args);\n        await traceGroup.end(_coerceToDict(result, \"output\"));\n        return result;\n    } catch (err) {\n        await traceGroup.error(err);\n        throw err;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/callbacks/manager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/callbacks/promises.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/callbacks/promises.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   awaitAllCallbacks: () => (/* binding */ awaitAllCallbacks),\n/* harmony export */   consumeCallback: () => (/* binding */ consumeCallback)\n/* harmony export */ });\n/* harmony import */ var p_queue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-queue */ \"(rsc)/./node_modules/p-queue/dist/index.js\");\n\nlet queue;\n/**\n * Creates a queue using the p-queue library. The queue is configured to\n * auto-start and has a concurrency of 1, meaning it will process tasks\n * one at a time.\n */ function createQueue() {\n    const PQueue =  true ? p_queue__WEBPACK_IMPORTED_MODULE_0__[\"default\"] : p_queue__WEBPACK_IMPORTED_MODULE_0__;\n    return new PQueue({\n        autoStart: true,\n        concurrency: 1\n    });\n}\n/**\n * Consume a promise, either adding it to the queue or waiting for it to resolve\n * @param promise Promise to consume\n * @param wait Whether to wait for the promise to resolve or resolve immediately\n */ async function consumeCallback(promiseFn, wait) {\n    if (wait === true) {\n        await promiseFn();\n    } else {\n        if (typeof queue === \"undefined\") {\n            queue = createQueue();\n        }\n        void queue.add(promiseFn);\n    }\n}\n/**\n * Waits for all promises in the queue to resolve. If the queue is\n * undefined, it immediately resolves a promise.\n */ function awaitAllCallbacks() {\n    return typeof queue !== \"undefined\" ? queue.onIdle() : Promise.resolve();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L2NhbGxiYWNrcy9wcm9taXNlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBZ0M7QUFDaEMsSUFBSUM7QUFDSjs7OztDQUlDLEdBQ0QsU0FBU0M7SUFDTCxNQUFNQyxTQUFTLEtBQXNCSCxHQUFHQSwrQ0FBaUIsR0FBR0Esb0NBQVNBO0lBQ3JFLE9BQU8sSUFBSUcsT0FBTztRQUNkRSxXQUFXO1FBQ1hDLGFBQWE7SUFDakI7QUFDSjtBQUNBOzs7O0NBSUMsR0FDTSxlQUFlQyxnQkFBZ0JDLFNBQVMsRUFBRUMsSUFBSTtJQUNqRCxJQUFJQSxTQUFTLE1BQU07UUFDZixNQUFNRDtJQUNWLE9BQ0s7UUFDRCxJQUFJLE9BQU9QLFVBQVUsYUFBYTtZQUM5QkEsUUFBUUM7UUFDWjtRQUNBLEtBQUtELE1BQU1TLEdBQUcsQ0FBQ0Y7SUFDbkI7QUFDSjtBQUNBOzs7Q0FHQyxHQUNNLFNBQVNHO0lBQ1osT0FBTyxPQUFPVixVQUFVLGNBQWNBLE1BQU1XLE1BQU0sS0FBS0MsUUFBUUMsT0FBTztBQUMxRSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWdlbmFpL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9jYWxsYmFja3MvcHJvbWlzZXMuanM/MzhkOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUFF1ZXVlTW9kIGZyb20gXCJwLXF1ZXVlXCI7XG5sZXQgcXVldWU7XG4vKipcbiAqIENyZWF0ZXMgYSBxdWV1ZSB1c2luZyB0aGUgcC1xdWV1ZSBsaWJyYXJ5LiBUaGUgcXVldWUgaXMgY29uZmlndXJlZCB0b1xuICogYXV0by1zdGFydCBhbmQgaGFzIGEgY29uY3VycmVuY3kgb2YgMSwgbWVhbmluZyBpdCB3aWxsIHByb2Nlc3MgdGFza3NcbiAqIG9uZSBhdCBhIHRpbWUuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVF1ZXVlKCkge1xuICAgIGNvbnN0IFBRdWV1ZSA9IFwiZGVmYXVsdFwiIGluIFBRdWV1ZU1vZCA/IFBRdWV1ZU1vZC5kZWZhdWx0IDogUFF1ZXVlTW9kO1xuICAgIHJldHVybiBuZXcgUFF1ZXVlKHtcbiAgICAgICAgYXV0b1N0YXJ0OiB0cnVlLFxuICAgICAgICBjb25jdXJyZW5jeTogMSxcbiAgICB9KTtcbn1cbi8qKlxuICogQ29uc3VtZSBhIHByb21pc2UsIGVpdGhlciBhZGRpbmcgaXQgdG8gdGhlIHF1ZXVlIG9yIHdhaXRpbmcgZm9yIGl0IHRvIHJlc29sdmVcbiAqIEBwYXJhbSBwcm9taXNlIFByb21pc2UgdG8gY29uc3VtZVxuICogQHBhcmFtIHdhaXQgV2hldGhlciB0byB3YWl0IGZvciB0aGUgcHJvbWlzZSB0byByZXNvbHZlIG9yIHJlc29sdmUgaW1tZWRpYXRlbHlcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbnN1bWVDYWxsYmFjayhwcm9taXNlRm4sIHdhaXQpIHtcbiAgICBpZiAod2FpdCA9PT0gdHJ1ZSkge1xuICAgICAgICBhd2FpdCBwcm9taXNlRm4oKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmICh0eXBlb2YgcXVldWUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHF1ZXVlID0gY3JlYXRlUXVldWUoKTtcbiAgICAgICAgfVxuICAgICAgICB2b2lkIHF1ZXVlLmFkZChwcm9taXNlRm4pO1xuICAgIH1cbn1cbi8qKlxuICogV2FpdHMgZm9yIGFsbCBwcm9taXNlcyBpbiB0aGUgcXVldWUgdG8gcmVzb2x2ZS4gSWYgdGhlIHF1ZXVlIGlzXG4gKiB1bmRlZmluZWQsIGl0IGltbWVkaWF0ZWx5IHJlc29sdmVzIGEgcHJvbWlzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGF3YWl0QWxsQ2FsbGJhY2tzKCkge1xuICAgIHJldHVybiB0eXBlb2YgcXVldWUgIT09IFwidW5kZWZpbmVkXCIgPyBxdWV1ZS5vbklkbGUoKSA6IFByb21pc2UucmVzb2x2ZSgpO1xufVxuIl0sIm5hbWVzIjpbIlBRdWV1ZU1vZCIsInF1ZXVlIiwiY3JlYXRlUXVldWUiLCJQUXVldWUiLCJkZWZhdWx0IiwiYXV0b1N0YXJ0IiwiY29uY3VycmVuY3kiLCJjb25zdW1lQ2FsbGJhY2siLCJwcm9taXNlRm4iLCJ3YWl0IiwiYWRkIiwiYXdhaXRBbGxDYWxsYmFja3MiLCJvbklkbGUiLCJQcm9taXNlIiwicmVzb2x2ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/callbacks/promises.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/embeddings.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/embeddings.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Embeddings: () => (/* binding */ Embeddings)\n/* harmony export */ });\n/* harmony import */ var _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/async_caller.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/async_caller.js\");\n\n/**\n * An abstract class that provides methods for embedding documents and\n * queries using LangChain.\n */ class Embeddings {\n    constructor(params){\n        /**\n         * The async caller should be used by subclasses to make any async calls,\n         * which will thus benefit from the concurrency and retry logic.\n         */ Object.defineProperty(this, \"caller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.caller = new _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_0__.AsyncCaller(params ?? {});\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L2VtYmVkZGluZ3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBc0Q7QUFDdEQ7OztDQUdDLEdBQ00sTUFBTUM7SUFDVEMsWUFBWUMsTUFBTSxDQUFFO1FBQ2hCOzs7U0FHQyxHQUNEQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVU7WUFDbENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ0MsTUFBTSxHQUFHLElBQUlWLCtEQUFXQSxDQUFDRyxVQUFVLENBQUM7SUFDN0M7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWdlbmFpL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9lbWJlZGRpbmdzLmpzPzY1N2EiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXN5bmNDYWxsZXIgfSBmcm9tIFwiLi91dGlscy9hc3luY19jYWxsZXIuanNcIjtcbi8qKlxuICogQW4gYWJzdHJhY3QgY2xhc3MgdGhhdCBwcm92aWRlcyBtZXRob2RzIGZvciBlbWJlZGRpbmcgZG9jdW1lbnRzIGFuZFxuICogcXVlcmllcyB1c2luZyBMYW5nQ2hhaW4uXG4gKi9cbmV4cG9ydCBjbGFzcyBFbWJlZGRpbmdzIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBhc3luYyBjYWxsZXIgc2hvdWxkIGJlIHVzZWQgYnkgc3ViY2xhc3NlcyB0byBtYWtlIGFueSBhc3luYyBjYWxscyxcbiAgICAgICAgICogd2hpY2ggd2lsbCB0aHVzIGJlbmVmaXQgZnJvbSB0aGUgY29uY3VycmVuY3kgYW5kIHJldHJ5IGxvZ2ljLlxuICAgICAgICAgKi9cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiY2FsbGVyXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2FsbGVyID0gbmV3IEFzeW5jQ2FsbGVyKHBhcmFtcyA/PyB7fSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkFzeW5jQ2FsbGVyIiwiRW1iZWRkaW5ncyIsImNvbnN0cnVjdG9yIiwicGFyYW1zIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsImNhbGxlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/embeddings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/language_models/base.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/language_models/base.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseLangChain: () => (/* binding */ BaseLangChain),\n/* harmony export */   BaseLanguageModel: () => (/* binding */ BaseLanguageModel),\n/* harmony export */   calculateMaxTokens: () => (/* binding */ calculateMaxTokens),\n/* harmony export */   getEmbeddingContextSize: () => (/* binding */ getEmbeddingContextSize),\n/* harmony export */   getModelContextSize: () => (/* binding */ getModelContextSize),\n/* harmony export */   getModelNameForTiktoken: () => (/* binding */ getModelNameForTiktoken)\n/* harmony export */ });\n/* harmony import */ var _caches_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../caches.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/caches.js\");\n/* harmony import */ var _prompt_values_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../prompt_values.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/prompt_values.js\");\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../messages/index.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/async_caller.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/async_caller.js\");\n/* harmony import */ var _utils_tiktoken_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/tiktoken.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/tiktoken.js\");\n/* harmony import */ var _runnables_base_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../runnables/base.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/runnables/base.js\");\n\n\n\n\n\n\n// https://www.npmjs.com/package/js-tiktoken\nconst getModelNameForTiktoken = (modelName)=>{\n    if (modelName.startsWith(\"gpt-3.5-turbo-16k\")) {\n        return \"gpt-3.5-turbo-16k\";\n    }\n    if (modelName.startsWith(\"gpt-3.5-turbo-\")) {\n        return \"gpt-3.5-turbo\";\n    }\n    if (modelName.startsWith(\"gpt-4-32k\")) {\n        return \"gpt-4-32k\";\n    }\n    if (modelName.startsWith(\"gpt-4-\")) {\n        return \"gpt-4\";\n    }\n    return modelName;\n};\nconst getEmbeddingContextSize = (modelName)=>{\n    switch(modelName){\n        case \"text-embedding-ada-002\":\n            return 8191;\n        default:\n            return 2046;\n    }\n};\nconst getModelContextSize = (modelName)=>{\n    switch(getModelNameForTiktoken(modelName)){\n        case \"gpt-3.5-turbo-16k\":\n            return 16384;\n        case \"gpt-3.5-turbo\":\n            return 4096;\n        case \"gpt-4-32k\":\n            return 32768;\n        case \"gpt-4\":\n            return 8192;\n        case \"text-davinci-003\":\n            return 4097;\n        case \"text-curie-001\":\n            return 2048;\n        case \"text-babbage-001\":\n            return 2048;\n        case \"text-ada-001\":\n            return 2048;\n        case \"code-davinci-002\":\n            return 8000;\n        case \"code-cushman-001\":\n            return 2048;\n        default:\n            return 4097;\n    }\n};\nconst calculateMaxTokens = async ({ prompt, modelName })=>{\n    let numTokens;\n    try {\n        numTokens = (await (0,_utils_tiktoken_js__WEBPACK_IMPORTED_MODULE_4__.encodingForModel)(getModelNameForTiktoken(modelName))).encode(prompt).length;\n    } catch (error) {\n        console.warn(\"Failed to calculate number of tokens, falling back to approximate count\");\n        // fallback to approximate calculation if tiktoken is not available\n        // each token is ~4 characters: https://help.openai.com/en/articles/4936856-what-are-tokens-and-how-to-count-them#\n        numTokens = Math.ceil(prompt.length / 4);\n    }\n    const maxTokens = getModelContextSize(modelName);\n    return maxTokens - numTokens;\n};\nconst getVerbosity = ()=>false;\n/**\n * Base class for language models, chains, tools.\n */ class BaseLangChain extends _runnables_base_js__WEBPACK_IMPORTED_MODULE_5__.Runnable {\n    get lc_attributes() {\n        return {\n            callbacks: undefined,\n            verbose: undefined\n        };\n    }\n    constructor(params){\n        super(params);\n        /**\n         * Whether to print out response text.\n         */ Object.defineProperty(this, \"verbose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"callbacks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.verbose = params.verbose ?? getVerbosity();\n        this.callbacks = params.callbacks;\n        this.tags = params.tags ?? [];\n        this.metadata = params.metadata ?? {};\n    }\n}\n/**\n * Base class for language models.\n */ class BaseLanguageModel extends BaseLangChain {\n    /**\n     * Keys that the language model accepts as call options.\n     */ get callKeys() {\n        return [\n            \"stop\",\n            \"timeout\",\n            \"signal\",\n            \"tags\",\n            \"metadata\",\n            \"callbacks\"\n        ];\n    }\n    constructor({ callbacks, callbackManager, ...params }){\n        super({\n            callbacks: callbacks ?? callbackManager,\n            ...params\n        });\n        /**\n         * The async caller should be used by subclasses to make any async calls,\n         * which will thus benefit from the concurrency and retry logic.\n         */ Object.defineProperty(this, \"caller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"cache\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_encoding\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (typeof params.cache === \"object\") {\n            this.cache = params.cache;\n        } else if (params.cache) {\n            this.cache = _caches_js__WEBPACK_IMPORTED_MODULE_0__.InMemoryCache.global();\n        } else {\n            this.cache = undefined;\n        }\n        this.caller = new _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_3__.AsyncCaller(params ?? {});\n    }\n    async getNumTokens(content) {\n        // TODO: Figure out correct value.\n        if (typeof content !== \"string\") {\n            return 0;\n        }\n        // fallback to approximate calculation if tiktoken is not available\n        let numTokens = Math.ceil(content.length / 4);\n        if (!this._encoding) {\n            try {\n                this._encoding = await (0,_utils_tiktoken_js__WEBPACK_IMPORTED_MODULE_4__.encodingForModel)(\"modelName\" in this ? getModelNameForTiktoken(this.modelName) : \"gpt2\");\n            } catch (error) {\n                console.warn(\"Failed to calculate number of tokens, falling back to approximate count\", error);\n            }\n        }\n        if (this._encoding) {\n            try {\n                numTokens = this._encoding.encode(content).length;\n            } catch (error) {\n                console.warn(\"Failed to calculate number of tokens, falling back to approximate count\", error);\n            }\n        }\n        return numTokens;\n    }\n    static _convertInputToPromptValue(input) {\n        if (typeof input === \"string\") {\n            return new _prompt_values_js__WEBPACK_IMPORTED_MODULE_1__.StringPromptValue(input);\n        } else if (Array.isArray(input)) {\n            return new _prompt_values_js__WEBPACK_IMPORTED_MODULE_1__.ChatPromptValue(input.map(_messages_index_js__WEBPACK_IMPORTED_MODULE_2__.coerceMessageLikeToMessage));\n        } else {\n            return input;\n        }\n    }\n    /**\n     * Get the identifying parameters of the LLM.\n     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _identifyingParams() {\n        return {};\n    }\n    /**\n     * Create a unique cache key for a specific call to a specific language model.\n     * @param callOptions Call options for the model\n     * @returns A unique cache key.\n     */ _getSerializedCacheKeyParametersForCall(// TODO: Fix when we remove the RunnableLambda backwards compatibility shim.\n    { config, ...callOptions }) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const params = {\n            ...this._identifyingParams(),\n            ...callOptions,\n            _type: this._llmType(),\n            _model: this._modelType()\n        };\n        const filteredEntries = Object.entries(params).filter(([_, value])=>value !== undefined);\n        const serializedEntries = filteredEntries.map(([key, value])=>`${key}:${JSON.stringify(value)}`).sort().join(\",\");\n        return serializedEntries;\n    }\n    /**\n     * @deprecated\n     * Return a json-like object representing this LLM.\n     */ serialize() {\n        return {\n            ...this._identifyingParams(),\n            _type: this._llmType(),\n            _model: this._modelType()\n        };\n    }\n    /**\n     * @deprecated\n     * Load an LLM from a json-like object describing it.\n     */ static async deserialize(_data) {\n        throw new Error(\"Use .toJSON() instead\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L2xhbmd1YWdlX21vZGVscy9iYXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUE2QztBQUM2QjtBQUNQO0FBQ1o7QUFDQztBQUNSO0FBQ2hELDRDQUE0QztBQUNyQyxNQUFNTywwQkFBMEIsQ0FBQ0M7SUFDcEMsSUFBSUEsVUFBVUMsVUFBVSxDQUFDLHNCQUFzQjtRQUMzQyxPQUFPO0lBQ1g7SUFDQSxJQUFJRCxVQUFVQyxVQUFVLENBQUMsbUJBQW1CO1FBQ3hDLE9BQU87SUFDWDtJQUNBLElBQUlELFVBQVVDLFVBQVUsQ0FBQyxjQUFjO1FBQ25DLE9BQU87SUFDWDtJQUNBLElBQUlELFVBQVVDLFVBQVUsQ0FBQyxXQUFXO1FBQ2hDLE9BQU87SUFDWDtJQUNBLE9BQU9EO0FBQ1gsRUFBRTtBQUNLLE1BQU1FLDBCQUEwQixDQUFDRjtJQUNwQyxPQUFRQTtRQUNKLEtBQUs7WUFDRCxPQUFPO1FBQ1g7WUFDSSxPQUFPO0lBQ2Y7QUFDSixFQUFFO0FBQ0ssTUFBTUcsc0JBQXNCLENBQUNIO0lBQ2hDLE9BQVFELHdCQUF3QkM7UUFDNUIsS0FBSztZQUNELE9BQU87UUFDWCxLQUFLO1lBQ0QsT0FBTztRQUNYLEtBQUs7WUFDRCxPQUFPO1FBQ1gsS0FBSztZQUNELE9BQU87UUFDWCxLQUFLO1lBQ0QsT0FBTztRQUNYLEtBQUs7WUFDRCxPQUFPO1FBQ1gsS0FBSztZQUNELE9BQU87UUFDWCxLQUFLO1lBQ0QsT0FBTztRQUNYLEtBQUs7WUFDRCxPQUFPO1FBQ1gsS0FBSztZQUNELE9BQU87UUFDWDtZQUNJLE9BQU87SUFDZjtBQUNKLEVBQUU7QUFDSyxNQUFNSSxxQkFBcUIsT0FBTyxFQUFFQyxNQUFNLEVBQUVMLFNBQVMsRUFBRztJQUMzRCxJQUFJTTtJQUNKLElBQUk7UUFDQUEsWUFBWSxDQUFDLE1BQU1ULG9FQUFnQkEsQ0FBQ0Usd0JBQXdCQyxXQUFVLEVBQUdPLE1BQU0sQ0FBQ0YsUUFBUUcsTUFBTTtJQUNsRyxFQUNBLE9BQU9DLE9BQU87UUFDVkMsUUFBUUMsSUFBSSxDQUFDO1FBQ2IsbUVBQW1FO1FBQ25FLGtIQUFrSDtRQUNsSEwsWUFBWU0sS0FBS0MsSUFBSSxDQUFDUixPQUFPRyxNQUFNLEdBQUc7SUFDMUM7SUFDQSxNQUFNTSxZQUFZWCxvQkFBb0JIO0lBQ3RDLE9BQU9jLFlBQVlSO0FBQ3ZCLEVBQUU7QUFDRixNQUFNUyxlQUFlLElBQU07QUFDM0I7O0NBRUMsR0FDTSxNQUFNQyxzQkFBc0JsQix3REFBUUE7SUFDdkMsSUFBSW1CLGdCQUFnQjtRQUNoQixPQUFPO1lBQ0hDLFdBQVdDO1lBQ1hDLFNBQVNEO1FBQ2I7SUFDSjtJQUNBRSxZQUFZQyxNQUFNLENBQUU7UUFDaEIsS0FBSyxDQUFDQTtRQUNOOztTQUVDLEdBQ0RDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsV0FBVztZQUNuQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsYUFBYTtZQUNyQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUTtZQUNoQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsWUFBWTtZQUNwQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsSUFBSSxDQUFDUixPQUFPLEdBQUdFLE9BQU9GLE9BQU8sSUFBSUw7UUFDakMsSUFBSSxDQUFDRyxTQUFTLEdBQUdJLE9BQU9KLFNBQVM7UUFDakMsSUFBSSxDQUFDVyxJQUFJLEdBQUdQLE9BQU9PLElBQUksSUFBSSxFQUFFO1FBQzdCLElBQUksQ0FBQ0MsUUFBUSxHQUFHUixPQUFPUSxRQUFRLElBQUksQ0FBQztJQUN4QztBQUNKO0FBQ0E7O0NBRUMsR0FDTSxNQUFNQywwQkFBMEJmO0lBQ25DOztLQUVDLEdBQ0QsSUFBSWdCLFdBQVc7UUFDWCxPQUFPO1lBQUM7WUFBUTtZQUFXO1lBQVU7WUFBUTtZQUFZO1NBQVk7SUFDekU7SUFDQVgsWUFBWSxFQUFFSCxTQUFTLEVBQUVlLGVBQWUsRUFBRSxHQUFHWCxRQUFRLENBQUU7UUFDbkQsS0FBSyxDQUFDO1lBQ0ZKLFdBQVdBLGFBQWFlO1lBQ3hCLEdBQUdYLE1BQU07UUFDYjtRQUNBOzs7U0FHQyxHQUNEQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVU7WUFDbENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFNBQVM7WUFDakNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGFBQWE7WUFDckNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksT0FBT04sT0FBT1ksS0FBSyxLQUFLLFVBQVU7WUFDbEMsSUFBSSxDQUFDQSxLQUFLLEdBQUdaLE9BQU9ZLEtBQUs7UUFDN0IsT0FDSyxJQUFJWixPQUFPWSxLQUFLLEVBQUU7WUFDbkIsSUFBSSxDQUFDQSxLQUFLLEdBQUcxQyxxREFBYUEsQ0FBQzJDLE1BQU07UUFDckMsT0FDSztZQUNELElBQUksQ0FBQ0QsS0FBSyxHQUFHZjtRQUNqQjtRQUNBLElBQUksQ0FBQ2lCLE1BQU0sR0FBRyxJQUFJeEMsK0RBQVdBLENBQUMwQixVQUFVLENBQUM7SUFDN0M7SUFDQSxNQUFNZSxhQUFhQyxPQUFPLEVBQUU7UUFDeEIsa0NBQWtDO1FBQ2xDLElBQUksT0FBT0EsWUFBWSxVQUFVO1lBQzdCLE9BQU87UUFDWDtRQUNBLG1FQUFtRTtRQUNuRSxJQUFJaEMsWUFBWU0sS0FBS0MsSUFBSSxDQUFDeUIsUUFBUTlCLE1BQU0sR0FBRztRQUMzQyxJQUFJLENBQUMsSUFBSSxDQUFDK0IsU0FBUyxFQUFFO1lBQ2pCLElBQUk7Z0JBQ0EsSUFBSSxDQUFDQSxTQUFTLEdBQUcsTUFBTTFDLG9FQUFnQkEsQ0FBQyxlQUFlLElBQUksR0FDckRFLHdCQUF3QixJQUFJLENBQUNDLFNBQVMsSUFDdEM7WUFDVixFQUNBLE9BQU9TLE9BQU87Z0JBQ1ZDLFFBQVFDLElBQUksQ0FBQywyRUFBMkVGO1lBQzVGO1FBQ0o7UUFDQSxJQUFJLElBQUksQ0FBQzhCLFNBQVMsRUFBRTtZQUNoQixJQUFJO2dCQUNBakMsWUFBWSxJQUFJLENBQUNpQyxTQUFTLENBQUNoQyxNQUFNLENBQUMrQixTQUFTOUIsTUFBTTtZQUNyRCxFQUNBLE9BQU9DLE9BQU87Z0JBQ1ZDLFFBQVFDLElBQUksQ0FBQywyRUFBMkVGO1lBQzVGO1FBQ0o7UUFDQSxPQUFPSDtJQUNYO0lBQ0EsT0FBT2tDLDJCQUEyQkMsS0FBSyxFQUFFO1FBQ3JDLElBQUksT0FBT0EsVUFBVSxVQUFVO1lBQzNCLE9BQU8sSUFBSWhELGdFQUFpQkEsQ0FBQ2dEO1FBQ2pDLE9BQ0ssSUFBSUMsTUFBTUMsT0FBTyxDQUFDRixRQUFRO1lBQzNCLE9BQU8sSUFBSS9DLDhEQUFlQSxDQUFDK0MsTUFBTUcsR0FBRyxDQUFDakQsMEVBQTBCQTtRQUNuRSxPQUNLO1lBQ0QsT0FBTzhDO1FBQ1g7SUFDSjtJQUNBOztLQUVDLEdBQ0QsOERBQThEO0lBQzlESSxxQkFBcUI7UUFDakIsT0FBTyxDQUFDO0lBQ1o7SUFDQTs7OztLQUlDLEdBQ0RDLHdDQUNBLDRFQUE0RTtJQUM1RSxFQUFFQyxNQUFNLEVBQUUsR0FBR0MsYUFBYSxFQUFFO1FBQ3hCLDhEQUE4RDtRQUM5RCxNQUFNMUIsU0FBUztZQUNYLEdBQUcsSUFBSSxDQUFDdUIsa0JBQWtCLEVBQUU7WUFDNUIsR0FBR0csV0FBVztZQUNkQyxPQUFPLElBQUksQ0FBQ0MsUUFBUTtZQUNwQkMsUUFBUSxJQUFJLENBQUNDLFVBQVU7UUFDM0I7UUFDQSxNQUFNQyxrQkFBa0I5QixPQUFPK0IsT0FBTyxDQUFDaEMsUUFBUWlDLE1BQU0sQ0FBQyxDQUFDLENBQUNDLEdBQUc1QixNQUFNLEdBQUtBLFVBQVVUO1FBQ2hGLE1BQU1zQyxvQkFBb0JKLGdCQUNyQlQsR0FBRyxDQUFDLENBQUMsQ0FBQ2MsS0FBSzlCLE1BQU0sR0FBSyxDQUFDLEVBQUU4QixJQUFJLENBQUMsRUFBRUMsS0FBS0MsU0FBUyxDQUFDaEMsT0FBTyxDQUFDLEVBQ3ZEaUMsSUFBSSxHQUNKQyxJQUFJLENBQUM7UUFDVixPQUFPTDtJQUNYO0lBQ0E7OztLQUdDLEdBQ0RNLFlBQVk7UUFDUixPQUFPO1lBQ0gsR0FBRyxJQUFJLENBQUNsQixrQkFBa0IsRUFBRTtZQUM1QkksT0FBTyxJQUFJLENBQUNDLFFBQVE7WUFDcEJDLFFBQVEsSUFBSSxDQUFDQyxVQUFVO1FBQzNCO0lBQ0o7SUFDQTs7O0tBR0MsR0FDRCxhQUFhWSxZQUFZQyxLQUFLLEVBQUU7UUFDNUIsTUFBTSxJQUFJQyxNQUFNO0lBQ3BCO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1nZW5haS9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbGFuZ3VhZ2VfbW9kZWxzL2Jhc2UuanM/ZTQxMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbk1lbW9yeUNhY2hlIH0gZnJvbSBcIi4uL2NhY2hlcy5qc1wiO1xuaW1wb3J0IHsgU3RyaW5nUHJvbXB0VmFsdWUsIENoYXRQcm9tcHRWYWx1ZSwgfSBmcm9tIFwiLi4vcHJvbXB0X3ZhbHVlcy5qc1wiO1xuaW1wb3J0IHsgY29lcmNlTWVzc2FnZUxpa2VUb01lc3NhZ2UsIH0gZnJvbSBcIi4uL21lc3NhZ2VzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBBc3luY0NhbGxlciB9IGZyb20gXCIuLi91dGlscy9hc3luY19jYWxsZXIuanNcIjtcbmltcG9ydCB7IGVuY29kaW5nRm9yTW9kZWwgfSBmcm9tIFwiLi4vdXRpbHMvdGlrdG9rZW4uanNcIjtcbmltcG9ydCB7IFJ1bm5hYmxlIH0gZnJvbSBcIi4uL3J1bm5hYmxlcy9iYXNlLmpzXCI7XG4vLyBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9qcy10aWt0b2tlblxuZXhwb3J0IGNvbnN0IGdldE1vZGVsTmFtZUZvclRpa3Rva2VuID0gKG1vZGVsTmFtZSkgPT4ge1xuICAgIGlmIChtb2RlbE5hbWUuc3RhcnRzV2l0aChcImdwdC0zLjUtdHVyYm8tMTZrXCIpKSB7XG4gICAgICAgIHJldHVybiBcImdwdC0zLjUtdHVyYm8tMTZrXCI7XG4gICAgfVxuICAgIGlmIChtb2RlbE5hbWUuc3RhcnRzV2l0aChcImdwdC0zLjUtdHVyYm8tXCIpKSB7XG4gICAgICAgIHJldHVybiBcImdwdC0zLjUtdHVyYm9cIjtcbiAgICB9XG4gICAgaWYgKG1vZGVsTmFtZS5zdGFydHNXaXRoKFwiZ3B0LTQtMzJrXCIpKSB7XG4gICAgICAgIHJldHVybiBcImdwdC00LTMya1wiO1xuICAgIH1cbiAgICBpZiAobW9kZWxOYW1lLnN0YXJ0c1dpdGgoXCJncHQtNC1cIikpIHtcbiAgICAgICAgcmV0dXJuIFwiZ3B0LTRcIjtcbiAgICB9XG4gICAgcmV0dXJuIG1vZGVsTmFtZTtcbn07XG5leHBvcnQgY29uc3QgZ2V0RW1iZWRkaW5nQ29udGV4dFNpemUgPSAobW9kZWxOYW1lKSA9PiB7XG4gICAgc3dpdGNoIChtb2RlbE5hbWUpIHtcbiAgICAgICAgY2FzZSBcInRleHQtZW1iZWRkaW5nLWFkYS0wMDJcIjpcbiAgICAgICAgICAgIHJldHVybiA4MTkxO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIDIwNDY7XG4gICAgfVxufTtcbmV4cG9ydCBjb25zdCBnZXRNb2RlbENvbnRleHRTaXplID0gKG1vZGVsTmFtZSkgPT4ge1xuICAgIHN3aXRjaCAoZ2V0TW9kZWxOYW1lRm9yVGlrdG9rZW4obW9kZWxOYW1lKSkge1xuICAgICAgICBjYXNlIFwiZ3B0LTMuNS10dXJiby0xNmtcIjpcbiAgICAgICAgICAgIHJldHVybiAxNjM4NDtcbiAgICAgICAgY2FzZSBcImdwdC0zLjUtdHVyYm9cIjpcbiAgICAgICAgICAgIHJldHVybiA0MDk2O1xuICAgICAgICBjYXNlIFwiZ3B0LTQtMzJrXCI6XG4gICAgICAgICAgICByZXR1cm4gMzI3Njg7XG4gICAgICAgIGNhc2UgXCJncHQtNFwiOlxuICAgICAgICAgICAgcmV0dXJuIDgxOTI7XG4gICAgICAgIGNhc2UgXCJ0ZXh0LWRhdmluY2ktMDAzXCI6XG4gICAgICAgICAgICByZXR1cm4gNDA5NztcbiAgICAgICAgY2FzZSBcInRleHQtY3VyaWUtMDAxXCI6XG4gICAgICAgICAgICByZXR1cm4gMjA0ODtcbiAgICAgICAgY2FzZSBcInRleHQtYmFiYmFnZS0wMDFcIjpcbiAgICAgICAgICAgIHJldHVybiAyMDQ4O1xuICAgICAgICBjYXNlIFwidGV4dC1hZGEtMDAxXCI6XG4gICAgICAgICAgICByZXR1cm4gMjA0ODtcbiAgICAgICAgY2FzZSBcImNvZGUtZGF2aW5jaS0wMDJcIjpcbiAgICAgICAgICAgIHJldHVybiA4MDAwO1xuICAgICAgICBjYXNlIFwiY29kZS1jdXNobWFuLTAwMVwiOlxuICAgICAgICAgICAgcmV0dXJuIDIwNDg7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gNDA5NztcbiAgICB9XG59O1xuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZU1heFRva2VucyA9IGFzeW5jICh7IHByb21wdCwgbW9kZWxOYW1lLCB9KSA9PiB7XG4gICAgbGV0IG51bVRva2VucztcbiAgICB0cnkge1xuICAgICAgICBudW1Ub2tlbnMgPSAoYXdhaXQgZW5jb2RpbmdGb3JNb2RlbChnZXRNb2RlbE5hbWVGb3JUaWt0b2tlbihtb2RlbE5hbWUpKSkuZW5jb2RlKHByb21wdCkubGVuZ3RoO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiRmFpbGVkIHRvIGNhbGN1bGF0ZSBudW1iZXIgb2YgdG9rZW5zLCBmYWxsaW5nIGJhY2sgdG8gYXBwcm94aW1hdGUgY291bnRcIik7XG4gICAgICAgIC8vIGZhbGxiYWNrIHRvIGFwcHJveGltYXRlIGNhbGN1bGF0aW9uIGlmIHRpa3Rva2VuIGlzIG5vdCBhdmFpbGFibGVcbiAgICAgICAgLy8gZWFjaCB0b2tlbiBpcyB+NCBjaGFyYWN0ZXJzOiBodHRwczovL2hlbHAub3BlbmFpLmNvbS9lbi9hcnRpY2xlcy80OTM2ODU2LXdoYXQtYXJlLXRva2Vucy1hbmQtaG93LXRvLWNvdW50LXRoZW0jXG4gICAgICAgIG51bVRva2VucyA9IE1hdGguY2VpbChwcm9tcHQubGVuZ3RoIC8gNCk7XG4gICAgfVxuICAgIGNvbnN0IG1heFRva2VucyA9IGdldE1vZGVsQ29udGV4dFNpemUobW9kZWxOYW1lKTtcbiAgICByZXR1cm4gbWF4VG9rZW5zIC0gbnVtVG9rZW5zO1xufTtcbmNvbnN0IGdldFZlcmJvc2l0eSA9ICgpID0+IGZhbHNlO1xuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBsYW5ndWFnZSBtb2RlbHMsIGNoYWlucywgdG9vbHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBCYXNlTGFuZ0NoYWluIGV4dGVuZHMgUnVubmFibGUge1xuICAgIGdldCBsY19hdHRyaWJ1dGVzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2FsbGJhY2tzOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB2ZXJib3NlOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHBhcmFtcykge1xuICAgICAgICBzdXBlcihwYXJhbXMpO1xuICAgICAgICAvKipcbiAgICAgICAgICogV2hldGhlciB0byBwcmludCBvdXQgcmVzcG9uc2UgdGV4dC5cbiAgICAgICAgICovXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInZlcmJvc2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiY2FsbGJhY2tzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInRhZ3NcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibWV0YWRhdGFcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy52ZXJib3NlID0gcGFyYW1zLnZlcmJvc2UgPz8gZ2V0VmVyYm9zaXR5KCk7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzID0gcGFyYW1zLmNhbGxiYWNrcztcbiAgICAgICAgdGhpcy50YWdzID0gcGFyYW1zLnRhZ3MgPz8gW107XG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSBwYXJhbXMubWV0YWRhdGEgPz8ge307XG4gICAgfVxufVxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBsYW5ndWFnZSBtb2RlbHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBCYXNlTGFuZ3VhZ2VNb2RlbCBleHRlbmRzIEJhc2VMYW5nQ2hhaW4ge1xuICAgIC8qKlxuICAgICAqIEtleXMgdGhhdCB0aGUgbGFuZ3VhZ2UgbW9kZWwgYWNjZXB0cyBhcyBjYWxsIG9wdGlvbnMuXG4gICAgICovXG4gICAgZ2V0IGNhbGxLZXlzKCkge1xuICAgICAgICByZXR1cm4gW1wic3RvcFwiLCBcInRpbWVvdXRcIiwgXCJzaWduYWxcIiwgXCJ0YWdzXCIsIFwibWV0YWRhdGFcIiwgXCJjYWxsYmFja3NcIl07XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHsgY2FsbGJhY2tzLCBjYWxsYmFja01hbmFnZXIsIC4uLnBhcmFtcyB9KSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIGNhbGxiYWNrczogY2FsbGJhY2tzID8/IGNhbGxiYWNrTWFuYWdlcixcbiAgICAgICAgICAgIC4uLnBhcmFtcyxcbiAgICAgICAgfSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgYXN5bmMgY2FsbGVyIHNob3VsZCBiZSB1c2VkIGJ5IHN1YmNsYXNzZXMgdG8gbWFrZSBhbnkgYXN5bmMgY2FsbHMsXG4gICAgICAgICAqIHdoaWNoIHdpbGwgdGh1cyBiZW5lZml0IGZyb20gdGhlIGNvbmN1cnJlbmN5IGFuZCByZXRyeSBsb2dpYy5cbiAgICAgICAgICovXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNhbGxlclwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjYWNoZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJfZW5jb2RpbmdcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMuY2FjaGUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGUgPSBwYXJhbXMuY2FjaGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFyYW1zLmNhY2hlKSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlID0gSW5NZW1vcnlDYWNoZS5nbG9iYWwoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jYWxsZXIgPSBuZXcgQXN5bmNDYWxsZXIocGFyYW1zID8/IHt9KTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0TnVtVG9rZW5zKGNvbnRlbnQpIHtcbiAgICAgICAgLy8gVE9ETzogRmlndXJlIG91dCBjb3JyZWN0IHZhbHVlLlxuICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIGZhbGxiYWNrIHRvIGFwcHJveGltYXRlIGNhbGN1bGF0aW9uIGlmIHRpa3Rva2VuIGlzIG5vdCBhdmFpbGFibGVcbiAgICAgICAgbGV0IG51bVRva2VucyA9IE1hdGguY2VpbChjb250ZW50Lmxlbmd0aCAvIDQpO1xuICAgICAgICBpZiAoIXRoaXMuX2VuY29kaW5nKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VuY29kaW5nID0gYXdhaXQgZW5jb2RpbmdGb3JNb2RlbChcIm1vZGVsTmFtZVwiIGluIHRoaXNcbiAgICAgICAgICAgICAgICAgICAgPyBnZXRNb2RlbE5hbWVGb3JUaWt0b2tlbih0aGlzLm1vZGVsTmFtZSlcbiAgICAgICAgICAgICAgICAgICAgOiBcImdwdDJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJGYWlsZWQgdG8gY2FsY3VsYXRlIG51bWJlciBvZiB0b2tlbnMsIGZhbGxpbmcgYmFjayB0byBhcHByb3hpbWF0ZSBjb3VudFwiLCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2VuY29kaW5nKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG51bVRva2VucyA9IHRoaXMuX2VuY29kaW5nLmVuY29kZShjb250ZW50KS5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJGYWlsZWQgdG8gY2FsY3VsYXRlIG51bWJlciBvZiB0b2tlbnMsIGZhbGxpbmcgYmFjayB0byBhcHByb3hpbWF0ZSBjb3VudFwiLCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bVRva2VucztcbiAgICB9XG4gICAgc3RhdGljIF9jb252ZXJ0SW5wdXRUb1Byb21wdFZhbHVlKGlucHV0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU3RyaW5nUHJvbXB0VmFsdWUoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IENoYXRQcm9tcHRWYWx1ZShpbnB1dC5tYXAoY29lcmNlTWVzc2FnZUxpa2VUb01lc3NhZ2UpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGlkZW50aWZ5aW5nIHBhcmFtZXRlcnMgb2YgdGhlIExMTS5cbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIF9pZGVudGlmeWluZ1BhcmFtcygpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSB1bmlxdWUgY2FjaGUga2V5IGZvciBhIHNwZWNpZmljIGNhbGwgdG8gYSBzcGVjaWZpYyBsYW5ndWFnZSBtb2RlbC5cbiAgICAgKiBAcGFyYW0gY2FsbE9wdGlvbnMgQ2FsbCBvcHRpb25zIGZvciB0aGUgbW9kZWxcbiAgICAgKiBAcmV0dXJucyBBIHVuaXF1ZSBjYWNoZSBrZXkuXG4gICAgICovXG4gICAgX2dldFNlcmlhbGl6ZWRDYWNoZUtleVBhcmFtZXRlcnNGb3JDYWxsKFxuICAgIC8vIFRPRE86IEZpeCB3aGVuIHdlIHJlbW92ZSB0aGUgUnVubmFibGVMYW1iZGEgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgc2hpbS5cbiAgICB7IGNvbmZpZywgLi4uY2FsbE9wdGlvbnMgfSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICAuLi50aGlzLl9pZGVudGlmeWluZ1BhcmFtcygpLFxuICAgICAgICAgICAgLi4uY2FsbE9wdGlvbnMsXG4gICAgICAgICAgICBfdHlwZTogdGhpcy5fbGxtVHlwZSgpLFxuICAgICAgICAgICAgX21vZGVsOiB0aGlzLl9tb2RlbFR5cGUoKSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZmlsdGVyZWRFbnRyaWVzID0gT2JqZWN0LmVudHJpZXMocGFyYW1zKS5maWx0ZXIoKFtfLCB2YWx1ZV0pID0+IHZhbHVlICE9PSB1bmRlZmluZWQpO1xuICAgICAgICBjb25zdCBzZXJpYWxpemVkRW50cmllcyA9IGZpbHRlcmVkRW50cmllc1xuICAgICAgICAgICAgLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBgJHtrZXl9OiR7SlNPTi5zdHJpbmdpZnkodmFsdWUpfWApXG4gICAgICAgICAgICAuc29ydCgpXG4gICAgICAgICAgICAuam9pbihcIixcIik7XG4gICAgICAgIHJldHVybiBzZXJpYWxpemVkRW50cmllcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKiBSZXR1cm4gYSBqc29uLWxpa2Ugb2JqZWN0IHJlcHJlc2VudGluZyB0aGlzIExMTS5cbiAgICAgKi9cbiAgICBzZXJpYWxpemUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi50aGlzLl9pZGVudGlmeWluZ1BhcmFtcygpLFxuICAgICAgICAgICAgX3R5cGU6IHRoaXMuX2xsbVR5cGUoKSxcbiAgICAgICAgICAgIF9tb2RlbDogdGhpcy5fbW9kZWxUeXBlKCksXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICogTG9hZCBhbiBMTE0gZnJvbSBhIGpzb24tbGlrZSBvYmplY3QgZGVzY3JpYmluZyBpdC5cbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgZGVzZXJpYWxpemUoX2RhdGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVXNlIC50b0pTT04oKSBpbnN0ZWFkXCIpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJJbk1lbW9yeUNhY2hlIiwiU3RyaW5nUHJvbXB0VmFsdWUiLCJDaGF0UHJvbXB0VmFsdWUiLCJjb2VyY2VNZXNzYWdlTGlrZVRvTWVzc2FnZSIsIkFzeW5jQ2FsbGVyIiwiZW5jb2RpbmdGb3JNb2RlbCIsIlJ1bm5hYmxlIiwiZ2V0TW9kZWxOYW1lRm9yVGlrdG9rZW4iLCJtb2RlbE5hbWUiLCJzdGFydHNXaXRoIiwiZ2V0RW1iZWRkaW5nQ29udGV4dFNpemUiLCJnZXRNb2RlbENvbnRleHRTaXplIiwiY2FsY3VsYXRlTWF4VG9rZW5zIiwicHJvbXB0IiwibnVtVG9rZW5zIiwiZW5jb2RlIiwibGVuZ3RoIiwiZXJyb3IiLCJjb25zb2xlIiwid2FybiIsIk1hdGgiLCJjZWlsIiwibWF4VG9rZW5zIiwiZ2V0VmVyYm9zaXR5IiwiQmFzZUxhbmdDaGFpbiIsImxjX2F0dHJpYnV0ZXMiLCJjYWxsYmFja3MiLCJ1bmRlZmluZWQiLCJ2ZXJib3NlIiwiY29uc3RydWN0b3IiLCJwYXJhbXMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwidGFncyIsIm1ldGFkYXRhIiwiQmFzZUxhbmd1YWdlTW9kZWwiLCJjYWxsS2V5cyIsImNhbGxiYWNrTWFuYWdlciIsImNhY2hlIiwiZ2xvYmFsIiwiY2FsbGVyIiwiZ2V0TnVtVG9rZW5zIiwiY29udGVudCIsIl9lbmNvZGluZyIsIl9jb252ZXJ0SW5wdXRUb1Byb21wdFZhbHVlIiwiaW5wdXQiLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJfaWRlbnRpZnlpbmdQYXJhbXMiLCJfZ2V0U2VyaWFsaXplZENhY2hlS2V5UGFyYW1ldGVyc0ZvckNhbGwiLCJjb25maWciLCJjYWxsT3B0aW9ucyIsIl90eXBlIiwiX2xsbVR5cGUiLCJfbW9kZWwiLCJfbW9kZWxUeXBlIiwiZmlsdGVyZWRFbnRyaWVzIiwiZW50cmllcyIsImZpbHRlciIsIl8iLCJzZXJpYWxpemVkRW50cmllcyIsImtleSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzb3J0Iiwiam9pbiIsInNlcmlhbGl6ZSIsImRlc2VyaWFsaXplIiwiX2RhdGEiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/language_models/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/language_models/chat_models.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/language_models/chat_models.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseChatModel: () => (/* binding */ BaseChatModel),\n/* harmony export */   SimpleChatModel: () => (/* binding */ SimpleChatModel),\n/* harmony export */   createChatMessageChunkEncoderStream: () => (/* binding */ createChatMessageChunkEncoderStream)\n/* harmony export */ });\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../messages/index.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _outputs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../outputs.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/outputs.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/language_models/base.js\");\n/* harmony import */ var _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../callbacks/manager.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/callbacks/manager.js\");\n\n\n\n\n/**\n * Creates a transform stream for encoding chat message chunks.\n * @deprecated Use {@link BytesOutputParser} instead\n * @returns A TransformStream instance that encodes chat message chunks.\n */ function createChatMessageChunkEncoderStream() {\n    const textEncoder = new TextEncoder();\n    return new TransformStream({\n        transform (chunk, controller) {\n            controller.enqueue(textEncoder.encode(typeof chunk.content === \"string\" ? chunk.content : JSON.stringify(chunk.content)));\n        }\n    });\n}\n/**\n * Base class for chat models. It extends the BaseLanguageModel class and\n * provides methods for generating chat based on input messages.\n */ class BaseChatModel extends _base_js__WEBPACK_IMPORTED_MODULE_2__.BaseLanguageModel {\n    constructor(fields){\n        super(fields);\n        // Only ever instantiated in main LangChain\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"chat_models\",\n                this._llmType()\n            ]\n        });\n    }\n    _separateRunnableConfigFromCallOptions(options) {\n        const [runnableConfig, callOptions] = super._separateRunnableConfigFromCallOptions(options);\n        if (callOptions?.timeout && !callOptions.signal) {\n            callOptions.signal = AbortSignal.timeout(callOptions.timeout);\n        }\n        return [\n            runnableConfig,\n            callOptions\n        ];\n    }\n    /**\n     * Invokes the chat model with a single input.\n     * @param input The input for the language model.\n     * @param options The call options.\n     * @returns A Promise that resolves to a BaseMessageChunk.\n     */ async invoke(input, options) {\n        const promptValue = BaseChatModel._convertInputToPromptValue(input);\n        const result = await this.generatePrompt([\n            promptValue\n        ], options, options?.callbacks);\n        const chatGeneration = result.generations[0][0];\n        // TODO: Remove cast after figuring out inheritance\n        return chatGeneration.message;\n    }\n    // eslint-disable-next-line require-yield\n    async *_streamResponseChunks(_messages, _options, _runManager) {\n        throw new Error(\"Not implemented.\");\n    }\n    async *_streamIterator(input, options) {\n        // Subclass check required to avoid double callbacks with default implementation\n        if (this._streamResponseChunks === BaseChatModel.prototype._streamResponseChunks) {\n            yield this.invoke(input, options);\n        } else {\n            const prompt = BaseChatModel._convertInputToPromptValue(input);\n            const messages = prompt.toChatMessages();\n            const [runnableConfig, callOptions] = this._separateRunnableConfigFromCallOptions(options);\n            const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_3__.CallbackManager.configure(runnableConfig.callbacks, this.callbacks, runnableConfig.tags, this.tags, runnableConfig.metadata, this.metadata, {\n                verbose: this.verbose\n            });\n            const extra = {\n                options: callOptions,\n                invocation_params: this?.invocationParams(callOptions),\n                batch_size: 1\n            };\n            const runManagers = await callbackManager_?.handleChatModelStart(this.toJSON(), [\n                messages\n            ], runnableConfig.runId, undefined, extra, undefined, undefined, runnableConfig.runName);\n            let generationChunk;\n            try {\n                for await (const chunk of this._streamResponseChunks(messages, callOptions, runManagers?.[0])){\n                    chunk.message.response_metadata = {\n                        ...chunk.generationInfo,\n                        ...chunk.message.response_metadata\n                    };\n                    yield chunk.message;\n                    if (!generationChunk) {\n                        generationChunk = chunk;\n                    } else {\n                        generationChunk = generationChunk.concat(chunk);\n                    }\n                }\n            } catch (err) {\n                await Promise.all((runManagers ?? []).map((runManager)=>runManager?.handleLLMError(err)));\n                throw err;\n            }\n            await Promise.all((runManagers ?? []).map((runManager)=>runManager?.handleLLMEnd({\n                    // TODO: Remove cast after figuring out inheritance\n                    generations: [\n                        [\n                            generationChunk\n                        ]\n                    ]\n                })));\n        }\n    }\n    /** @ignore */ async _generateUncached(messages, parsedOptions, handledOptions) {\n        const baseMessages = messages.map((messageList)=>messageList.map(_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.coerceMessageLikeToMessage));\n        // create callback manager and start run\n        const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_3__.CallbackManager.configure(handledOptions.callbacks, this.callbacks, handledOptions.tags, this.tags, handledOptions.metadata, this.metadata, {\n            verbose: this.verbose\n        });\n        const extra = {\n            options: parsedOptions,\n            invocation_params: this?.invocationParams(parsedOptions),\n            batch_size: 1\n        };\n        const runManagers = await callbackManager_?.handleChatModelStart(this.toJSON(), baseMessages, handledOptions.runId, undefined, extra, undefined, undefined, handledOptions.runName);\n        // generate results\n        const results = await Promise.allSettled(baseMessages.map((messageList, i)=>this._generate(messageList, {\n                ...parsedOptions,\n                promptIndex: i\n            }, runManagers?.[i])));\n        // handle results\n        const generations = [];\n        const llmOutputs = [];\n        await Promise.all(results.map(async (pResult, i)=>{\n            if (pResult.status === \"fulfilled\") {\n                const result = pResult.value;\n                for (const generation of result.generations){\n                    generation.message.response_metadata = {\n                        ...generation.generationInfo,\n                        ...generation.message.response_metadata\n                    };\n                }\n                if (result.generations.length === 1) {\n                    result.generations[0].message.response_metadata = {\n                        ...result.llmOutput,\n                        ...result.generations[0].message.response_metadata\n                    };\n                }\n                generations[i] = result.generations;\n                llmOutputs[i] = result.llmOutput;\n                return runManagers?.[i]?.handleLLMEnd({\n                    generations: [\n                        result.generations\n                    ],\n                    llmOutput: result.llmOutput\n                });\n            } else {\n                // status === \"rejected\"\n                await runManagers?.[i]?.handleLLMError(pResult.reason);\n                return Promise.reject(pResult.reason);\n            }\n        }));\n        // create combined output\n        const output = {\n            generations,\n            llmOutput: llmOutputs.length ? this._combineLLMOutput?.(...llmOutputs) : undefined\n        };\n        Object.defineProperty(output, _outputs_js__WEBPACK_IMPORTED_MODULE_1__.RUN_KEY, {\n            value: runManagers ? {\n                runIds: runManagers?.map((manager)=>manager.runId)\n            } : undefined,\n            configurable: true\n        });\n        return output;\n    }\n    async _generateCached({ messages, cache, llmStringKey, parsedOptions, handledOptions }) {\n        const baseMessages = messages.map((messageList)=>messageList.map(_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.coerceMessageLikeToMessage));\n        // create callback manager and start run\n        const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_3__.CallbackManager.configure(handledOptions.callbacks, this.callbacks, handledOptions.tags, this.tags, handledOptions.metadata, this.metadata, {\n            verbose: this.verbose\n        });\n        const extra = {\n            options: parsedOptions,\n            invocation_params: this?.invocationParams(parsedOptions),\n            batch_size: 1,\n            cached: true\n        };\n        const runManagers = await callbackManager_?.handleChatModelStart(this.toJSON(), baseMessages, handledOptions.runId, undefined, extra, undefined, undefined, handledOptions.runName);\n        // generate results\n        const missingPromptIndices = [];\n        const results = await Promise.allSettled(baseMessages.map(async (baseMessage, index)=>{\n            // Join all content into one string for the prompt index\n            const prompt = BaseChatModel._convertInputToPromptValue(baseMessage).toString();\n            const result = await cache.lookup(prompt, llmStringKey);\n            if (result == null) {\n                missingPromptIndices.push(index);\n            }\n            return result;\n        }));\n        // Map run managers to the results before filtering out null results\n        // Null results are just absent from the cache.\n        const cachedResults = results.map((result, index)=>({\n                result,\n                runManager: runManagers?.[index]\n            })).filter(({ result })=>result.status === \"fulfilled\" && result.value != null || result.status === \"rejected\");\n        // Handle results and call run managers\n        const generations = [];\n        await Promise.all(cachedResults.map(async ({ result: promiseResult, runManager }, i)=>{\n            if (promiseResult.status === \"fulfilled\") {\n                const result = promiseResult.value;\n                generations[i] = result;\n                if (result.length) {\n                    await runManager?.handleLLMNewToken(result[0].text);\n                }\n                return runManager?.handleLLMEnd({\n                    generations: [\n                        result\n                    ]\n                });\n            } else {\n                // status === \"rejected\"\n                await runManager?.handleLLMError(promiseResult.reason);\n                return Promise.reject(promiseResult.reason);\n            }\n        }));\n        const output = {\n            generations,\n            missingPromptIndices\n        };\n        // This defines RUN_KEY as a non-enumerable property on the output object\n        // so that it is not serialized when the output is stringified, and so that\n        // it isnt included when listing the keys of the output object.\n        Object.defineProperty(output, _outputs_js__WEBPACK_IMPORTED_MODULE_1__.RUN_KEY, {\n            value: runManagers ? {\n                runIds: runManagers?.map((manager)=>manager.runId)\n            } : undefined,\n            configurable: true\n        });\n        return output;\n    }\n    /**\n     * Generates chat based on the input messages.\n     * @param messages An array of arrays of BaseMessage instances.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to an LLMResult.\n     */ async generate(messages, options, callbacks) {\n        // parse call options\n        let parsedOptions;\n        if (Array.isArray(options)) {\n            parsedOptions = {\n                stop: options\n            };\n        } else {\n            parsedOptions = options;\n        }\n        const baseMessages = messages.map((messageList)=>messageList.map(_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.coerceMessageLikeToMessage));\n        const [runnableConfig, callOptions] = this._separateRunnableConfigFromCallOptions(parsedOptions);\n        runnableConfig.callbacks = runnableConfig.callbacks ?? callbacks;\n        if (!this.cache) {\n            return this._generateUncached(baseMessages, callOptions, runnableConfig);\n        }\n        const { cache } = this;\n        const llmStringKey = this._getSerializedCacheKeyParametersForCall(callOptions);\n        const { generations, missingPromptIndices } = await this._generateCached({\n            messages: baseMessages,\n            cache,\n            llmStringKey,\n            parsedOptions: callOptions,\n            handledOptions: runnableConfig\n        });\n        let llmOutput = {};\n        if (missingPromptIndices.length > 0) {\n            const results = await this._generateUncached(missingPromptIndices.map((i)=>baseMessages[i]), callOptions, runnableConfig);\n            await Promise.all(results.generations.map(async (generation, index)=>{\n                const promptIndex = missingPromptIndices[index];\n                generations[promptIndex] = generation;\n                // Join all content into one string for the prompt index\n                const prompt = BaseChatModel._convertInputToPromptValue(baseMessages[promptIndex]).toString();\n                return cache.update(prompt, llmStringKey, generation);\n            }));\n            llmOutput = results.llmOutput ?? {};\n        }\n        return {\n            generations,\n            llmOutput\n        };\n    }\n    /**\n     * Get the parameters used to invoke the model\n     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    invocationParams(_options) {\n        return {};\n    }\n    _modelType() {\n        return \"base_chat_model\";\n    }\n    /**\n     * @deprecated\n     * Return a json-like object representing this LLM.\n     */ serialize() {\n        return {\n            ...this.invocationParams(),\n            _type: this._llmType(),\n            _model: this._modelType()\n        };\n    }\n    /**\n     * Generates a prompt based on the input prompt values.\n     * @param promptValues An array of BasePromptValue instances.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to an LLMResult.\n     */ async generatePrompt(promptValues, options, callbacks) {\n        const promptMessages = promptValues.map((promptValue)=>promptValue.toChatMessages());\n        return this.generate(promptMessages, options, callbacks);\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * Makes a single call to the chat model.\n     * @param messages An array of BaseMessage instances.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to a BaseMessage.\n     */ async call(messages, options, callbacks) {\n        const result = await this.generate([\n            messages.map(_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.coerceMessageLikeToMessage)\n        ], options, callbacks);\n        const generations = result.generations;\n        return generations[0][0].message;\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * Makes a single call to the chat model with a prompt value.\n     * @param promptValue The value of the prompt.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to a BaseMessage.\n     */ async callPrompt(promptValue, options, callbacks) {\n        const promptMessages = promptValue.toChatMessages();\n        return this.call(promptMessages, options, callbacks);\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * Predicts the next message based on the input messages.\n     * @param messages An array of BaseMessage instances.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to a BaseMessage.\n     */ async predictMessages(messages, options, callbacks) {\n        return this.call(messages, options, callbacks);\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * Predicts the next message based on a text input.\n     * @param text The text input.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to a string.\n     */ async predict(text, options, callbacks) {\n        const message = new _messages_index_js__WEBPACK_IMPORTED_MODULE_0__.HumanMessage(text);\n        const result = await this.call([\n            message\n        ], options, callbacks);\n        if (typeof result.content !== \"string\") {\n            throw new Error(\"Cannot use predict when output is not a string.\");\n        }\n        return result.content;\n    }\n}\n/**\n * An abstract class that extends BaseChatModel and provides a simple\n * implementation of _generate.\n */ class SimpleChatModel extends BaseChatModel {\n    async _generate(messages, options, runManager) {\n        const text = await this._call(messages, options, runManager);\n        const message = new _messages_index_js__WEBPACK_IMPORTED_MODULE_0__.AIMessage(text);\n        if (typeof message.content !== \"string\") {\n            throw new Error(\"Cannot generate with a simple chat model when output is not a string.\");\n        }\n        return {\n            generations: [\n                {\n                    text: message.content,\n                    message\n                }\n            ]\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/language_models/chat_models.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/load/map_keys.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/load/map_keys.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keyFromJson: () => (/* binding */ keyFromJson),\n/* harmony export */   keyToJson: () => (/* binding */ keyToJson),\n/* harmony export */   mapKeys: () => (/* binding */ mapKeys)\n/* harmony export */ });\n/* harmony import */ var decamelize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! decamelize */ \"(rsc)/./node_modules/decamelize/index.js\");\n/* harmony import */ var camelcase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! camelcase */ \"(rsc)/./node_modules/camelcase/index.js\");\n\n\nfunction keyToJson(key, map) {\n    return map?.[key] || decamelize__WEBPACK_IMPORTED_MODULE_0__(key);\n}\nfunction keyFromJson(key, map) {\n    return map?.[key] || camelcase__WEBPACK_IMPORTED_MODULE_1__(key);\n}\nfunction mapKeys(fields, mapper, map) {\n    const mapped = {};\n    for(const key in fields){\n        if (Object.hasOwn(fields, key)) {\n            mapped[mapper(key, map)] = fields[key];\n        }\n    }\n    return mapped;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L2xvYWQvbWFwX2tleXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBbUM7QUFDRDtBQUMzQixTQUFTRSxVQUFVQyxHQUFHLEVBQUVDLEdBQUc7SUFDOUIsT0FBT0EsS0FBSyxDQUFDRCxJQUFJLElBQUlILHVDQUFTQSxDQUFDRztBQUNuQztBQUNPLFNBQVNFLFlBQVlGLEdBQUcsRUFBRUMsR0FBRztJQUNoQyxPQUFPQSxLQUFLLENBQUNELElBQUksSUFBSUYsc0NBQVNBLENBQUNFO0FBQ25DO0FBQ08sU0FBU0csUUFBUUMsTUFBTSxFQUFFQyxNQUFNLEVBQUVKLEdBQUc7SUFDdkMsTUFBTUssU0FBUyxDQUFDO0lBQ2hCLElBQUssTUFBTU4sT0FBT0ksT0FBUTtRQUN0QixJQUFJRyxPQUFPQyxNQUFNLENBQUNKLFFBQVFKLE1BQU07WUFDNUJNLE1BQU0sQ0FBQ0QsT0FBT0wsS0FBS0MsS0FBSyxHQUFHRyxNQUFNLENBQUNKLElBQUk7UUFDMUM7SUFDSjtJQUNBLE9BQU9NO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1nZW5haS9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbG9hZC9tYXBfa2V5cy5qcz8wOGUxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzbmFrZUNhc2UgZnJvbSBcImRlY2FtZWxpemVcIjtcbmltcG9ydCBjYW1lbENhc2UgZnJvbSBcImNhbWVsY2FzZVwiO1xuZXhwb3J0IGZ1bmN0aW9uIGtleVRvSnNvbihrZXksIG1hcCkge1xuICAgIHJldHVybiBtYXA/LltrZXldIHx8IHNuYWtlQ2FzZShrZXkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGtleUZyb21Kc29uKGtleSwgbWFwKSB7XG4gICAgcmV0dXJuIG1hcD8uW2tleV0gfHwgY2FtZWxDYXNlKGtleSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFwS2V5cyhmaWVsZHMsIG1hcHBlciwgbWFwKSB7XG4gICAgY29uc3QgbWFwcGVkID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gZmllbGRzKSB7XG4gICAgICAgIGlmIChPYmplY3QuaGFzT3duKGZpZWxkcywga2V5KSkge1xuICAgICAgICAgICAgbWFwcGVkW21hcHBlcihrZXksIG1hcCldID0gZmllbGRzW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1hcHBlZDtcbn1cbiJdLCJuYW1lcyI6WyJzbmFrZUNhc2UiLCJjYW1lbENhc2UiLCJrZXlUb0pzb24iLCJrZXkiLCJtYXAiLCJrZXlGcm9tSnNvbiIsIm1hcEtleXMiLCJmaWVsZHMiLCJtYXBwZXIiLCJtYXBwZWQiLCJPYmplY3QiLCJoYXNPd24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/load/map_keys.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/load/serializable.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/load/serializable.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Serializable: () => (/* binding */ Serializable),\n/* harmony export */   get_lc_unique_name: () => (/* binding */ get_lc_unique_name)\n/* harmony export */ });\n/* harmony import */ var _map_keys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map_keys.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/load/map_keys.js\");\n\nfunction shallowCopy(obj) {\n    return Array.isArray(obj) ? [\n        ...obj\n    ] : {\n        ...obj\n    };\n}\nfunction replaceSecrets(root, secretsMap) {\n    const result = shallowCopy(root);\n    for (const [path, secretId] of Object.entries(secretsMap)){\n        const [last, ...partsReverse] = path.split(\".\").reverse();\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let current = result;\n        for (const part of partsReverse.reverse()){\n            if (current[part] === undefined) {\n                break;\n            }\n            current[part] = shallowCopy(current[part]);\n            current = current[part];\n        }\n        if (current[last] !== undefined) {\n            current[last] = {\n                lc: 1,\n                type: \"secret\",\n                id: [\n                    secretId\n                ]\n            };\n        }\n    }\n    return result;\n}\n/**\n * Get a unique name for the module, rather than parent class implementations.\n * Should not be subclassed, subclass lc_name above instead.\n */ function get_lc_unique_name(// eslint-disable-next-line @typescript-eslint/no-use-before-define\nserializableClass) {\n    // \"super\" here would refer to the parent class of Serializable,\n    // when we want the parent class of the module actually calling this method.\n    const parentClass = Object.getPrototypeOf(serializableClass);\n    const lcNameIsSubclassed = typeof serializableClass.lc_name === \"function\" && (typeof parentClass.lc_name !== \"function\" || serializableClass.lc_name() !== parentClass.lc_name());\n    if (lcNameIsSubclassed) {\n        return serializableClass.lc_name();\n    } else {\n        return serializableClass.name;\n    }\n}\nclass Serializable {\n    /**\n     * The name of the serializable. Override to provide an alias or\n     * to preserve the serialized module name in minified environments.\n     *\n     * Implemented as a static method to support loading logic.\n     */ static lc_name() {\n        return this.name;\n    }\n    /**\n     * The final serialized identifier for the module.\n     */ get lc_id() {\n        return [\n            ...this.lc_namespace,\n            get_lc_unique_name(this.constructor)\n        ];\n    }\n    /**\n     * A map of secrets, which will be omitted from serialization.\n     * Keys are paths to the secret in constructor args, e.g. \"foo.bar.baz\".\n     * Values are the secret ids, which will be used when deserializing.\n     */ get lc_secrets() {\n        return undefined;\n    }\n    /**\n     * A map of additional attributes to merge with constructor args.\n     * Keys are the attribute names, e.g. \"foo\".\n     * Values are the attribute values, which will be serialized.\n     * These attributes need to be accepted by the constructor as arguments.\n     */ get lc_attributes() {\n        return undefined;\n    }\n    /**\n     * A map of aliases for constructor args.\n     * Keys are the attribute names, e.g. \"foo\".\n     * Values are the alias that will replace the key in serialization.\n     * This is used to eg. make argument names match Python.\n     */ get lc_aliases() {\n        return undefined;\n    }\n    constructor(kwargs, ..._args){\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.lc_kwargs = kwargs || {};\n    }\n    toJSON() {\n        if (!this.lc_serializable) {\n            return this.toJSONNotImplemented();\n        }\n        if (// eslint-disable-next-line no-instanceof/no-instanceof\n        this.lc_kwargs instanceof Serializable || typeof this.lc_kwargs !== \"object\" || Array.isArray(this.lc_kwargs)) {\n            // We do not support serialization of classes with arg not a POJO\n            // I'm aware the check above isn't as strict as it could be\n            return this.toJSONNotImplemented();\n        }\n        const aliases = {};\n        const secrets = {};\n        const kwargs = Object.keys(this.lc_kwargs).reduce((acc, key)=>{\n            acc[key] = key in this ? this[key] : this.lc_kwargs[key];\n            return acc;\n        }, {});\n        // get secrets, attributes and aliases from all superclasses\n        for(// eslint-disable-next-line @typescript-eslint/no-this-alias\n        let current = Object.getPrototypeOf(this); current; current = Object.getPrototypeOf(current)){\n            Object.assign(aliases, Reflect.get(current, \"lc_aliases\", this));\n            Object.assign(secrets, Reflect.get(current, \"lc_secrets\", this));\n            Object.assign(kwargs, Reflect.get(current, \"lc_attributes\", this));\n        }\n        // include all secrets used, even if not in kwargs,\n        // will be replaced with sentinel value in replaceSecrets\n        Object.keys(secrets).forEach((keyPath)=>{\n            // eslint-disable-next-line @typescript-eslint/no-this-alias, @typescript-eslint/no-explicit-any\n            let read = this;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            let write = kwargs;\n            const [last, ...partsReverse] = keyPath.split(\".\").reverse();\n            for (const key of partsReverse.reverse()){\n                if (!(key in read) || read[key] === undefined) return;\n                if (!(key in write) || write[key] === undefined) {\n                    if (typeof read[key] === \"object\" && read[key] != null) {\n                        write[key] = {};\n                    } else if (Array.isArray(read[key])) {\n                        write[key] = [];\n                    }\n                }\n                read = read[key];\n                write = write[key];\n            }\n            if (last in read && read[last] !== undefined) {\n                write[last] = write[last] || read[last];\n            }\n        });\n        return {\n            lc: 1,\n            type: \"constructor\",\n            id: this.lc_id,\n            kwargs: (0,_map_keys_js__WEBPACK_IMPORTED_MODULE_0__.mapKeys)(Object.keys(secrets).length ? replaceSecrets(kwargs, secrets) : kwargs, _map_keys_js__WEBPACK_IMPORTED_MODULE_0__.keyToJson, aliases)\n        };\n    }\n    toJSONNotImplemented() {\n        return {\n            lc: 1,\n            type: \"not_implemented\",\n            id: this.lc_id\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/load/serializable.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/ai.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/ai.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIMessage: () => (/* binding */ AIMessage),\n/* harmony export */   AIMessageChunk: () => (/* binding */ AIMessageChunk),\n/* harmony export */   isAIMessage: () => (/* binding */ isAIMessage)\n/* harmony export */ });\n/* harmony import */ var _utils_json_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/json.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/json.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/base.js\");\n/* harmony import */ var _tool_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tool.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/tool.js\");\n\n\n\n/**\n * Represents an AI message in a conversation.\n */ class AIMessage extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseMessage {\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            ...super.lc_aliases,\n            tool_calls: \"tool_calls\",\n            invalid_tool_calls: \"invalid_tool_calls\"\n        };\n    }\n    constructor(fields, /** @deprecated */ kwargs){\n        let initParams;\n        if (typeof fields === \"string\") {\n            initParams = {\n                content: fields,\n                tool_calls: [],\n                invalid_tool_calls: [],\n                additional_kwargs: kwargs ?? {}\n            };\n        } else {\n            initParams = fields;\n            const rawToolCalls = initParams.additional_kwargs?.tool_calls;\n            const toolCalls = initParams.tool_calls;\n            if (!(rawToolCalls == null) && rawToolCalls.length > 0 && (toolCalls === undefined || toolCalls.length === 0)) {\n                console.warn([\n                    \"New LangChain packages are available that more efficiently handle\",\n                    \"tool calling.\\n\\nPlease upgrade your packages to versions that set\",\n                    \"message tool calls. e.g., `yarn add @langchain/anthropic`,\",\n                    \"yarn add @langchain/openai`, etc.\"\n                ].join(\" \"));\n            }\n            try {\n                if (!(rawToolCalls == null) && toolCalls === undefined) {\n                    const [toolCalls, invalidToolCalls] = (0,_tool_js__WEBPACK_IMPORTED_MODULE_2__.defaultToolCallParser)(rawToolCalls);\n                    initParams.tool_calls = toolCalls ?? [];\n                    initParams.invalid_tool_calls = invalidToolCalls ?? [];\n                } else {\n                    initParams.tool_calls = initParams.tool_calls ?? [];\n                    initParams.invalid_tool_calls = initParams.invalid_tool_calls ?? [];\n                }\n            } catch (e) {\n                // Do nothing if parsing fails\n                initParams.tool_calls = [];\n                initParams.invalid_tool_calls = [];\n            }\n        }\n        // Sadly, TypeScript only allows super() calls at root if the class has\n        // properties with initializers, so we have to check types twice.\n        super(initParams);\n        // These are typed as optional to avoid breaking changes and allow for casting\n        // from BaseMessage.\n        Object.defineProperty(this, \"tool_calls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"invalid_tool_calls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        if (typeof initParams !== \"string\") {\n            this.tool_calls = initParams.tool_calls ?? this.tool_calls;\n            this.invalid_tool_calls = initParams.invalid_tool_calls ?? this.invalid_tool_calls;\n        }\n    }\n    static lc_name() {\n        return \"AIMessage\";\n    }\n    _getType() {\n        return \"ai\";\n    }\n}\nfunction isAIMessage(x) {\n    return x._getType() === \"ai\";\n}\n/**\n * Represents a chunk of an AI message, which can be concatenated with\n * other AI message chunks.\n */ class AIMessageChunk extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseMessageChunk {\n    constructor(fields){\n        let initParams;\n        if (typeof fields === \"string\") {\n            initParams = {\n                content: fields,\n                tool_calls: [],\n                invalid_tool_calls: [],\n                tool_call_chunks: []\n            };\n        } else if (fields.tool_call_chunks === undefined) {\n            initParams = {\n                ...fields,\n                tool_calls: [],\n                invalid_tool_calls: [],\n                tool_call_chunks: []\n            };\n        } else {\n            const toolCalls = [];\n            const invalidToolCalls = [];\n            for (const toolCallChunk of fields.tool_call_chunks){\n                let parsedArgs = {};\n                try {\n                    parsedArgs = (0,_utils_json_js__WEBPACK_IMPORTED_MODULE_0__.parsePartialJson)(toolCallChunk.args ?? \"{}\") ?? {};\n                    if (typeof parsedArgs !== \"object\" || Array.isArray(parsedArgs)) {\n                        throw new Error(\"Malformed tool call chunk args.\");\n                    }\n                    toolCalls.push({\n                        name: toolCallChunk.name ?? \"\",\n                        args: parsedArgs,\n                        id: toolCallChunk.id\n                    });\n                } catch (e) {\n                    invalidToolCalls.push({\n                        name: toolCallChunk.name,\n                        args: toolCallChunk.args,\n                        id: toolCallChunk.id,\n                        error: \"Malformed args.\"\n                    });\n                }\n            }\n            initParams = {\n                ...fields,\n                tool_calls: toolCalls,\n                invalid_tool_calls: invalidToolCalls\n            };\n        }\n        // Sadly, TypeScript only allows super() calls at root if the class has\n        // properties with initializers, so we have to check types twice.\n        super(initParams);\n        // Must redeclare tool call fields since there is no multiple inheritance in JS.\n        // These are typed as optional to avoid breaking changes and allow for casting\n        // from BaseMessage.\n        Object.defineProperty(this, \"tool_calls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"invalid_tool_calls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"tool_call_chunks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        this.tool_call_chunks = initParams?.tool_call_chunks ?? this.tool_call_chunks;\n        this.tool_calls = initParams?.tool_calls ?? this.tool_calls;\n        this.invalid_tool_calls = initParams?.invalid_tool_calls ?? this.invalid_tool_calls;\n    }\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            ...super.lc_aliases,\n            tool_calls: \"tool_calls\",\n            invalid_tool_calls: \"invalid_tool_calls\",\n            tool_call_chunks: \"tool_call_chunks\"\n        };\n    }\n    static lc_name() {\n        return \"AIMessageChunk\";\n    }\n    _getType() {\n        return \"ai\";\n    }\n    concat(chunk) {\n        const combinedFields = {\n            content: (0,_base_js__WEBPACK_IMPORTED_MODULE_1__.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0,_base_js__WEBPACK_IMPORTED_MODULE_1__._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0,_base_js__WEBPACK_IMPORTED_MODULE_1__._mergeDicts)(this.response_metadata, chunk.response_metadata),\n            tool_call_chunks: []\n        };\n        if (this.tool_call_chunks !== undefined || chunk.tool_call_chunks !== undefined) {\n            const rawToolCalls = (0,_base_js__WEBPACK_IMPORTED_MODULE_1__._mergeLists)(this.tool_call_chunks, chunk.tool_call_chunks);\n            if (rawToolCalls !== undefined && rawToolCalls.length > 0) {\n                combinedFields.tool_call_chunks = rawToolCalls;\n            }\n        }\n        return new AIMessageChunk(combinedFields);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/ai.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/base.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/base.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseMessage: () => (/* binding */ BaseMessage),\n/* harmony export */   BaseMessageChunk: () => (/* binding */ BaseMessageChunk),\n/* harmony export */   _mergeDicts: () => (/* binding */ _mergeDicts),\n/* harmony export */   _mergeLists: () => (/* binding */ _mergeLists),\n/* harmony export */   isBaseMessage: () => (/* binding */ isBaseMessage),\n/* harmony export */   isBaseMessageChunk: () => (/* binding */ isBaseMessageChunk),\n/* harmony export */   isOpenAIToolCallArray: () => (/* binding */ isOpenAIToolCallArray),\n/* harmony export */   mergeContent: () => (/* binding */ mergeContent)\n/* harmony export */ });\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../load/serializable.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/load/serializable.js\");\n\nfunction mergeContent(firstContent, secondContent) {\n    // If first content is a string\n    if (typeof firstContent === \"string\") {\n        if (typeof secondContent === \"string\") {\n            return firstContent + secondContent;\n        } else {\n            return [\n                {\n                    type: \"text\",\n                    text: firstContent\n                },\n                ...secondContent\n            ];\n        }\n    // If both are arrays\n    } else if (Array.isArray(secondContent)) {\n        return [\n            ...firstContent,\n            ...secondContent\n        ];\n    // If the first content is a list and second is a string\n    } else {\n        // Otherwise, add the second content as a new element of the list\n        return [\n            ...firstContent,\n            {\n                type: \"text\",\n                text: secondContent\n            }\n        ];\n    }\n}\n/**\n * Base class for all types of messages in a conversation. It includes\n * properties like `content`, `name`, and `additional_kwargs`. It also\n * includes methods like `toDict()` and `_getType()`.\n */ class BaseMessage extends _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable {\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            additional_kwargs: \"additional_kwargs\",\n            response_metadata: \"response_metadata\"\n        };\n    }\n    /**\n     * @deprecated\n     * Use {@link BaseMessage.content} instead.\n     */ get text() {\n        return typeof this.content === \"string\" ? this.content : \"\";\n    }\n    constructor(fields, /** @deprecated */ kwargs){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                content: fields,\n                additional_kwargs: kwargs,\n                response_metadata: {}\n            };\n        }\n        // Make sure the default value for additional_kwargs is passed into super() for serialization\n        if (!fields.additional_kwargs) {\n            // eslint-disable-next-line no-param-reassign\n            fields.additional_kwargs = {};\n        }\n        if (!fields.response_metadata) {\n            // eslint-disable-next-line no-param-reassign\n            fields.response_metadata = {};\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"messages\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        /** The content of the message. */ Object.defineProperty(this, \"content\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** The name of the message sender in a multi-user chat. */ Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Additional keyword arguments */ Object.defineProperty(this, \"additional_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Response metadata. For example: response headers, logprobs, token counts. */ Object.defineProperty(this, \"response_metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = fields.name;\n        this.content = fields.content;\n        this.additional_kwargs = fields.additional_kwargs;\n        this.response_metadata = fields.response_metadata;\n    }\n    toDict() {\n        return {\n            type: this._getType(),\n            data: this.toJSON().kwargs\n        };\n    }\n}\nfunction isOpenAIToolCallArray(value) {\n    return Array.isArray(value) && value.every((v)=>typeof v.index === \"number\");\n}\nfunction _mergeDicts(// eslint-disable-next-line @typescript-eslint/no-explicit-any\nleft, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nright) {\n    const merged = {\n        ...left\n    };\n    for (const [key, value] of Object.entries(right)){\n        if (merged[key] == null) {\n            merged[key] = value;\n        } else if (value == null) {\n            continue;\n        } else if (typeof merged[key] !== typeof value || Array.isArray(merged[key]) !== Array.isArray(value)) {\n            throw new Error(`field[${key}] already exists in the message chunk, but with a different type.`);\n        } else if (typeof merged[key] === \"string\") {\n            merged[key] = merged[key] + value;\n        } else if (!Array.isArray(merged[key]) && typeof merged[key] === \"object\") {\n            merged[key] = _mergeDicts(merged[key], value);\n        } else if (Array.isArray(merged[key])) {\n            merged[key] = _mergeLists(merged[key], value);\n        } else if (merged[key] === value) {\n            continue;\n        } else {\n            console.warn(`field[${key}] already exists in this message chunk and value has unsupported type.`);\n        }\n    }\n    return merged;\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _mergeLists(left, right) {\n    if (left === undefined && right === undefined) {\n        return undefined;\n    } else if (left === undefined || right === undefined) {\n        return left || right;\n    } else {\n        const merged = [\n            ...left\n        ];\n        for (const item of right){\n            if (typeof item === \"object\" && \"index\" in item && typeof item.index === \"number\") {\n                const toMerge = merged.findIndex((leftItem)=>leftItem.index === item.index);\n                if (toMerge !== -1) {\n                    merged[toMerge] = _mergeDicts(merged[toMerge], item);\n                } else {\n                    merged.push(item);\n                }\n            } else {\n                merged.push(item);\n            }\n        }\n        return merged;\n    }\n}\n/**\n * Represents a chunk of a message, which can be concatenated with other\n * message chunks. It includes a method `_merge_kwargs_dict()` for merging\n * additional keyword arguments from another `BaseMessageChunk` into this\n * one. It also overrides the `__add__()` method to support concatenation\n * of `BaseMessageChunk` instances.\n */ class BaseMessageChunk extends BaseMessage {\n}\nfunction isBaseMessage(messageLike) {\n    return typeof messageLike?._getType === \"function\";\n}\nfunction isBaseMessageChunk(messageLike) {\n    return isBaseMessage(messageLike) && typeof messageLike.concat === \"function\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/chat.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/chat.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatMessage: () => (/* binding */ ChatMessage),\n/* harmony export */   ChatMessageChunk: () => (/* binding */ ChatMessageChunk)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/base.js\");\n\n/**\n * Represents a chat message in a conversation.\n */ class ChatMessage extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage {\n    static lc_name() {\n        return \"ChatMessage\";\n    }\n    static _chatMessageClass() {\n        return ChatMessage;\n    }\n    constructor(fields, role){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = {\n                content: fields,\n                role: role\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"role\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.role = fields.role;\n    }\n    _getType() {\n        return \"generic\";\n    }\n    static isInstance(message) {\n        return message._getType() === \"generic\";\n    }\n}\n/**\n * Represents a chunk of a chat message, which can be concatenated with\n * other chat message chunks.\n */ class ChatMessageChunk extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageChunk {\n    static lc_name() {\n        return \"ChatMessageChunk\";\n    }\n    constructor(fields, role){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = {\n                content: fields,\n                role: role\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"role\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.role = fields.role;\n    }\n    _getType() {\n        return \"generic\";\n    }\n    concat(chunk) {\n        return new ChatMessageChunk({\n            content: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.response_metadata, chunk.response_metadata),\n            role: this.role\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L21lc3NhZ2VzL2NoYXQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXNGO0FBQ3RGOztDQUVDLEdBQ00sTUFBTUksb0JBQW9CSixpREFBV0E7SUFDeEMsT0FBT0ssVUFBVTtRQUNiLE9BQU87SUFDWDtJQUNBLE9BQU9DLG9CQUFvQjtRQUN2QixPQUFPRjtJQUNYO0lBQ0FHLFlBQVlDLE1BQU0sRUFBRUMsSUFBSSxDQUFFO1FBQ3RCLElBQUksT0FBT0QsV0FBVyxVQUFVO1lBQzVCLHVGQUF1RjtZQUN2RkEsU0FBUztnQkFBRUUsU0FBU0Y7Z0JBQVFDLE1BQU1BO1lBQUs7UUFDM0M7UUFDQSxLQUFLLENBQUNEO1FBQ05HLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUTtZQUNoQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsSUFBSSxDQUFDUCxJQUFJLEdBQUdELE9BQU9DLElBQUk7SUFDM0I7SUFDQVEsV0FBVztRQUNQLE9BQU87SUFDWDtJQUNBLE9BQU9DLFdBQVdDLE9BQU8sRUFBRTtRQUN2QixPQUFPQSxRQUFRRixRQUFRLE9BQU87SUFDbEM7QUFDSjtBQUNBOzs7Q0FHQyxHQUNNLE1BQU1HLHlCQUF5Qm5CLHNEQUFnQkE7SUFDbEQsT0FBT0ksVUFBVTtRQUNiLE9BQU87SUFDWDtJQUNBRSxZQUFZQyxNQUFNLEVBQUVDLElBQUksQ0FBRTtRQUN0QixJQUFJLE9BQU9ELFdBQVcsVUFBVTtZQUM1Qix1RkFBdUY7WUFDdkZBLFNBQVM7Z0JBQUVFLFNBQVNGO2dCQUFRQyxNQUFNQTtZQUFLO1FBQzNDO1FBQ0EsS0FBSyxDQUFDRDtRQUNORyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVE7WUFDaENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ1AsSUFBSSxHQUFHRCxPQUFPQyxJQUFJO0lBQzNCO0lBQ0FRLFdBQVc7UUFDUCxPQUFPO0lBQ1g7SUFDQUksT0FBT0MsS0FBSyxFQUFFO1FBQ1YsT0FBTyxJQUFJRixpQkFBaUI7WUFDeEJWLFNBQVNSLHNEQUFZQSxDQUFDLElBQUksQ0FBQ1EsT0FBTyxFQUFFWSxNQUFNWixPQUFPO1lBQ2pEYSxtQkFBbUJwQixxREFBV0EsQ0FBQyxJQUFJLENBQUNvQixpQkFBaUIsRUFBRUQsTUFBTUMsaUJBQWlCO1lBQzlFQyxtQkFBbUJyQixxREFBV0EsQ0FBQyxJQUFJLENBQUNxQixpQkFBaUIsRUFBRUYsTUFBTUUsaUJBQWlCO1lBQzlFZixNQUFNLElBQUksQ0FBQ0EsSUFBSTtRQUNuQjtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1nZW5haS9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvY2hhdC5qcz80NWI0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VNZXNzYWdlLCBCYXNlTWVzc2FnZUNodW5rLCBtZXJnZUNvbnRlbnQsIF9tZXJnZURpY3RzLCB9IGZyb20gXCIuL2Jhc2UuanNcIjtcbi8qKlxuICogUmVwcmVzZW50cyBhIGNoYXQgbWVzc2FnZSBpbiBhIGNvbnZlcnNhdGlvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIENoYXRNZXNzYWdlIGV4dGVuZHMgQmFzZU1lc3NhZ2Uge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJDaGF0TWVzc2FnZVwiO1xuICAgIH1cbiAgICBzdGF0aWMgX2NoYXRNZXNzYWdlQ2xhc3MoKSB7XG4gICAgICAgIHJldHVybiBDaGF0TWVzc2FnZTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGRzLCByb2xlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZmllbGRzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ24sIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgICAgIGZpZWxkcyA9IHsgY29udGVudDogZmllbGRzLCByb2xlOiByb2xlIH07XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicm9sZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJvbGUgPSBmaWVsZHMucm9sZTtcbiAgICB9XG4gICAgX2dldFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcImdlbmVyaWNcIjtcbiAgICB9XG4gICAgc3RhdGljIGlzSW5zdGFuY2UobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gbWVzc2FnZS5fZ2V0VHlwZSgpID09PSBcImdlbmVyaWNcIjtcbiAgICB9XG59XG4vKipcbiAqIFJlcHJlc2VudHMgYSBjaHVuayBvZiBhIGNoYXQgbWVzc2FnZSwgd2hpY2ggY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoXG4gKiBvdGhlciBjaGF0IG1lc3NhZ2UgY2h1bmtzLlxuICovXG5leHBvcnQgY2xhc3MgQ2hhdE1lc3NhZ2VDaHVuayBleHRlbmRzIEJhc2VNZXNzYWdlQ2h1bmsge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJDaGF0TWVzc2FnZUNodW5rXCI7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZpZWxkcywgcm9sZSkge1xuICAgICAgICBpZiAodHlwZW9mIGZpZWxkcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICBmaWVsZHMgPSB7IGNvbnRlbnQ6IGZpZWxkcywgcm9sZTogcm9sZSB9O1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKGZpZWxkcyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJvbGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yb2xlID0gZmllbGRzLnJvbGU7XG4gICAgfVxuICAgIF9nZXRUeXBlKCkge1xuICAgICAgICByZXR1cm4gXCJnZW5lcmljXCI7XG4gICAgfVxuICAgIGNvbmNhdChjaHVuaykge1xuICAgICAgICByZXR1cm4gbmV3IENoYXRNZXNzYWdlQ2h1bmsoe1xuICAgICAgICAgICAgY29udGVudDogbWVyZ2VDb250ZW50KHRoaXMuY29udGVudCwgY2h1bmsuY29udGVudCksXG4gICAgICAgICAgICBhZGRpdGlvbmFsX2t3YXJnczogX21lcmdlRGljdHModGhpcy5hZGRpdGlvbmFsX2t3YXJncywgY2h1bmsuYWRkaXRpb25hbF9rd2FyZ3MpLFxuICAgICAgICAgICAgcmVzcG9uc2VfbWV0YWRhdGE6IF9tZXJnZURpY3RzKHRoaXMucmVzcG9uc2VfbWV0YWRhdGEsIGNodW5rLnJlc3BvbnNlX21ldGFkYXRhKSxcbiAgICAgICAgICAgIHJvbGU6IHRoaXMucm9sZSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkJhc2VNZXNzYWdlIiwiQmFzZU1lc3NhZ2VDaHVuayIsIm1lcmdlQ29udGVudCIsIl9tZXJnZURpY3RzIiwiQ2hhdE1lc3NhZ2UiLCJsY19uYW1lIiwiX2NoYXRNZXNzYWdlQ2xhc3MiLCJjb25zdHJ1Y3RvciIsImZpZWxkcyIsInJvbGUiLCJjb250ZW50IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsIl9nZXRUeXBlIiwiaXNJbnN0YW5jZSIsIm1lc3NhZ2UiLCJDaGF0TWVzc2FnZUNodW5rIiwiY29uY2F0IiwiY2h1bmsiLCJhZGRpdGlvbmFsX2t3YXJncyIsInJlc3BvbnNlX21ldGFkYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/chat.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/function.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/function.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FunctionMessage: () => (/* binding */ FunctionMessage),\n/* harmony export */   FunctionMessageChunk: () => (/* binding */ FunctionMessageChunk)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/base.js\");\n\n/**\n * Represents a function message in a conversation.\n */ class FunctionMessage extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage {\n    static lc_name() {\n        return \"FunctionMessage\";\n    }\n    constructor(fields, /** @deprecated */ name){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = {\n                content: fields,\n                name: name\n            };\n        }\n        super(fields);\n    }\n    _getType() {\n        return \"function\";\n    }\n}\n/**\n * Represents a chunk of a function message, which can be concatenated\n * with other function message chunks.\n */ class FunctionMessageChunk extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageChunk {\n    static lc_name() {\n        return \"FunctionMessageChunk\";\n    }\n    _getType() {\n        return \"function\";\n    }\n    concat(chunk) {\n        return new FunctionMessageChunk({\n            content: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.response_metadata, chunk.response_metadata),\n            name: this.name ?? \"\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L21lc3NhZ2VzL2Z1bmN0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFzRjtBQUN0Rjs7Q0FFQyxHQUNNLE1BQU1JLHdCQUF3QkosaURBQVdBO0lBQzVDLE9BQU9LLFVBQVU7UUFDYixPQUFPO0lBQ1g7SUFDQUMsWUFBWUMsTUFBTSxFQUNsQixnQkFBZ0IsR0FDaEJDLElBQUksQ0FBRTtRQUNGLElBQUksT0FBT0QsV0FBVyxVQUFVO1lBQzVCLHVGQUF1RjtZQUN2RkEsU0FBUztnQkFBRUUsU0FBU0Y7Z0JBQVFDLE1BQU1BO1lBQUs7UUFDM0M7UUFDQSxLQUFLLENBQUNEO0lBQ1Y7SUFDQUcsV0FBVztRQUNQLE9BQU87SUFDWDtBQUNKO0FBQ0E7OztDQUdDLEdBQ00sTUFBTUMsNkJBQTZCVixzREFBZ0JBO0lBQ3RELE9BQU9JLFVBQVU7UUFDYixPQUFPO0lBQ1g7SUFDQUssV0FBVztRQUNQLE9BQU87SUFDWDtJQUNBRSxPQUFPQyxLQUFLLEVBQUU7UUFDVixPQUFPLElBQUlGLHFCQUFxQjtZQUM1QkYsU0FBU1Asc0RBQVlBLENBQUMsSUFBSSxDQUFDTyxPQUFPLEVBQUVJLE1BQU1KLE9BQU87WUFDakRLLG1CQUFtQlgscURBQVdBLENBQUMsSUFBSSxDQUFDVyxpQkFBaUIsRUFBRUQsTUFBTUMsaUJBQWlCO1lBQzlFQyxtQkFBbUJaLHFEQUFXQSxDQUFDLElBQUksQ0FBQ1ksaUJBQWlCLEVBQUVGLE1BQU1FLGlCQUFpQjtZQUM5RVAsTUFBTSxJQUFJLENBQUNBLElBQUksSUFBSTtRQUN2QjtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1nZW5haS9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvZnVuY3Rpb24uanM/OGE2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlTWVzc2FnZSwgQmFzZU1lc3NhZ2VDaHVuaywgbWVyZ2VDb250ZW50LCBfbWVyZ2VEaWN0cywgfSBmcm9tIFwiLi9iYXNlLmpzXCI7XG4vKipcbiAqIFJlcHJlc2VudHMgYSBmdW5jdGlvbiBtZXNzYWdlIGluIGEgY29udmVyc2F0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgRnVuY3Rpb25NZXNzYWdlIGV4dGVuZHMgQmFzZU1lc3NhZ2Uge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJGdW5jdGlvbk1lc3NhZ2VcIjtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGRzLCBcbiAgICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgICBuYW1lKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZmllbGRzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ24sIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgICAgIGZpZWxkcyA9IHsgY29udGVudDogZmllbGRzLCBuYW1lOiBuYW1lIH07XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICB9XG4gICAgX2dldFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcImZ1bmN0aW9uXCI7XG4gICAgfVxufVxuLyoqXG4gKiBSZXByZXNlbnRzIGEgY2h1bmsgb2YgYSBmdW5jdGlvbiBtZXNzYWdlLCB3aGljaCBjYW4gYmUgY29uY2F0ZW5hdGVkXG4gKiB3aXRoIG90aGVyIGZ1bmN0aW9uIG1lc3NhZ2UgY2h1bmtzLlxuICovXG5leHBvcnQgY2xhc3MgRnVuY3Rpb25NZXNzYWdlQ2h1bmsgZXh0ZW5kcyBCYXNlTWVzc2FnZUNodW5rIHtcbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiRnVuY3Rpb25NZXNzYWdlQ2h1bmtcIjtcbiAgICB9XG4gICAgX2dldFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcImZ1bmN0aW9uXCI7XG4gICAgfVxuICAgIGNvbmNhdChjaHVuaykge1xuICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uTWVzc2FnZUNodW5rKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IG1lcmdlQ29udGVudCh0aGlzLmNvbnRlbnQsIGNodW5rLmNvbnRlbnQpLFxuICAgICAgICAgICAgYWRkaXRpb25hbF9rd2FyZ3M6IF9tZXJnZURpY3RzKHRoaXMuYWRkaXRpb25hbF9rd2FyZ3MsIGNodW5rLmFkZGl0aW9uYWxfa3dhcmdzKSxcbiAgICAgICAgICAgIHJlc3BvbnNlX21ldGFkYXRhOiBfbWVyZ2VEaWN0cyh0aGlzLnJlc3BvbnNlX21ldGFkYXRhLCBjaHVuay5yZXNwb25zZV9tZXRhZGF0YSksXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUgPz8gXCJcIixcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkJhc2VNZXNzYWdlIiwiQmFzZU1lc3NhZ2VDaHVuayIsIm1lcmdlQ29udGVudCIsIl9tZXJnZURpY3RzIiwiRnVuY3Rpb25NZXNzYWdlIiwibGNfbmFtZSIsImNvbnN0cnVjdG9yIiwiZmllbGRzIiwibmFtZSIsImNvbnRlbnQiLCJfZ2V0VHlwZSIsIkZ1bmN0aW9uTWVzc2FnZUNodW5rIiwiY29uY2F0IiwiY2h1bmsiLCJhZGRpdGlvbmFsX2t3YXJncyIsInJlc3BvbnNlX21ldGFkYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/function.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/human.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/human.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HumanMessage: () => (/* binding */ HumanMessage),\n/* harmony export */   HumanMessageChunk: () => (/* binding */ HumanMessageChunk)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/base.js\");\n\n/**\n * Represents a human message in a conversation.\n */ class HumanMessage extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage {\n    static lc_name() {\n        return \"HumanMessage\";\n    }\n    _getType() {\n        return \"human\";\n    }\n}\n/**\n * Represents a chunk of a human message, which can be concatenated with\n * other human message chunks.\n */ class HumanMessageChunk extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageChunk {\n    static lc_name() {\n        return \"HumanMessageChunk\";\n    }\n    _getType() {\n        return \"human\";\n    }\n    concat(chunk) {\n        return new HumanMessageChunk({\n            content: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.response_metadata, chunk.response_metadata)\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L21lc3NhZ2VzL2h1bWFuLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFzRjtBQUN0Rjs7Q0FFQyxHQUNNLE1BQU1JLHFCQUFxQkosaURBQVdBO0lBQ3pDLE9BQU9LLFVBQVU7UUFDYixPQUFPO0lBQ1g7SUFDQUMsV0FBVztRQUNQLE9BQU87SUFDWDtBQUNKO0FBQ0E7OztDQUdDLEdBQ00sTUFBTUMsMEJBQTBCTixzREFBZ0JBO0lBQ25ELE9BQU9JLFVBQVU7UUFDYixPQUFPO0lBQ1g7SUFDQUMsV0FBVztRQUNQLE9BQU87SUFDWDtJQUNBRSxPQUFPQyxLQUFLLEVBQUU7UUFDVixPQUFPLElBQUlGLGtCQUFrQjtZQUN6QkcsU0FBU1Isc0RBQVlBLENBQUMsSUFBSSxDQUFDUSxPQUFPLEVBQUVELE1BQU1DLE9BQU87WUFDakRDLG1CQUFtQlIscURBQVdBLENBQUMsSUFBSSxDQUFDUSxpQkFBaUIsRUFBRUYsTUFBTUUsaUJBQWlCO1lBQzlFQyxtQkFBbUJULHFEQUFXQSxDQUFDLElBQUksQ0FBQ1MsaUJBQWlCLEVBQUVILE1BQU1HLGlCQUFpQjtRQUNsRjtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1nZW5haS9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvaHVtYW4uanM/MTFlOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlTWVzc2FnZSwgQmFzZU1lc3NhZ2VDaHVuaywgbWVyZ2VDb250ZW50LCBfbWVyZ2VEaWN0cywgfSBmcm9tIFwiLi9iYXNlLmpzXCI7XG4vKipcbiAqIFJlcHJlc2VudHMgYSBodW1hbiBtZXNzYWdlIGluIGEgY29udmVyc2F0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgSHVtYW5NZXNzYWdlIGV4dGVuZHMgQmFzZU1lc3NhZ2Uge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJIdW1hbk1lc3NhZ2VcIjtcbiAgICB9XG4gICAgX2dldFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcImh1bWFuXCI7XG4gICAgfVxufVxuLyoqXG4gKiBSZXByZXNlbnRzIGEgY2h1bmsgb2YgYSBodW1hbiBtZXNzYWdlLCB3aGljaCBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGhcbiAqIG90aGVyIGh1bWFuIG1lc3NhZ2UgY2h1bmtzLlxuICovXG5leHBvcnQgY2xhc3MgSHVtYW5NZXNzYWdlQ2h1bmsgZXh0ZW5kcyBCYXNlTWVzc2FnZUNodW5rIHtcbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiSHVtYW5NZXNzYWdlQ2h1bmtcIjtcbiAgICB9XG4gICAgX2dldFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcImh1bWFuXCI7XG4gICAgfVxuICAgIGNvbmNhdChjaHVuaykge1xuICAgICAgICByZXR1cm4gbmV3IEh1bWFuTWVzc2FnZUNodW5rKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IG1lcmdlQ29udGVudCh0aGlzLmNvbnRlbnQsIGNodW5rLmNvbnRlbnQpLFxuICAgICAgICAgICAgYWRkaXRpb25hbF9rd2FyZ3M6IF9tZXJnZURpY3RzKHRoaXMuYWRkaXRpb25hbF9rd2FyZ3MsIGNodW5rLmFkZGl0aW9uYWxfa3dhcmdzKSxcbiAgICAgICAgICAgIHJlc3BvbnNlX21ldGFkYXRhOiBfbWVyZ2VEaWN0cyh0aGlzLnJlc3BvbnNlX21ldGFkYXRhLCBjaHVuay5yZXNwb25zZV9tZXRhZGF0YSksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJCYXNlTWVzc2FnZSIsIkJhc2VNZXNzYWdlQ2h1bmsiLCJtZXJnZUNvbnRlbnQiLCJfbWVyZ2VEaWN0cyIsIkh1bWFuTWVzc2FnZSIsImxjX25hbWUiLCJfZ2V0VHlwZSIsIkh1bWFuTWVzc2FnZUNodW5rIiwiY29uY2F0IiwiY2h1bmsiLCJjb250ZW50IiwiYWRkaXRpb25hbF9rd2FyZ3MiLCJyZXNwb25zZV9tZXRhZGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/human.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/index.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/index.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIMessage: () => (/* reexport safe */ _ai_js__WEBPACK_IMPORTED_MODULE_0__.AIMessage),\n/* harmony export */   AIMessageChunk: () => (/* reexport safe */ _ai_js__WEBPACK_IMPORTED_MODULE_0__.AIMessageChunk),\n/* harmony export */   BaseMessage: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseMessage),\n/* harmony export */   BaseMessageChunk: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseMessageChunk),\n/* harmony export */   ChatMessage: () => (/* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_2__.ChatMessage),\n/* harmony export */   ChatMessageChunk: () => (/* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_2__.ChatMessageChunk),\n/* harmony export */   FunctionMessage: () => (/* reexport safe */ _function_js__WEBPACK_IMPORTED_MODULE_3__.FunctionMessage),\n/* harmony export */   FunctionMessageChunk: () => (/* reexport safe */ _function_js__WEBPACK_IMPORTED_MODULE_3__.FunctionMessageChunk),\n/* harmony export */   HumanMessage: () => (/* reexport safe */ _human_js__WEBPACK_IMPORTED_MODULE_4__.HumanMessage),\n/* harmony export */   HumanMessageChunk: () => (/* reexport safe */ _human_js__WEBPACK_IMPORTED_MODULE_4__.HumanMessageChunk),\n/* harmony export */   SystemMessage: () => (/* reexport safe */ _system_js__WEBPACK_IMPORTED_MODULE_5__.SystemMessage),\n/* harmony export */   SystemMessageChunk: () => (/* reexport safe */ _system_js__WEBPACK_IMPORTED_MODULE_5__.SystemMessageChunk),\n/* harmony export */   ToolMessage: () => (/* reexport safe */ _tool_js__WEBPACK_IMPORTED_MODULE_7__.ToolMessage),\n/* harmony export */   ToolMessageChunk: () => (/* reexport safe */ _tool_js__WEBPACK_IMPORTED_MODULE_7__.ToolMessageChunk),\n/* harmony export */   _mergeDicts: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__._mergeDicts),\n/* harmony export */   _mergeLists: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__._mergeLists),\n/* harmony export */   coerceMessageLikeToMessage: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.coerceMessageLikeToMessage),\n/* harmony export */   convertToChunk: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.convertToChunk),\n/* harmony export */   getBufferString: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.getBufferString),\n/* harmony export */   isAIMessage: () => (/* reexport safe */ _ai_js__WEBPACK_IMPORTED_MODULE_0__.isAIMessage),\n/* harmony export */   isBaseMessage: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.isBaseMessage),\n/* harmony export */   isBaseMessageChunk: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.isBaseMessageChunk),\n/* harmony export */   isOpenAIToolCallArray: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.isOpenAIToolCallArray),\n/* harmony export */   mapChatMessagesToStoredMessages: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.mapChatMessagesToStoredMessages),\n/* harmony export */   mapStoredMessageToChatMessage: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.mapStoredMessageToChatMessage),\n/* harmony export */   mapStoredMessagesToChatMessages: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.mapStoredMessagesToChatMessages),\n/* harmony export */   mergeContent: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.mergeContent)\n/* harmony export */ });\n/* harmony import */ var _ai_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ai.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/ai.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/base.js\");\n/* harmony import */ var _chat_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chat.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/chat.js\");\n/* harmony import */ var _function_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./function.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/function.js\");\n/* harmony import */ var _human_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./human.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/human.js\");\n/* harmony import */ var _system_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./system.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/system.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/utils.js\");\n/* harmony import */ var _tool_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tool.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/tool.js\");\n\n\n\n\n\n\n\n// TODO: Use a star export when we deprecate the\n// existing \"ToolCall\" type in \"base.js\".\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L21lc3NhZ2VzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXdCO0FBQ0U7QUFDQTtBQUNJO0FBQ0g7QUFDQztBQUNEO0FBQzNCLGdEQUFnRDtBQUNoRCx5Q0FBeUM7QUFDa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1nZW5haS9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvaW5kZXguanM/YThiNiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9haS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vYmFzZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY2hhdC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZnVuY3Rpb24uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2h1bWFuLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zeXN0ZW0uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3V0aWxzLmpzXCI7XG4vLyBUT0RPOiBVc2UgYSBzdGFyIGV4cG9ydCB3aGVuIHdlIGRlcHJlY2F0ZSB0aGVcbi8vIGV4aXN0aW5nIFwiVG9vbENhbGxcIiB0eXBlIGluIFwiYmFzZS5qc1wiLlxuZXhwb3J0IHsgVG9vbE1lc3NhZ2UsIFRvb2xNZXNzYWdlQ2h1bmssIH0gZnJvbSBcIi4vdG9vbC5qc1wiO1xuIl0sIm5hbWVzIjpbIlRvb2xNZXNzYWdlIiwiVG9vbE1lc3NhZ2VDaHVuayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/system.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/system.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SystemMessage: () => (/* binding */ SystemMessage),\n/* harmony export */   SystemMessageChunk: () => (/* binding */ SystemMessageChunk)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/base.js\");\n\n/**\n * Represents a system message in a conversation.\n */ class SystemMessage extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage {\n    static lc_name() {\n        return \"SystemMessage\";\n    }\n    _getType() {\n        return \"system\";\n    }\n}\n/**\n * Represents a chunk of a system message, which can be concatenated with\n * other system message chunks.\n */ class SystemMessageChunk extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageChunk {\n    static lc_name() {\n        return \"SystemMessageChunk\";\n    }\n    _getType() {\n        return \"system\";\n    }\n    concat(chunk) {\n        return new SystemMessageChunk({\n            content: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.response_metadata, chunk.response_metadata)\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L21lc3NhZ2VzL3N5c3RlbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBc0Y7QUFDdEY7O0NBRUMsR0FDTSxNQUFNSSxzQkFBc0JKLGlEQUFXQTtJQUMxQyxPQUFPSyxVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0FDLFdBQVc7UUFDUCxPQUFPO0lBQ1g7QUFDSjtBQUNBOzs7Q0FHQyxHQUNNLE1BQU1DLDJCQUEyQk4sc0RBQWdCQTtJQUNwRCxPQUFPSSxVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0FDLFdBQVc7UUFDUCxPQUFPO0lBQ1g7SUFDQUUsT0FBT0MsS0FBSyxFQUFFO1FBQ1YsT0FBTyxJQUFJRixtQkFBbUI7WUFDMUJHLFNBQVNSLHNEQUFZQSxDQUFDLElBQUksQ0FBQ1EsT0FBTyxFQUFFRCxNQUFNQyxPQUFPO1lBQ2pEQyxtQkFBbUJSLHFEQUFXQSxDQUFDLElBQUksQ0FBQ1EsaUJBQWlCLEVBQUVGLE1BQU1FLGlCQUFpQjtZQUM5RUMsbUJBQW1CVCxxREFBV0EsQ0FBQyxJQUFJLENBQUNTLGlCQUFpQixFQUFFSCxNQUFNRyxpQkFBaUI7UUFDbEY7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L21lc3NhZ2VzL3N5c3RlbS5qcz9iNjNhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VNZXNzYWdlLCBCYXNlTWVzc2FnZUNodW5rLCBtZXJnZUNvbnRlbnQsIF9tZXJnZURpY3RzLCB9IGZyb20gXCIuL2Jhc2UuanNcIjtcbi8qKlxuICogUmVwcmVzZW50cyBhIHN5c3RlbSBtZXNzYWdlIGluIGEgY29udmVyc2F0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgU3lzdGVtTWVzc2FnZSBleHRlbmRzIEJhc2VNZXNzYWdlIHtcbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiU3lzdGVtTWVzc2FnZVwiO1xuICAgIH1cbiAgICBfZ2V0VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwic3lzdGVtXCI7XG4gICAgfVxufVxuLyoqXG4gKiBSZXByZXNlbnRzIGEgY2h1bmsgb2YgYSBzeXN0ZW0gbWVzc2FnZSwgd2hpY2ggY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoXG4gKiBvdGhlciBzeXN0ZW0gbWVzc2FnZSBjaHVua3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBTeXN0ZW1NZXNzYWdlQ2h1bmsgZXh0ZW5kcyBCYXNlTWVzc2FnZUNodW5rIHtcbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiU3lzdGVtTWVzc2FnZUNodW5rXCI7XG4gICAgfVxuICAgIF9nZXRUeXBlKCkge1xuICAgICAgICByZXR1cm4gXCJzeXN0ZW1cIjtcbiAgICB9XG4gICAgY29uY2F0KGNodW5rKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3lzdGVtTWVzc2FnZUNodW5rKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IG1lcmdlQ29udGVudCh0aGlzLmNvbnRlbnQsIGNodW5rLmNvbnRlbnQpLFxuICAgICAgICAgICAgYWRkaXRpb25hbF9rd2FyZ3M6IF9tZXJnZURpY3RzKHRoaXMuYWRkaXRpb25hbF9rd2FyZ3MsIGNodW5rLmFkZGl0aW9uYWxfa3dhcmdzKSxcbiAgICAgICAgICAgIHJlc3BvbnNlX21ldGFkYXRhOiBfbWVyZ2VEaWN0cyh0aGlzLnJlc3BvbnNlX21ldGFkYXRhLCBjaHVuay5yZXNwb25zZV9tZXRhZGF0YSksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJCYXNlTWVzc2FnZSIsIkJhc2VNZXNzYWdlQ2h1bmsiLCJtZXJnZUNvbnRlbnQiLCJfbWVyZ2VEaWN0cyIsIlN5c3RlbU1lc3NhZ2UiLCJsY19uYW1lIiwiX2dldFR5cGUiLCJTeXN0ZW1NZXNzYWdlQ2h1bmsiLCJjb25jYXQiLCJjaHVuayIsImNvbnRlbnQiLCJhZGRpdGlvbmFsX2t3YXJncyIsInJlc3BvbnNlX21ldGFkYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/system.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/tool.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/tool.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ToolMessage: () => (/* binding */ ToolMessage),\n/* harmony export */   ToolMessageChunk: () => (/* binding */ ToolMessageChunk),\n/* harmony export */   defaultToolCallParser: () => (/* binding */ defaultToolCallParser)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/base.js\");\n\n/**\n * Represents a tool message in a conversation.\n */ class ToolMessage extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage {\n    static lc_name() {\n        return \"ToolMessage\";\n    }\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            tool_call_id: \"tool_call_id\"\n        };\n    }\n    constructor(fields, tool_call_id, name){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = {\n                content: fields,\n                name,\n                tool_call_id: tool_call_id\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"tool_call_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.tool_call_id = fields.tool_call_id;\n    }\n    _getType() {\n        return \"tool\";\n    }\n    static isInstance(message) {\n        return message._getType() === \"tool\";\n    }\n}\n/**\n * Represents a chunk of a tool message, which can be concatenated\n * with other tool message chunks.\n */ class ToolMessageChunk extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageChunk {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"tool_call_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.tool_call_id = fields.tool_call_id;\n    }\n    static lc_name() {\n        return \"ToolMessageChunk\";\n    }\n    _getType() {\n        return \"tool\";\n    }\n    concat(chunk) {\n        return new ToolMessageChunk({\n            content: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.response_metadata, chunk.response_metadata),\n            tool_call_id: this.tool_call_id\n        });\n    }\n}\nfunction defaultToolCallParser(// eslint-disable-next-line @typescript-eslint/no-explicit-any\nrawToolCalls) {\n    const toolCalls = [];\n    const invalidToolCalls = [];\n    for (const toolCall of rawToolCalls){\n        if (!toolCall.function) {\n            continue;\n        } else {\n            const functionName = toolCall.function.name;\n            try {\n                const functionArgs = JSON.parse(toolCall.function.arguments);\n                const parsed = {\n                    name: functionName || \"\",\n                    args: functionArgs || {},\n                    id: toolCall.id\n                };\n                toolCalls.push(parsed);\n            } catch (error) {\n                invalidToolCalls.push({\n                    name: functionName,\n                    args: toolCall.function.arguments,\n                    id: toolCall.id,\n                    error: \"Malformed args.\"\n                });\n            }\n        }\n    }\n    return [\n        toolCalls,\n        invalidToolCalls\n    ];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L21lc3NhZ2VzL3Rvb2wuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFzRjtBQUN0Rjs7Q0FFQyxHQUNNLE1BQU1JLG9CQUFvQkosaURBQVdBO0lBQ3hDLE9BQU9LLFVBQVU7UUFDYixPQUFPO0lBQ1g7SUFDQSxJQUFJQyxhQUFhO1FBQ2IsK0NBQStDO1FBQy9DLE9BQU87WUFBRUMsY0FBYztRQUFlO0lBQzFDO0lBQ0FDLFlBQVlDLE1BQU0sRUFBRUYsWUFBWSxFQUFFRyxJQUFJLENBQUU7UUFDcEMsSUFBSSxPQUFPRCxXQUFXLFVBQVU7WUFDNUIsdUZBQXVGO1lBQ3ZGQSxTQUFTO2dCQUFFRSxTQUFTRjtnQkFBUUM7Z0JBQU1ILGNBQWNBO1lBQWE7UUFDakU7UUFDQSxLQUFLLENBQUNFO1FBQ05HLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNWLFlBQVksR0FBR0UsT0FBT0YsWUFBWTtJQUMzQztJQUNBVyxXQUFXO1FBQ1AsT0FBTztJQUNYO0lBQ0EsT0FBT0MsV0FBV0MsT0FBTyxFQUFFO1FBQ3ZCLE9BQU9BLFFBQVFGLFFBQVEsT0FBTztJQUNsQztBQUNKO0FBQ0E7OztDQUdDLEdBQ00sTUFBTUcseUJBQXlCcEIsc0RBQWdCQTtJQUNsRE8sWUFBWUMsTUFBTSxDQUFFO1FBQ2hCLEtBQUssQ0FBQ0E7UUFDTkcsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ1YsWUFBWSxHQUFHRSxPQUFPRixZQUFZO0lBQzNDO0lBQ0EsT0FBT0YsVUFBVTtRQUNiLE9BQU87SUFDWDtJQUNBYSxXQUFXO1FBQ1AsT0FBTztJQUNYO0lBQ0FJLE9BQU9DLEtBQUssRUFBRTtRQUNWLE9BQU8sSUFBSUYsaUJBQWlCO1lBQ3hCVixTQUFTVCxzREFBWUEsQ0FBQyxJQUFJLENBQUNTLE9BQU8sRUFBRVksTUFBTVosT0FBTztZQUNqRGEsbUJBQW1CckIscURBQVdBLENBQUMsSUFBSSxDQUFDcUIsaUJBQWlCLEVBQUVELE1BQU1DLGlCQUFpQjtZQUM5RUMsbUJBQW1CdEIscURBQVdBLENBQUMsSUFBSSxDQUFDc0IsaUJBQWlCLEVBQUVGLE1BQU1FLGlCQUFpQjtZQUM5RWxCLGNBQWMsSUFBSSxDQUFDQSxZQUFZO1FBQ25DO0lBQ0o7QUFDSjtBQUNPLFNBQVNtQixzQkFDaEIsOERBQThEO0FBQzlEQyxZQUFZO0lBQ1IsTUFBTUMsWUFBWSxFQUFFO0lBQ3BCLE1BQU1DLG1CQUFtQixFQUFFO0lBQzNCLEtBQUssTUFBTUMsWUFBWUgsYUFBYztRQUNqQyxJQUFJLENBQUNHLFNBQVNDLFFBQVEsRUFBRTtZQUNwQjtRQUNKLE9BQ0s7WUFDRCxNQUFNQyxlQUFlRixTQUFTQyxRQUFRLENBQUNyQixJQUFJO1lBQzNDLElBQUk7Z0JBQ0EsTUFBTXVCLGVBQWVDLEtBQUtDLEtBQUssQ0FBQ0wsU0FBU0MsUUFBUSxDQUFDSyxTQUFTO2dCQUMzRCxNQUFNQyxTQUFTO29CQUNYM0IsTUFBTXNCLGdCQUFnQjtvQkFDdEJNLE1BQU1MLGdCQUFnQixDQUFDO29CQUN2Qk0sSUFBSVQsU0FBU1MsRUFBRTtnQkFDbkI7Z0JBQ0FYLFVBQVVZLElBQUksQ0FBQ0g7WUFDbkIsRUFDQSxPQUFPSSxPQUFPO2dCQUNWWixpQkFBaUJXLElBQUksQ0FBQztvQkFDbEI5QixNQUFNc0I7b0JBQ05NLE1BQU1SLFNBQVNDLFFBQVEsQ0FBQ0ssU0FBUztvQkFDakNHLElBQUlULFNBQVNTLEVBQUU7b0JBQ2ZFLE9BQU87Z0JBQ1g7WUFDSjtRQUNKO0lBQ0o7SUFDQSxPQUFPO1FBQUNiO1FBQVdDO0tBQWlCO0FBQ3hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L21lc3NhZ2VzL3Rvb2wuanM/ZmM3OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlTWVzc2FnZSwgQmFzZU1lc3NhZ2VDaHVuaywgbWVyZ2VDb250ZW50LCBfbWVyZ2VEaWN0cywgfSBmcm9tIFwiLi9iYXNlLmpzXCI7XG4vKipcbiAqIFJlcHJlc2VudHMgYSB0b29sIG1lc3NhZ2UgaW4gYSBjb252ZXJzYXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBUb29sTWVzc2FnZSBleHRlbmRzIEJhc2VNZXNzYWdlIHtcbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiVG9vbE1lc3NhZ2VcIjtcbiAgICB9XG4gICAgZ2V0IGxjX2FsaWFzZXMoKSB7XG4gICAgICAgIC8vIGV4Y2x1ZGUgc25ha2UgY2FzZSBjb252ZXJzaW9uIHRvIHBhc2NhbCBjYXNlXG4gICAgICAgIHJldHVybiB7IHRvb2xfY2FsbF9pZDogXCJ0b29sX2NhbGxfaWRcIiB9O1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMsIHRvb2xfY2FsbF9pZCwgbmFtZSkge1xuICAgICAgICBpZiAodHlwZW9mIGZpZWxkcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICBmaWVsZHMgPSB7IGNvbnRlbnQ6IGZpZWxkcywgbmFtZSwgdG9vbF9jYWxsX2lkOiB0b29sX2NhbGxfaWQgfTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcihmaWVsZHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0b29sX2NhbGxfaWRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50b29sX2NhbGxfaWQgPSBmaWVsZHMudG9vbF9jYWxsX2lkO1xuICAgIH1cbiAgICBfZ2V0VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwidG9vbFwiO1xuICAgIH1cbiAgICBzdGF0aWMgaXNJbnN0YW5jZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBtZXNzYWdlLl9nZXRUeXBlKCkgPT09IFwidG9vbFwiO1xuICAgIH1cbn1cbi8qKlxuICogUmVwcmVzZW50cyBhIGNodW5rIG9mIGEgdG9vbCBtZXNzYWdlLCB3aGljaCBjYW4gYmUgY29uY2F0ZW5hdGVkXG4gKiB3aXRoIG90aGVyIHRvb2wgbWVzc2FnZSBjaHVua3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBUb29sTWVzc2FnZUNodW5rIGV4dGVuZHMgQmFzZU1lc3NhZ2VDaHVuayB7XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkcyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInRvb2xfY2FsbF9pZFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRvb2xfY2FsbF9pZCA9IGZpZWxkcy50b29sX2NhbGxfaWQ7XG4gICAgfVxuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJUb29sTWVzc2FnZUNodW5rXCI7XG4gICAgfVxuICAgIF9nZXRUeXBlKCkge1xuICAgICAgICByZXR1cm4gXCJ0b29sXCI7XG4gICAgfVxuICAgIGNvbmNhdChjaHVuaykge1xuICAgICAgICByZXR1cm4gbmV3IFRvb2xNZXNzYWdlQ2h1bmsoe1xuICAgICAgICAgICAgY29udGVudDogbWVyZ2VDb250ZW50KHRoaXMuY29udGVudCwgY2h1bmsuY29udGVudCksXG4gICAgICAgICAgICBhZGRpdGlvbmFsX2t3YXJnczogX21lcmdlRGljdHModGhpcy5hZGRpdGlvbmFsX2t3YXJncywgY2h1bmsuYWRkaXRpb25hbF9rd2FyZ3MpLFxuICAgICAgICAgICAgcmVzcG9uc2VfbWV0YWRhdGE6IF9tZXJnZURpY3RzKHRoaXMucmVzcG9uc2VfbWV0YWRhdGEsIGNodW5rLnJlc3BvbnNlX21ldGFkYXRhKSxcbiAgICAgICAgICAgIHRvb2xfY2FsbF9pZDogdGhpcy50b29sX2NhbGxfaWQsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0VG9vbENhbGxQYXJzZXIoXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxucmF3VG9vbENhbGxzKSB7XG4gICAgY29uc3QgdG9vbENhbGxzID0gW107XG4gICAgY29uc3QgaW52YWxpZFRvb2xDYWxscyA9IFtdO1xuICAgIGZvciAoY29uc3QgdG9vbENhbGwgb2YgcmF3VG9vbENhbGxzKSB7XG4gICAgICAgIGlmICghdG9vbENhbGwuZnVuY3Rpb24pIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZnVuY3Rpb25OYW1lID0gdG9vbENhbGwuZnVuY3Rpb24ubmFtZTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZnVuY3Rpb25BcmdzID0gSlNPTi5wYXJzZSh0b29sQ2FsbC5mdW5jdGlvbi5hcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogZnVuY3Rpb25OYW1lIHx8IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IGZ1bmN0aW9uQXJncyB8fCB7fSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHRvb2xDYWxsLmlkLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdG9vbENhbGxzLnB1c2gocGFyc2VkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGludmFsaWRUb29sQ2FsbHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGZ1bmN0aW9uTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgYXJnczogdG9vbENhbGwuZnVuY3Rpb24uYXJndW1lbnRzLFxuICAgICAgICAgICAgICAgICAgICBpZDogdG9vbENhbGwuaWQsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBcIk1hbGZvcm1lZCBhcmdzLlwiLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBbdG9vbENhbGxzLCBpbnZhbGlkVG9vbENhbGxzXTtcbn1cbiJdLCJuYW1lcyI6WyJCYXNlTWVzc2FnZSIsIkJhc2VNZXNzYWdlQ2h1bmsiLCJtZXJnZUNvbnRlbnQiLCJfbWVyZ2VEaWN0cyIsIlRvb2xNZXNzYWdlIiwibGNfbmFtZSIsImxjX2FsaWFzZXMiLCJ0b29sX2NhbGxfaWQiLCJjb25zdHJ1Y3RvciIsImZpZWxkcyIsIm5hbWUiLCJjb250ZW50IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsIl9nZXRUeXBlIiwiaXNJbnN0YW5jZSIsIm1lc3NhZ2UiLCJUb29sTWVzc2FnZUNodW5rIiwiY29uY2F0IiwiY2h1bmsiLCJhZGRpdGlvbmFsX2t3YXJncyIsInJlc3BvbnNlX21ldGFkYXRhIiwiZGVmYXVsdFRvb2xDYWxsUGFyc2VyIiwicmF3VG9vbENhbGxzIiwidG9vbENhbGxzIiwiaW52YWxpZFRvb2xDYWxscyIsInRvb2xDYWxsIiwiZnVuY3Rpb24iLCJmdW5jdGlvbk5hbWUiLCJmdW5jdGlvbkFyZ3MiLCJKU09OIiwicGFyc2UiLCJhcmd1bWVudHMiLCJwYXJzZWQiLCJhcmdzIiwiaWQiLCJwdXNoIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/tool.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/utils.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/utils.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   coerceMessageLikeToMessage: () => (/* binding */ coerceMessageLikeToMessage),\n/* harmony export */   convertToChunk: () => (/* binding */ convertToChunk),\n/* harmony export */   getBufferString: () => (/* binding */ getBufferString),\n/* harmony export */   mapChatMessagesToStoredMessages: () => (/* binding */ mapChatMessagesToStoredMessages),\n/* harmony export */   mapStoredMessageToChatMessage: () => (/* binding */ mapStoredMessageToChatMessage),\n/* harmony export */   mapStoredMessagesToChatMessages: () => (/* binding */ mapStoredMessagesToChatMessages)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/base.js\");\n/* harmony import */ var _human_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./human.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/human.js\");\n/* harmony import */ var _ai_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ai.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/ai.js\");\n/* harmony import */ var _system_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./system.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/system.js\");\n/* harmony import */ var _chat_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chat.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/chat.js\");\n/* harmony import */ var _function_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./function.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/function.js\");\n/* harmony import */ var _tool_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tool.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/tool.js\");\n\n\n\n\n\n\n\nfunction coerceMessageLikeToMessage(messageLike) {\n    if (typeof messageLike === \"string\") {\n        return new _human_js__WEBPACK_IMPORTED_MODULE_1__.HumanMessage(messageLike);\n    } else if ((0,_base_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessage)(messageLike)) {\n        return messageLike;\n    }\n    const [type, content] = messageLike;\n    if (type === \"human\" || type === \"user\") {\n        return new _human_js__WEBPACK_IMPORTED_MODULE_1__.HumanMessage({\n            content\n        });\n    } else if (type === \"ai\" || type === \"assistant\") {\n        return new _ai_js__WEBPACK_IMPORTED_MODULE_2__.AIMessage({\n            content\n        });\n    } else if (type === \"system\") {\n        return new _system_js__WEBPACK_IMPORTED_MODULE_3__.SystemMessage({\n            content\n        });\n    } else {\n        throw new Error(`Unable to coerce message from array: only human, AI, or system message coercion is currently supported.`);\n    }\n}\n/**\n * This function is used by memory classes to get a string representation\n * of the chat message history, based on the message content and role.\n */ function getBufferString(messages, humanPrefix = \"Human\", aiPrefix = \"AI\") {\n    const string_messages = [];\n    for (const m of messages){\n        let role;\n        if (m._getType() === \"human\") {\n            role = humanPrefix;\n        } else if (m._getType() === \"ai\") {\n            role = aiPrefix;\n        } else if (m._getType() === \"system\") {\n            role = \"System\";\n        } else if (m._getType() === \"function\") {\n            role = \"Function\";\n        } else if (m._getType() === \"tool\") {\n            role = \"Tool\";\n        } else if (m._getType() === \"generic\") {\n            role = m.role;\n        } else {\n            throw new Error(`Got unsupported message type: ${m._getType()}`);\n        }\n        const nameStr = m.name ? `${m.name}, ` : \"\";\n        string_messages.push(`${role}: ${nameStr}${m.content}`);\n    }\n    return string_messages.join(\"\\n\");\n}\n/**\n * Maps messages from an older format (V1) to the current `StoredMessage`\n * format. If the message is already in the `StoredMessage` format, it is\n * returned as is. Otherwise, it transforms the V1 message into a\n * `StoredMessage`. This function is important for maintaining\n * compatibility with older message formats.\n */ function mapV1MessageToStoredMessage(message) {\n    // TODO: Remove this mapper when we deprecate the old message format.\n    if (message.data !== undefined) {\n        return message;\n    } else {\n        const v1Message = message;\n        return {\n            type: v1Message.type,\n            data: {\n                content: v1Message.text,\n                role: v1Message.role,\n                name: undefined,\n                tool_call_id: undefined\n            }\n        };\n    }\n}\nfunction mapStoredMessageToChatMessage(message) {\n    const storedMessage = mapV1MessageToStoredMessage(message);\n    switch(storedMessage.type){\n        case \"human\":\n            return new _human_js__WEBPACK_IMPORTED_MODULE_1__.HumanMessage(storedMessage.data);\n        case \"ai\":\n            return new _ai_js__WEBPACK_IMPORTED_MODULE_2__.AIMessage(storedMessage.data);\n        case \"system\":\n            return new _system_js__WEBPACK_IMPORTED_MODULE_3__.SystemMessage(storedMessage.data);\n        case \"function\":\n            if (storedMessage.data.name === undefined) {\n                throw new Error(\"Name must be defined for function messages\");\n            }\n            return new _function_js__WEBPACK_IMPORTED_MODULE_5__.FunctionMessage(storedMessage.data);\n        case \"tool\":\n            if (storedMessage.data.tool_call_id === undefined) {\n                throw new Error(\"Tool call ID must be defined for tool messages\");\n            }\n            return new _tool_js__WEBPACK_IMPORTED_MODULE_6__.ToolMessage(storedMessage.data);\n        case \"chat\":\n            {\n                if (storedMessage.data.role === undefined) {\n                    throw new Error(\"Role must be defined for chat messages\");\n                }\n                return new _chat_js__WEBPACK_IMPORTED_MODULE_4__.ChatMessage(storedMessage.data);\n            }\n        default:\n            throw new Error(`Got unexpected type: ${storedMessage.type}`);\n    }\n}\n/**\n * Transforms an array of `StoredMessage` instances into an array of\n * `BaseMessage` instances. It uses the `mapV1MessageToStoredMessage`\n * function to ensure all messages are in the `StoredMessage` format, then\n * creates new instances of the appropriate `BaseMessage` subclass based\n * on the type of each message. This function is used to prepare stored\n * messages for use in a chat context.\n */ function mapStoredMessagesToChatMessages(messages) {\n    return messages.map(mapStoredMessageToChatMessage);\n}\n/**\n * Transforms an array of `BaseMessage` instances into an array of\n * `StoredMessage` instances. It does this by calling the `toDict` method\n * on each `BaseMessage`, which returns a `StoredMessage`. This function\n * is used to prepare chat messages for storage.\n */ function mapChatMessagesToStoredMessages(messages) {\n    return messages.map((message)=>message.toDict());\n}\nfunction convertToChunk(message) {\n    const type = message._getType();\n    if (type === \"human\") {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new _human_js__WEBPACK_IMPORTED_MODULE_1__.HumanMessageChunk({\n            ...message\n        });\n    } else if (type === \"ai\") {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new _ai_js__WEBPACK_IMPORTED_MODULE_2__.AIMessageChunk({\n            ...message\n        });\n    } else if (type === \"system\") {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new _system_js__WEBPACK_IMPORTED_MODULE_3__.SystemMessageChunk({\n            ...message\n        });\n    } else if (type === \"function\") {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new _function_js__WEBPACK_IMPORTED_MODULE_5__.FunctionMessageChunk({\n            ...message\n        });\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    } else if (_chat_js__WEBPACK_IMPORTED_MODULE_4__.ChatMessage.isInstance(message)) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new _chat_js__WEBPACK_IMPORTED_MODULE_4__.ChatMessageChunk({\n            ...message\n        });\n    } else {\n        throw new Error(\"Unknown message type.\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/outputs.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/outputs.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatGenerationChunk: () => (/* binding */ ChatGenerationChunk),\n/* harmony export */   GenerationChunk: () => (/* binding */ GenerationChunk),\n/* harmony export */   RUN_KEY: () => (/* binding */ RUN_KEY)\n/* harmony export */ });\nconst RUN_KEY = \"__run\";\n/**\n * Chunk of a single generation. Used for streaming.\n */ class GenerationChunk {\n    constructor(fields){\n        Object.defineProperty(this, \"text\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"generationInfo\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.text = fields.text;\n        this.generationInfo = fields.generationInfo;\n    }\n    concat(chunk) {\n        return new GenerationChunk({\n            text: this.text + chunk.text,\n            generationInfo: {\n                ...this.generationInfo,\n                ...chunk.generationInfo\n            }\n        });\n    }\n}\nclass ChatGenerationChunk extends GenerationChunk {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"message\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.message = fields.message;\n    }\n    concat(chunk) {\n        return new ChatGenerationChunk({\n            text: this.text + chunk.text,\n            generationInfo: {\n                ...this.generationInfo,\n                ...chunk.generationInfo\n            },\n            message: this.message.concat(chunk.message)\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L291dHB1dHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU8sTUFBTUEsVUFBVSxRQUFRO0FBQy9COztDQUVDLEdBQ00sTUFBTUM7SUFDVEMsWUFBWUMsTUFBTSxDQUFFO1FBQ2hCQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVE7WUFDaENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLDhEQUE4RDtRQUM5REwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxrQkFBa0I7WUFDMUNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ0MsSUFBSSxHQUFHUCxPQUFPTyxJQUFJO1FBQ3ZCLElBQUksQ0FBQ0MsY0FBYyxHQUFHUixPQUFPUSxjQUFjO0lBQy9DO0lBQ0FDLE9BQU9DLEtBQUssRUFBRTtRQUNWLE9BQU8sSUFBSVosZ0JBQWdCO1lBQ3ZCUyxNQUFNLElBQUksQ0FBQ0EsSUFBSSxHQUFHRyxNQUFNSCxJQUFJO1lBQzVCQyxnQkFBZ0I7Z0JBQ1osR0FBRyxJQUFJLENBQUNBLGNBQWM7Z0JBQ3RCLEdBQUdFLE1BQU1GLGNBQWM7WUFDM0I7UUFDSjtJQUNKO0FBQ0o7QUFDTyxNQUFNRyw0QkFBNEJiO0lBQ3JDQyxZQUFZQyxNQUFNLENBQUU7UUFDaEIsS0FBSyxDQUFDQTtRQUNOQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFdBQVc7WUFDbkNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ00sT0FBTyxHQUFHWixPQUFPWSxPQUFPO0lBQ2pDO0lBQ0FILE9BQU9DLEtBQUssRUFBRTtRQUNWLE9BQU8sSUFBSUMsb0JBQW9CO1lBQzNCSixNQUFNLElBQUksQ0FBQ0EsSUFBSSxHQUFHRyxNQUFNSCxJQUFJO1lBQzVCQyxnQkFBZ0I7Z0JBQ1osR0FBRyxJQUFJLENBQUNBLGNBQWM7Z0JBQ3RCLEdBQUdFLE1BQU1GLGNBQWM7WUFDM0I7WUFDQUksU0FBUyxJQUFJLENBQUNBLE9BQU8sQ0FBQ0gsTUFBTSxDQUFDQyxNQUFNRSxPQUFPO1FBQzlDO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWdlbmFpL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9vdXRwdXRzLmpzP2RlYTUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFJVTl9LRVkgPSBcIl9fcnVuXCI7XG4vKipcbiAqIENodW5rIG9mIGEgc2luZ2xlIGdlbmVyYXRpb24uIFVzZWQgZm9yIHN0cmVhbWluZy5cbiAqL1xuZXhwb3J0IGNsYXNzIEdlbmVyYXRpb25DaHVuayB7XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInRleHRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZ2VuZXJhdGlvbkluZm9cIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50ZXh0ID0gZmllbGRzLnRleHQ7XG4gICAgICAgIHRoaXMuZ2VuZXJhdGlvbkluZm8gPSBmaWVsZHMuZ2VuZXJhdGlvbkluZm87XG4gICAgfVxuICAgIGNvbmNhdChjaHVuaykge1xuICAgICAgICByZXR1cm4gbmV3IEdlbmVyYXRpb25DaHVuayh7XG4gICAgICAgICAgICB0ZXh0OiB0aGlzLnRleHQgKyBjaHVuay50ZXh0LFxuICAgICAgICAgICAgZ2VuZXJhdGlvbkluZm86IHtcbiAgICAgICAgICAgICAgICAuLi50aGlzLmdlbmVyYXRpb25JbmZvLFxuICAgICAgICAgICAgICAgIC4uLmNodW5rLmdlbmVyYXRpb25JbmZvLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIENoYXRHZW5lcmF0aW9uQ2h1bmsgZXh0ZW5kcyBHZW5lcmF0aW9uQ2h1bmsge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBzdXBlcihmaWVsZHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJtZXNzYWdlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IGZpZWxkcy5tZXNzYWdlO1xuICAgIH1cbiAgICBjb25jYXQoY2h1bmspIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDaGF0R2VuZXJhdGlvbkNodW5rKHtcbiAgICAgICAgICAgIHRleHQ6IHRoaXMudGV4dCArIGNodW5rLnRleHQsXG4gICAgICAgICAgICBnZW5lcmF0aW9uSW5mbzoge1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuZ2VuZXJhdGlvbkluZm8sXG4gICAgICAgICAgICAgICAgLi4uY2h1bmsuZ2VuZXJhdGlvbkluZm8sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLmNvbmNhdChjaHVuay5tZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIlJVTl9LRVkiLCJHZW5lcmF0aW9uQ2h1bmsiLCJjb25zdHJ1Y3RvciIsImZpZWxkcyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJ0ZXh0IiwiZ2VuZXJhdGlvbkluZm8iLCJjb25jYXQiLCJjaHVuayIsIkNoYXRHZW5lcmF0aW9uQ2h1bmsiLCJtZXNzYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/outputs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/prompt_values.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/prompt_values.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePromptValue: () => (/* binding */ BasePromptValue),\n/* harmony export */   ChatPromptValue: () => (/* binding */ ChatPromptValue),\n/* harmony export */   ImagePromptValue: () => (/* binding */ ImagePromptValue),\n/* harmony export */   StringPromptValue: () => (/* binding */ StringPromptValue)\n/* harmony export */ });\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./load/serializable.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/load/serializable.js\");\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./messages/index.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/index.js\");\n\n\n/**\n * Base PromptValue class. All prompt values should extend this class.\n */ class BasePromptValue extends _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable {\n}\n/**\n * Represents a prompt value as a string. It extends the BasePromptValue\n * class and overrides the toString and toChatMessages methods.\n */ class StringPromptValue extends BasePromptValue {\n    static lc_name() {\n        return \"StringPromptValue\";\n    }\n    constructor(value){\n        super({\n            value\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"prompt_values\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.value = value;\n    }\n    toString() {\n        return this.value;\n    }\n    toChatMessages() {\n        return [\n            new _messages_index_js__WEBPACK_IMPORTED_MODULE_1__.HumanMessage(this.value)\n        ];\n    }\n}\n/**\n * Class that represents a chat prompt value. It extends the\n * BasePromptValue and includes an array of BaseMessage instances.\n */ class ChatPromptValue extends BasePromptValue {\n    static lc_name() {\n        return \"ChatPromptValue\";\n    }\n    constructor(fields){\n        if (Array.isArray(fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                messages: fields\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"prompt_values\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"messages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.messages = fields.messages;\n    }\n    toString() {\n        return (0,_messages_index_js__WEBPACK_IMPORTED_MODULE_1__.getBufferString)(this.messages);\n    }\n    toChatMessages() {\n        return this.messages;\n    }\n}\n/**\n * Class that represents an image prompt value. It extends the\n * BasePromptValue and includes an ImageURL instance.\n */ class ImagePromptValue extends BasePromptValue {\n    static lc_name() {\n        return \"ImagePromptValue\";\n    }\n    constructor(fields){\n        if (!(\"imageUrl\" in fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                imageUrl: fields\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"prompt_values\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"imageUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** @ignore */ Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.imageUrl = fields.imageUrl;\n    }\n    toString() {\n        return this.imageUrl.url;\n    }\n    toChatMessages() {\n        return [\n            new _messages_index_js__WEBPACK_IMPORTED_MODULE_1__.HumanMessage({\n                content: [\n                    {\n                        type: \"image_url\",\n                        image_url: {\n                            detail: this.imageUrl.detail,\n                            url: this.imageUrl.url\n                        }\n                    }\n                ]\n            })\n        ];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/prompt_values.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/runnables/base.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/runnables/base.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Runnable: () => (/* binding */ Runnable),\n/* harmony export */   RunnableAssign: () => (/* binding */ RunnableAssign),\n/* harmony export */   RunnableBinding: () => (/* binding */ RunnableBinding),\n/* harmony export */   RunnableEach: () => (/* binding */ RunnableEach),\n/* harmony export */   RunnableLambda: () => (/* binding */ RunnableLambda),\n/* harmony export */   RunnableMap: () => (/* binding */ RunnableMap),\n/* harmony export */   RunnableParallel: () => (/* binding */ RunnableParallel),\n/* harmony export */   RunnablePick: () => (/* binding */ RunnablePick),\n/* harmony export */   RunnableRetry: () => (/* binding */ RunnableRetry),\n/* harmony export */   RunnableSequence: () => (/* binding */ RunnableSequence),\n/* harmony export */   RunnableWithFallbacks: () => (/* binding */ RunnableWithFallbacks),\n/* harmony export */   _coerceToDict: () => (/* binding */ _coerceToDict),\n/* harmony export */   _coerceToRunnable: () => (/* binding */ _coerceToRunnable)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var p_retry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-retry */ \"(rsc)/./node_modules/p-retry/index.js\");\n/* harmony import */ var _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../callbacks/manager.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/callbacks/manager.js\");\n/* harmony import */ var _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tracers/log_stream.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/log_stream.js\");\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../load/serializable.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/load/serializable.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/stream.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/stream.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./config.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/runnables/config.js\");\n/* harmony import */ var _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/async_caller.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/async_caller.js\");\n/* harmony import */ var _tracers_root_listener_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../tracers/root_listener.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/root_listener.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/runnables/utils.js\");\n/* harmony import */ var _singletons_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../singletons/index.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/singletons/index.js\");\n/* harmony import */ var _graph_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./graph.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/runnables/graph.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _coerceToDict(value, defaultKey) {\n    return value && !Array.isArray(value) && // eslint-disable-next-line no-instanceof/no-instanceof\n    !(value instanceof Date) && typeof value === \"object\" ? value : {\n        [defaultKey]: value\n    };\n}\n/**\n * A Runnable is a generic unit of work that can be invoked, batched, streamed, and/or\n * transformed.\n */ class Runnable extends _load_serializable_js__WEBPACK_IMPORTED_MODULE_3__.Serializable {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_runnable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    getName(suffix) {\n        const name = // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.name ?? this.constructor.lc_name() ?? this.constructor.name;\n        return suffix ? `${name}${suffix}` : name;\n    }\n    /**\n     * Bind arguments to a Runnable, returning a new Runnable.\n     * @param kwargs\n     * @returns A new RunnableBinding that, when invoked, will apply the bound args.\n     */ bind(kwargs) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableBinding({\n            bound: this,\n            kwargs,\n            config: {}\n        });\n    }\n    /**\n     * Return a new Runnable that maps a list of inputs to a list of outputs,\n     * by calling invoke() with each input.\n     */ map() {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableEach({\n            bound: this\n        });\n    }\n    /**\n     * Add retry logic to an existing runnable.\n     * @param kwargs\n     * @returns A new RunnableRetry that, when invoked, will retry according to the parameters.\n     */ withRetry(fields) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableRetry({\n            bound: this,\n            kwargs: {},\n            config: {},\n            maxAttemptNumber: fields?.stopAfterAttempt,\n            ...fields\n        });\n    }\n    /**\n     * Bind config to a Runnable, returning a new Runnable.\n     * @param config New configuration parameters to attach to the new runnable.\n     * @returns A new RunnableBinding with a config matching what's passed.\n     */ withConfig(config) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableBinding({\n            bound: this,\n            config,\n            kwargs: {}\n        });\n    }\n    /**\n     * Create a new runnable from the current one that will try invoking\n     * other passed fallback runnables if the initial invocation fails.\n     * @param fields.fallbacks Other runnables to call if the runnable errors.\n     * @returns A new RunnableWithFallbacks.\n     */ withFallbacks(fields) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableWithFallbacks({\n            runnable: this,\n            fallbacks: fields.fallbacks\n        });\n    }\n    _getOptionsList(options, length = 0) {\n        if (Array.isArray(options) && options.length !== length) {\n            throw new Error(`Passed \"options\" must be an array with the same length as the inputs, but got ${options.length} options for ${length} inputs`);\n        }\n        if (Array.isArray(options)) {\n            return options.map(_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig);\n        }\n        if (length > 1 && !Array.isArray(options) && options.runId) {\n            console.warn(\"Provided runId will be used only for the first element of the batch.\");\n            const subsequent = Object.fromEntries(Object.entries(options).filter(([key])=>key !== \"runId\"));\n            return Array.from({\n                length\n            }, (_, i)=>(0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(i === 0 ? options : subsequent));\n        }\n        return Array.from({\n            length\n        }, ()=>(0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options));\n    }\n    async batch(inputs, options, batchOptions) {\n        const configList = this._getOptionsList(options ?? {}, inputs.length);\n        const maxConcurrency = configList[0]?.maxConcurrency ?? batchOptions?.maxConcurrency;\n        const caller = new _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_6__.AsyncCaller({\n            maxConcurrency,\n            onFailedAttempt: (e)=>{\n                throw e;\n            }\n        });\n        const batchCalls = inputs.map((input, i)=>caller.call(async ()=>{\n                try {\n                    const result = await this.invoke(input, configList[i]);\n                    return result;\n                } catch (e) {\n                    if (batchOptions?.returnExceptions) {\n                        return e;\n                    }\n                    throw e;\n                }\n            }));\n        return Promise.all(batchCalls);\n    }\n    /**\n     * Default streaming implementation.\n     * Subclasses should override this method if they support streaming output.\n     * @param input\n     * @param options\n     */ async *_streamIterator(input, options) {\n        yield this.invoke(input, options);\n    }\n    /**\n     * Stream output in chunks.\n     * @param input\n     * @param options\n     * @returns A readable stream that is also an iterable.\n     */ async stream(input, options) {\n        // Buffer the first streamed chunk to allow for initial errors\n        // to surface immediately.\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.AsyncGeneratorWithSetup(this._streamIterator(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options)));\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n    _separateRunnableConfigFromCallOptions(options) {\n        let runnableConfig;\n        if (options === undefined) {\n            runnableConfig = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options);\n        } else {\n            runnableConfig = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)({\n                callbacks: options.callbacks,\n                tags: options.tags,\n                metadata: options.metadata,\n                runName: options.runName,\n                configurable: options.configurable,\n                recursionLimit: options.recursionLimit,\n                maxConcurrency: options.maxConcurrency,\n                runId: options.runId\n            });\n        }\n        const callOptions = {\n            ...options\n        };\n        delete callOptions.callbacks;\n        delete callOptions.tags;\n        delete callOptions.metadata;\n        delete callOptions.runName;\n        delete callOptions.configurable;\n        delete callOptions.recursionLimit;\n        delete callOptions.maxConcurrency;\n        delete callOptions.runId;\n        return [\n            runnableConfig,\n            callOptions\n        ];\n    }\n    async _callWithConfig(func, input, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig)(config);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), config.runId, config?.runType, undefined, undefined, config?.runName ?? this.getName());\n        delete config.runId;\n        let output;\n        try {\n            output = await func.call(this, input, config, runManager);\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(output, \"output\"));\n        return output;\n    }\n    /**\n     * Internal method that handles batching and configuration for a runnable\n     * It takes a function, input values, and optional configuration, and\n     * returns a promise that resolves to the output values.\n     * @param func The function to be executed for each input value.\n     * @param input The input values to be processed.\n     * @param config Optional configuration for the function execution.\n     * @returns A promise that resolves to the output values.\n     */ async _batchWithConfig(func, inputs, options, batchOptions) {\n        const optionsList = this._getOptionsList(options ?? {}, inputs.length);\n        const callbackManagers = await Promise.all(optionsList.map(_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig));\n        const runManagers = await Promise.all(callbackManagers.map(async (callbackManager, i)=>{\n            const handleStartRes = await callbackManager?.handleChainStart(this.toJSON(), _coerceToDict(inputs[i], \"input\"), optionsList[i].runId, optionsList[i].runType, undefined, undefined, optionsList[i].runName ?? this.getName());\n            delete optionsList[i].runId;\n            return handleStartRes;\n        }));\n        let outputs;\n        try {\n            outputs = await func.call(this, inputs, optionsList, runManagers, batchOptions);\n        } catch (e) {\n            await Promise.all(runManagers.map((runManager)=>runManager?.handleChainError(e)));\n            throw e;\n        }\n        await Promise.all(runManagers.map((runManager)=>runManager?.handleChainEnd(_coerceToDict(outputs, \"output\"))));\n        return outputs;\n    }\n    /**\n     * Helper method to transform an Iterator of Input values into an Iterator of\n     * Output values, with callbacks.\n     * Use this to implement `stream()` or `transform()` in Runnable subclasses.\n     */ async *_transformStreamWithConfig(inputGenerator, transformer, options) {\n        let finalInput;\n        let finalInputSupported = true;\n        let finalOutput;\n        let finalOutputSupported = true;\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig)(config);\n        async function* wrapInputForTracing() {\n            for await (const chunk of inputGenerator){\n                if (finalInputSupported) {\n                    if (finalInput === undefined) {\n                        finalInput = chunk;\n                    } else {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            finalInput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.concat)(finalInput, chunk);\n                        } catch  {\n                            finalInput = undefined;\n                            finalInputSupported = false;\n                        }\n                    }\n                }\n                yield chunk;\n            }\n        }\n        let runManager;\n        try {\n            const pipe = await (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.pipeGeneratorWithSetup)(transformer.bind(this), wrapInputForTracing(), async ()=>callbackManager_?.handleChainStart(this.toJSON(), {\n                    input: \"\"\n                }, config.runId, config.runType, undefined, undefined, config.runName ?? this.getName()), config);\n            delete config.runId;\n            runManager = pipe.setup;\n            const isLogStreamHandler = (handler)=>handler.name === \"log_stream_tracer\";\n            const streamLogHandler = runManager?.handlers.find(isLogStreamHandler);\n            let iterator = pipe.output;\n            if (streamLogHandler !== undefined && runManager !== undefined) {\n                iterator = await streamLogHandler.tapOutputIterable(runManager.runId, pipe.output);\n            }\n            for await (const chunk of iterator){\n                yield chunk;\n                if (finalOutputSupported) {\n                    if (finalOutput === undefined) {\n                        finalOutput = chunk;\n                    } else {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            finalOutput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.concat)(finalOutput, chunk);\n                        } catch  {\n                            finalOutput = undefined;\n                            finalOutputSupported = false;\n                        }\n                    }\n                }\n            }\n        } catch (e) {\n            await runManager?.handleChainError(e, undefined, undefined, undefined, {\n                inputs: _coerceToDict(finalInput, \"input\")\n            });\n            throw e;\n        }\n        await runManager?.handleChainEnd(finalOutput ?? {}, undefined, undefined, undefined, {\n            inputs: _coerceToDict(finalInput, \"input\")\n        });\n    }\n    getGraph(_) {\n        const graph = new _graph_js__WEBPACK_IMPORTED_MODULE_10__.Graph();\n        // TODO: Add input schema for runnables\n        const inputNode = graph.addNode({\n            name: `${this.getName()}Input`,\n            schema: zod__WEBPACK_IMPORTED_MODULE_11__.z.any()\n        });\n        const runnableNode = graph.addNode(this);\n        // TODO: Add output schemas for runnables\n        const outputNode = graph.addNode({\n            name: `${this.getName()}Output`,\n            schema: zod__WEBPACK_IMPORTED_MODULE_11__.z.any()\n        });\n        graph.addEdge(inputNode, runnableNode);\n        graph.addEdge(runnableNode, outputNode);\n        return graph;\n    }\n    /**\n     * Create a new runnable sequence that runs each individual runnable in series,\n     * piping the output of one runnable into another runnable or runnable-like.\n     * @param coerceable A runnable, function, or object whose values are functions or runnables.\n     * @returns A new runnable sequence.\n     */ pipe(coerceable) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableSequence({\n            first: this,\n            last: _coerceToRunnable(coerceable)\n        });\n    }\n    /**\n     * Pick keys from the dict output of this runnable. Returns a new runnable.\n     */ pick(keys) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return this.pipe(new RunnablePick(keys));\n    }\n    /**\n     * Assigns new fields to the dict output of this runnable. Returns a new runnable.\n     */ assign(mapping) {\n        return this.pipe(// eslint-disable-next-line @typescript-eslint/no-use-before-define\n        new RunnableAssign(// eslint-disable-next-line @typescript-eslint/no-use-before-define\n        new RunnableMap({\n            steps: mapping\n        })));\n    }\n    /**\n     * Default implementation of transform, which buffers input and then calls stream.\n     * Subclasses should override this method if they can start producing output while\n     * input is still being generated.\n     * @param generator\n     * @param options\n     */ async *transform(generator, options) {\n        let finalChunk;\n        for await (const chunk of generator){\n            if (finalChunk === undefined) {\n                finalChunk = chunk;\n            } else {\n                // Make a best effort to gather, for any type that supports concat.\n                // This method should throw an error if gathering fails.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                finalChunk = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.concat)(finalChunk, chunk);\n            }\n        }\n        yield* this._streamIterator(finalChunk, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options));\n    }\n    /**\n     * Stream all output from a runnable, as reported to the callback system.\n     * This includes all inner runs of LLMs, Retrievers, Tools, etc.\n     * Output is streamed as Log objects, which include a list of\n     * jsonpatch ops that describe how the state of the run has changed in each\n     * step, and the final state of the run.\n     * The jsonpatch ops can be applied in order to construct state.\n     * @param input\n     * @param options\n     * @param streamOptions\n     */ async *streamLog(input, options, streamOptions) {\n        const logStreamCallbackHandler = new _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__.LogStreamCallbackHandler({\n            ...streamOptions,\n            autoClose: false,\n            _schemaFormat: \"original\"\n        });\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options);\n        yield* this._streamLog(input, logStreamCallbackHandler, config);\n    }\n    async *_streamLog(input, logStreamCallbackHandler, config) {\n        const { callbacks } = config;\n        if (callbacks === undefined) {\n            // eslint-disable-next-line no-param-reassign\n            config.callbacks = [\n                logStreamCallbackHandler\n            ];\n        } else if (Array.isArray(callbacks)) {\n            // eslint-disable-next-line no-param-reassign\n            config.callbacks = callbacks.concat([\n                logStreamCallbackHandler\n            ]);\n        } else {\n            const copiedCallbacks = callbacks.copy();\n            copiedCallbacks.inheritableHandlers.push(logStreamCallbackHandler);\n            // eslint-disable-next-line no-param-reassign\n            config.callbacks = copiedCallbacks;\n        }\n        const runnableStreamPromise = this.stream(input, config);\n        async function consumeRunnableStream() {\n            try {\n                const runnableStream = await runnableStreamPromise;\n                for await (const chunk of runnableStream){\n                    const patch = new _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__.RunLogPatch({\n                        ops: [\n                            {\n                                op: \"add\",\n                                path: \"/streamed_output/-\",\n                                value: chunk\n                            }\n                        ]\n                    });\n                    await logStreamCallbackHandler.writer.write(patch);\n                }\n            } finally{\n                await logStreamCallbackHandler.writer.close();\n            }\n        }\n        const runnableStreamConsumePromise = consumeRunnableStream();\n        try {\n            for await (const log of logStreamCallbackHandler){\n                yield log;\n            }\n        } finally{\n            await runnableStreamConsumePromise;\n        }\n    }\n    /**\n     * Generate a stream of events emitted by the internal steps of the runnable.\n     *\n     * Use to create an iterator over StreamEvents that provide real-time information\n     * about the progress of the runnable, including StreamEvents from intermediate\n     * results.\n     *\n     * A StreamEvent is a dictionary with the following schema:\n     *\n     * - `event`: string - Event names are of the format: on_[runnable_type]_(start|stream|end).\n     * - `name`: string - The name of the runnable that generated the event.\n     * - `run_id`: string - Randomly generated ID associated with the given execution of\n     *   the runnable that emitted the event. A child runnable that gets invoked as part of the execution of a\n     *   parent runnable is assigned its own unique ID.\n     * - `tags`: string[] - The tags of the runnable that generated the event.\n     * - `metadata`: Record<string, any> - The metadata of the runnable that generated the event.\n     * - `data`: Record<string, any>\n     *\n     * Below is a table that illustrates some events that might be emitted by various\n     * chains. Metadata fields have been omitted from the table for brevity.\n     * Chain definitions have been included after the table.\n     *\n     * | event                | name             | chunk                              | input                                         | output                                          |\n     * |----------------------|------------------|------------------------------------|-----------------------------------------------|-------------------------------------------------|\n     * | on_llm_start         | [model name]     |                                    | {'input': 'hello'}                            |                                                 |\n     * | on_llm_stream        | [model name]     | 'Hello' OR AIMessageChunk(\"hello\") |                                               |                                                 |\n     * | on_llm_end           | [model name]     |                                    | 'Hello human!'                                |\n     * | on_chain_start       | format_docs      |                                    |                                               |                                                 |\n     * | on_chain_stream      | format_docs      | \"hello world!, goodbye world!\"     |                                               |                                                 |\n     * | on_chain_end         | format_docs      |                                    | [Document(...)]                               | \"hello world!, goodbye world!\"                  |\n     * | on_tool_start        | some_tool        |                                    | {\"x\": 1, \"y\": \"2\"}                            |                                                 |\n     * | on_tool_stream       | some_tool        |   {\"x\": 1, \"y\": \"2\"}               |                                               |                                                 |\n     * | on_tool_end          | some_tool        |                                    |                                               | {\"x\": 1, \"y\": \"2\"}                              |\n     * | on_retriever_start   | [retriever name] |                                    | {\"query\": \"hello\"}                            |                                                 |\n     * | on_retriever_chunk   | [retriever name] |  {documents: [...]}                |                                               |                                                 |\n     * | on_retriever_end     | [retriever name] |                                    | {\"query\": \"hello\"}                            | {documents: [...]}                              |\n     * | on_prompt_start      | [template_name]  |                                    | {\"question\": \"hello\"}                         |                                                 |\n     * | on_prompt_end        | [template_name]  |                                    | {\"question\": \"hello\"}                         | ChatPromptValue(messages: [SystemMessage, ...]) |\n     */ async *streamEvents(input, options, streamOptions) {\n        if (options.version !== \"v1\") {\n            throw new Error(`Only version \"v1\" of the events schema is currently supported.`);\n        }\n        let runLog;\n        let hasEncounteredStartEvent = false;\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options);\n        const rootTags = config.tags ?? [];\n        const rootMetadata = config.metadata ?? {};\n        const rootName = config.runName ?? this.getName();\n        const logStreamCallbackHandler = new _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__.LogStreamCallbackHandler({\n            ...streamOptions,\n            autoClose: false,\n            _schemaFormat: \"streaming_events\"\n        });\n        const rootEventFilter = new _utils_js__WEBPACK_IMPORTED_MODULE_8__._RootEventFilter({\n            ...streamOptions\n        });\n        const logStream = this._streamLog(input, logStreamCallbackHandler, config);\n        for await (const log of logStream){\n            if (!runLog) {\n                runLog = _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__.RunLog.fromRunLogPatch(log);\n            } else {\n                runLog = runLog.concat(log);\n            }\n            if (runLog.state === undefined) {\n                throw new Error(`Internal error: \"streamEvents\" state is missing. Please open a bug report.`);\n            }\n            // Yield the start event for the root runnable if it hasn't been seen.\n            // The root run is never filtered out\n            if (!hasEncounteredStartEvent) {\n                hasEncounteredStartEvent = true;\n                const state = {\n                    ...runLog.state\n                };\n                const event = {\n                    run_id: state.id,\n                    event: `on_${state.type}_start`,\n                    name: rootName,\n                    tags: rootTags,\n                    metadata: rootMetadata,\n                    data: {\n                        input\n                    }\n                };\n                if (rootEventFilter.includeEvent(event, state.type)) {\n                    yield event;\n                }\n            }\n            const paths = log.ops.filter((op)=>op.path.startsWith(\"/logs/\")).map((op)=>op.path.split(\"/\")[2]);\n            const dedupedPaths = [\n                ...new Set(paths)\n            ];\n            for (const path of dedupedPaths){\n                let eventType;\n                let data = {};\n                const logEntry = runLog.state.logs[path];\n                if (logEntry.end_time === undefined) {\n                    if (logEntry.streamed_output.length > 0) {\n                        eventType = \"stream\";\n                    } else {\n                        eventType = \"start\";\n                    }\n                } else {\n                    eventType = \"end\";\n                }\n                if (eventType === \"start\") {\n                    // Include the inputs with the start event if they are available.\n                    // Usually they will NOT be available for components that operate\n                    // on streams, since those components stream the input and\n                    // don't know its final value until the end of the stream.\n                    if (logEntry.inputs !== undefined) {\n                        data.input = logEntry.inputs;\n                    }\n                } else if (eventType === \"end\") {\n                    if (logEntry.inputs !== undefined) {\n                        data.input = logEntry.inputs;\n                    }\n                    data.output = logEntry.final_output;\n                } else if (eventType === \"stream\") {\n                    const chunkCount = logEntry.streamed_output.length;\n                    if (chunkCount !== 1) {\n                        throw new Error(`Expected exactly one chunk of streamed output, got ${chunkCount} instead. Encountered in: \"${logEntry.name}\"`);\n                    }\n                    data = {\n                        chunk: logEntry.streamed_output[0]\n                    };\n                    // Clean up the stream, we don't need it anymore.\n                    // And this avoids duplicates as well!\n                    logEntry.streamed_output = [];\n                }\n                yield {\n                    event: `on_${logEntry.type}_${eventType}`,\n                    name: logEntry.name,\n                    run_id: logEntry.id,\n                    tags: logEntry.tags,\n                    metadata: logEntry.metadata,\n                    data\n                };\n            }\n            // Finally, we take care of the streaming output from the root chain\n            // if there is any.\n            const { state } = runLog;\n            if (state.streamed_output.length > 0) {\n                const chunkCount = state.streamed_output.length;\n                if (chunkCount !== 1) {\n                    throw new Error(`Expected exactly one chunk of streamed output, got ${chunkCount} instead. Encountered in: \"${state.name}\"`);\n                }\n                const data = {\n                    chunk: state.streamed_output[0]\n                };\n                // Clean up the stream, we don't need it anymore.\n                state.streamed_output = [];\n                const event = {\n                    event: `on_${state.type}_stream`,\n                    run_id: state.id,\n                    tags: rootTags,\n                    metadata: rootMetadata,\n                    name: rootName,\n                    data\n                };\n                if (rootEventFilter.includeEvent(event, state.type)) {\n                    yield event;\n                }\n            }\n        }\n        const state = runLog?.state;\n        if (state !== undefined) {\n            // Finally, yield the end event for the root runnable.\n            const event = {\n                event: `on_${state.type}_end`,\n                name: rootName,\n                run_id: state.id,\n                tags: rootTags,\n                metadata: rootMetadata,\n                data: {\n                    output: state.final_output\n                }\n            };\n            if (rootEventFilter.includeEvent(event, state.type)) yield event;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static isRunnable(thing) {\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_8__.isRunnableInterface)(thing);\n    }\n    /**\n     * Bind lifecycle listeners to a Runnable, returning a new Runnable.\n     * The Run object contains information about the run, including its id,\n     * type, input, output, error, startTime, endTime, and any tags or metadata\n     * added to the run.\n     *\n     * @param {Object} params - The object containing the callback functions.\n     * @param {(run: Run) => void} params.onStart - Called before the runnable starts running, with the Run object.\n     * @param {(run: Run) => void} params.onEnd - Called after the runnable finishes running, with the Run object.\n     * @param {(run: Run) => void} params.onError - Called if the runnable throws an error, with the Run object.\n     */ withListeners({ onStart, onEnd, onError }) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableBinding({\n            bound: this,\n            config: {},\n            configFactories: [\n                (config)=>({\n                        callbacks: [\n                            new _tracers_root_listener_js__WEBPACK_IMPORTED_MODULE_7__.RootListenersTracer({\n                                config,\n                                onStart,\n                                onEnd,\n                                onError\n                            })\n                        ]\n                    })\n            ]\n        });\n    }\n}\n/**\n * A runnable that delegates calls to another runnable with a set of kwargs.\n */ class RunnableBinding extends Runnable {\n    static lc_name() {\n        return \"RunnableBinding\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"bound\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"config\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"configFactories\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.bound = fields.bound;\n        this.kwargs = fields.kwargs;\n        this.config = fields.config;\n        this.configFactories = fields.configFactories;\n    }\n    getName(suffix) {\n        return this.bound.getName(suffix);\n    }\n    async _mergeConfig(...options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.mergeConfigs)(this.config, ...options);\n        return (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.mergeConfigs)(config, ...this.configFactories ? await Promise.all(this.configFactories.map(async (configFactory)=>await configFactory(config))) : []);\n    }\n    bind(kwargs) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return new this.constructor({\n            bound: this.bound,\n            kwargs: {\n                ...this.kwargs,\n                ...kwargs\n            },\n            config: this.config\n        });\n    }\n    withConfig(config) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return new this.constructor({\n            bound: this.bound,\n            kwargs: this.kwargs,\n            config: {\n                ...this.config,\n                ...config\n            }\n        });\n    }\n    withRetry(fields) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return new this.constructor({\n            bound: this.bound.withRetry(fields),\n            kwargs: this.kwargs,\n            config: this.config\n        });\n    }\n    async invoke(input, options) {\n        return this.bound.invoke(input, await this._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options), this.kwargs));\n    }\n    async batch(inputs, options, batchOptions) {\n        const mergedOptions = Array.isArray(options) ? await Promise.all(options.map(async (individualOption)=>this._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(individualOption), this.kwargs))) : await this._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options), this.kwargs);\n        return this.bound.batch(inputs, mergedOptions, batchOptions);\n    }\n    async *_streamIterator(input, options) {\n        yield* this.bound._streamIterator(input, await this._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options), this.kwargs));\n    }\n    async stream(input, options) {\n        return this.bound.stream(input, await this._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options), this.kwargs));\n    }\n    async *transform(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    generator, options) {\n        yield* this.bound.transform(generator, await this._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options), this.kwargs));\n    }\n    async *streamEvents(input, options, streamOptions) {\n        yield* this.bound.streamEvents(input, {\n            ...await this._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options), this.kwargs),\n            version: options.version\n        }, streamOptions);\n    }\n    static isRunnableBinding(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    thing) {\n        return thing.bound && Runnable.isRunnable(thing.bound);\n    }\n    /**\n     * Bind lifecycle listeners to a Runnable, returning a new Runnable.\n     * The Run object contains information about the run, including its id,\n     * type, input, output, error, startTime, endTime, and any tags or metadata\n     * added to the run.\n     *\n     * @param {Object} params - The object containing the callback functions.\n     * @param {(run: Run) => void} params.onStart - Called before the runnable starts running, with the Run object.\n     * @param {(run: Run) => void} params.onEnd - Called after the runnable finishes running, with the Run object.\n     * @param {(run: Run) => void} params.onError - Called if the runnable throws an error, with the Run object.\n     */ withListeners({ onStart, onEnd, onError }) {\n        return new RunnableBinding({\n            bound: this.bound,\n            kwargs: this.kwargs,\n            config: this.config,\n            configFactories: [\n                (config)=>({\n                        callbacks: [\n                            new _tracers_root_listener_js__WEBPACK_IMPORTED_MODULE_7__.RootListenersTracer({\n                                config,\n                                onStart,\n                                onEnd,\n                                onError\n                            })\n                        ]\n                    })\n            ]\n        });\n    }\n}\n/**\n * A runnable that delegates calls to another runnable\n * with each element of the input sequence.\n */ class RunnableEach extends Runnable {\n    static lc_name() {\n        return \"RunnableEach\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"bound\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.bound = fields.bound;\n    }\n    /**\n     * Binds the runnable with the specified arguments.\n     * @param kwargs The arguments to bind the runnable with.\n     * @returns A new instance of the `RunnableEach` class that is bound with the specified arguments.\n     */ bind(kwargs) {\n        return new RunnableEach({\n            bound: this.bound.bind(kwargs)\n        });\n    }\n    /**\n     * Invokes the runnable with the specified input and configuration.\n     * @param input The input to invoke the runnable with.\n     * @param config The configuration to invoke the runnable with.\n     * @returns A promise that resolves to the output of the runnable.\n     */ async invoke(inputs, config) {\n        return this._callWithConfig(this._invoke, inputs, config);\n    }\n    /**\n     * A helper method that is used to invoke the runnable with the specified input and configuration.\n     * @param input The input to invoke the runnable with.\n     * @param config The configuration to invoke the runnable with.\n     * @returns A promise that resolves to the output of the runnable.\n     */ async _invoke(inputs, config, runManager) {\n        return this.bound.batch(inputs, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n            callbacks: runManager?.getChild()\n        }));\n    }\n    /**\n     * Bind lifecycle listeners to a Runnable, returning a new Runnable.\n     * The Run object contains information about the run, including its id,\n     * type, input, output, error, startTime, endTime, and any tags or metadata\n     * added to the run.\n     *\n     * @param {Object} params - The object containing the callback functions.\n     * @param {(run: Run) => void} params.onStart - Called before the runnable starts running, with the Run object.\n     * @param {(run: Run) => void} params.onEnd - Called after the runnable finishes running, with the Run object.\n     * @param {(run: Run) => void} params.onError - Called if the runnable throws an error, with the Run object.\n     */ withListeners({ onStart, onEnd, onError }) {\n        return new RunnableEach({\n            bound: this.bound.withListeners({\n                onStart,\n                onEnd,\n                onError\n            })\n        });\n    }\n}\n/**\n * Base class for runnables that can be retried a\n * specified number of times.\n */ class RunnableRetry extends RunnableBinding {\n    static lc_name() {\n        return \"RunnableRetry\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"maxAttemptNumber\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 3\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"onFailedAttempt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: ()=>{}\n        });\n        this.maxAttemptNumber = fields.maxAttemptNumber ?? this.maxAttemptNumber;\n        this.onFailedAttempt = fields.onFailedAttempt ?? this.onFailedAttempt;\n    }\n    _patchConfigForRetry(attempt, config, runManager) {\n        const tag = attempt > 1 ? `retry:attempt:${attempt}` : undefined;\n        return (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n            callbacks: runManager?.getChild(tag)\n        });\n    }\n    async _invoke(input, config, runManager) {\n        return p_retry__WEBPACK_IMPORTED_MODULE_0__((attemptNumber)=>super.invoke(input, this._patchConfigForRetry(attemptNumber, config, runManager)), {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            onFailedAttempt: (error)=>this.onFailedAttempt(error, input),\n            retries: Math.max(this.maxAttemptNumber - 1, 0),\n            randomize: true\n        });\n    }\n    /**\n     * Method that invokes the runnable with the specified input, run manager,\n     * and config. It handles the retry logic by catching any errors and\n     * recursively invoking itself with the updated config for the next retry\n     * attempt.\n     * @param input The input for the runnable.\n     * @param runManager The run manager for the runnable.\n     * @param config The config for the runnable.\n     * @returns A promise that resolves to the output of the runnable.\n     */ async invoke(input, config) {\n        return this._callWithConfig(this._invoke, input, config);\n    }\n    async _batch(inputs, configs, runManagers, batchOptions) {\n        const resultsMap = {};\n        try {\n            await p_retry__WEBPACK_IMPORTED_MODULE_0__(async (attemptNumber)=>{\n                const remainingIndexes = inputs.map((_, i)=>i).filter((i)=>resultsMap[i.toString()] === undefined || // eslint-disable-next-line no-instanceof/no-instanceof\n                    resultsMap[i.toString()] instanceof Error);\n                const remainingInputs = remainingIndexes.map((i)=>inputs[i]);\n                const patchedConfigs = remainingIndexes.map((i)=>this._patchConfigForRetry(attemptNumber, configs?.[i], runManagers?.[i]));\n                const results = await super.batch(remainingInputs, patchedConfigs, {\n                    ...batchOptions,\n                    returnExceptions: true\n                });\n                let firstException;\n                for(let i = 0; i < results.length; i += 1){\n                    const result = results[i];\n                    const resultMapIndex = remainingIndexes[i];\n                    // eslint-disable-next-line no-instanceof/no-instanceof\n                    if (result instanceof Error) {\n                        if (firstException === undefined) {\n                            firstException = result;\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            firstException.input = remainingInputs[i];\n                        }\n                    }\n                    resultsMap[resultMapIndex.toString()] = result;\n                }\n                if (firstException) {\n                    throw firstException;\n                }\n                return results;\n            }, {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                onFailedAttempt: (error)=>this.onFailedAttempt(error, error.input),\n                retries: Math.max(this.maxAttemptNumber - 1, 0),\n                randomize: true\n            });\n        } catch (e) {\n            if (batchOptions?.returnExceptions !== true) {\n                throw e;\n            }\n        }\n        return Object.keys(resultsMap).sort((a, b)=>parseInt(a, 10) - parseInt(b, 10)).map((key)=>resultsMap[parseInt(key, 10)]);\n    }\n    async batch(inputs, options, batchOptions) {\n        return this._batchWithConfig(this._batch.bind(this), inputs, options, batchOptions);\n    }\n}\n/**\n * A sequence of runnables, where the output of each is the input of the next.\n * @example\n * ```typescript\n * const promptTemplate = PromptTemplate.fromTemplate(\n *   \"Tell me a joke about {topic}\",\n * );\n * const chain = RunnableSequence.from([promptTemplate, new ChatOpenAI({})]);\n * const result = await chain.invoke({ topic: \"bears\" });\n * ```\n */ class RunnableSequence extends Runnable {\n    static lc_name() {\n        return \"RunnableSequence\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"first\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"middle\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"last\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        this.first = fields.first;\n        this.middle = fields.middle ?? this.middle;\n        this.last = fields.last;\n        this.name = fields.name;\n    }\n    get steps() {\n        return [\n            this.first,\n            ...this.middle,\n            this.last\n        ];\n    }\n    async invoke(input, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig)(config);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), config.runId, undefined, undefined, undefined, config?.runName);\n        delete config.runId;\n        let nextStepInput = input;\n        let finalOutput;\n        try {\n            const initialSteps = [\n                this.first,\n                ...this.middle\n            ];\n            for(let i = 0; i < initialSteps.length; i += 1){\n                const step = initialSteps[i];\n                nextStepInput = await step.invoke(nextStepInput, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n                    callbacks: runManager?.getChild(`seq:step:${i + 1}`)\n                }));\n            }\n            // TypeScript can't detect that the last output of the sequence returns RunOutput, so call it out of the loop here\n            finalOutput = await this.last.invoke(nextStepInput, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n                callbacks: runManager?.getChild(`seq:step:${this.steps.length}`)\n            }));\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(finalOutput, \"output\"));\n        return finalOutput;\n    }\n    async batch(inputs, options, batchOptions) {\n        const configList = this._getOptionsList(options ?? {}, inputs.length);\n        const callbackManagers = await Promise.all(configList.map(_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig));\n        const runManagers = await Promise.all(callbackManagers.map(async (callbackManager, i)=>{\n            const handleStartRes = await callbackManager?.handleChainStart(this.toJSON(), _coerceToDict(inputs[i], \"input\"), configList[i].runId, undefined, undefined, undefined, configList[i].runName);\n            delete configList[i].runId;\n            return handleStartRes;\n        }));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let nextStepInputs = inputs;\n        try {\n            for(let i = 0; i < this.steps.length; i += 1){\n                const step = this.steps[i];\n                nextStepInputs = await step.batch(nextStepInputs, runManagers.map((runManager, j)=>{\n                    const childRunManager = runManager?.getChild(`seq:step:${i + 1}`);\n                    return (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(configList[j], {\n                        callbacks: childRunManager\n                    });\n                }), batchOptions);\n            }\n        } catch (e) {\n            await Promise.all(runManagers.map((runManager)=>runManager?.handleChainError(e)));\n            throw e;\n        }\n        await Promise.all(runManagers.map((runManager)=>runManager?.handleChainEnd(_coerceToDict(nextStepInputs, \"output\"))));\n        return nextStepInputs;\n    }\n    async *_streamIterator(input, options) {\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig)(options);\n        const { runId, ...otherOptions } = options ?? {};\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), runId, undefined, undefined, undefined, otherOptions?.runName);\n        const steps = [\n            this.first,\n            ...this.middle,\n            this.last\n        ];\n        let concatSupported = true;\n        let finalOutput;\n        async function* inputGenerator() {\n            yield input;\n        }\n        try {\n            let finalGenerator = steps[0].transform(inputGenerator(), (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(otherOptions, {\n                callbacks: runManager?.getChild(`seq:step:1`)\n            }));\n            for(let i = 1; i < steps.length; i += 1){\n                const step = steps[i];\n                finalGenerator = await step.transform(finalGenerator, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(otherOptions, {\n                    callbacks: runManager?.getChild(`seq:step:${i + 1}`)\n                }));\n            }\n            for await (const chunk of finalGenerator){\n                yield chunk;\n                if (concatSupported) {\n                    if (finalOutput === undefined) {\n                        finalOutput = chunk;\n                    } else {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            finalOutput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.concat)(finalOutput, chunk);\n                        } catch (e) {\n                            finalOutput = undefined;\n                            concatSupported = false;\n                        }\n                    }\n                }\n            }\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(finalOutput, \"output\"));\n    }\n    getGraph(config) {\n        const graph = new _graph_js__WEBPACK_IMPORTED_MODULE_10__.Graph();\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let currentLastNode = null;\n        this.steps.forEach((step, index)=>{\n            const stepGraph = step.getGraph(config);\n            if (index !== 0) {\n                stepGraph.trimFirstNode();\n            }\n            if (index !== this.steps.length - 1) {\n                stepGraph.trimLastNode();\n            }\n            graph.extend(stepGraph);\n            const stepFirstNode = stepGraph.firstNode();\n            if (!stepFirstNode) {\n                throw new Error(`Runnable ${step} has no first node`);\n            }\n            if (currentLastNode) {\n                graph.addEdge(currentLastNode, stepFirstNode);\n            }\n            currentLastNode = stepGraph.lastNode();\n        });\n        return graph;\n    }\n    pipe(coerceable) {\n        if (RunnableSequence.isRunnableSequence(coerceable)) {\n            return new RunnableSequence({\n                first: this.first,\n                middle: this.middle.concat([\n                    this.last,\n                    coerceable.first,\n                    ...coerceable.middle\n                ]),\n                last: coerceable.last,\n                name: this.name ?? coerceable.name\n            });\n        } else {\n            return new RunnableSequence({\n                first: this.first,\n                middle: [\n                    ...this.middle,\n                    this.last\n                ],\n                last: _coerceToRunnable(coerceable),\n                name: this.name\n            });\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static isRunnableSequence(thing) {\n        return Array.isArray(thing.middle) && Runnable.isRunnable(thing);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static from([first, ...runnables], name) {\n        return new RunnableSequence({\n            first: _coerceToRunnable(first),\n            middle: runnables.slice(0, -1).map(_coerceToRunnable),\n            last: _coerceToRunnable(runnables[runnables.length - 1]),\n            name\n        });\n    }\n}\n/**\n * A runnable that runs a mapping of runnables in parallel,\n * and returns a mapping of their outputs.\n * @example\n * ```typescript\n * const mapChain = RunnableMap.from({\n *   joke: PromptTemplate.fromTemplate(\"Tell me a joke about {topic}\").pipe(\n *     new ChatAnthropic({}),\n *   ),\n *   poem: PromptTemplate.fromTemplate(\"write a 2-line poem about {topic}\").pipe(\n *     new ChatAnthropic({}),\n *   ),\n * });\n * const result = await mapChain.invoke({ topic: \"bear\" });\n * ```\n */ class RunnableMap extends Runnable {\n    static lc_name() {\n        return \"RunnableMap\";\n    }\n    getStepsKeys() {\n        return Object.keys(this.steps);\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"steps\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.steps = {};\n        for (const [key, value] of Object.entries(fields.steps)){\n            this.steps[key] = _coerceToRunnable(value);\n        }\n    }\n    static from(steps) {\n        return new RunnableMap({\n            steps\n        });\n    }\n    async invoke(input, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig)(config);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), {\n            input\n        }, config.runId, undefined, undefined, undefined, config?.runName);\n        delete config.runId;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const output = {};\n        try {\n            await Promise.all(Object.entries(this.steps).map(async ([key, runnable])=>{\n                output[key] = await runnable.invoke(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n                    callbacks: runManager?.getChild(`map:key:${key}`)\n                }));\n            }));\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(output);\n        return output;\n    }\n    async *_transform(generator, runManager, options) {\n        // shallow copy steps to ignore changes while iterating\n        const steps = {\n            ...this.steps\n        };\n        // each step gets a copy of the input iterator\n        const inputCopies = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.atee)(generator, Object.keys(steps).length);\n        // start the first iteration of each output iterator\n        const tasks = new Map(Object.entries(steps).map(([key, runnable], i)=>{\n            const gen = runnable.transform(inputCopies[i], (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(options, {\n                callbacks: runManager?.getChild(`map:key:${key}`)\n            }));\n            return [\n                key,\n                gen.next().then((result)=>({\n                        key,\n                        gen,\n                        result\n                    }))\n            ];\n        }));\n        // yield chunks as they become available,\n        // starting new iterations as needed,\n        // until all iterators are done\n        while(tasks.size){\n            const { key, result, gen } = await Promise.race(tasks.values());\n            tasks.delete(key);\n            if (!result.done) {\n                yield {\n                    [key]: result.value\n                };\n                tasks.set(key, gen.next().then((result)=>({\n                        key,\n                        gen,\n                        result\n                    })));\n            }\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.AsyncGeneratorWithSetup(this.transform(generator(), options));\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\n/**\n * A runnable that runs a callable.\n */ class RunnableLambda extends Runnable {\n    static lc_name() {\n        return \"RunnableLambda\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"func\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.func = fields.func;\n    }\n    static from(func) {\n        return new RunnableLambda({\n            func\n        });\n    }\n    async _invoke(input, config, runManager) {\n        return new Promise((resolve, reject)=>{\n            const childConfig = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n                callbacks: runManager?.getChild(),\n                recursionLimit: (config?.recursionLimit ?? _config_js__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_RECURSION_LIMIT) - 1\n            });\n            void _singletons_index_js__WEBPACK_IMPORTED_MODULE_9__.AsyncLocalStorageProviderSingleton.getInstance().run(childConfig, async ()=>{\n                try {\n                    let output = await this.func(input, {\n                        ...childConfig,\n                        config: childConfig\n                    });\n                    if (output && Runnable.isRunnable(output)) {\n                        if (config?.recursionLimit === 0) {\n                            throw new Error(\"Recursion limit reached.\");\n                        }\n                        output = await output.invoke(input, {\n                            ...childConfig,\n                            recursionLimit: (childConfig.recursionLimit ?? _config_js__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_RECURSION_LIMIT) - 1\n                        });\n                    }\n                    resolve(output);\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    async invoke(input, options) {\n        return this._callWithConfig(this._invoke, input, options);\n    }\n    async *_transform(generator, runManager, config) {\n        let finalChunk;\n        for await (const chunk of generator){\n            if (finalChunk === undefined) {\n                finalChunk = chunk;\n            } else {\n                // Make a best effort to gather, for any type that supports concat.\n                try {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    finalChunk = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.concat)(finalChunk, chunk);\n                } catch (e) {\n                    finalChunk = chunk;\n                }\n            }\n        }\n        const output = await new Promise((resolve, reject)=>{\n            void _singletons_index_js__WEBPACK_IMPORTED_MODULE_9__.AsyncLocalStorageProviderSingleton.getInstance().run(config, async ()=>{\n                try {\n                    const res = await this.func(finalChunk, {\n                        ...config,\n                        config\n                    });\n                    resolve(res);\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        });\n        if (output && Runnable.isRunnable(output)) {\n            if (config?.recursionLimit === 0) {\n                throw new Error(\"Recursion limit reached.\");\n            }\n            const stream = await output.stream(finalChunk, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n                callbacks: runManager?.getChild(),\n                recursionLimit: (config?.recursionLimit ?? _config_js__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_RECURSION_LIMIT) - 1\n            }));\n            for await (const chunk of stream){\n                yield chunk;\n            }\n        } else {\n            yield output;\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.AsyncGeneratorWithSetup(this.transform(generator(), options));\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\nclass RunnableParallel extends RunnableMap {\n}\n/**\n * A Runnable that can fallback to other Runnables if it fails.\n */ class RunnableWithFallbacks extends Runnable {\n    static lc_name() {\n        return \"RunnableWithFallbacks\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"runnable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"fallbacks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.runnable = fields.runnable;\n        this.fallbacks = fields.fallbacks;\n    }\n    *runnables() {\n        yield this.runnable;\n        for (const fallback of this.fallbacks){\n            yield fallback;\n        }\n    }\n    async invoke(input, options) {\n        const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_1__.CallbackManager.configure(options?.callbacks, undefined, options?.tags, undefined, options?.metadata);\n        const { runId, ...otherOptions } = options ?? {};\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), runId, undefined, undefined, undefined, otherOptions?.runName);\n        let firstError;\n        for (const runnable of this.runnables()){\n            try {\n                const output = await runnable.invoke(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(otherOptions, {\n                    callbacks: runManager?.getChild()\n                }));\n                await runManager?.handleChainEnd(_coerceToDict(output, \"output\"));\n                return output;\n            } catch (e) {\n                if (firstError === undefined) {\n                    firstError = e;\n                }\n            }\n        }\n        if (firstError === undefined) {\n            throw new Error(\"No error stored at end of fallback.\");\n        }\n        await runManager?.handleChainError(firstError);\n        throw firstError;\n    }\n    async batch(inputs, options, batchOptions) {\n        if (batchOptions?.returnExceptions) {\n            throw new Error(\"Not implemented.\");\n        }\n        const configList = this._getOptionsList(options ?? {}, inputs.length);\n        const callbackManagers = await Promise.all(configList.map((config)=>_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_1__.CallbackManager.configure(config?.callbacks, undefined, config?.tags, undefined, config?.metadata)));\n        const runManagers = await Promise.all(callbackManagers.map(async (callbackManager, i)=>{\n            const handleStartRes = await callbackManager?.handleChainStart(this.toJSON(), _coerceToDict(inputs[i], \"input\"), configList[i].runId, undefined, undefined, undefined, configList[i].runName);\n            delete configList[i].runId;\n            return handleStartRes;\n        }));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let firstError;\n        for (const runnable of this.runnables()){\n            try {\n                const outputs = await runnable.batch(inputs, runManagers.map((runManager, j)=>(0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(configList[j], {\n                        callbacks: runManager?.getChild()\n                    })), batchOptions);\n                await Promise.all(runManagers.map((runManager, i)=>runManager?.handleChainEnd(_coerceToDict(outputs[i], \"output\"))));\n                return outputs;\n            } catch (e) {\n                if (firstError === undefined) {\n                    firstError = e;\n                }\n            }\n        }\n        if (!firstError) {\n            throw new Error(\"No error stored at end of fallbacks.\");\n        }\n        await Promise.all(runManagers.map((runManager)=>runManager?.handleChainError(firstError)));\n        throw firstError;\n    }\n}\n// TODO: Figure out why the compiler needs help eliminating Error as a RunOutput type\nfunction _coerceToRunnable(coerceable) {\n    if (typeof coerceable === \"function\") {\n        return new RunnableLambda({\n            func: coerceable\n        });\n    } else if (Runnable.isRunnable(coerceable)) {\n        return coerceable;\n    } else if (!Array.isArray(coerceable) && typeof coerceable === \"object\") {\n        const runnables = {};\n        for (const [key, value] of Object.entries(coerceable)){\n            runnables[key] = _coerceToRunnable(value);\n        }\n        return new RunnableMap({\n            steps: runnables\n        });\n    } else {\n        throw new Error(`Expected a Runnable, function or object.\\nInstead got an unsupported type.`);\n    }\n}\n/**\n * A runnable that assigns key-value pairs to inputs of type `Record<string, unknown>`.\n */ class RunnableAssign extends Runnable {\n    static lc_name() {\n        return \"RunnableAssign\";\n    }\n    constructor(fields){\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (fields instanceof RunnableMap) {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                mapper: fields\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"mapper\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.mapper = fields.mapper;\n    }\n    async invoke(input, options) {\n        const mapperResult = await this.mapper.invoke(input, options);\n        return {\n            ...input,\n            ...mapperResult\n        };\n    }\n    async *_transform(generator, runManager, options) {\n        // collect mapper keys\n        const mapperKeys = this.mapper.getStepsKeys();\n        // create two input gens, one for the mapper, one for the input\n        const [forPassthrough, forMapper] = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.atee)(generator);\n        // create mapper output gen\n        const mapperOutput = this.mapper.transform(forMapper, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(options, {\n            callbacks: runManager?.getChild()\n        }));\n        // start the mapper\n        const firstMapperChunkPromise = mapperOutput.next();\n        // yield the passthrough\n        for await (const chunk of forPassthrough){\n            if (typeof chunk !== \"object\" || Array.isArray(chunk)) {\n                throw new Error(`RunnableAssign can only be used with objects as input, got ${typeof chunk}`);\n            }\n            const filtered = Object.fromEntries(Object.entries(chunk).filter(([key])=>!mapperKeys.includes(key)));\n            if (Object.keys(filtered).length > 0) {\n                yield filtered;\n            }\n        }\n        // yield the mapper output\n        yield (await firstMapperChunkPromise).value;\n        for await (const chunk of mapperOutput){\n            yield chunk;\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.AsyncGeneratorWithSetup(this.transform(generator(), options));\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\n/**\n * A runnable that assigns key-value pairs to inputs of type `Record<string, unknown>`.\n */ class RunnablePick extends Runnable {\n    static lc_name() {\n        return \"RunnablePick\";\n    }\n    constructor(fields){\n        if (typeof fields === \"string\" || Array.isArray(fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                keys: fields\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"keys\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.keys = fields.keys;\n    }\n    async _pick(input) {\n        if (typeof this.keys === \"string\") {\n            return input[this.keys];\n        } else {\n            const picked = this.keys.map((key)=>[\n                    key,\n                    input[key]\n                ]).filter((v)=>v[1] !== undefined);\n            return picked.length === 0 ? undefined : Object.fromEntries(picked);\n        }\n    }\n    async invoke(input, options) {\n        return this._callWithConfig(this._pick.bind(this), input, options);\n    }\n    async *_transform(generator) {\n        for await (const chunk of generator){\n            const picked = await this._pick(chunk);\n            if (picked !== undefined) {\n                yield picked;\n            }\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.AsyncGeneratorWithSetup(this.transform(generator(), options));\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/runnables/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/runnables/config.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/runnables/config.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_RECURSION_LIMIT: () => (/* binding */ DEFAULT_RECURSION_LIMIT),\n/* harmony export */   ensureConfig: () => (/* binding */ ensureConfig),\n/* harmony export */   getCallbackManagerForConfig: () => (/* binding */ getCallbackManagerForConfig),\n/* harmony export */   mergeConfigs: () => (/* binding */ mergeConfigs),\n/* harmony export */   patchConfig: () => (/* binding */ patchConfig)\n/* harmony export */ });\n/* harmony import */ var _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../callbacks/manager.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/callbacks/manager.js\");\n/* harmony import */ var _singletons_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../singletons/index.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/singletons/index.js\");\n\n\nconst DEFAULT_RECURSION_LIMIT = 25;\nasync function getCallbackManagerForConfig(config) {\n    return _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.CallbackManager.configure(config?.callbacks, undefined, config?.tags, undefined, config?.metadata);\n}\nfunction mergeConfigs(...configs) {\n    // We do not want to call ensureConfig on the empty state here as this may cause\n    // double loading of callbacks if async local storage is being used.\n    const copy = {};\n    for (const options of configs.filter((c)=>!!c)){\n        for (const key of Object.keys(options)){\n            if (key === \"metadata\") {\n                copy[key] = {\n                    ...copy[key],\n                    ...options[key]\n                };\n            } else if (key === \"tags\") {\n                const baseKeys = copy[key] ?? [];\n                copy[key] = [\n                    ...new Set(baseKeys.concat(options[key] ?? []))\n                ];\n            } else if (key === \"configurable\") {\n                copy[key] = {\n                    ...copy[key],\n                    ...options[key]\n                };\n            } else if (key === \"callbacks\") {\n                const baseCallbacks = copy.callbacks;\n                const providedCallbacks = options.callbacks;\n                // callbacks can be either undefined, Array<handler> or manager\n                // so merging two callbacks values has 6 cases\n                if (Array.isArray(providedCallbacks)) {\n                    if (!baseCallbacks) {\n                        copy.callbacks = providedCallbacks;\n                    } else if (Array.isArray(baseCallbacks)) {\n                        copy.callbacks = baseCallbacks.concat(providedCallbacks);\n                    } else {\n                        // baseCallbacks is a manager\n                        const manager = baseCallbacks.copy();\n                        for (const callback of providedCallbacks){\n                            manager.addHandler((0,_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.ensureHandler)(callback), true);\n                        }\n                        copy.callbacks = manager;\n                    }\n                } else if (providedCallbacks) {\n                    // providedCallbacks is a manager\n                    if (!baseCallbacks) {\n                        copy.callbacks = providedCallbacks;\n                    } else if (Array.isArray(baseCallbacks)) {\n                        const manager = providedCallbacks.copy();\n                        for (const callback of baseCallbacks){\n                            manager.addHandler((0,_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.ensureHandler)(callback), true);\n                        }\n                        copy.callbacks = manager;\n                    } else {\n                        // baseCallbacks is also a manager\n                        copy.callbacks = new _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.CallbackManager(providedCallbacks._parentRunId, {\n                            handlers: baseCallbacks.handlers.concat(providedCallbacks.handlers),\n                            inheritableHandlers: baseCallbacks.inheritableHandlers.concat(providedCallbacks.inheritableHandlers),\n                            tags: Array.from(new Set(baseCallbacks.tags.concat(providedCallbacks.tags))),\n                            inheritableTags: Array.from(new Set(baseCallbacks.inheritableTags.concat(providedCallbacks.inheritableTags))),\n                            metadata: {\n                                ...baseCallbacks.metadata,\n                                ...providedCallbacks.metadata\n                            }\n                        });\n                    }\n                }\n            } else {\n                const typedKey = key;\n                copy[typedKey] = options[typedKey] ?? copy[typedKey];\n            }\n        }\n    }\n    return copy;\n}\nconst PRIMITIVES = new Set([\n    \"string\",\n    \"number\",\n    \"boolean\"\n]);\n/**\n * Ensure that a passed config is an object with all required keys present.\n *\n * Note: To make sure async local storage loading works correctly, this\n * should not be called with a default or prepopulated config argument.\n */ function ensureConfig(config) {\n    const loadedConfig = config ?? _singletons_index_js__WEBPACK_IMPORTED_MODULE_1__.AsyncLocalStorageProviderSingleton.getInstance().getStore();\n    let empty = {\n        tags: [],\n        metadata: {},\n        callbacks: undefined,\n        recursionLimit: 25,\n        runId: undefined\n    };\n    if (loadedConfig) {\n        empty = {\n            ...empty,\n            ...loadedConfig\n        };\n    }\n    if (loadedConfig?.configurable) {\n        for (const key of Object.keys(loadedConfig.configurable)){\n            if (PRIMITIVES.has(typeof loadedConfig.configurable[key]) && !empty.metadata?.[key]) {\n                if (!empty.metadata) {\n                    empty.metadata = {};\n                }\n                empty.metadata[key] = loadedConfig.configurable[key];\n            }\n        }\n    }\n    return empty;\n}\n/**\n * Helper function that patches runnable configs with updated properties.\n */ function patchConfig(config = {}, { callbacks, maxConcurrency, recursionLimit, runName, configurable, runId } = {}) {\n    const newConfig = ensureConfig(config);\n    if (callbacks !== undefined) {\n        /**\n         * If we're replacing callbacks we need to unset runName\n         * since that should apply only to the same run as the original callbacks\n         */ delete newConfig.runName;\n        newConfig.callbacks = callbacks;\n    }\n    if (recursionLimit !== undefined) {\n        newConfig.recursionLimit = recursionLimit;\n    }\n    if (maxConcurrency !== undefined) {\n        newConfig.maxConcurrency = maxConcurrency;\n    }\n    if (runName !== undefined) {\n        newConfig.runName = runName;\n    }\n    if (configurable !== undefined) {\n        newConfig.configurable = {\n            ...newConfig.configurable,\n            ...configurable\n        };\n    }\n    if (runId !== undefined) {\n        delete newConfig.runId;\n    }\n    return newConfig;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/runnables/config.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/runnables/graph.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/runnables/graph.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Graph: () => (/* binding */ Graph),\n/* harmony export */   nodeDataStr: () => (/* binding */ nodeDataStr)\n/* harmony export */ });\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/validate.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/runnables/utils.js\");\n\n\n\nconst MAX_DATA_DISPLAY_NAME_LENGTH = 42;\nfunction nodeDataStr(node) {\n    if (!(0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(node.id)) {\n        return node.id;\n    } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isRunnableInterface)(node.data)) {\n        try {\n            let data = node.data.toString();\n            if (data.startsWith(\"<\") || data[0] !== data[0].toUpperCase() || data.split(\"\\n\").length > 1) {\n                data = node.data.getName();\n            } else if (data.length > MAX_DATA_DISPLAY_NAME_LENGTH) {\n                data = `${data.substring(0, MAX_DATA_DISPLAY_NAME_LENGTH)}...`;\n            }\n            return data.startsWith(\"Runnable\") ? data.slice(\"Runnable\".length) : data;\n        } catch (error) {\n            return node.data.getName();\n        }\n    } else {\n        return node.data.name ?? \"UnknownSchema\";\n    }\n}\nfunction nodeDataJson(node) {\n    // if node.data is implements Runnable\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isRunnableInterface)(node.data)) {\n        return {\n            type: \"runnable\",\n            data: {\n                id: node.data.lc_id,\n                name: node.data.getName()\n            }\n        };\n    } else {\n        return {\n            type: \"schema\",\n            data: {\n                ...(0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(node.data.schema),\n                title: node.data.name\n            }\n        };\n    }\n}\nclass Graph {\n    constructor(){\n        Object.defineProperty(this, \"nodes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"edges\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n    }\n    // Convert the graph to a JSON-serializable format.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    toJSON() {\n        const stableNodeIds = {};\n        Object.values(this.nodes).forEach((node, i)=>{\n            stableNodeIds[node.id] = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(node.id) ? i : node.id;\n        });\n        return {\n            nodes: Object.values(this.nodes).map((node)=>({\n                    id: stableNodeIds[node.id],\n                    ...nodeDataJson(node)\n                })),\n            edges: this.edges.map((edge)=>edge.data ? {\n                    source: stableNodeIds[edge.source],\n                    target: stableNodeIds[edge.target],\n                    data: edge.data\n                } : {\n                    source: stableNodeIds[edge.source],\n                    target: stableNodeIds[edge.target]\n                })\n        };\n    }\n    addNode(data, id) {\n        if (id !== undefined && this.nodes[id] !== undefined) {\n            throw new Error(`Node with id ${id} already exists`);\n        }\n        const nodeId = id || (0,uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n        const node = {\n            id: nodeId,\n            data\n        };\n        this.nodes[nodeId] = node;\n        return node;\n    }\n    removeNode(node) {\n        // Remove the node from the nodes map\n        delete this.nodes[node.id];\n        // Filter out edges connected to the node\n        this.edges = this.edges.filter((edge)=>edge.source !== node.id && edge.target !== node.id);\n    }\n    addEdge(source, target, data) {\n        if (this.nodes[source.id] === undefined) {\n            throw new Error(`Source node ${source.id} not in graph`);\n        }\n        if (this.nodes[target.id] === undefined) {\n            throw new Error(`Target node ${target.id} not in graph`);\n        }\n        const edge = {\n            source: source.id,\n            target: target.id,\n            data\n        };\n        this.edges.push(edge);\n        return edge;\n    }\n    firstNode() {\n        const targets = new Set(this.edges.map((edge)=>edge.target));\n        const found = [];\n        Object.values(this.nodes).forEach((node)=>{\n            if (!targets.has(node.id)) {\n                found.push(node);\n            }\n        });\n        return found[0];\n    }\n    lastNode() {\n        const sources = new Set(this.edges.map((edge)=>edge.source));\n        const found = [];\n        Object.values(this.nodes).forEach((node)=>{\n            if (!sources.has(node.id)) {\n                found.push(node);\n            }\n        });\n        return found[0];\n    }\n    extend(graph) {\n        // Add all nodes from the other graph, taking care to avoid duplicates\n        Object.entries(graph.nodes).forEach(([key, value])=>{\n            this.nodes[key] = value;\n        });\n        // Add all edges from the other graph\n        this.edges = [\n            ...this.edges,\n            ...graph.edges\n        ];\n    }\n    trimFirstNode() {\n        const firstNode = this.firstNode();\n        if (firstNode) {\n            const outgoingEdges = this.edges.filter((edge)=>edge.source === firstNode.id);\n            if (Object.keys(this.nodes).length === 1 || outgoingEdges.length === 1) {\n                this.removeNode(firstNode);\n            }\n        }\n    }\n    trimLastNode() {\n        const lastNode = this.lastNode();\n        if (lastNode) {\n            const incomingEdges = this.edges.filter((edge)=>edge.target === lastNode.id);\n            if (Object.keys(this.nodes).length === 1 || incomingEdges.length === 1) {\n                this.removeNode(lastNode);\n            }\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/runnables/graph.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/runnables/utils.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/runnables/utils.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _RootEventFilter: () => (/* binding */ _RootEventFilter),\n/* harmony export */   isRunnableInterface: () => (/* binding */ isRunnableInterface)\n/* harmony export */ });\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isRunnableInterface(thing) {\n    return thing ? thing.lc_runnable : false;\n}\n/**\n * Utility to filter the root event in the streamEvents implementation.\n * This is simply binding the arguments to the namespace to make save on\n * a bit of typing in the streamEvents implementation.\n *\n * TODO: Refactor and remove.\n */ class _RootEventFilter {\n    constructor(fields){\n        Object.defineProperty(this, \"includeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.includeNames = fields.includeNames;\n        this.includeTypes = fields.includeTypes;\n        this.includeTags = fields.includeTags;\n        this.excludeNames = fields.excludeNames;\n        this.excludeTypes = fields.excludeTypes;\n        this.excludeTags = fields.excludeTags;\n    }\n    includeEvent(event, rootType) {\n        let include = this.includeNames === undefined && this.includeTypes === undefined && this.includeTags === undefined;\n        const eventTags = event.tags ?? [];\n        if (this.includeNames !== undefined) {\n            include = include || this.includeNames.includes(event.name);\n        }\n        if (this.includeTypes !== undefined) {\n            include = include || this.includeTypes.includes(rootType);\n        }\n        if (this.includeTags !== undefined) {\n            include = include || eventTags.some((tag)=>this.includeTags?.includes(tag));\n        }\n        if (this.excludeNames !== undefined) {\n            include = include && !this.excludeNames.includes(event.name);\n        }\n        if (this.excludeTypes !== undefined) {\n            include = include && !this.excludeTypes.includes(rootType);\n        }\n        if (this.excludeTags !== undefined) {\n            include = include && eventTags.every((tag)=>!this.excludeTags?.includes(tag));\n        }\n        return include;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3J1bm5hYmxlcy91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLDhEQUE4RDtBQUN2RCxTQUFTQSxvQkFBb0JDLEtBQUs7SUFDckMsT0FBT0EsUUFBUUEsTUFBTUMsV0FBVyxHQUFHO0FBQ3ZDO0FBQ0E7Ozs7OztDQU1DLEdBQ00sTUFBTUM7SUFDVEMsWUFBWUMsTUFBTSxDQUFFO1FBQ2hCQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGdCQUFnQjtZQUN4Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxlQUFlO1lBQ3ZDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGdCQUFnQjtZQUN4Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZUFBZTtZQUN2Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsSUFBSSxDQUFDQyxZQUFZLEdBQUdQLE9BQU9PLFlBQVk7UUFDdkMsSUFBSSxDQUFDQyxZQUFZLEdBQUdSLE9BQU9RLFlBQVk7UUFDdkMsSUFBSSxDQUFDQyxXQUFXLEdBQUdULE9BQU9TLFdBQVc7UUFDckMsSUFBSSxDQUFDQyxZQUFZLEdBQUdWLE9BQU9VLFlBQVk7UUFDdkMsSUFBSSxDQUFDQyxZQUFZLEdBQUdYLE9BQU9XLFlBQVk7UUFDdkMsSUFBSSxDQUFDQyxXQUFXLEdBQUdaLE9BQU9ZLFdBQVc7SUFDekM7SUFDQUMsYUFBYUMsS0FBSyxFQUFFQyxRQUFRLEVBQUU7UUFDMUIsSUFBSUMsVUFBVSxJQUFJLENBQUNULFlBQVksS0FBS1UsYUFDaEMsSUFBSSxDQUFDVCxZQUFZLEtBQUtTLGFBQ3RCLElBQUksQ0FBQ1IsV0FBVyxLQUFLUTtRQUN6QixNQUFNQyxZQUFZSixNQUFNSyxJQUFJLElBQUksRUFBRTtRQUNsQyxJQUFJLElBQUksQ0FBQ1osWUFBWSxLQUFLVSxXQUFXO1lBQ2pDRCxVQUFVQSxXQUFXLElBQUksQ0FBQ1QsWUFBWSxDQUFDYSxRQUFRLENBQUNOLE1BQU1PLElBQUk7UUFDOUQ7UUFDQSxJQUFJLElBQUksQ0FBQ2IsWUFBWSxLQUFLUyxXQUFXO1lBQ2pDRCxVQUFVQSxXQUFXLElBQUksQ0FBQ1IsWUFBWSxDQUFDWSxRQUFRLENBQUNMO1FBQ3BEO1FBQ0EsSUFBSSxJQUFJLENBQUNOLFdBQVcsS0FBS1EsV0FBVztZQUNoQ0QsVUFDSUEsV0FBV0UsVUFBVUksSUFBSSxDQUFDLENBQUNDLE1BQVEsSUFBSSxDQUFDZCxXQUFXLEVBQUVXLFNBQVNHO1FBQ3RFO1FBQ0EsSUFBSSxJQUFJLENBQUNiLFlBQVksS0FBS08sV0FBVztZQUNqQ0QsVUFBVUEsV0FBVyxDQUFDLElBQUksQ0FBQ04sWUFBWSxDQUFDVSxRQUFRLENBQUNOLE1BQU1PLElBQUk7UUFDL0Q7UUFDQSxJQUFJLElBQUksQ0FBQ1YsWUFBWSxLQUFLTSxXQUFXO1lBQ2pDRCxVQUFVQSxXQUFXLENBQUMsSUFBSSxDQUFDTCxZQUFZLENBQUNTLFFBQVEsQ0FBQ0w7UUFDckQ7UUFDQSxJQUFJLElBQUksQ0FBQ0gsV0FBVyxLQUFLSyxXQUFXO1lBQ2hDRCxVQUNJQSxXQUFXRSxVQUFVTSxLQUFLLENBQUMsQ0FBQ0QsTUFBUSxDQUFDLElBQUksQ0FBQ1gsV0FBVyxFQUFFUSxTQUFTRztRQUN4RTtRQUNBLE9BQU9QO0lBQ1g7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWdlbmFpL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9ydW5uYWJsZXMvdXRpbHMuanM/OTczNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGZ1bmN0aW9uIGlzUnVubmFibGVJbnRlcmZhY2UodGhpbmcpIHtcbiAgICByZXR1cm4gdGhpbmcgPyB0aGluZy5sY19ydW5uYWJsZSA6IGZhbHNlO1xufVxuLyoqXG4gKiBVdGlsaXR5IHRvIGZpbHRlciB0aGUgcm9vdCBldmVudCBpbiB0aGUgc3RyZWFtRXZlbnRzIGltcGxlbWVudGF0aW9uLlxuICogVGhpcyBpcyBzaW1wbHkgYmluZGluZyB0aGUgYXJndW1lbnRzIHRvIHRoZSBuYW1lc3BhY2UgdG8gbWFrZSBzYXZlIG9uXG4gKiBhIGJpdCBvZiB0eXBpbmcgaW4gdGhlIHN0cmVhbUV2ZW50cyBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBUT0RPOiBSZWZhY3RvciBhbmQgcmVtb3ZlLlxuICovXG5leHBvcnQgY2xhc3MgX1Jvb3RFdmVudEZpbHRlciB7XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImluY2x1ZGVOYW1lc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJpbmNsdWRlVHlwZXNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiaW5jbHVkZVRhZ3NcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZXhjbHVkZU5hbWVzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImV4Y2x1ZGVUeXBlc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJleGNsdWRlVGFnc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmluY2x1ZGVOYW1lcyA9IGZpZWxkcy5pbmNsdWRlTmFtZXM7XG4gICAgICAgIHRoaXMuaW5jbHVkZVR5cGVzID0gZmllbGRzLmluY2x1ZGVUeXBlcztcbiAgICAgICAgdGhpcy5pbmNsdWRlVGFncyA9IGZpZWxkcy5pbmNsdWRlVGFncztcbiAgICAgICAgdGhpcy5leGNsdWRlTmFtZXMgPSBmaWVsZHMuZXhjbHVkZU5hbWVzO1xuICAgICAgICB0aGlzLmV4Y2x1ZGVUeXBlcyA9IGZpZWxkcy5leGNsdWRlVHlwZXM7XG4gICAgICAgIHRoaXMuZXhjbHVkZVRhZ3MgPSBmaWVsZHMuZXhjbHVkZVRhZ3M7XG4gICAgfVxuICAgIGluY2x1ZGVFdmVudChldmVudCwgcm9vdFR5cGUpIHtcbiAgICAgICAgbGV0IGluY2x1ZGUgPSB0aGlzLmluY2x1ZGVOYW1lcyA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICB0aGlzLmluY2x1ZGVUeXBlcyA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICB0aGlzLmluY2x1ZGVUYWdzID09PSB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IGV2ZW50VGFncyA9IGV2ZW50LnRhZ3MgPz8gW107XG4gICAgICAgIGlmICh0aGlzLmluY2x1ZGVOYW1lcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbmNsdWRlID0gaW5jbHVkZSB8fCB0aGlzLmluY2x1ZGVOYW1lcy5pbmNsdWRlcyhldmVudC5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pbmNsdWRlVHlwZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaW5jbHVkZSA9IGluY2x1ZGUgfHwgdGhpcy5pbmNsdWRlVHlwZXMuaW5jbHVkZXMocm9vdFR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmluY2x1ZGVUYWdzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGluY2x1ZGUgPVxuICAgICAgICAgICAgICAgIGluY2x1ZGUgfHwgZXZlbnRUYWdzLnNvbWUoKHRhZykgPT4gdGhpcy5pbmNsdWRlVGFncz8uaW5jbHVkZXModGFnKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZXhjbHVkZU5hbWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGluY2x1ZGUgPSBpbmNsdWRlICYmICF0aGlzLmV4Y2x1ZGVOYW1lcy5pbmNsdWRlcyhldmVudC5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5leGNsdWRlVHlwZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaW5jbHVkZSA9IGluY2x1ZGUgJiYgIXRoaXMuZXhjbHVkZVR5cGVzLmluY2x1ZGVzKHJvb3RUeXBlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5leGNsdWRlVGFncyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbmNsdWRlID1cbiAgICAgICAgICAgICAgICBpbmNsdWRlICYmIGV2ZW50VGFncy5ldmVyeSgodGFnKSA9PiAhdGhpcy5leGNsdWRlVGFncz8uaW5jbHVkZXModGFnKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluY2x1ZGU7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbImlzUnVubmFibGVJbnRlcmZhY2UiLCJ0aGluZyIsImxjX3J1bm5hYmxlIiwiX1Jvb3RFdmVudEZpbHRlciIsImNvbnN0cnVjdG9yIiwiZmllbGRzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsImluY2x1ZGVOYW1lcyIsImluY2x1ZGVUeXBlcyIsImluY2x1ZGVUYWdzIiwiZXhjbHVkZU5hbWVzIiwiZXhjbHVkZVR5cGVzIiwiZXhjbHVkZVRhZ3MiLCJpbmNsdWRlRXZlbnQiLCJldmVudCIsInJvb3RUeXBlIiwiaW5jbHVkZSIsInVuZGVmaW5lZCIsImV2ZW50VGFncyIsInRhZ3MiLCJpbmNsdWRlcyIsIm5hbWUiLCJzb21lIiwidGFnIiwiZXZlcnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/runnables/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/singletons/index.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/singletons/index.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncLocalStorageProviderSingleton: () => (/* binding */ AsyncLocalStorageProviderSingleton),\n/* harmony export */   MockAsyncLocalStorage: () => (/* binding */ MockAsyncLocalStorage)\n/* harmony export */ });\n/* eslint-disable @typescript-eslint/no-explicit-any */ class MockAsyncLocalStorage {\n    getStore() {\n        return undefined;\n    }\n    run(_store, callback) {\n        callback();\n    }\n}\nclass AsyncLocalStorageProvider {\n    constructor(){\n        Object.defineProperty(this, \"asyncLocalStorage\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new MockAsyncLocalStorage()\n        });\n        Object.defineProperty(this, \"hasBeenInitialized\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n    }\n    getInstance() {\n        return this.asyncLocalStorage;\n    }\n    initializeGlobalInstance(instance) {\n        if (!this.hasBeenInitialized) {\n            this.hasBeenInitialized = true;\n            this.asyncLocalStorage = instance;\n        }\n    }\n}\nconst AsyncLocalStorageProviderSingleton = new AsyncLocalStorageProvider();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3NpbmdsZXRvbnMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxxREFBcUQsR0FDOUMsTUFBTUE7SUFDVEMsV0FBVztRQUNQLE9BQU9DO0lBQ1g7SUFDQUMsSUFBSUMsTUFBTSxFQUFFQyxRQUFRLEVBQUU7UUFDbEJBO0lBQ0o7QUFDSjtBQUNBLE1BQU1DO0lBQ0ZDLGFBQWM7UUFDVkMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxxQkFBcUI7WUFDN0NDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sSUFBSWI7UUFDZjtRQUNBUSxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLHNCQUFzQjtZQUM5Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO0lBQ0o7SUFDQUMsY0FBYztRQUNWLE9BQU8sSUFBSSxDQUFDQyxpQkFBaUI7SUFDakM7SUFDQUMseUJBQXlCQyxRQUFRLEVBQUU7UUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQ0Msa0JBQWtCLEVBQUU7WUFDMUIsSUFBSSxDQUFDQSxrQkFBa0IsR0FBRztZQUMxQixJQUFJLENBQUNILGlCQUFpQixHQUFHRTtRQUM3QjtJQUNKO0FBQ0o7QUFDQSxNQUFNRSxxQ0FBcUMsSUFBSWI7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWdlbmFpL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9zaW5nbGV0b25zL2luZGV4LmpzP2Q2MTIiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuZXhwb3J0IGNsYXNzIE1vY2tBc3luY0xvY2FsU3RvcmFnZSB7XG4gICAgZ2V0U3RvcmUoKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJ1bihfc3RvcmUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxufVxuY2xhc3MgQXN5bmNMb2NhbFN0b3JhZ2VQcm92aWRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImFzeW5jTG9jYWxTdG9yYWdlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBuZXcgTW9ja0FzeW5jTG9jYWxTdG9yYWdlKClcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImhhc0JlZW5Jbml0aWFsaXplZFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldEluc3RhbmNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hc3luY0xvY2FsU3RvcmFnZTtcbiAgICB9XG4gICAgaW5pdGlhbGl6ZUdsb2JhbEluc3RhbmNlKGluc3RhbmNlKSB7XG4gICAgICAgIGlmICghdGhpcy5oYXNCZWVuSW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaGFzQmVlbkluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuYXN5bmNMb2NhbFN0b3JhZ2UgPSBpbnN0YW5jZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmNvbnN0IEFzeW5jTG9jYWxTdG9yYWdlUHJvdmlkZXJTaW5nbGV0b24gPSBuZXcgQXN5bmNMb2NhbFN0b3JhZ2VQcm92aWRlcigpO1xuZXhwb3J0IHsgQXN5bmNMb2NhbFN0b3JhZ2VQcm92aWRlclNpbmdsZXRvbiB9O1xuIl0sIm5hbWVzIjpbIk1vY2tBc3luY0xvY2FsU3RvcmFnZSIsImdldFN0b3JlIiwidW5kZWZpbmVkIiwicnVuIiwiX3N0b3JlIiwiY2FsbGJhY2siLCJBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyIiwiY29uc3RydWN0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwiZ2V0SW5zdGFuY2UiLCJhc3luY0xvY2FsU3RvcmFnZSIsImluaXRpYWxpemVHbG9iYWxJbnN0YW5jZSIsImluc3RhbmNlIiwiaGFzQmVlbkluaXRpYWxpemVkIiwiQXN5bmNMb2NhbFN0b3JhZ2VQcm92aWRlclNpbmdsZXRvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/singletons/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/base.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/base.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseTracer: () => (/* binding */ BaseTracer)\n/* harmony export */ });\n/* harmony import */ var _callbacks_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../callbacks/base.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/callbacks/base.js\");\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _coerceToDict(value, defaultKey) {\n    return value && !Array.isArray(value) && typeof value === \"object\" ? value : {\n        [defaultKey]: value\n    };\n}\nfunction stripNonAlphanumeric(input) {\n    return input.replace(/[-:.]/g, \"\");\n}\nfunction convertToDottedOrderFormat(epoch, runId) {\n    return stripNonAlphanumeric(`${new Date(epoch).toISOString().slice(0, -1)}000Z`) + runId;\n}\nclass BaseTracer extends _callbacks_base_js__WEBPACK_IMPORTED_MODULE_0__.BaseCallbackHandler {\n    constructor(_fields){\n        super(...arguments);\n        Object.defineProperty(this, \"runMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n    }\n    copy() {\n        return this;\n    }\n    stringifyError(error) {\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (error instanceof Error) {\n            return error.message + (error?.stack ? `\\n\\n${error.stack}` : \"\");\n        }\n        if (typeof error === \"string\") {\n            return error;\n        }\n        return `${error}`;\n    }\n    _addChildRun(parentRun, childRun) {\n        parentRun.child_runs.push(childRun);\n    }\n    async _startTrace(run) {\n        const currentDottedOrder = convertToDottedOrderFormat(run.start_time, run.id);\n        const storedRun = {\n            ...run\n        };\n        if (storedRun.parent_run_id !== undefined) {\n            const parentRun = this.runMap.get(storedRun.parent_run_id);\n            if (parentRun) {\n                this._addChildRun(parentRun, storedRun);\n                parentRun.child_execution_order = Math.max(parentRun.child_execution_order, storedRun.child_execution_order);\n                storedRun.trace_id = parentRun.trace_id;\n                if (parentRun.dotted_order !== undefined) {\n                    storedRun.dotted_order = [\n                        parentRun.dotted_order,\n                        currentDottedOrder\n                    ].join(\".\");\n                } else {\n                // This can happen naturally for callbacks added within a run\n                // console.debug(`Parent run with UUID ${storedRun.parent_run_id} has no dotted order.`);\n                }\n            } else {\n            // This can happen naturally for callbacks added within a run\n            // console.debug(\n            //   `Parent run with UUID ${storedRun.parent_run_id} not found.`\n            // );\n            }\n        } else {\n            storedRun.trace_id = storedRun.id;\n            storedRun.dotted_order = currentDottedOrder;\n        }\n        this.runMap.set(storedRun.id, storedRun);\n        await this.onRunCreate?.(storedRun);\n    }\n    async _endTrace(run) {\n        const parentRun = run.parent_run_id !== undefined && this.runMap.get(run.parent_run_id);\n        if (parentRun) {\n            parentRun.child_execution_order = Math.max(parentRun.child_execution_order, run.child_execution_order);\n        } else {\n            await this.persistRun(run);\n        }\n        this.runMap.delete(run.id);\n        await this.onRunUpdate?.(run);\n    }\n    _getExecutionOrder(parentRunId) {\n        const parentRun = parentRunId !== undefined && this.runMap.get(parentRunId);\n        // If a run has no parent then execution order is 1\n        if (!parentRun) {\n            return 1;\n        }\n        return parentRun.child_execution_order + 1;\n    }\n    async handleLLMStart(llm, prompts, runId, parentRunId, extraParams, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const finalExtraParams = metadata ? {\n            ...extraParams,\n            metadata\n        } : extraParams;\n        const run = {\n            id: runId,\n            name: name ?? llm.id[llm.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: llm,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                prompts\n            },\n            execution_order,\n            child_runs: [],\n            child_execution_order: execution_order,\n            run_type: \"llm\",\n            extra: finalExtraParams ?? {},\n            tags: tags || []\n        };\n        await this._startTrace(run);\n        await this.onLLMStart?.(run);\n        return run;\n    }\n    async handleChatModelStart(llm, messages, runId, parentRunId, extraParams, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const finalExtraParams = metadata ? {\n            ...extraParams,\n            metadata\n        } : extraParams;\n        const run = {\n            id: runId,\n            name: name ?? llm.id[llm.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: llm,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                messages\n            },\n            execution_order,\n            child_runs: [],\n            child_execution_order: execution_order,\n            run_type: \"llm\",\n            extra: finalExtraParams ?? {},\n            tags: tags || []\n        };\n        await this._startTrace(run);\n        await this.onLLMStart?.(run);\n        return run;\n    }\n    async handleLLMEnd(output, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            throw new Error(\"No LLM run to end.\");\n        }\n        run.end_time = Date.now();\n        run.outputs = output;\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onLLMEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleLLMError(error, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            throw new Error(\"No LLM run to end.\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onLLMError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleChainStart(chain, inputs, runId, parentRunId, tags, metadata, runType, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: name ?? chain.id[chain.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: chain,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs,\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: runType ?? \"chain\",\n            child_runs: [],\n            extra: metadata ? {\n                metadata\n            } : {},\n            tags: tags || []\n        };\n        await this._startTrace(run);\n        await this.onChainStart?.(run);\n        return run;\n    }\n    async handleChainEnd(outputs, runId, _parentRunId, _tags, kwargs) {\n        const run = this.runMap.get(runId);\n        if (!run) {\n            throw new Error(\"No chain run to end.\");\n        }\n        run.end_time = Date.now();\n        run.outputs = _coerceToDict(outputs, \"output\");\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        if (kwargs?.inputs !== undefined) {\n            run.inputs = _coerceToDict(kwargs.inputs, \"input\");\n        }\n        await this.onChainEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleChainError(error, runId, _parentRunId, _tags, kwargs) {\n        const run = this.runMap.get(runId);\n        if (!run) {\n            throw new Error(\"No chain run to end.\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        if (kwargs?.inputs !== undefined) {\n            run.inputs = _coerceToDict(kwargs.inputs, \"input\");\n        }\n        await this.onChainError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleToolStart(tool, input, runId, parentRunId, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: name ?? tool.id[tool.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: tool,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                input\n            },\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: \"tool\",\n            child_runs: [],\n            extra: metadata ? {\n                metadata\n            } : {},\n            tags: tags || []\n        };\n        await this._startTrace(run);\n        await this.onToolStart?.(run);\n        return run;\n    }\n    async handleToolEnd(output, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"tool\") {\n            throw new Error(\"No tool run to end\");\n        }\n        run.end_time = Date.now();\n        run.outputs = {\n            output\n        };\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onToolEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleToolError(error, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"tool\") {\n            throw new Error(\"No tool run to end\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onToolError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleAgentAction(action, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        const agentRun = run;\n        agentRun.actions = agentRun.actions || [];\n        agentRun.actions.push(action);\n        agentRun.events.push({\n            name: \"agent_action\",\n            time: new Date().toISOString(),\n            kwargs: {\n                action\n            }\n        });\n        await this.onAgentAction?.(run);\n    }\n    async handleAgentEnd(action, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        run.events.push({\n            name: \"agent_end\",\n            time: new Date().toISOString(),\n            kwargs: {\n                action\n            }\n        });\n        await this.onAgentEnd?.(run);\n    }\n    async handleRetrieverStart(retriever, query, runId, parentRunId, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: name ?? retriever.id[retriever.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: retriever,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                query\n            },\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: \"retriever\",\n            child_runs: [],\n            extra: metadata ? {\n                metadata\n            } : {},\n            tags: tags || []\n        };\n        await this._startTrace(run);\n        await this.onRetrieverStart?.(run);\n        return run;\n    }\n    async handleRetrieverEnd(documents, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"retriever\") {\n            throw new Error(\"No retriever run to end\");\n        }\n        run.end_time = Date.now();\n        run.outputs = {\n            documents\n        };\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onRetrieverEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleRetrieverError(error, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"retriever\") {\n            throw new Error(\"No retriever run to end\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onRetrieverError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleText(text, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        run.events.push({\n            name: \"text\",\n            time: new Date().toISOString(),\n            kwargs: {\n                text\n            }\n        });\n        await this.onText?.(run);\n    }\n    async handleLLMNewToken(token, idx, runId, _parentRunId, _tags, fields) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            throw new Error(`Invalid \"runId\" provided to \"handleLLMNewToken\" callback.`);\n        }\n        run.events.push({\n            name: \"new_token\",\n            time: new Date().toISOString(),\n            kwargs: {\n                token,\n                idx,\n                chunk: fields?.chunk\n            }\n        });\n        await this.onLLMNewToken?.(run, token, {\n            chunk: fields?.chunk\n        });\n        return run;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/console.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/console.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConsoleCallbackHandler: () => (/* binding */ ConsoleCallbackHandler)\n/* harmony export */ });\n/* harmony import */ var ansi_styles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ansi-styles */ \"(rsc)/./node_modules/ansi-styles/index.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/base.js\");\n\n\nfunction wrap(style, text) {\n    return `${style.open}${text}${style.close}`;\n}\nfunction tryJsonStringify(obj, fallback) {\n    try {\n        return JSON.stringify(obj, null, 2);\n    } catch (err) {\n        return fallback;\n    }\n}\nfunction elapsed(run) {\n    if (!run.end_time) return \"\";\n    const elapsed = run.end_time - run.start_time;\n    if (elapsed < 1000) {\n        return `${elapsed}ms`;\n    }\n    return `${(elapsed / 1000).toFixed(2)}s`;\n}\nconst { color } = ansi_styles__WEBPACK_IMPORTED_MODULE_0__;\n/**\n * A tracer that logs all events to the console. It extends from the\n * `BaseTracer` class and overrides its methods to provide custom logging\n * functionality.\n * @example\n * ```typescript\n *\n * const llm = new ChatAnthropic({\n *   temperature: 0,\n *   tags: [\"example\", \"callbacks\", \"constructor\"],\n *   callbacks: [new ConsoleCallbackHandler()],\n * });\n *\n * ```\n */ class ConsoleCallbackHandler extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseTracer {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"console_callback_handler\"\n        });\n    }\n    /**\n     * Method used to persist the run. In this case, it simply returns a\n     * resolved promise as there's no persistence logic.\n     * @param _run The run to persist.\n     * @returns A resolved promise.\n     */ persistRun(_run) {\n        return Promise.resolve();\n    }\n    // utility methods\n    /**\n     * Method used to get all the parent runs of a given run.\n     * @param run The run whose parents are to be retrieved.\n     * @returns An array of parent runs.\n     */ getParents(run) {\n        const parents = [];\n        let currentRun = run;\n        while(currentRun.parent_run_id){\n            const parent = this.runMap.get(currentRun.parent_run_id);\n            if (parent) {\n                parents.push(parent);\n                currentRun = parent;\n            } else {\n                break;\n            }\n        }\n        return parents;\n    }\n    /**\n     * Method used to get a string representation of the run's lineage, which\n     * is used in logging.\n     * @param run The run whose lineage is to be retrieved.\n     * @returns A string representation of the run's lineage.\n     */ getBreadcrumbs(run) {\n        const parents = this.getParents(run).reverse();\n        const string = [\n            ...parents,\n            run\n        ].map((parent, i, arr)=>{\n            const name = `${parent.execution_order}:${parent.run_type}:${parent.name}`;\n            return i === arr.length - 1 ? wrap(ansi_styles__WEBPACK_IMPORTED_MODULE_0__.bold, name) : name;\n        }).join(\" > \");\n        return wrap(color.grey, string);\n    }\n    // logging methods\n    /**\n     * Method used to log the start of a chain run.\n     * @param run The chain run that has started.\n     * @returns void\n     */ onChainStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.green, \"[chain/start]\")} [${crumbs}] Entering Chain run with input: ${tryJsonStringify(run.inputs, \"[inputs]\")}`);\n    }\n    /**\n     * Method used to log the end of a chain run.\n     * @param run The chain run that has ended.\n     * @returns void\n     */ onChainEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[chain/end]\")} [${crumbs}] [${elapsed(run)}] Exiting Chain run with output: ${tryJsonStringify(run.outputs, \"[outputs]\")}`);\n    }\n    /**\n     * Method used to log any errors of a chain run.\n     * @param run The chain run that has errored.\n     * @returns void\n     */ onChainError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[chain/error]\")} [${crumbs}] [${elapsed(run)}] Chain run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the start of an LLM run.\n     * @param run The LLM run that has started.\n     * @returns void\n     */ onLLMStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        const inputs = \"prompts\" in run.inputs ? {\n            prompts: run.inputs.prompts.map((p)=>p.trim())\n        } : run.inputs;\n        console.log(`${wrap(color.green, \"[llm/start]\")} [${crumbs}] Entering LLM run with input: ${tryJsonStringify(inputs, \"[inputs]\")}`);\n    }\n    /**\n     * Method used to log the end of an LLM run.\n     * @param run The LLM run that has ended.\n     * @returns void\n     */ onLLMEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[llm/end]\")} [${crumbs}] [${elapsed(run)}] Exiting LLM run with output: ${tryJsonStringify(run.outputs, \"[response]\")}`);\n    }\n    /**\n     * Method used to log any errors of an LLM run.\n     * @param run The LLM run that has errored.\n     * @returns void\n     */ onLLMError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[llm/error]\")} [${crumbs}] [${elapsed(run)}] LLM run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the start of a tool run.\n     * @param run The tool run that has started.\n     * @returns void\n     */ onToolStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.green, \"[tool/start]\")} [${crumbs}] Entering Tool run with input: \"${run.inputs.input?.trim()}\"`);\n    }\n    /**\n     * Method used to log the end of a tool run.\n     * @param run The tool run that has ended.\n     * @returns void\n     */ onToolEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[tool/end]\")} [${crumbs}] [${elapsed(run)}] Exiting Tool run with output: \"${run.outputs?.output?.trim()}\"`);\n    }\n    /**\n     * Method used to log any errors of a tool run.\n     * @param run The tool run that has errored.\n     * @returns void\n     */ onToolError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[tool/error]\")} [${crumbs}] [${elapsed(run)}] Tool run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the start of a retriever run.\n     * @param run The retriever run that has started.\n     * @returns void\n     */ onRetrieverStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.green, \"[retriever/start]\")} [${crumbs}] Entering Retriever run with input: ${tryJsonStringify(run.inputs, \"[inputs]\")}`);\n    }\n    /**\n     * Method used to log the end of a retriever run.\n     * @param run The retriever run that has ended.\n     * @returns void\n     */ onRetrieverEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[retriever/end]\")} [${crumbs}] [${elapsed(run)}] Exiting Retriever run with output: ${tryJsonStringify(run.outputs, \"[outputs]\")}`);\n    }\n    /**\n     * Method used to log any errors of a retriever run.\n     * @param run The retriever run that has errored.\n     * @returns void\n     */ onRetrieverError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[retriever/error]\")} [${crumbs}] [${elapsed(run)}] Retriever run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the action selected by the agent.\n     * @param run The run in which the agent action occurred.\n     * @returns void\n     */ onAgentAction(run) {\n        const agentRun = run;\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.blue, \"[agent/action]\")} [${crumbs}] Agent selected action: ${tryJsonStringify(agentRun.actions[agentRun.actions.length - 1], \"[action]\")}`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3RyYWNlcnMvY29uc29sZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBaUM7QUFDTTtBQUN2QyxTQUFTRSxLQUFLQyxLQUFLLEVBQUVDLElBQUk7SUFDckIsT0FBTyxDQUFDLEVBQUVELE1BQU1FLElBQUksQ0FBQyxFQUFFRCxLQUFLLEVBQUVELE1BQU1HLEtBQUssQ0FBQyxDQUFDO0FBQy9DO0FBQ0EsU0FBU0MsaUJBQWlCQyxHQUFHLEVBQUVDLFFBQVE7SUFDbkMsSUFBSTtRQUNBLE9BQU9DLEtBQUtDLFNBQVMsQ0FBQ0gsS0FBSyxNQUFNO0lBQ3JDLEVBQ0EsT0FBT0ksS0FBSztRQUNSLE9BQU9IO0lBQ1g7QUFDSjtBQUNBLFNBQVNJLFFBQVFDLEdBQUc7SUFDaEIsSUFBSSxDQUFDQSxJQUFJQyxRQUFRLEVBQ2IsT0FBTztJQUNYLE1BQU1GLFVBQVVDLElBQUlDLFFBQVEsR0FBR0QsSUFBSUUsVUFBVTtJQUM3QyxJQUFJSCxVQUFVLE1BQU07UUFDaEIsT0FBTyxDQUFDLEVBQUVBLFFBQVEsRUFBRSxDQUFDO0lBQ3pCO0lBQ0EsT0FBTyxDQUFDLEVBQUUsQ0FBQ0EsVUFBVSxJQUFHLEVBQUdJLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM1QztBQUNBLE1BQU0sRUFBRUMsS0FBSyxFQUFFLEdBQUdsQix3Q0FBTUE7QUFDeEI7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FDTSxNQUFNbUIsK0JBQStCbEIsZ0RBQVVBO0lBQ2xEbUIsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVEMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxRQUFRO1lBQ2hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO1FBQ1g7SUFDSjtJQUNBOzs7OztLQUtDLEdBQ0RDLFdBQVdDLElBQUksRUFBRTtRQUNiLE9BQU9DLFFBQVFDLE9BQU87SUFDMUI7SUFDQSxrQkFBa0I7SUFDbEI7Ozs7S0FJQyxHQUNEQyxXQUFXbEIsR0FBRyxFQUFFO1FBQ1osTUFBTW1CLFVBQVUsRUFBRTtRQUNsQixJQUFJQyxhQUFhcEI7UUFDakIsTUFBT29CLFdBQVdDLGFBQWEsQ0FBRTtZQUM3QixNQUFNQyxTQUFTLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxHQUFHLENBQUNKLFdBQVdDLGFBQWE7WUFDdkQsSUFBSUMsUUFBUTtnQkFDUkgsUUFBUU0sSUFBSSxDQUFDSDtnQkFDYkYsYUFBYUU7WUFDakIsT0FDSztnQkFDRDtZQUNKO1FBQ0o7UUFDQSxPQUFPSDtJQUNYO0lBQ0E7Ozs7O0tBS0MsR0FDRE8sZUFBZTFCLEdBQUcsRUFBRTtRQUNoQixNQUFNbUIsVUFBVSxJQUFJLENBQUNELFVBQVUsQ0FBQ2xCLEtBQUsyQixPQUFPO1FBQzVDLE1BQU1DLFNBQVM7ZUFBSVQ7WUFBU25CO1NBQUksQ0FDM0I2QixHQUFHLENBQUMsQ0FBQ1AsUUFBUVEsR0FBR0M7WUFDakIsTUFBTUMsT0FBTyxDQUFDLEVBQUVWLE9BQU9XLGVBQWUsQ0FBQyxDQUFDLEVBQUVYLE9BQU9ZLFFBQVEsQ0FBQyxDQUFDLEVBQUVaLE9BQU9VLElBQUksQ0FBQyxDQUFDO1lBQzFFLE9BQU9GLE1BQU1DLElBQUlJLE1BQU0sR0FBRyxJQUFJL0MsS0FBS0YsNkNBQVcsRUFBRThDLFFBQVFBO1FBQzVELEdBQ0tLLElBQUksQ0FBQztRQUNWLE9BQU9qRCxLQUFLZ0IsTUFBTWtDLElBQUksRUFBRVY7SUFDNUI7SUFDQSxrQkFBa0I7SUFDbEI7Ozs7S0FJQyxHQUNEVyxhQUFhdkMsR0FBRyxFQUFFO1FBQ2QsTUFBTXdDLFNBQVMsSUFBSSxDQUFDZCxjQUFjLENBQUMxQjtRQUNuQ3lDLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLEVBQUV0RCxLQUFLZ0IsTUFBTXVDLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxFQUFFSCxPQUFPLGlDQUFpQyxFQUFFL0MsaUJBQWlCTyxJQUFJNEMsTUFBTSxFQUFFLFlBQVksQ0FBQztJQUM5STtJQUNBOzs7O0tBSUMsR0FDREMsV0FBVzdDLEdBQUcsRUFBRTtRQUNaLE1BQU13QyxTQUFTLElBQUksQ0FBQ2QsY0FBYyxDQUFDMUI7UUFDbkN5QyxRQUFRQyxHQUFHLENBQUMsQ0FBQyxFQUFFdEQsS0FBS2dCLE1BQU0wQyxJQUFJLEVBQUUsZUFBZSxFQUFFLEVBQUVOLE9BQU8sR0FBRyxFQUFFekMsUUFBUUMsS0FBSyxpQ0FBaUMsRUFBRVAsaUJBQWlCTyxJQUFJK0MsT0FBTyxFQUFFLGFBQWEsQ0FBQztJQUMvSjtJQUNBOzs7O0tBSUMsR0FDREMsYUFBYWhELEdBQUcsRUFBRTtRQUNkLE1BQU13QyxTQUFTLElBQUksQ0FBQ2QsY0FBYyxDQUFDMUI7UUFDbkN5QyxRQUFRQyxHQUFHLENBQUMsQ0FBQyxFQUFFdEQsS0FBS2dCLE1BQU02QyxHQUFHLEVBQUUsaUJBQWlCLEVBQUUsRUFBRVQsT0FBTyxHQUFHLEVBQUV6QyxRQUFRQyxLQUFLLGdDQUFnQyxFQUFFUCxpQkFBaUJPLElBQUlrRCxLQUFLLEVBQUUsV0FBVyxDQUFDO0lBQzNKO0lBQ0E7Ozs7S0FJQyxHQUNEQyxXQUFXbkQsR0FBRyxFQUFFO1FBQ1osTUFBTXdDLFNBQVMsSUFBSSxDQUFDZCxjQUFjLENBQUMxQjtRQUNuQyxNQUFNNEMsU0FBUyxhQUFhNUMsSUFBSTRDLE1BQU0sR0FDaEM7WUFBRVEsU0FBU3BELElBQUk0QyxNQUFNLENBQUNRLE9BQU8sQ0FBQ3ZCLEdBQUcsQ0FBQyxDQUFDd0IsSUFBTUEsRUFBRUMsSUFBSTtRQUFJLElBQ25EdEQsSUFBSTRDLE1BQU07UUFDaEJILFFBQVFDLEdBQUcsQ0FBQyxDQUFDLEVBQUV0RCxLQUFLZ0IsTUFBTXVDLEtBQUssRUFBRSxlQUFlLEVBQUUsRUFBRUgsT0FBTywrQkFBK0IsRUFBRS9DLGlCQUFpQm1ELFFBQVEsWUFBWSxDQUFDO0lBQ3RJO0lBQ0E7Ozs7S0FJQyxHQUNEVyxTQUFTdkQsR0FBRyxFQUFFO1FBQ1YsTUFBTXdDLFNBQVMsSUFBSSxDQUFDZCxjQUFjLENBQUMxQjtRQUNuQ3lDLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLEVBQUV0RCxLQUFLZ0IsTUFBTTBDLElBQUksRUFBRSxhQUFhLEVBQUUsRUFBRU4sT0FBTyxHQUFHLEVBQUV6QyxRQUFRQyxLQUFLLCtCQUErQixFQUFFUCxpQkFBaUJPLElBQUkrQyxPQUFPLEVBQUUsY0FBYyxDQUFDO0lBQzVKO0lBQ0E7Ozs7S0FJQyxHQUNEUyxXQUFXeEQsR0FBRyxFQUFFO1FBQ1osTUFBTXdDLFNBQVMsSUFBSSxDQUFDZCxjQUFjLENBQUMxQjtRQUNuQ3lDLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLEVBQUV0RCxLQUFLZ0IsTUFBTTZDLEdBQUcsRUFBRSxlQUFlLEVBQUUsRUFBRVQsT0FBTyxHQUFHLEVBQUV6QyxRQUFRQyxLQUFLLDhCQUE4QixFQUFFUCxpQkFBaUJPLElBQUlrRCxLQUFLLEVBQUUsV0FBVyxDQUFDO0lBQ3ZKO0lBQ0E7Ozs7S0FJQyxHQUNETyxZQUFZekQsR0FBRyxFQUFFO1FBQ2IsTUFBTXdDLFNBQVMsSUFBSSxDQUFDZCxjQUFjLENBQUMxQjtRQUNuQ3lDLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLEVBQUV0RCxLQUFLZ0IsTUFBTXVDLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSxFQUFFSCxPQUFPLGlDQUFpQyxFQUFFeEMsSUFBSTRDLE1BQU0sQ0FBQ2MsS0FBSyxFQUFFSixPQUFPLENBQUMsQ0FBQztJQUM5SDtJQUNBOzs7O0tBSUMsR0FDREssVUFBVTNELEdBQUcsRUFBRTtRQUNYLE1BQU13QyxTQUFTLElBQUksQ0FBQ2QsY0FBYyxDQUFDMUI7UUFDbkN5QyxRQUFRQyxHQUFHLENBQUMsQ0FBQyxFQUFFdEQsS0FBS2dCLE1BQU0wQyxJQUFJLEVBQUUsY0FBYyxFQUFFLEVBQUVOLE9BQU8sR0FBRyxFQUFFekMsUUFBUUMsS0FBSyxpQ0FBaUMsRUFBRUEsSUFBSStDLE9BQU8sRUFBRWEsUUFBUU4sT0FBTyxDQUFDLENBQUM7SUFDaEo7SUFDQTs7OztLQUlDLEdBQ0RPLFlBQVk3RCxHQUFHLEVBQUU7UUFDYixNQUFNd0MsU0FBUyxJQUFJLENBQUNkLGNBQWMsQ0FBQzFCO1FBQ25DeUMsUUFBUUMsR0FBRyxDQUFDLENBQUMsRUFBRXRELEtBQUtnQixNQUFNNkMsR0FBRyxFQUFFLGdCQUFnQixFQUFFLEVBQUVULE9BQU8sR0FBRyxFQUFFekMsUUFBUUMsS0FBSywrQkFBK0IsRUFBRVAsaUJBQWlCTyxJQUFJa0QsS0FBSyxFQUFFLFdBQVcsQ0FBQztJQUN6SjtJQUNBOzs7O0tBSUMsR0FDRFksaUJBQWlCOUQsR0FBRyxFQUFFO1FBQ2xCLE1BQU13QyxTQUFTLElBQUksQ0FBQ2QsY0FBYyxDQUFDMUI7UUFDbkN5QyxRQUFRQyxHQUFHLENBQUMsQ0FBQyxFQUFFdEQsS0FBS2dCLE1BQU11QyxLQUFLLEVBQUUscUJBQXFCLEVBQUUsRUFBRUgsT0FBTyxxQ0FBcUMsRUFBRS9DLGlCQUFpQk8sSUFBSTRDLE1BQU0sRUFBRSxZQUFZLENBQUM7SUFDdEo7SUFDQTs7OztLQUlDLEdBQ0RtQixlQUFlL0QsR0FBRyxFQUFFO1FBQ2hCLE1BQU13QyxTQUFTLElBQUksQ0FBQ2QsY0FBYyxDQUFDMUI7UUFDbkN5QyxRQUFRQyxHQUFHLENBQUMsQ0FBQyxFQUFFdEQsS0FBS2dCLE1BQU0wQyxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsRUFBRU4sT0FBTyxHQUFHLEVBQUV6QyxRQUFRQyxLQUFLLHFDQUFxQyxFQUFFUCxpQkFBaUJPLElBQUkrQyxPQUFPLEVBQUUsYUFBYSxDQUFDO0lBQ3ZLO0lBQ0E7Ozs7S0FJQyxHQUNEaUIsaUJBQWlCaEUsR0FBRyxFQUFFO1FBQ2xCLE1BQU13QyxTQUFTLElBQUksQ0FBQ2QsY0FBYyxDQUFDMUI7UUFDbkN5QyxRQUFRQyxHQUFHLENBQUMsQ0FBQyxFQUFFdEQsS0FBS2dCLE1BQU02QyxHQUFHLEVBQUUscUJBQXFCLEVBQUUsRUFBRVQsT0FBTyxHQUFHLEVBQUV6QyxRQUFRQyxLQUFLLG9DQUFvQyxFQUFFUCxpQkFBaUJPLElBQUlrRCxLQUFLLEVBQUUsV0FBVyxDQUFDO0lBQ25LO0lBQ0E7Ozs7S0FJQyxHQUNEZSxjQUFjakUsR0FBRyxFQUFFO1FBQ2YsTUFBTWtFLFdBQVdsRTtRQUNqQixNQUFNd0MsU0FBUyxJQUFJLENBQUNkLGNBQWMsQ0FBQzFCO1FBQ25DeUMsUUFBUUMsR0FBRyxDQUFDLENBQUMsRUFBRXRELEtBQUtnQixNQUFNK0QsSUFBSSxFQUFFLGtCQUFrQixFQUFFLEVBQUUzQixPQUFPLHlCQUF5QixFQUFFL0MsaUJBQWlCeUUsU0FBU0UsT0FBTyxDQUFDRixTQUFTRSxPQUFPLENBQUNqQyxNQUFNLEdBQUcsRUFBRSxFQUFFLFlBQVksQ0FBQztJQUN6SztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3RyYWNlcnMvY29uc29sZS5qcz83MDc1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZXMgZnJvbSBcImFuc2ktc3R5bGVzXCI7XG5pbXBvcnQgeyBCYXNlVHJhY2VyIH0gZnJvbSBcIi4vYmFzZS5qc1wiO1xuZnVuY3Rpb24gd3JhcChzdHlsZSwgdGV4dCkge1xuICAgIHJldHVybiBgJHtzdHlsZS5vcGVufSR7dGV4dH0ke3N0eWxlLmNsb3NlfWA7XG59XG5mdW5jdGlvbiB0cnlKc29uU3RyaW5naWZ5KG9iaiwgZmFsbGJhY2spIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqLCBudWxsLCAyKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICByZXR1cm4gZmFsbGJhY2s7XG4gICAgfVxufVxuZnVuY3Rpb24gZWxhcHNlZChydW4pIHtcbiAgICBpZiAoIXJ1bi5lbmRfdGltZSlcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgY29uc3QgZWxhcHNlZCA9IHJ1bi5lbmRfdGltZSAtIHJ1bi5zdGFydF90aW1lO1xuICAgIGlmIChlbGFwc2VkIDwgMTAwMCkge1xuICAgICAgICByZXR1cm4gYCR7ZWxhcHNlZH1tc2A7XG4gICAgfVxuICAgIHJldHVybiBgJHsoZWxhcHNlZCAvIDEwMDApLnRvRml4ZWQoMil9c2A7XG59XG5jb25zdCB7IGNvbG9yIH0gPSBzdHlsZXM7XG4vKipcbiAqIEEgdHJhY2VyIHRoYXQgbG9ncyBhbGwgZXZlbnRzIHRvIHRoZSBjb25zb2xlLiBJdCBleHRlbmRzIGZyb20gdGhlXG4gKiBgQmFzZVRyYWNlcmAgY2xhc3MgYW5kIG92ZXJyaWRlcyBpdHMgbWV0aG9kcyB0byBwcm92aWRlIGN1c3RvbSBsb2dnaW5nXG4gKiBmdW5jdGlvbmFsaXR5LlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqXG4gKiBjb25zdCBsbG0gPSBuZXcgQ2hhdEFudGhyb3BpYyh7XG4gKiAgIHRlbXBlcmF0dXJlOiAwLFxuICogICB0YWdzOiBbXCJleGFtcGxlXCIsIFwiY2FsbGJhY2tzXCIsIFwiY29uc3RydWN0b3JcIl0sXG4gKiAgIGNhbGxiYWNrczogW25ldyBDb25zb2xlQ2FsbGJhY2tIYW5kbGVyKCldLFxuICogfSk7XG4gKlxuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBDb25zb2xlQ2FsbGJhY2tIYW5kbGVyIGV4dGVuZHMgQmFzZVRyYWNlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5hbWVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFwiY29uc29sZV9jYWxsYmFja19oYW5kbGVyXCJcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvIHBlcnNpc3QgdGhlIHJ1bi4gSW4gdGhpcyBjYXNlLCBpdCBzaW1wbHkgcmV0dXJucyBhXG4gICAgICogcmVzb2x2ZWQgcHJvbWlzZSBhcyB0aGVyZSdzIG5vIHBlcnNpc3RlbmNlIGxvZ2ljLlxuICAgICAqIEBwYXJhbSBfcnVuIFRoZSBydW4gdG8gcGVyc2lzdC5cbiAgICAgKiBAcmV0dXJucyBBIHJlc29sdmVkIHByb21pc2UuXG4gICAgICovXG4gICAgcGVyc2lzdFJ1bihfcnVuKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgLy8gdXRpbGl0eSBtZXRob2RzXG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gZ2V0IGFsbCB0aGUgcGFyZW50IHJ1bnMgb2YgYSBnaXZlbiBydW4uXG4gICAgICogQHBhcmFtIHJ1biBUaGUgcnVuIHdob3NlIHBhcmVudHMgYXJlIHRvIGJlIHJldHJpZXZlZC5cbiAgICAgKiBAcmV0dXJucyBBbiBhcnJheSBvZiBwYXJlbnQgcnVucy5cbiAgICAgKi9cbiAgICBnZXRQYXJlbnRzKHJ1bikge1xuICAgICAgICBjb25zdCBwYXJlbnRzID0gW107XG4gICAgICAgIGxldCBjdXJyZW50UnVuID0gcnVuO1xuICAgICAgICB3aGlsZSAoY3VycmVudFJ1bi5wYXJlbnRfcnVuX2lkKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLnJ1bk1hcC5nZXQoY3VycmVudFJ1bi5wYXJlbnRfcnVuX2lkKTtcbiAgICAgICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICAgICAgICAgICAgICBjdXJyZW50UnVuID0gcGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcmVudHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvIGdldCBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgcnVuJ3MgbGluZWFnZSwgd2hpY2hcbiAgICAgKiBpcyB1c2VkIGluIGxvZ2dpbmcuXG4gICAgICogQHBhcmFtIHJ1biBUaGUgcnVuIHdob3NlIGxpbmVhZ2UgaXMgdG8gYmUgcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm5zIEEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBydW4ncyBsaW5lYWdlLlxuICAgICAqL1xuICAgIGdldEJyZWFkY3J1bWJzKHJ1bikge1xuICAgICAgICBjb25zdCBwYXJlbnRzID0gdGhpcy5nZXRQYXJlbnRzKHJ1bikucmV2ZXJzZSgpO1xuICAgICAgICBjb25zdCBzdHJpbmcgPSBbLi4ucGFyZW50cywgcnVuXVxuICAgICAgICAgICAgLm1hcCgocGFyZW50LCBpLCBhcnIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBgJHtwYXJlbnQuZXhlY3V0aW9uX29yZGVyfToke3BhcmVudC5ydW5fdHlwZX06JHtwYXJlbnQubmFtZX1gO1xuICAgICAgICAgICAgcmV0dXJuIGkgPT09IGFyci5sZW5ndGggLSAxID8gd3JhcChzdHlsZXMuYm9sZCwgbmFtZSkgOiBuYW1lO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmpvaW4oXCIgPiBcIik7XG4gICAgICAgIHJldHVybiB3cmFwKGNvbG9yLmdyZXksIHN0cmluZyk7XG4gICAgfVxuICAgIC8vIGxvZ2dpbmcgbWV0aG9kc1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvIGxvZyB0aGUgc3RhcnQgb2YgYSBjaGFpbiBydW4uXG4gICAgICogQHBhcmFtIHJ1biBUaGUgY2hhaW4gcnVuIHRoYXQgaGFzIHN0YXJ0ZWQuXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIG9uQ2hhaW5TdGFydChydW4pIHtcbiAgICAgICAgY29uc3QgY3J1bWJzID0gdGhpcy5nZXRCcmVhZGNydW1icyhydW4pO1xuICAgICAgICBjb25zb2xlLmxvZyhgJHt3cmFwKGNvbG9yLmdyZWVuLCBcIltjaGFpbi9zdGFydF1cIil9IFske2NydW1ic31dIEVudGVyaW5nIENoYWluIHJ1biB3aXRoIGlucHV0OiAke3RyeUpzb25TdHJpbmdpZnkocnVuLmlucHV0cywgXCJbaW5wdXRzXVwiKX1gKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gbG9nIHRoZSBlbmQgb2YgYSBjaGFpbiBydW4uXG4gICAgICogQHBhcmFtIHJ1biBUaGUgY2hhaW4gcnVuIHRoYXQgaGFzIGVuZGVkLlxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBvbkNoYWluRW5kKHJ1bikge1xuICAgICAgICBjb25zdCBjcnVtYnMgPSB0aGlzLmdldEJyZWFkY3J1bWJzKHJ1bik7XG4gICAgICAgIGNvbnNvbGUubG9nKGAke3dyYXAoY29sb3IuY3lhbiwgXCJbY2hhaW4vZW5kXVwiKX0gWyR7Y3J1bWJzfV0gWyR7ZWxhcHNlZChydW4pfV0gRXhpdGluZyBDaGFpbiBydW4gd2l0aCBvdXRwdXQ6ICR7dHJ5SnNvblN0cmluZ2lmeShydW4ub3V0cHV0cywgXCJbb3V0cHV0c11cIil9YCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvIGxvZyBhbnkgZXJyb3JzIG9mIGEgY2hhaW4gcnVuLlxuICAgICAqIEBwYXJhbSBydW4gVGhlIGNoYWluIHJ1biB0aGF0IGhhcyBlcnJvcmVkLlxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBvbkNoYWluRXJyb3IocnVuKSB7XG4gICAgICAgIGNvbnN0IGNydW1icyA9IHRoaXMuZ2V0QnJlYWRjcnVtYnMocnVuKTtcbiAgICAgICAgY29uc29sZS5sb2coYCR7d3JhcChjb2xvci5yZWQsIFwiW2NoYWluL2Vycm9yXVwiKX0gWyR7Y3J1bWJzfV0gWyR7ZWxhcHNlZChydW4pfV0gQ2hhaW4gcnVuIGVycm9yZWQgd2l0aCBlcnJvcjogJHt0cnlKc29uU3RyaW5naWZ5KHJ1bi5lcnJvciwgXCJbZXJyb3JdXCIpfWApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNZXRob2QgdXNlZCB0byBsb2cgdGhlIHN0YXJ0IG9mIGFuIExMTSBydW4uXG4gICAgICogQHBhcmFtIHJ1biBUaGUgTExNIHJ1biB0aGF0IGhhcyBzdGFydGVkLlxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBvbkxMTVN0YXJ0KHJ1bikge1xuICAgICAgICBjb25zdCBjcnVtYnMgPSB0aGlzLmdldEJyZWFkY3J1bWJzKHJ1bik7XG4gICAgICAgIGNvbnN0IGlucHV0cyA9IFwicHJvbXB0c1wiIGluIHJ1bi5pbnB1dHNcbiAgICAgICAgICAgID8geyBwcm9tcHRzOiBydW4uaW5wdXRzLnByb21wdHMubWFwKChwKSA9PiBwLnRyaW0oKSkgfVxuICAgICAgICAgICAgOiBydW4uaW5wdXRzO1xuICAgICAgICBjb25zb2xlLmxvZyhgJHt3cmFwKGNvbG9yLmdyZWVuLCBcIltsbG0vc3RhcnRdXCIpfSBbJHtjcnVtYnN9XSBFbnRlcmluZyBMTE0gcnVuIHdpdGggaW5wdXQ6ICR7dHJ5SnNvblN0cmluZ2lmeShpbnB1dHMsIFwiW2lucHV0c11cIil9YCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvIGxvZyB0aGUgZW5kIG9mIGFuIExMTSBydW4uXG4gICAgICogQHBhcmFtIHJ1biBUaGUgTExNIHJ1biB0aGF0IGhhcyBlbmRlZC5cbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgb25MTE1FbmQocnVuKSB7XG4gICAgICAgIGNvbnN0IGNydW1icyA9IHRoaXMuZ2V0QnJlYWRjcnVtYnMocnVuKTtcbiAgICAgICAgY29uc29sZS5sb2coYCR7d3JhcChjb2xvci5jeWFuLCBcIltsbG0vZW5kXVwiKX0gWyR7Y3J1bWJzfV0gWyR7ZWxhcHNlZChydW4pfV0gRXhpdGluZyBMTE0gcnVuIHdpdGggb3V0cHV0OiAke3RyeUpzb25TdHJpbmdpZnkocnVuLm91dHB1dHMsIFwiW3Jlc3BvbnNlXVwiKX1gKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gbG9nIGFueSBlcnJvcnMgb2YgYW4gTExNIHJ1bi5cbiAgICAgKiBAcGFyYW0gcnVuIFRoZSBMTE0gcnVuIHRoYXQgaGFzIGVycm9yZWQuXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIG9uTExNRXJyb3IocnVuKSB7XG4gICAgICAgIGNvbnN0IGNydW1icyA9IHRoaXMuZ2V0QnJlYWRjcnVtYnMocnVuKTtcbiAgICAgICAgY29uc29sZS5sb2coYCR7d3JhcChjb2xvci5yZWQsIFwiW2xsbS9lcnJvcl1cIil9IFske2NydW1ic31dIFske2VsYXBzZWQocnVuKX1dIExMTSBydW4gZXJyb3JlZCB3aXRoIGVycm9yOiAke3RyeUpzb25TdHJpbmdpZnkocnVuLmVycm9yLCBcIltlcnJvcl1cIil9YCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvIGxvZyB0aGUgc3RhcnQgb2YgYSB0b29sIHJ1bi5cbiAgICAgKiBAcGFyYW0gcnVuIFRoZSB0b29sIHJ1biB0aGF0IGhhcyBzdGFydGVkLlxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBvblRvb2xTdGFydChydW4pIHtcbiAgICAgICAgY29uc3QgY3J1bWJzID0gdGhpcy5nZXRCcmVhZGNydW1icyhydW4pO1xuICAgICAgICBjb25zb2xlLmxvZyhgJHt3cmFwKGNvbG9yLmdyZWVuLCBcIlt0b29sL3N0YXJ0XVwiKX0gWyR7Y3J1bWJzfV0gRW50ZXJpbmcgVG9vbCBydW4gd2l0aCBpbnB1dDogXCIke3J1bi5pbnB1dHMuaW5wdXQ/LnRyaW0oKX1cImApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNZXRob2QgdXNlZCB0byBsb2cgdGhlIGVuZCBvZiBhIHRvb2wgcnVuLlxuICAgICAqIEBwYXJhbSBydW4gVGhlIHRvb2wgcnVuIHRoYXQgaGFzIGVuZGVkLlxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBvblRvb2xFbmQocnVuKSB7XG4gICAgICAgIGNvbnN0IGNydW1icyA9IHRoaXMuZ2V0QnJlYWRjcnVtYnMocnVuKTtcbiAgICAgICAgY29uc29sZS5sb2coYCR7d3JhcChjb2xvci5jeWFuLCBcIlt0b29sL2VuZF1cIil9IFske2NydW1ic31dIFske2VsYXBzZWQocnVuKX1dIEV4aXRpbmcgVG9vbCBydW4gd2l0aCBvdXRwdXQ6IFwiJHtydW4ub3V0cHV0cz8ub3V0cHV0Py50cmltKCl9XCJgKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gbG9nIGFueSBlcnJvcnMgb2YgYSB0b29sIHJ1bi5cbiAgICAgKiBAcGFyYW0gcnVuIFRoZSB0b29sIHJ1biB0aGF0IGhhcyBlcnJvcmVkLlxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBvblRvb2xFcnJvcihydW4pIHtcbiAgICAgICAgY29uc3QgY3J1bWJzID0gdGhpcy5nZXRCcmVhZGNydW1icyhydW4pO1xuICAgICAgICBjb25zb2xlLmxvZyhgJHt3cmFwKGNvbG9yLnJlZCwgXCJbdG9vbC9lcnJvcl1cIil9IFske2NydW1ic31dIFske2VsYXBzZWQocnVuKX1dIFRvb2wgcnVuIGVycm9yZWQgd2l0aCBlcnJvcjogJHt0cnlKc29uU3RyaW5naWZ5KHJ1bi5lcnJvciwgXCJbZXJyb3JdXCIpfWApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNZXRob2QgdXNlZCB0byBsb2cgdGhlIHN0YXJ0IG9mIGEgcmV0cmlldmVyIHJ1bi5cbiAgICAgKiBAcGFyYW0gcnVuIFRoZSByZXRyaWV2ZXIgcnVuIHRoYXQgaGFzIHN0YXJ0ZWQuXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIG9uUmV0cmlldmVyU3RhcnQocnVuKSB7XG4gICAgICAgIGNvbnN0IGNydW1icyA9IHRoaXMuZ2V0QnJlYWRjcnVtYnMocnVuKTtcbiAgICAgICAgY29uc29sZS5sb2coYCR7d3JhcChjb2xvci5ncmVlbiwgXCJbcmV0cmlldmVyL3N0YXJ0XVwiKX0gWyR7Y3J1bWJzfV0gRW50ZXJpbmcgUmV0cmlldmVyIHJ1biB3aXRoIGlucHV0OiAke3RyeUpzb25TdHJpbmdpZnkocnVuLmlucHV0cywgXCJbaW5wdXRzXVwiKX1gKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gbG9nIHRoZSBlbmQgb2YgYSByZXRyaWV2ZXIgcnVuLlxuICAgICAqIEBwYXJhbSBydW4gVGhlIHJldHJpZXZlciBydW4gdGhhdCBoYXMgZW5kZWQuXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIG9uUmV0cmlldmVyRW5kKHJ1bikge1xuICAgICAgICBjb25zdCBjcnVtYnMgPSB0aGlzLmdldEJyZWFkY3J1bWJzKHJ1bik7XG4gICAgICAgIGNvbnNvbGUubG9nKGAke3dyYXAoY29sb3IuY3lhbiwgXCJbcmV0cmlldmVyL2VuZF1cIil9IFske2NydW1ic31dIFske2VsYXBzZWQocnVuKX1dIEV4aXRpbmcgUmV0cmlldmVyIHJ1biB3aXRoIG91dHB1dDogJHt0cnlKc29uU3RyaW5naWZ5KHJ1bi5vdXRwdXRzLCBcIltvdXRwdXRzXVwiKX1gKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gbG9nIGFueSBlcnJvcnMgb2YgYSByZXRyaWV2ZXIgcnVuLlxuICAgICAqIEBwYXJhbSBydW4gVGhlIHJldHJpZXZlciBydW4gdGhhdCBoYXMgZXJyb3JlZC5cbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgb25SZXRyaWV2ZXJFcnJvcihydW4pIHtcbiAgICAgICAgY29uc3QgY3J1bWJzID0gdGhpcy5nZXRCcmVhZGNydW1icyhydW4pO1xuICAgICAgICBjb25zb2xlLmxvZyhgJHt3cmFwKGNvbG9yLnJlZCwgXCJbcmV0cmlldmVyL2Vycm9yXVwiKX0gWyR7Y3J1bWJzfV0gWyR7ZWxhcHNlZChydW4pfV0gUmV0cmlldmVyIHJ1biBlcnJvcmVkIHdpdGggZXJyb3I6ICR7dHJ5SnNvblN0cmluZ2lmeShydW4uZXJyb3IsIFwiW2Vycm9yXVwiKX1gKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gbG9nIHRoZSBhY3Rpb24gc2VsZWN0ZWQgYnkgdGhlIGFnZW50LlxuICAgICAqIEBwYXJhbSBydW4gVGhlIHJ1biBpbiB3aGljaCB0aGUgYWdlbnQgYWN0aW9uIG9jY3VycmVkLlxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBvbkFnZW50QWN0aW9uKHJ1bikge1xuICAgICAgICBjb25zdCBhZ2VudFJ1biA9IHJ1bjtcbiAgICAgICAgY29uc3QgY3J1bWJzID0gdGhpcy5nZXRCcmVhZGNydW1icyhydW4pO1xuICAgICAgICBjb25zb2xlLmxvZyhgJHt3cmFwKGNvbG9yLmJsdWUsIFwiW2FnZW50L2FjdGlvbl1cIil9IFske2NydW1ic31dIEFnZW50IHNlbGVjdGVkIGFjdGlvbjogJHt0cnlKc29uU3RyaW5naWZ5KGFnZW50UnVuLmFjdGlvbnNbYWdlbnRSdW4uYWN0aW9ucy5sZW5ndGggLSAxXSwgXCJbYWN0aW9uXVwiKX1gKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsic3R5bGVzIiwiQmFzZVRyYWNlciIsIndyYXAiLCJzdHlsZSIsInRleHQiLCJvcGVuIiwiY2xvc2UiLCJ0cnlKc29uU3RyaW5naWZ5Iiwib2JqIiwiZmFsbGJhY2siLCJKU09OIiwic3RyaW5naWZ5IiwiZXJyIiwiZWxhcHNlZCIsInJ1biIsImVuZF90aW1lIiwic3RhcnRfdGltZSIsInRvRml4ZWQiLCJjb2xvciIsIkNvbnNvbGVDYWxsYmFja0hhbmRsZXIiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJwZXJzaXN0UnVuIiwiX3J1biIsIlByb21pc2UiLCJyZXNvbHZlIiwiZ2V0UGFyZW50cyIsInBhcmVudHMiLCJjdXJyZW50UnVuIiwicGFyZW50X3J1bl9pZCIsInBhcmVudCIsInJ1bk1hcCIsImdldCIsInB1c2giLCJnZXRCcmVhZGNydW1icyIsInJldmVyc2UiLCJzdHJpbmciLCJtYXAiLCJpIiwiYXJyIiwibmFtZSIsImV4ZWN1dGlvbl9vcmRlciIsInJ1bl90eXBlIiwibGVuZ3RoIiwiYm9sZCIsImpvaW4iLCJncmV5Iiwib25DaGFpblN0YXJ0IiwiY3J1bWJzIiwiY29uc29sZSIsImxvZyIsImdyZWVuIiwiaW5wdXRzIiwib25DaGFpbkVuZCIsImN5YW4iLCJvdXRwdXRzIiwib25DaGFpbkVycm9yIiwicmVkIiwiZXJyb3IiLCJvbkxMTVN0YXJ0IiwicHJvbXB0cyIsInAiLCJ0cmltIiwib25MTE1FbmQiLCJvbkxMTUVycm9yIiwib25Ub29sU3RhcnQiLCJpbnB1dCIsIm9uVG9vbEVuZCIsIm91dHB1dCIsIm9uVG9vbEVycm9yIiwib25SZXRyaWV2ZXJTdGFydCIsIm9uUmV0cmlldmVyRW5kIiwib25SZXRyaWV2ZXJFcnJvciIsIm9uQWdlbnRBY3Rpb24iLCJhZ2VudFJ1biIsImJsdWUiLCJhY3Rpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/console.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/initialize.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/initialize.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTracingCallbackHandler: () => (/* binding */ getTracingCallbackHandler),\n/* harmony export */   getTracingV2CallbackHandler: () => (/* binding */ getTracingV2CallbackHandler)\n/* harmony export */ });\n/* harmony import */ var _tracer_langchain_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tracer_langchain.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/tracer_langchain.js\");\n/* harmony import */ var _tracer_langchain_v1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tracer_langchain_v1.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/tracer_langchain_v1.js\");\n\n\n/**\n * @deprecated Use the V2 handler instead.\n *\n * Function that returns an instance of `LangChainTracerV1`. If a session\n * is provided, it loads that session into the tracer; otherwise, it loads\n * a default session.\n * @param session Optional session to load into the tracer.\n * @returns An instance of `LangChainTracerV1`.\n */ async function getTracingCallbackHandler(session) {\n    const tracer = new _tracer_langchain_v1_js__WEBPACK_IMPORTED_MODULE_1__.LangChainTracerV1();\n    if (session) {\n        await tracer.loadSession(session);\n    } else {\n        await tracer.loadDefaultSession();\n    }\n    return tracer;\n}\n/**\n * Function that returns an instance of `LangChainTracer`. It does not\n * load any session data.\n * @returns An instance of `LangChainTracer`.\n */ async function getTracingV2CallbackHandler() {\n    return new _tracer_langchain_js__WEBPACK_IMPORTED_MODULE_0__.LangChainTracer();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3RyYWNlcnMvaW5pdGlhbGl6ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXdEO0FBQ0s7QUFDN0Q7Ozs7Ozs7O0NBUUMsR0FDTSxlQUFlRSwwQkFBMEJDLE9BQU87SUFDbkQsTUFBTUMsU0FBUyxJQUFJSCxzRUFBaUJBO0lBQ3BDLElBQUlFLFNBQVM7UUFDVCxNQUFNQyxPQUFPQyxXQUFXLENBQUNGO0lBQzdCLE9BQ0s7UUFDRCxNQUFNQyxPQUFPRSxrQkFBa0I7SUFDbkM7SUFDQSxPQUFPRjtBQUNYO0FBQ0E7Ozs7Q0FJQyxHQUNNLGVBQWVHO0lBQ2xCLE9BQU8sSUFBSVAsaUVBQWVBO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3RyYWNlcnMvaW5pdGlhbGl6ZS5qcz9lNjQ1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExhbmdDaGFpblRyYWNlciB9IGZyb20gXCIuL3RyYWNlcl9sYW5nY2hhaW4uanNcIjtcbmltcG9ydCB7IExhbmdDaGFpblRyYWNlclYxIH0gZnJvbSBcIi4vdHJhY2VyX2xhbmdjaGFpbl92MS5qc1wiO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2UgdGhlIFYyIGhhbmRsZXIgaW5zdGVhZC5cbiAqXG4gKiBGdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gaW5zdGFuY2Ugb2YgYExhbmdDaGFpblRyYWNlclYxYC4gSWYgYSBzZXNzaW9uXG4gKiBpcyBwcm92aWRlZCwgaXQgbG9hZHMgdGhhdCBzZXNzaW9uIGludG8gdGhlIHRyYWNlcjsgb3RoZXJ3aXNlLCBpdCBsb2Fkc1xuICogYSBkZWZhdWx0IHNlc3Npb24uXG4gKiBAcGFyYW0gc2Vzc2lvbiBPcHRpb25hbCBzZXNzaW9uIHRvIGxvYWQgaW50byB0aGUgdHJhY2VyLlxuICogQHJldHVybnMgQW4gaW5zdGFuY2Ugb2YgYExhbmdDaGFpblRyYWNlclYxYC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFRyYWNpbmdDYWxsYmFja0hhbmRsZXIoc2Vzc2lvbikge1xuICAgIGNvbnN0IHRyYWNlciA9IG5ldyBMYW5nQ2hhaW5UcmFjZXJWMSgpO1xuICAgIGlmIChzZXNzaW9uKSB7XG4gICAgICAgIGF3YWl0IHRyYWNlci5sb2FkU2Vzc2lvbihzZXNzaW9uKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGF3YWl0IHRyYWNlci5sb2FkRGVmYXVsdFNlc3Npb24oKTtcbiAgICB9XG4gICAgcmV0dXJuIHRyYWNlcjtcbn1cbi8qKlxuICogRnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIGluc3RhbmNlIG9mIGBMYW5nQ2hhaW5UcmFjZXJgLiBJdCBkb2VzIG5vdFxuICogbG9hZCBhbnkgc2Vzc2lvbiBkYXRhLlxuICogQHJldHVybnMgQW4gaW5zdGFuY2Ugb2YgYExhbmdDaGFpblRyYWNlcmAuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRUcmFjaW5nVjJDYWxsYmFja0hhbmRsZXIoKSB7XG4gICAgcmV0dXJuIG5ldyBMYW5nQ2hhaW5UcmFjZXIoKTtcbn1cbiJdLCJuYW1lcyI6WyJMYW5nQ2hhaW5UcmFjZXIiLCJMYW5nQ2hhaW5UcmFjZXJWMSIsImdldFRyYWNpbmdDYWxsYmFja0hhbmRsZXIiLCJzZXNzaW9uIiwidHJhY2VyIiwibG9hZFNlc3Npb24iLCJsb2FkRGVmYXVsdFNlc3Npb24iLCJnZXRUcmFjaW5nVjJDYWxsYmFja0hhbmRsZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/initialize.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/log_stream.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/log_stream.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogStreamCallbackHandler: () => (/* binding */ LogStreamCallbackHandler),\n/* harmony export */   RunLog: () => (/* binding */ RunLog),\n/* harmony export */   RunLogPatch: () => (/* binding */ RunLogPatch)\n/* harmony export */ });\n/* harmony import */ var _utils_fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/fast-json-patch/index.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/fast-json-patch/index.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/base.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/stream.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/stream.js\");\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../messages/index.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/index.js\");\n\n\n\n\n/**\n * List of jsonpatch JSONPatchOperations, which describe how to create the run state\n * from an empty dict. This is the minimal representation of the log, designed to\n * be serialized as JSON and sent over the wire to reconstruct the log on the other\n * side. Reconstruction of the state can be done with any jsonpatch-compliant library,\n * see https://jsonpatch.com for more information.\n */ class RunLogPatch {\n    constructor(fields){\n        Object.defineProperty(this, \"ops\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.ops = fields.ops ?? [];\n    }\n    concat(other) {\n        const ops = this.ops.concat(other.ops);\n        const states = (0,_utils_fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch)({}, ops);\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunLog({\n            ops,\n            state: states[states.length - 1].newDocument\n        });\n    }\n}\nclass RunLog extends RunLogPatch {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"state\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.state = fields.state;\n    }\n    concat(other) {\n        const ops = this.ops.concat(other.ops);\n        const states = (0,_utils_fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch)(this.state, other.ops);\n        return new RunLog({\n            ops,\n            state: states[states.length - 1].newDocument\n        });\n    }\n    static fromRunLogPatch(patch) {\n        const states = (0,_utils_fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch)({}, patch.ops);\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunLog({\n            ops: patch.ops,\n            state: states[states.length - 1].newDocument\n        });\n    }\n}\n/**\n * Extract standardized inputs from a run.\n *\n * Standardizes the inputs based on the type of the runnable used.\n *\n * @param run - Run object\n * @param schemaFormat - The schema format to use.\n *\n * @returns Valid inputs are only dict. By conventions, inputs always represented\n * invocation using named arguments.\n * A null means that the input is not yet known!\n */ async function _getStandardizedInputs(run, schemaFormat) {\n    if (schemaFormat === \"original\") {\n        throw new Error(\"Do not assign inputs with original schema drop the key for now. \" + \"When inputs are added to streamLog they should be added with \" + \"standardized schema for streaming events.\");\n    }\n    const { inputs } = run;\n    if ([\n        \"retriever\",\n        \"llm\",\n        \"prompt\"\n    ].includes(run.run_type)) {\n        return inputs;\n    }\n    if (Object.keys(inputs).length === 1 && inputs?.input === \"\") {\n        return undefined;\n    }\n    // new style chains\n    // These nest an additional 'input' key inside the 'inputs' to make sure\n    // the input is always a dict. We need to unpack and user the inner value.\n    // We should try to fix this in Runnables and callbacks/tracers\n    // Runnables should be using a null type here not a placeholder\n    // dict.\n    return inputs.input;\n}\nasync function _getStandardizedOutputs(run, schemaFormat) {\n    const { outputs } = run;\n    if (schemaFormat === \"original\") {\n        // Return the old schema, without standardizing anything\n        return outputs;\n    }\n    if ([\n        \"retriever\",\n        \"llm\",\n        \"prompt\"\n    ].includes(run.run_type)) {\n        return outputs;\n    }\n    // TODO: Remove this hacky check\n    if (outputs !== undefined && Object.keys(outputs).length === 1 && outputs?.output !== undefined) {\n        return outputs.output;\n    }\n    return outputs;\n}\nfunction isChatGenerationChunk(x) {\n    return x !== undefined && x.message !== undefined;\n}\n/**\n * Class that extends the `BaseTracer` class from the\n * `langchain.callbacks.tracers.base` module. It represents a callback\n * handler that logs the execution of runs and emits `RunLog` instances to a\n * `RunLogStream`.\n */ class LogStreamCallbackHandler extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseTracer {\n    constructor(fields){\n        super({\n            _awaitHandler: true,\n            ...fields\n        });\n        Object.defineProperty(this, \"autoClose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"includeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_schemaFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"original\"\n        });\n        Object.defineProperty(this, \"rootId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"keyMapByRunId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"counterMapByRunName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"transformStream\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"writer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"receiveStream\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"log_stream_tracer\"\n        });\n        this.autoClose = fields?.autoClose ?? true;\n        this.includeNames = fields?.includeNames;\n        this.includeTypes = fields?.includeTypes;\n        this.includeTags = fields?.includeTags;\n        this.excludeNames = fields?.excludeNames;\n        this.excludeTypes = fields?.excludeTypes;\n        this.excludeTags = fields?.excludeTags;\n        this._schemaFormat = fields?._schemaFormat ?? this._schemaFormat;\n        this.transformStream = new TransformStream();\n        this.writer = this.transformStream.writable.getWriter();\n        this.receiveStream = _utils_stream_js__WEBPACK_IMPORTED_MODULE_2__.IterableReadableStream.fromReadableStream(this.transformStream.readable);\n    }\n    [Symbol.asyncIterator]() {\n        return this.receiveStream;\n    }\n    async persistRun(_run) {\n    // This is a legacy method only called once for an entire run tree\n    // and is therefore not useful here\n    }\n    _includeRun(run) {\n        if (run.id === this.rootId) {\n            return false;\n        }\n        const runTags = run.tags ?? [];\n        let include = this.includeNames === undefined && this.includeTags === undefined && this.includeTypes === undefined;\n        if (this.includeNames !== undefined) {\n            include = include || this.includeNames.includes(run.name);\n        }\n        if (this.includeTypes !== undefined) {\n            include = include || this.includeTypes.includes(run.run_type);\n        }\n        if (this.includeTags !== undefined) {\n            include = include || runTags.find((tag)=>this.includeTags?.includes(tag)) !== undefined;\n        }\n        if (this.excludeNames !== undefined) {\n            include = include && !this.excludeNames.includes(run.name);\n        }\n        if (this.excludeTypes !== undefined) {\n            include = include && !this.excludeTypes.includes(run.run_type);\n        }\n        if (this.excludeTags !== undefined) {\n            include = include && runTags.every((tag)=>!this.excludeTags?.includes(tag));\n        }\n        return include;\n    }\n    async *tapOutputIterable(runId, output) {\n        // Tap an output async iterator to stream its values to the log.\n        for await (const chunk of output){\n            // root run is handled in .streamLog()\n            if (runId !== this.rootId) {\n                // if we can't find the run silently ignore\n                // eg. because this run wasn't included in the log\n                const key = this.keyMapByRunId[runId];\n                if (key) {\n                    await this.writer.write(new RunLogPatch({\n                        ops: [\n                            {\n                                op: \"add\",\n                                path: `/logs/${key}/streamed_output/-`,\n                                value: chunk\n                            }\n                        ]\n                    }));\n                }\n            }\n            yield chunk;\n        }\n    }\n    async onRunCreate(run) {\n        if (this.rootId === undefined) {\n            this.rootId = run.id;\n            await this.writer.write(new RunLogPatch({\n                ops: [\n                    {\n                        op: \"replace\",\n                        path: \"\",\n                        value: {\n                            id: run.id,\n                            name: run.name,\n                            type: run.run_type,\n                            streamed_output: [],\n                            final_output: undefined,\n                            logs: {}\n                        }\n                    }\n                ]\n            }));\n        }\n        if (!this._includeRun(run)) {\n            return;\n        }\n        if (this.counterMapByRunName[run.name] === undefined) {\n            this.counterMapByRunName[run.name] = 0;\n        }\n        this.counterMapByRunName[run.name] += 1;\n        const count = this.counterMapByRunName[run.name];\n        this.keyMapByRunId[run.id] = count === 1 ? run.name : `${run.name}:${count}`;\n        const logEntry = {\n            id: run.id,\n            name: run.name,\n            type: run.run_type,\n            tags: run.tags ?? [],\n            metadata: run.extra?.metadata ?? {},\n            start_time: new Date(run.start_time).toISOString(),\n            streamed_output: [],\n            streamed_output_str: [],\n            final_output: undefined,\n            end_time: undefined\n        };\n        if (this._schemaFormat === \"streaming_events\") {\n            logEntry.inputs = await _getStandardizedInputs(run, this._schemaFormat);\n        }\n        await this.writer.write(new RunLogPatch({\n            ops: [\n                {\n                    op: \"add\",\n                    path: `/logs/${this.keyMapByRunId[run.id]}`,\n                    value: logEntry\n                }\n            ]\n        }));\n    }\n    async onRunUpdate(run) {\n        try {\n            const runName = this.keyMapByRunId[run.id];\n            if (runName === undefined) {\n                return;\n            }\n            const ops = [];\n            if (this._schemaFormat === \"streaming_events\") {\n                ops.push({\n                    op: \"replace\",\n                    path: `/logs/${runName}/inputs`,\n                    value: await _getStandardizedInputs(run, this._schemaFormat)\n                });\n            }\n            ops.push({\n                op: \"add\",\n                path: `/logs/${runName}/final_output`,\n                value: await _getStandardizedOutputs(run, this._schemaFormat)\n            });\n            if (run.end_time !== undefined) {\n                ops.push({\n                    op: \"add\",\n                    path: `/logs/${runName}/end_time`,\n                    value: new Date(run.end_time).toISOString()\n                });\n            }\n            const patch = new RunLogPatch({\n                ops\n            });\n            await this.writer.write(patch);\n        } finally{\n            if (run.id === this.rootId) {\n                const patch = new RunLogPatch({\n                    ops: [\n                        {\n                            op: \"replace\",\n                            path: \"/final_output\",\n                            value: await _getStandardizedOutputs(run, this._schemaFormat)\n                        }\n                    ]\n                });\n                await this.writer.write(patch);\n                if (this.autoClose) {\n                    await this.writer.close();\n                }\n            }\n        }\n    }\n    async onLLMNewToken(run, token, kwargs) {\n        const runName = this.keyMapByRunId[run.id];\n        if (runName === undefined) {\n            return;\n        }\n        // TODO: Remove hack\n        const isChatModel = run.inputs.messages !== undefined;\n        let streamedOutputValue;\n        if (isChatModel) {\n            if (isChatGenerationChunk(kwargs?.chunk)) {\n                streamedOutputValue = kwargs?.chunk;\n            } else {\n                streamedOutputValue = new _messages_index_js__WEBPACK_IMPORTED_MODULE_3__.AIMessageChunk(token);\n            }\n        } else {\n            streamedOutputValue = token;\n        }\n        const patch = new RunLogPatch({\n            ops: [\n                {\n                    op: \"add\",\n                    path: `/logs/${runName}/streamed_output_str/-`,\n                    value: token\n                },\n                {\n                    op: \"add\",\n                    path: `/logs/${runName}/streamed_output/-`,\n                    value: streamedOutputValue\n                }\n            ]\n        });\n        await this.writer.write(patch);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/log_stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/root_listener.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/root_listener.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RootListenersTracer: () => (/* binding */ RootListenersTracer)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/base.js\");\n\nclass RootListenersTracer extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseTracer {\n    constructor({ config, onStart, onEnd, onError }){\n        super({\n            _awaitHandler: true\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"RootListenersTracer\"\n        });\n        /** The Run's ID. Type UUID */ Object.defineProperty(this, \"rootId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"config\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"argOnStart\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"argOnEnd\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"argOnError\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.config = config;\n        this.argOnStart = onStart;\n        this.argOnEnd = onEnd;\n        this.argOnError = onError;\n    }\n    /**\n     * This is a legacy method only called once for an entire run tree\n     * therefore not useful here\n     * @param {Run} _ Not used\n     */ persistRun(_) {\n        return Promise.resolve();\n    }\n    async onRunCreate(run) {\n        if (this.rootId) {\n            return;\n        }\n        this.rootId = run.id;\n        if (this.argOnStart) {\n            if (this.argOnStart.length === 1) {\n                await this.argOnStart(run);\n            } else if (this.argOnStart.length === 2) {\n                await this.argOnStart(run, this.config);\n            }\n        }\n    }\n    async onRunUpdate(run) {\n        if (run.id !== this.rootId) {\n            return;\n        }\n        if (!run.error) {\n            if (this.argOnEnd) {\n                if (this.argOnEnd.length === 1) {\n                    await this.argOnEnd(run);\n                } else if (this.argOnEnd.length === 2) {\n                    await this.argOnEnd(run, this.config);\n                }\n            }\n        } else if (this.argOnError) {\n            if (this.argOnError.length === 1) {\n                await this.argOnError(run);\n            } else if (this.argOnError.length === 2) {\n                await this.argOnError(run, this.config);\n            }\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3RyYWNlcnMvcm9vdF9saXN0ZW5lci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF1QztBQUNoQyxNQUFNQyw0QkFBNEJELGdEQUFVQTtJQUMvQ0UsWUFBWSxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRUMsS0FBSyxFQUFFQyxPQUFPLEVBQUcsQ0FBRTtRQUM5QyxLQUFLLENBQUM7WUFBRUMsZUFBZTtRQUFLO1FBQzVCQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVE7WUFDaENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87UUFDWDtRQUNBLDRCQUE0QixHQUM1QkwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxVQUFVO1lBQ2xDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxVQUFVO1lBQ2xDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxjQUFjO1lBQ3RDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxZQUFZO1lBQ3BDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxjQUFjO1lBQ3RDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNWLE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNXLFVBQVUsR0FBR1Y7UUFDbEIsSUFBSSxDQUFDVyxRQUFRLEdBQUdWO1FBQ2hCLElBQUksQ0FBQ1csVUFBVSxHQUFHVjtJQUN0QjtJQUNBOzs7O0tBSUMsR0FDRFcsV0FBV0MsQ0FBQyxFQUFFO1FBQ1YsT0FBT0MsUUFBUUMsT0FBTztJQUMxQjtJQUNBLE1BQU1DLFlBQVlDLEdBQUcsRUFBRTtRQUNuQixJQUFJLElBQUksQ0FBQ0MsTUFBTSxFQUFFO1lBQ2I7UUFDSjtRQUNBLElBQUksQ0FBQ0EsTUFBTSxHQUFHRCxJQUFJRSxFQUFFO1FBQ3BCLElBQUksSUFBSSxDQUFDVixVQUFVLEVBQUU7WUFDakIsSUFBSSxJQUFJLENBQUNBLFVBQVUsQ0FBQ1csTUFBTSxLQUFLLEdBQUc7Z0JBQzlCLE1BQU0sSUFBSSxDQUFDWCxVQUFVLENBQUNRO1lBQzFCLE9BQ0ssSUFBSSxJQUFJLENBQUNSLFVBQVUsQ0FBQ1csTUFBTSxLQUFLLEdBQUc7Z0JBQ25DLE1BQU0sSUFBSSxDQUFDWCxVQUFVLENBQUNRLEtBQUssSUFBSSxDQUFDbkIsTUFBTTtZQUMxQztRQUNKO0lBQ0o7SUFDQSxNQUFNdUIsWUFBWUosR0FBRyxFQUFFO1FBQ25CLElBQUlBLElBQUlFLEVBQUUsS0FBSyxJQUFJLENBQUNELE1BQU0sRUFBRTtZQUN4QjtRQUNKO1FBQ0EsSUFBSSxDQUFDRCxJQUFJSyxLQUFLLEVBQUU7WUFDWixJQUFJLElBQUksQ0FBQ1osUUFBUSxFQUFFO2dCQUNmLElBQUksSUFBSSxDQUFDQSxRQUFRLENBQUNVLE1BQU0sS0FBSyxHQUFHO29CQUM1QixNQUFNLElBQUksQ0FBQ1YsUUFBUSxDQUFDTztnQkFDeEIsT0FDSyxJQUFJLElBQUksQ0FBQ1AsUUFBUSxDQUFDVSxNQUFNLEtBQUssR0FBRztvQkFDakMsTUFBTSxJQUFJLENBQUNWLFFBQVEsQ0FBQ08sS0FBSyxJQUFJLENBQUNuQixNQUFNO2dCQUN4QztZQUNKO1FBQ0osT0FDSyxJQUFJLElBQUksQ0FBQ2EsVUFBVSxFQUFFO1lBQ3RCLElBQUksSUFBSSxDQUFDQSxVQUFVLENBQUNTLE1BQU0sS0FBSyxHQUFHO2dCQUM5QixNQUFNLElBQUksQ0FBQ1QsVUFBVSxDQUFDTTtZQUMxQixPQUNLLElBQUksSUFBSSxDQUFDTixVQUFVLENBQUNTLE1BQU0sS0FBSyxHQUFHO2dCQUNuQyxNQUFNLElBQUksQ0FBQ1QsVUFBVSxDQUFDTSxLQUFLLElBQUksQ0FBQ25CLE1BQU07WUFDMUM7UUFDSjtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1nZW5haS9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdHJhY2Vycy9yb290X2xpc3RlbmVyLmpzPzQ3ZTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZVRyYWNlciB9IGZyb20gXCIuL2Jhc2UuanNcIjtcbmV4cG9ydCBjbGFzcyBSb290TGlzdGVuZXJzVHJhY2VyIGV4dGVuZHMgQmFzZVRyYWNlciB7XG4gICAgY29uc3RydWN0b3IoeyBjb25maWcsIG9uU3RhcnQsIG9uRW5kLCBvbkVycm9yLCB9KSB7XG4gICAgICAgIHN1cGVyKHsgX2F3YWl0SGFuZGxlcjogdHJ1ZSB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogXCJSb290TGlzdGVuZXJzVHJhY2VyXCJcbiAgICAgICAgfSk7XG4gICAgICAgIC8qKiBUaGUgUnVuJ3MgSUQuIFR5cGUgVVVJRCAqL1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJyb290SWRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiY29uZmlnXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImFyZ09uU3RhcnRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiYXJnT25FbmRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiYXJnT25FcnJvclwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICAgICAgdGhpcy5hcmdPblN0YXJ0ID0gb25TdGFydDtcbiAgICAgICAgdGhpcy5hcmdPbkVuZCA9IG9uRW5kO1xuICAgICAgICB0aGlzLmFyZ09uRXJyb3IgPSBvbkVycm9yO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIGEgbGVnYWN5IG1ldGhvZCBvbmx5IGNhbGxlZCBvbmNlIGZvciBhbiBlbnRpcmUgcnVuIHRyZWVcbiAgICAgKiB0aGVyZWZvcmUgbm90IHVzZWZ1bCBoZXJlXG4gICAgICogQHBhcmFtIHtSdW59IF8gTm90IHVzZWRcbiAgICAgKi9cbiAgICBwZXJzaXN0UnVuKF8pIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBhc3luYyBvblJ1bkNyZWF0ZShydW4pIHtcbiAgICAgICAgaWYgKHRoaXMucm9vdElkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yb290SWQgPSBydW4uaWQ7XG4gICAgICAgIGlmICh0aGlzLmFyZ09uU3RhcnQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFyZ09uU3RhcnQubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hcmdPblN0YXJ0KHJ1bik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmFyZ09uU3RhcnQubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hcmdPblN0YXJ0KHJ1biwgdGhpcy5jb25maWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIG9uUnVuVXBkYXRlKHJ1bikge1xuICAgICAgICBpZiAocnVuLmlkICE9PSB0aGlzLnJvb3RJZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcnVuLmVycm9yKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hcmdPbkVuZCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFyZ09uRW5kLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFyZ09uRW5kKHJ1bik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuYXJnT25FbmQubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYXJnT25FbmQocnVuLCB0aGlzLmNvbmZpZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuYXJnT25FcnJvcikge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXJnT25FcnJvci5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFyZ09uRXJyb3IocnVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuYXJnT25FcnJvci5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFyZ09uRXJyb3IocnVuLCB0aGlzLmNvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwibmFtZXMiOlsiQmFzZVRyYWNlciIsIlJvb3RMaXN0ZW5lcnNUcmFjZXIiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsIm9uU3RhcnQiLCJvbkVuZCIsIm9uRXJyb3IiLCJfYXdhaXRIYW5kbGVyIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsImFyZ09uU3RhcnQiLCJhcmdPbkVuZCIsImFyZ09uRXJyb3IiLCJwZXJzaXN0UnVuIiwiXyIsIlByb21pc2UiLCJyZXNvbHZlIiwib25SdW5DcmVhdGUiLCJydW4iLCJyb290SWQiLCJpZCIsImxlbmd0aCIsIm9uUnVuVXBkYXRlIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/root_listener.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/tracer_langchain.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/tracer_langchain.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LangChainTracer: () => (/* binding */ LangChainTracer)\n/* harmony export */ });\n/* harmony import */ var langsmith__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! langsmith */ \"(rsc)/./node_modules/langsmith/index.js\");\n/* harmony import */ var _utils_env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/env.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/env.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/base.js\");\n\n\n\nclass LangChainTracer extends _base_js__WEBPACK_IMPORTED_MODULE_2__.BaseTracer {\n    constructor(fields = {}){\n        super(fields);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"langchain_tracer\"\n        });\n        Object.defineProperty(this, \"projectName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const { exampleId, projectName, client } = fields;\n        this.projectName = projectName ?? (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_PROJECT\") ?? (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_SESSION\");\n        this.exampleId = exampleId;\n        this.client = client ?? new langsmith__WEBPACK_IMPORTED_MODULE_0__.Client({});\n    }\n    async _convertToCreate(run, example_id = undefined) {\n        return {\n            ...run,\n            extra: {\n                ...run.extra,\n                runtime: await (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getRuntimeEnvironment)()\n            },\n            child_runs: undefined,\n            session_name: this.projectName,\n            reference_example_id: run.parent_run_id ? undefined : example_id\n        };\n    }\n    async persistRun(_run) {}\n    async onRunCreate(run) {\n        const persistedRun = await this._convertToCreate(run, this.exampleId);\n        await this.client.createRun(persistedRun);\n    }\n    async onRunUpdate(run) {\n        const runUpdate = {\n            end_time: run.end_time,\n            error: run.error,\n            outputs: run.outputs,\n            events: run.events,\n            inputs: run.inputs,\n            trace_id: run.trace_id,\n            dotted_order: run.dotted_order,\n            parent_run_id: run.parent_run_id\n        };\n        await this.client.updateRun(run.id, runUpdate);\n    }\n    getRun(id) {\n        return this.runMap.get(id);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3RyYWNlcnMvdHJhY2VyX2xhbmdjaGFpbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW1DO0FBQzZDO0FBQ3pDO0FBQ2hDLE1BQU1JLHdCQUF3QkQsZ0RBQVVBO0lBQzNDRSxZQUFZQyxTQUFTLENBQUMsQ0FBQyxDQUFFO1FBQ3JCLEtBQUssQ0FBQ0E7UUFDTkMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxRQUFRO1lBQ2hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO1FBQ1g7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxlQUFlO1lBQ3ZDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxhQUFhO1lBQ3JDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxVQUFVO1lBQ2xDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxNQUFNLEVBQUVDLFNBQVMsRUFBRUMsV0FBVyxFQUFFQyxNQUFNLEVBQUUsR0FBR1Q7UUFDM0MsSUFBSSxDQUFDUSxXQUFXLEdBQ1pBLGVBQ0liLHFFQUFzQkEsQ0FBQyx3QkFDdkJBLHFFQUFzQkEsQ0FBQztRQUMvQixJQUFJLENBQUNZLFNBQVMsR0FBR0E7UUFDakIsSUFBSSxDQUFDRSxNQUFNLEdBQUdBLFVBQVUsSUFBSWYsNkNBQU1BLENBQUMsQ0FBQztJQUN4QztJQUNBLE1BQU1nQixpQkFBaUJDLEdBQUcsRUFBRUMsYUFBYUMsU0FBUyxFQUFFO1FBQ2hELE9BQU87WUFDSCxHQUFHRixHQUFHO1lBQ05HLE9BQU87Z0JBQ0gsR0FBR0gsSUFBSUcsS0FBSztnQkFDWkMsU0FBUyxNQUFNbkIsb0VBQXFCQTtZQUN4QztZQUNBb0IsWUFBWUg7WUFDWkksY0FBYyxJQUFJLENBQUNULFdBQVc7WUFDOUJVLHNCQUFzQlAsSUFBSVEsYUFBYSxHQUFHTixZQUFZRDtRQUMxRDtJQUNKO0lBQ0EsTUFBTVEsV0FBV0MsSUFBSSxFQUFFLENBQUU7SUFDekIsTUFBTUMsWUFBWVgsR0FBRyxFQUFFO1FBQ25CLE1BQU1ZLGVBQWUsTUFBTSxJQUFJLENBQUNiLGdCQUFnQixDQUFDQyxLQUFLLElBQUksQ0FBQ0osU0FBUztRQUNwRSxNQUFNLElBQUksQ0FBQ0UsTUFBTSxDQUFDZSxTQUFTLENBQUNEO0lBQ2hDO0lBQ0EsTUFBTUUsWUFBWWQsR0FBRyxFQUFFO1FBQ25CLE1BQU1lLFlBQVk7WUFDZEMsVUFBVWhCLElBQUlnQixRQUFRO1lBQ3RCQyxPQUFPakIsSUFBSWlCLEtBQUs7WUFDaEJDLFNBQVNsQixJQUFJa0IsT0FBTztZQUNwQkMsUUFBUW5CLElBQUltQixNQUFNO1lBQ2xCQyxRQUFRcEIsSUFBSW9CLE1BQU07WUFDbEJDLFVBQVVyQixJQUFJcUIsUUFBUTtZQUN0QkMsY0FBY3RCLElBQUlzQixZQUFZO1lBQzlCZCxlQUFlUixJQUFJUSxhQUFhO1FBQ3BDO1FBQ0EsTUFBTSxJQUFJLENBQUNWLE1BQU0sQ0FBQ3lCLFNBQVMsQ0FBQ3ZCLElBQUl3QixFQUFFLEVBQUVUO0lBQ3hDO0lBQ0FVLE9BQU9ELEVBQUUsRUFBRTtRQUNQLE9BQU8sSUFBSSxDQUFDRSxNQUFNLENBQUNDLEdBQUcsQ0FBQ0g7SUFDM0I7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWdlbmFpL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC90cmFjZXJzL3RyYWNlcl9sYW5nY2hhaW4uanM/MDA3MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbGllbnQgfSBmcm9tIFwibGFuZ3NtaXRoXCI7XG5pbXBvcnQgeyBnZXRFbnZpcm9ubWVudFZhcmlhYmxlLCBnZXRSdW50aW1lRW52aXJvbm1lbnQgfSBmcm9tIFwiLi4vdXRpbHMvZW52LmpzXCI7XG5pbXBvcnQgeyBCYXNlVHJhY2VyIH0gZnJvbSBcIi4vYmFzZS5qc1wiO1xuZXhwb3J0IGNsYXNzIExhbmdDaGFpblRyYWNlciBleHRlbmRzIEJhc2VUcmFjZXIge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkcyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKGZpZWxkcyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5hbWVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFwibGFuZ2NoYWluX3RyYWNlclwiXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJwcm9qZWN0TmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJleGFtcGxlSWRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiY2xpZW50XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHsgZXhhbXBsZUlkLCBwcm9qZWN0TmFtZSwgY2xpZW50IH0gPSBmaWVsZHM7XG4gICAgICAgIHRoaXMucHJvamVjdE5hbWUgPVxuICAgICAgICAgICAgcHJvamVjdE5hbWUgPz9cbiAgICAgICAgICAgICAgICBnZXRFbnZpcm9ubWVudFZhcmlhYmxlKFwiTEFOR0NIQUlOX1BST0pFQ1RcIikgPz9cbiAgICAgICAgICAgICAgICBnZXRFbnZpcm9ubWVudFZhcmlhYmxlKFwiTEFOR0NIQUlOX1NFU1NJT05cIik7XG4gICAgICAgIHRoaXMuZXhhbXBsZUlkID0gZXhhbXBsZUlkO1xuICAgICAgICB0aGlzLmNsaWVudCA9IGNsaWVudCA/PyBuZXcgQ2xpZW50KHt9KTtcbiAgICB9XG4gICAgYXN5bmMgX2NvbnZlcnRUb0NyZWF0ZShydW4sIGV4YW1wbGVfaWQgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnJ1bixcbiAgICAgICAgICAgIGV4dHJhOiB7XG4gICAgICAgICAgICAgICAgLi4ucnVuLmV4dHJhLFxuICAgICAgICAgICAgICAgIHJ1bnRpbWU6IGF3YWl0IGdldFJ1bnRpbWVFbnZpcm9ubWVudCgpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNoaWxkX3J1bnM6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHNlc3Npb25fbmFtZTogdGhpcy5wcm9qZWN0TmFtZSxcbiAgICAgICAgICAgIHJlZmVyZW5jZV9leGFtcGxlX2lkOiBydW4ucGFyZW50X3J1bl9pZCA/IHVuZGVmaW5lZCA6IGV4YW1wbGVfaWQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGFzeW5jIHBlcnNpc3RSdW4oX3J1bikgeyB9XG4gICAgYXN5bmMgb25SdW5DcmVhdGUocnVuKSB7XG4gICAgICAgIGNvbnN0IHBlcnNpc3RlZFJ1biA9IGF3YWl0IHRoaXMuX2NvbnZlcnRUb0NyZWF0ZShydW4sIHRoaXMuZXhhbXBsZUlkKTtcbiAgICAgICAgYXdhaXQgdGhpcy5jbGllbnQuY3JlYXRlUnVuKHBlcnNpc3RlZFJ1bik7XG4gICAgfVxuICAgIGFzeW5jIG9uUnVuVXBkYXRlKHJ1bikge1xuICAgICAgICBjb25zdCBydW5VcGRhdGUgPSB7XG4gICAgICAgICAgICBlbmRfdGltZTogcnVuLmVuZF90aW1lLFxuICAgICAgICAgICAgZXJyb3I6IHJ1bi5lcnJvcixcbiAgICAgICAgICAgIG91dHB1dHM6IHJ1bi5vdXRwdXRzLFxuICAgICAgICAgICAgZXZlbnRzOiBydW4uZXZlbnRzLFxuICAgICAgICAgICAgaW5wdXRzOiBydW4uaW5wdXRzLFxuICAgICAgICAgICAgdHJhY2VfaWQ6IHJ1bi50cmFjZV9pZCxcbiAgICAgICAgICAgIGRvdHRlZF9vcmRlcjogcnVuLmRvdHRlZF9vcmRlcixcbiAgICAgICAgICAgIHBhcmVudF9ydW5faWQ6IHJ1bi5wYXJlbnRfcnVuX2lkLFxuICAgICAgICB9O1xuICAgICAgICBhd2FpdCB0aGlzLmNsaWVudC51cGRhdGVSdW4ocnVuLmlkLCBydW5VcGRhdGUpO1xuICAgIH1cbiAgICBnZXRSdW4oaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucnVuTWFwLmdldChpZCk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkNsaWVudCIsImdldEVudmlyb25tZW50VmFyaWFibGUiLCJnZXRSdW50aW1lRW52aXJvbm1lbnQiLCJCYXNlVHJhY2VyIiwiTGFuZ0NoYWluVHJhY2VyIiwiY29uc3RydWN0b3IiLCJmaWVsZHMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwiZXhhbXBsZUlkIiwicHJvamVjdE5hbWUiLCJjbGllbnQiLCJfY29udmVydFRvQ3JlYXRlIiwicnVuIiwiZXhhbXBsZV9pZCIsInVuZGVmaW5lZCIsImV4dHJhIiwicnVudGltZSIsImNoaWxkX3J1bnMiLCJzZXNzaW9uX25hbWUiLCJyZWZlcmVuY2VfZXhhbXBsZV9pZCIsInBhcmVudF9ydW5faWQiLCJwZXJzaXN0UnVuIiwiX3J1biIsIm9uUnVuQ3JlYXRlIiwicGVyc2lzdGVkUnVuIiwiY3JlYXRlUnVuIiwib25SdW5VcGRhdGUiLCJydW5VcGRhdGUiLCJlbmRfdGltZSIsImVycm9yIiwib3V0cHV0cyIsImV2ZW50cyIsImlucHV0cyIsInRyYWNlX2lkIiwiZG90dGVkX29yZGVyIiwidXBkYXRlUnVuIiwiaWQiLCJnZXRSdW4iLCJydW5NYXAiLCJnZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/tracer_langchain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/tracer_langchain_v1.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/tracer_langchain_v1.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LangChainTracerV1: () => (/* binding */ LangChainTracerV1)\n/* harmony export */ });\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../messages/index.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _utils_env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/env.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/env.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/base.js\");\n\n\n\n/** @deprecated Use LangChainTracer instead. */ class LangChainTracerV1 extends _base_js__WEBPACK_IMPORTED_MODULE_2__.BaseTracer {\n    constructor(){\n        super();\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"langchain_tracer\"\n        });\n        Object.defineProperty(this, \"endpoint\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_ENDPOINT\") || \"http://localhost:1984\"\n        });\n        Object.defineProperty(this, \"headers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        Object.defineProperty(this, \"session\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const apiKey = (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_API_KEY\");\n        if (apiKey) {\n            this.headers[\"x-api-key\"] = apiKey;\n        }\n    }\n    async newSession(sessionName) {\n        const sessionCreate = {\n            start_time: Date.now(),\n            name: sessionName\n        };\n        const session = await this.persistSession(sessionCreate);\n        this.session = session;\n        return session;\n    }\n    async loadSession(sessionName) {\n        const endpoint = `${this.endpoint}/sessions?name=${sessionName}`;\n        return this._handleSessionResponse(endpoint);\n    }\n    async loadDefaultSession() {\n        const endpoint = `${this.endpoint}/sessions?name=default`;\n        return this._handleSessionResponse(endpoint);\n    }\n    async convertV2RunToRun(run) {\n        const session = this.session ?? await this.loadDefaultSession();\n        const serialized = run.serialized;\n        let runResult;\n        if (run.run_type === \"llm\") {\n            const prompts = run.inputs.prompts ? run.inputs.prompts : run.inputs.messages.map((x)=>(0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.getBufferString)(x));\n            const llmRun = {\n                uuid: run.id,\n                start_time: run.start_time,\n                end_time: run.end_time,\n                execution_order: run.execution_order,\n                child_execution_order: run.child_execution_order,\n                serialized,\n                type: run.run_type,\n                session_id: session.id,\n                prompts,\n                response: run.outputs\n            };\n            runResult = llmRun;\n        } else if (run.run_type === \"chain\") {\n            const child_runs = await Promise.all(run.child_runs.map((child_run)=>this.convertV2RunToRun(child_run)));\n            const chainRun = {\n                uuid: run.id,\n                start_time: run.start_time,\n                end_time: run.end_time,\n                execution_order: run.execution_order,\n                child_execution_order: run.child_execution_order,\n                serialized,\n                type: run.run_type,\n                session_id: session.id,\n                inputs: run.inputs,\n                outputs: run.outputs,\n                child_llm_runs: child_runs.filter((child_run)=>child_run.type === \"llm\"),\n                child_chain_runs: child_runs.filter((child_run)=>child_run.type === \"chain\"),\n                child_tool_runs: child_runs.filter((child_run)=>child_run.type === \"tool\")\n            };\n            runResult = chainRun;\n        } else if (run.run_type === \"tool\") {\n            const child_runs = await Promise.all(run.child_runs.map((child_run)=>this.convertV2RunToRun(child_run)));\n            const toolRun = {\n                uuid: run.id,\n                start_time: run.start_time,\n                end_time: run.end_time,\n                execution_order: run.execution_order,\n                child_execution_order: run.child_execution_order,\n                serialized,\n                type: run.run_type,\n                session_id: session.id,\n                tool_input: run.inputs.input,\n                output: run.outputs?.output,\n                action: JSON.stringify(serialized),\n                child_llm_runs: child_runs.filter((child_run)=>child_run.type === \"llm\"),\n                child_chain_runs: child_runs.filter((child_run)=>child_run.type === \"chain\"),\n                child_tool_runs: child_runs.filter((child_run)=>child_run.type === \"tool\")\n            };\n            runResult = toolRun;\n        } else {\n            throw new Error(`Unknown run type: ${run.run_type}`);\n        }\n        return runResult;\n    }\n    async persistRun(run) {\n        let endpoint;\n        let v1Run;\n        if (run.run_type !== undefined) {\n            v1Run = await this.convertV2RunToRun(run);\n        } else {\n            v1Run = run;\n        }\n        if (v1Run.type === \"llm\") {\n            endpoint = `${this.endpoint}/llm-runs`;\n        } else if (v1Run.type === \"chain\") {\n            endpoint = `${this.endpoint}/chain-runs`;\n        } else {\n            endpoint = `${this.endpoint}/tool-runs`;\n        }\n        const response = await fetch(endpoint, {\n            method: \"POST\",\n            headers: this.headers,\n            body: JSON.stringify(v1Run)\n        });\n        if (!response.ok) {\n            console.error(`Failed to persist run: ${response.status} ${response.statusText}`);\n        }\n    }\n    async persistSession(sessionCreate) {\n        const endpoint = `${this.endpoint}/sessions`;\n        const response = await fetch(endpoint, {\n            method: \"POST\",\n            headers: this.headers,\n            body: JSON.stringify(sessionCreate)\n        });\n        if (!response.ok) {\n            console.error(`Failed to persist session: ${response.status} ${response.statusText}, using default session.`);\n            return {\n                id: 1,\n                ...sessionCreate\n            };\n        }\n        return {\n            id: (await response.json()).id,\n            ...sessionCreate\n        };\n    }\n    async _handleSessionResponse(endpoint) {\n        const response = await fetch(endpoint, {\n            method: \"GET\",\n            headers: this.headers\n        });\n        let tracerSession;\n        if (!response.ok) {\n            console.error(`Failed to load session: ${response.status} ${response.statusText}`);\n            tracerSession = {\n                id: 1,\n                start_time: Date.now()\n            };\n            this.session = tracerSession;\n            return tracerSession;\n        }\n        const resp = await response.json();\n        if (resp.length === 0) {\n            tracerSession = {\n                id: 1,\n                start_time: Date.now()\n            };\n            this.session = tracerSession;\n            return tracerSession;\n        }\n        [tracerSession] = resp;\n        this.session = tracerSession;\n        return tracerSession;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/tracers/tracer_langchain_v1.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/async_caller.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/async_caller.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncCaller: () => (/* binding */ AsyncCaller)\n/* harmony export */ });\n/* harmony import */ var p_retry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-retry */ \"(rsc)/./node_modules/p-retry/index.js\");\n/* harmony import */ var p_queue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! p-queue */ \"(rsc)/./node_modules/p-queue/dist/index.js\");\n\n\nconst STATUS_NO_RETRY = [\n    400,\n    401,\n    402,\n    403,\n    404,\n    405,\n    406,\n    407,\n    409\n];\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst defaultFailedAttemptHandler = (error)=>{\n    if (error.message.startsWith(\"Cancel\") || error.message.startsWith(\"AbortError\") || error.name === \"AbortError\") {\n        throw error;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (error?.code === \"ECONNABORTED\") {\n        throw error;\n    }\n    const status = // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    error?.response?.status ?? error?.status;\n    if (status && STATUS_NO_RETRY.includes(+status)) {\n        throw error;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (error?.error?.code === \"insufficient_quota\") {\n        const err = new Error(error?.message);\n        err.name = \"InsufficientQuotaError\";\n        throw err;\n    }\n};\n/**\n * A class that can be used to make async calls with concurrency and retry logic.\n *\n * This is useful for making calls to any kind of \"expensive\" external resource,\n * be it because it's rate-limited, subject to network issues, etc.\n *\n * Concurrent calls are limited by the `maxConcurrency` parameter, which defaults\n * to `Infinity`. This means that by default, all calls will be made in parallel.\n *\n * Retries are limited by the `maxRetries` parameter, which defaults to 6. This\n * means that by default, each call will be retried up to 6 times, with an\n * exponential backoff between each attempt.\n */ class AsyncCaller {\n    constructor(params){\n        Object.defineProperty(this, \"maxConcurrency\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxRetries\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"onFailedAttempt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"queue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.maxConcurrency = params.maxConcurrency ?? Infinity;\n        this.maxRetries = params.maxRetries ?? 6;\n        this.onFailedAttempt = params.onFailedAttempt ?? defaultFailedAttemptHandler;\n        const PQueue =  true ? p_queue__WEBPACK_IMPORTED_MODULE_1__[\"default\"] : p_queue__WEBPACK_IMPORTED_MODULE_1__;\n        this.queue = new PQueue({\n            concurrency: this.maxConcurrency\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    call(callable, ...args) {\n        return this.queue.add(()=>p_retry__WEBPACK_IMPORTED_MODULE_0__(()=>callable(...args).catch((error)=>{\n                    // eslint-disable-next-line no-instanceof/no-instanceof\n                    if (error instanceof Error) {\n                        throw error;\n                    } else {\n                        throw new Error(error);\n                    }\n                }), {\n                onFailedAttempt: this.onFailedAttempt,\n                retries: this.maxRetries,\n                randomize: true\n            }), {\n            throwOnTimeout: true\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callWithOptions(options, callable, ...args) {\n        // Note this doesn't cancel the underlying request,\n        // when available prefer to use the signal option of the underlying call\n        if (options.signal) {\n            return Promise.race([\n                this.call(callable, ...args),\n                new Promise((_, reject)=>{\n                    options.signal?.addEventListener(\"abort\", ()=>{\n                        reject(new Error(\"AbortError\"));\n                    });\n                })\n            ]);\n        }\n        return this.call(callable, ...args);\n    }\n    fetch(...args) {\n        return this.call(()=>fetch(...args).then((res)=>res.ok ? res : Promise.reject(res)));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/async_caller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/chunk_array.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/chunk_array.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chunkArray: () => (/* binding */ chunkArray)\n/* harmony export */ });\nconst chunkArray = (arr, chunkSize)=>arr.reduce((chunks, elem, index)=>{\n        const chunkIndex = Math.floor(index / chunkSize);\n        const chunk = chunks[chunkIndex] || [];\n        // eslint-disable-next-line no-param-reassign\n        chunks[chunkIndex] = chunk.concat([\n            elem\n        ]);\n        return chunks;\n    }, []);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL2NodW5rX2FycmF5LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxhQUFhLENBQUNDLEtBQUtDLFlBQWNELElBQUlFLE1BQU0sQ0FBQyxDQUFDQyxRQUFRQyxNQUFNQztRQUNwRSxNQUFNQyxhQUFhQyxLQUFLQyxLQUFLLENBQUNILFFBQVFKO1FBQ3RDLE1BQU1RLFFBQVFOLE1BQU0sQ0FBQ0csV0FBVyxJQUFJLEVBQUU7UUFDdEMsNkNBQTZDO1FBQzdDSCxNQUFNLENBQUNHLFdBQVcsR0FBR0csTUFBTUMsTUFBTSxDQUFDO1lBQUNOO1NBQUs7UUFDeEMsT0FBT0Q7SUFDWCxHQUFHLEVBQUUsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWdlbmFpL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC91dGlscy9jaHVua19hcnJheS5qcz83NzFhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBjaHVua0FycmF5ID0gKGFyciwgY2h1bmtTaXplKSA9PiBhcnIucmVkdWNlKChjaHVua3MsIGVsZW0sIGluZGV4KSA9PiB7XG4gICAgY29uc3QgY2h1bmtJbmRleCA9IE1hdGguZmxvb3IoaW5kZXggLyBjaHVua1NpemUpO1xuICAgIGNvbnN0IGNodW5rID0gY2h1bmtzW2NodW5rSW5kZXhdIHx8IFtdO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIGNodW5rc1tjaHVua0luZGV4XSA9IGNodW5rLmNvbmNhdChbZWxlbV0pO1xuICAgIHJldHVybiBjaHVua3M7XG59LCBbXSk7XG4iXSwibmFtZXMiOlsiY2h1bmtBcnJheSIsImFyciIsImNodW5rU2l6ZSIsInJlZHVjZSIsImNodW5rcyIsImVsZW0iLCJpbmRleCIsImNodW5rSW5kZXgiLCJNYXRoIiwiZmxvb3IiLCJjaHVuayIsImNvbmNhdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/chunk_array.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/env.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/env.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnv: () => (/* binding */ getEnv),\n/* harmony export */   getEnvironmentVariable: () => (/* binding */ getEnvironmentVariable),\n/* harmony export */   getRuntimeEnvironment: () => (/* binding */ getRuntimeEnvironment),\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser),\n/* harmony export */   isDeno: () => (/* binding */ isDeno),\n/* harmony export */   isJsDom: () => (/* binding */ isJsDom),\n/* harmony export */   isNode: () => (/* binding */ isNode),\n/* harmony export */   isWebWorker: () => (/* binding */ isWebWorker)\n/* harmony export */ });\nconst isBrowser = ()=> false && 0;\nconst isWebWorker = ()=>typeof globalThis === \"object\" && globalThis.constructor && globalThis.constructor.name === \"DedicatedWorkerGlobalScope\";\nconst isJsDom = ()=> false || typeof navigator !== \"undefined\" && (navigator.userAgent.includes(\"Node.js\") || navigator.userAgent.includes(\"jsdom\"));\n// Supabase Edge Function provides a `Deno` global object\n// without `version` property\nconst isDeno = ()=>typeof Deno !== \"undefined\";\n// Mark not-as-node if in Supabase Edge Function\nconst isNode = ()=>typeof process !== \"undefined\" && typeof process.versions !== \"undefined\" && typeof process.versions.node !== \"undefined\" && !isDeno();\nconst getEnv = ()=>{\n    let env;\n    if (isBrowser()) {\n        env = \"browser\";\n    } else if (isNode()) {\n        env = \"node\";\n    } else if (isWebWorker()) {\n        env = \"webworker\";\n    } else if (isJsDom()) {\n        env = \"jsdom\";\n    } else if (isDeno()) {\n        env = \"deno\";\n    } else {\n        env = \"other\";\n    }\n    return env;\n};\nlet runtimeEnvironment;\nasync function getRuntimeEnvironment() {\n    if (runtimeEnvironment === undefined) {\n        const env = getEnv();\n        runtimeEnvironment = {\n            library: \"langchain-js\",\n            runtime: env\n        };\n    }\n    return runtimeEnvironment;\n}\nfunction getEnvironmentVariable(name) {\n    // Certain Deno setups will throw an error if you try to access environment variables\n    // https://github.com/langchain-ai/langchainjs/issues/1412\n    try {\n        return typeof process !== \"undefined\" ? process.env?.[name] : undefined;\n    } catch (e) {\n        return undefined;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL2Vudi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFPLE1BQU1BLFlBQVksSUFBTSxNQUE2QixJQUFJLENBQXNDLENBQUM7QUFDaEcsTUFBTUcsY0FBYyxJQUFNLE9BQU9DLGVBQWUsWUFDbkRBLFdBQVdDLFdBQVcsSUFDdEJELFdBQVdDLFdBQVcsQ0FBQ0MsSUFBSSxLQUFLLDZCQUE2QjtBQUMxRCxNQUFNQyxVQUFVLElBQU0sTUFBMEQsSUFDbEYsT0FBT0MsY0FBYyxlQUNqQkEsQ0FBQUEsVUFBVUMsU0FBUyxDQUFDQyxRQUFRLENBQUMsY0FDMUJGLFVBQVVDLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDLFFBQU8sRUFBSTtBQUNwRCx5REFBeUQ7QUFDekQsNkJBQTZCO0FBQ3RCLE1BQU1DLFNBQVMsSUFBTSxPQUFPQyxTQUFTLFlBQVk7QUFDeEQsZ0RBQWdEO0FBQ3pDLE1BQU1DLFNBQVMsSUFBTSxPQUFPQyxZQUFZLGVBQzNDLE9BQU9BLFFBQVFDLFFBQVEsS0FBSyxlQUM1QixPQUFPRCxRQUFRQyxRQUFRLENBQUNDLElBQUksS0FBSyxlQUNqQyxDQUFDTCxTQUFTO0FBQ1AsTUFBTU0sU0FBUztJQUNsQixJQUFJQztJQUNKLElBQUlsQixhQUFhO1FBQ2JrQixNQUFNO0lBQ1YsT0FDSyxJQUFJTCxVQUFVO1FBQ2ZLLE1BQU07SUFDVixPQUNLLElBQUlmLGVBQWU7UUFDcEJlLE1BQU07SUFDVixPQUNLLElBQUlYLFdBQVc7UUFDaEJXLE1BQU07SUFDVixPQUNLLElBQUlQLFVBQVU7UUFDZk8sTUFBTTtJQUNWLE9BQ0s7UUFDREEsTUFBTTtJQUNWO0lBQ0EsT0FBT0E7QUFDWCxFQUFFO0FBQ0YsSUFBSUM7QUFDRyxlQUFlQztJQUNsQixJQUFJRCx1QkFBdUJFLFdBQVc7UUFDbEMsTUFBTUgsTUFBTUQ7UUFDWkUscUJBQXFCO1lBQ2pCRyxTQUFTO1lBQ1RDLFNBQVNMO1FBQ2I7SUFDSjtJQUNBLE9BQU9DO0FBQ1g7QUFDTyxTQUFTSyx1QkFBdUJsQixJQUFJO0lBQ3ZDLHFGQUFxRjtJQUNyRiwwREFBMEQ7SUFDMUQsSUFBSTtRQUNBLE9BQU8sT0FBT1EsWUFBWSxjQUVsQkEsUUFBUUksR0FBRyxFQUFFLENBQUNaLEtBQUssR0FDckJlO0lBQ1YsRUFDQSxPQUFPSSxHQUFHO1FBQ04sT0FBT0o7SUFDWDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL2Vudi5qcz9hYzViIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBpc0Jyb3dzZXIgPSAoKSA9PiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCI7XG5leHBvcnQgY29uc3QgaXNXZWJXb3JrZXIgPSAoKSA9PiB0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gXCJvYmplY3RcIiAmJlxuICAgIGdsb2JhbFRoaXMuY29uc3RydWN0b3IgJiZcbiAgICBnbG9iYWxUaGlzLmNvbnN0cnVjdG9yLm5hbWUgPT09IFwiRGVkaWNhdGVkV29ya2VyR2xvYmFsU2NvcGVcIjtcbmV4cG9ydCBjb25zdCBpc0pzRG9tID0gKCkgPT4gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93Lm5hbWUgPT09IFwibm9kZWpzXCIpIHx8XG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5jbHVkZXMoXCJOb2RlLmpzXCIpIHx8XG4gICAgICAgICAgICBuYXZpZ2F0b3IudXNlckFnZW50LmluY2x1ZGVzKFwianNkb21cIikpKTtcbi8vIFN1cGFiYXNlIEVkZ2UgRnVuY3Rpb24gcHJvdmlkZXMgYSBgRGVub2AgZ2xvYmFsIG9iamVjdFxuLy8gd2l0aG91dCBgdmVyc2lvbmAgcHJvcGVydHlcbmV4cG9ydCBjb25zdCBpc0Rlbm8gPSAoKSA9PiB0eXBlb2YgRGVubyAhPT0gXCJ1bmRlZmluZWRcIjtcbi8vIE1hcmsgbm90LWFzLW5vZGUgaWYgaW4gU3VwYWJhc2UgRWRnZSBGdW5jdGlvblxuZXhwb3J0IGNvbnN0IGlzTm9kZSA9ICgpID0+IHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICB0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgIWlzRGVubygpO1xuZXhwb3J0IGNvbnN0IGdldEVudiA9ICgpID0+IHtcbiAgICBsZXQgZW52O1xuICAgIGlmIChpc0Jyb3dzZXIoKSkge1xuICAgICAgICBlbnYgPSBcImJyb3dzZXJcIjtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNOb2RlKCkpIHtcbiAgICAgICAgZW52ID0gXCJub2RlXCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzV2ViV29ya2VyKCkpIHtcbiAgICAgICAgZW52ID0gXCJ3ZWJ3b3JrZXJcIjtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNKc0RvbSgpKSB7XG4gICAgICAgIGVudiA9IFwianNkb21cIjtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNEZW5vKCkpIHtcbiAgICAgICAgZW52ID0gXCJkZW5vXCI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlbnYgPSBcIm90aGVyXCI7XG4gICAgfVxuICAgIHJldHVybiBlbnY7XG59O1xubGV0IHJ1bnRpbWVFbnZpcm9ubWVudDtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRSdW50aW1lRW52aXJvbm1lbnQoKSB7XG4gICAgaWYgKHJ1bnRpbWVFbnZpcm9ubWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IGVudiA9IGdldEVudigpO1xuICAgICAgICBydW50aW1lRW52aXJvbm1lbnQgPSB7XG4gICAgICAgICAgICBsaWJyYXJ5OiBcImxhbmdjaGFpbi1qc1wiLFxuICAgICAgICAgICAgcnVudGltZTogZW52LFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcnVudGltZUVudmlyb25tZW50O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEVudmlyb25tZW50VmFyaWFibGUobmFtZSkge1xuICAgIC8vIENlcnRhaW4gRGVubyBzZXR1cHMgd2lsbCB0aHJvdyBhbiBlcnJvciBpZiB5b3UgdHJ5IHRvIGFjY2VzcyBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbGFuZ2NoYWluLWFpL2xhbmdjaGFpbmpzL2lzc3Vlcy8xNDEyXG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiXG4gICAgICAgICAgICA/IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm9jZXNzLWVudlxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52Py5bbmFtZV1cbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJpc0Jyb3dzZXIiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImlzV2ViV29ya2VyIiwiZ2xvYmFsVGhpcyIsImNvbnN0cnVjdG9yIiwibmFtZSIsImlzSnNEb20iLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpbmNsdWRlcyIsImlzRGVubyIsIkRlbm8iLCJpc05vZGUiLCJwcm9jZXNzIiwidmVyc2lvbnMiLCJub2RlIiwiZ2V0RW52IiwiZW52IiwicnVudGltZUVudmlyb25tZW50IiwiZ2V0UnVudGltZUVudmlyb25tZW50IiwidW5kZWZpbmVkIiwibGlicmFyeSIsInJ1bnRpbWUiLCJnZXRFbnZpcm9ubWVudFZhcmlhYmxlIiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/env.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/fast-json-patch/index.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/fast-json-patch/index.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonPatchError: () => (/* reexport safe */ _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.PatchError),\n/* harmony export */   _areEquals: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__._areEquals),\n/* harmony export */   applyOperation: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.applyOperation),\n/* harmony export */   applyPatch: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch),\n/* harmony export */   applyReducer: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.applyReducer),\n/* harmony export */   compare: () => (/* reexport safe */ _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__.compare),\n/* harmony export */   deepClone: () => (/* reexport safe */ _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__._deepClone),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   escapePathComponent: () => (/* reexport safe */ _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.escapePathComponent),\n/* harmony export */   generate: () => (/* reexport safe */ _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__.generate),\n/* harmony export */   getValueByPointer: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.getValueByPointer),\n/* harmony export */   observe: () => (/* reexport safe */ _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__.observe),\n/* harmony export */   unescapePathComponent: () => (/* reexport safe */ _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.unescapePathComponent),\n/* harmony export */   unobserve: () => (/* reexport safe */ _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__.unobserve),\n/* harmony export */   validate: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.validate),\n/* harmony export */   validator: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.validator)\n/* harmony export */ });\n/* harmony import */ var _src_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/core.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js\");\n/* harmony import */ var _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/duplex.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.js\");\n/* harmony import */ var _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/helpers.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js\");\n\n\n\n/**\n * Default export for backwards compat\n */ \n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    ..._src_core_js__WEBPACK_IMPORTED_MODULE_0__,\n    // ...duplex,\n    JsonPatchError: _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.PatchError,\n    deepClone: _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__._deepClone,\n    escapePathComponent: _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.escapePathComponent,\n    unescapePathComponent: _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.unescapePathComponent\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL2Zhc3QtanNvbi1wYXRjaC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQThCO0FBQ0U7QUFDc0c7QUFDdEk7O0NBRUMsR0FDcUM7QUFDZ0c7QUFDdEksaUVBQWU7SUFDWCxHQUFHTSx5Q0FBSTtJQUNQLGFBQWE7SUFDYkwsY0FBY0EseURBQUFBO0lBQ2RFLFNBQVNBLHlEQUFBQTtJQUNUQyxtQkFBbUJBLGtFQUFBQTtJQUNuQkMscUJBQXFCQSxvRUFBQUE7QUFDekIsQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL2Zhc3QtanNvbi1wYXRjaC9pbmRleC5qcz9lZDZhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL3NyYy9jb3JlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zcmMvZHVwbGV4LmpzXCI7XG5leHBvcnQgeyBQYXRjaEVycm9yIGFzIEpzb25QYXRjaEVycm9yLCBfZGVlcENsb25lIGFzIGRlZXBDbG9uZSwgZXNjYXBlUGF0aENvbXBvbmVudCwgdW5lc2NhcGVQYXRoQ29tcG9uZW50LCB9IGZyb20gXCIuL3NyYy9oZWxwZXJzLmpzXCI7XG4vKipcbiAqIERlZmF1bHQgZXhwb3J0IGZvciBiYWNrd2FyZHMgY29tcGF0XG4gKi9cbmltcG9ydCAqIGFzIGNvcmUgZnJvbSBcIi4vc3JjL2NvcmUuanNcIjtcbmltcG9ydCB7IFBhdGNoRXJyb3IgYXMgSnNvblBhdGNoRXJyb3IsIF9kZWVwQ2xvbmUgYXMgZGVlcENsb25lLCBlc2NhcGVQYXRoQ29tcG9uZW50LCB1bmVzY2FwZVBhdGhDb21wb25lbnQsIH0gZnJvbSBcIi4vc3JjL2hlbHBlcnMuanNcIjtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgICAuLi5jb3JlLFxuICAgIC8vIC4uLmR1cGxleCxcbiAgICBKc29uUGF0Y2hFcnJvcixcbiAgICBkZWVwQ2xvbmUsXG4gICAgZXNjYXBlUGF0aENvbXBvbmVudCxcbiAgICB1bmVzY2FwZVBhdGhDb21wb25lbnQsXG59O1xuIl0sIm5hbWVzIjpbIlBhdGNoRXJyb3IiLCJKc29uUGF0Y2hFcnJvciIsIl9kZWVwQ2xvbmUiLCJkZWVwQ2xvbmUiLCJlc2NhcGVQYXRoQ29tcG9uZW50IiwidW5lc2NhcGVQYXRoQ29tcG9uZW50IiwiY29yZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/fast-json-patch/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonPatchError: () => (/* binding */ JsonPatchError),\n/* harmony export */   _areEquals: () => (/* binding */ _areEquals),\n/* harmony export */   applyOperation: () => (/* binding */ applyOperation),\n/* harmony export */   applyPatch: () => (/* binding */ applyPatch),\n/* harmony export */   applyReducer: () => (/* binding */ applyReducer),\n/* harmony export */   deepClone: () => (/* binding */ deepClone),\n/* harmony export */   getValueByPointer: () => (/* binding */ getValueByPointer),\n/* harmony export */   validate: () => (/* binding */ validate),\n/* harmony export */   validator: () => (/* binding */ validator)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js\");\n// @ts-nocheck\n\nconst JsonPatchError = _helpers_js__WEBPACK_IMPORTED_MODULE_0__.PatchError;\nconst deepClone = _helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone;\n/* We use a Javascript hash to store each\n function. Each hash entry (property) uses\n the operation identifiers specified in rfc6902.\n In this way, we can map each patch operation\n to its dedicated function in efficient way.\n */ /* The operations applicable to an object */ const objOps = {\n    add: function(obj, key, document) {\n        obj[key] = this.value;\n        return {\n            newDocument: document\n        };\n    },\n    remove: function(obj, key, document) {\n        var removed = obj[key];\n        delete obj[key];\n        return {\n            newDocument: document,\n            removed\n        };\n    },\n    replace: function(obj, key, document) {\n        var removed = obj[key];\n        obj[key] = this.value;\n        return {\n            newDocument: document,\n            removed\n        };\n    },\n    move: function(obj, key, document) {\n        /* in case move target overwrites an existing value,\n        return the removed value, this can be taxing performance-wise,\n        and is potentially unneeded */ let removed = getValueByPointer(document, this.path);\n        if (removed) {\n            removed = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(removed);\n        }\n        const originalValue = applyOperation(document, {\n            op: \"remove\",\n            path: this.from\n        }).removed;\n        applyOperation(document, {\n            op: \"add\",\n            path: this.path,\n            value: originalValue\n        });\n        return {\n            newDocument: document,\n            removed\n        };\n    },\n    copy: function(obj, key, document) {\n        const valueToCopy = getValueByPointer(document, this.from);\n        // enforce copy by value so further operations don't affect source (see issue #177)\n        applyOperation(document, {\n            op: \"add\",\n            path: this.path,\n            value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(valueToCopy)\n        });\n        return {\n            newDocument: document\n        };\n    },\n    test: function(obj, key, document) {\n        return {\n            newDocument: document,\n            test: _areEquals(obj[key], this.value)\n        };\n    },\n    _get: function(obj, key, document) {\n        this.value = obj[key];\n        return {\n            newDocument: document\n        };\n    }\n};\n/* The operations applicable to an array. Many are the same as for the object */ var arrOps = {\n    add: function(arr, i, document) {\n        if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(i)) {\n            arr.splice(i, 0, this.value);\n        } else {\n            // array props\n            arr[i] = this.value;\n        }\n        // this may be needed when using '-' in an array\n        return {\n            newDocument: document,\n            index: i\n        };\n    },\n    remove: function(arr, i, document) {\n        var removedList = arr.splice(i, 1);\n        return {\n            newDocument: document,\n            removed: removedList[0]\n        };\n    },\n    replace: function(arr, i, document) {\n        var removed = arr[i];\n        arr[i] = this.value;\n        return {\n            newDocument: document,\n            removed\n        };\n    },\n    move: objOps.move,\n    copy: objOps.copy,\n    test: objOps.test,\n    _get: objOps._get\n};\n/**\n * Retrieves a value from a JSON document by a JSON pointer.\n * Returns the value.\n *\n * @param document The document to get the value from\n * @param pointer an escaped JSON pointer\n * @return The retrieved value\n */ function getValueByPointer(document, pointer) {\n    if (pointer == \"\") {\n        return document;\n    }\n    var getOriginalDestination = {\n        op: \"_get\",\n        path: pointer\n    };\n    applyOperation(document, getOriginalDestination);\n    return getOriginalDestination.value;\n}\n/**\n * Apply a single JSON Patch Operation on a JSON document.\n * Returns the {newDocument, result} of the operation.\n * It modifies the `document` and `operation` objects - it gets the values by reference.\n * If you would like to avoid touching your values, clone them:\n * `jsonpatch.applyOperation(document, jsonpatch._deepClone(operation))`.\n *\n * @param document The document to patch\n * @param operation The operation to apply\n * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.\n * @param mutateDocument Whether to mutate the original document or clone it before applying\n * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.\n * @return `{newDocument, result}` after the operation\n */ function applyOperation(document, operation, validateOperation = false, mutateDocument = true, banPrototypeModifications = true, index = 0) {\n    if (validateOperation) {\n        if (typeof validateOperation == \"function\") {\n            validateOperation(operation, 0, document, operation.path);\n        } else {\n            validator(operation, 0);\n        }\n    }\n    /* ROOT OPERATIONS */ if (operation.path === \"\") {\n        let returnValue = {\n            newDocument: document\n        };\n        if (operation.op === \"add\") {\n            returnValue.newDocument = operation.value;\n            return returnValue;\n        } else if (operation.op === \"replace\") {\n            returnValue.newDocument = operation.value;\n            returnValue.removed = document; //document we removed\n            return returnValue;\n        } else if (operation.op === \"move\" || operation.op === \"copy\") {\n            // it's a move or copy to root\n            returnValue.newDocument = getValueByPointer(document, operation.from); // get the value by json-pointer in `from` field\n            if (operation.op === \"move\") {\n                // report removed item\n                returnValue.removed = document;\n            }\n            return returnValue;\n        } else if (operation.op === \"test\") {\n            returnValue.test = _areEquals(document, operation.value);\n            if (returnValue.test === false) {\n                throw new JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n            }\n            returnValue.newDocument = document;\n            return returnValue;\n        } else if (operation.op === \"remove\") {\n            // a remove on root\n            returnValue.removed = document;\n            returnValue.newDocument = null;\n            return returnValue;\n        } else if (operation.op === \"_get\") {\n            operation.value = document;\n            return returnValue;\n        } else {\n            /* bad operation */ if (validateOperation) {\n                throw new JsonPatchError(\"Operation `op` property is not one of operations defined in RFC-6902\", \"OPERATION_OP_INVALID\", index, operation, document);\n            } else {\n                return returnValue;\n            }\n        }\n    } else {\n        if (!mutateDocument) {\n            document = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(document);\n        }\n        const path = operation.path || \"\";\n        const keys = path.split(\"/\");\n        let obj = document;\n        let t = 1; //skip empty element - http://jsperf.com/to-shift-or-not-to-shift\n        let len = keys.length;\n        let existingPathFragment = undefined;\n        let key;\n        let validateFunction;\n        if (typeof validateOperation == \"function\") {\n            validateFunction = validateOperation;\n        } else {\n            validateFunction = validator;\n        }\n        while(true){\n            key = keys[t];\n            if (key && key.indexOf(\"~\") != -1) {\n                key = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.unescapePathComponent)(key);\n            }\n            if (banPrototypeModifications && (key == \"__proto__\" || key == \"prototype\" && t > 0 && keys[t - 1] == \"constructor\")) {\n                throw new TypeError(\"JSON-Patch: modifying `__proto__` or `constructor/prototype` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README\");\n            }\n            if (validateOperation) {\n                if (existingPathFragment === undefined) {\n                    if (obj[key] === undefined) {\n                        existingPathFragment = keys.slice(0, t).join(\"/\");\n                    } else if (t == len - 1) {\n                        existingPathFragment = operation.path;\n                    }\n                    if (existingPathFragment !== undefined) {\n                        validateFunction(operation, 0, document, existingPathFragment);\n                    }\n                }\n            }\n            t++;\n            if (Array.isArray(obj)) {\n                if (key === \"-\") {\n                    key = obj.length;\n                } else {\n                    if (validateOperation && !(0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(key)) {\n                        throw new JsonPatchError(\"Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index\", \"OPERATION_PATH_ILLEGAL_ARRAY_INDEX\", index, operation, document);\n                    } else if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(key)) {\n                        key = ~~key;\n                    }\n                }\n                if (t >= len) {\n                    if (validateOperation && operation.op === \"add\" && key > obj.length) {\n                        throw new JsonPatchError(\"The specified index MUST NOT be greater than the number of elements in the array\", \"OPERATION_VALUE_OUT_OF_BOUNDS\", index, operation, document);\n                    }\n                    const returnValue = arrOps[operation.op].call(operation, obj, key, document); // Apply patch\n                    if (returnValue.test === false) {\n                        throw new JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n                    }\n                    return returnValue;\n                }\n            } else {\n                if (t >= len) {\n                    const returnValue = objOps[operation.op].call(operation, obj, key, document); // Apply patch\n                    if (returnValue.test === false) {\n                        throw new JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n                    }\n                    return returnValue;\n                }\n            }\n            obj = obj[key];\n            // If we have more keys in the path, but the next value isn't a non-null object,\n            // throw an OPERATION_PATH_UNRESOLVABLE error instead of iterating again.\n            if (validateOperation && t < len && (!obj || typeof obj !== \"object\")) {\n                throw new JsonPatchError(\"Cannot perform operation at the desired path\", \"OPERATION_PATH_UNRESOLVABLE\", index, operation, document);\n            }\n        }\n    }\n}\n/**\n * Apply a full JSON Patch array on a JSON document.\n * Returns the {newDocument, result} of the patch.\n * It modifies the `document` object and `patch` - it gets the values by reference.\n * If you would like to avoid touching your values, clone them:\n * `jsonpatch.applyPatch(document, jsonpatch._deepClone(patch))`.\n *\n * @param document The document to patch\n * @param patch The patch to apply\n * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.\n * @param mutateDocument Whether to mutate the original document or clone it before applying\n * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.\n * @return An array of `{newDocument, result}` after the patch\n */ function applyPatch(document, patch, validateOperation, mutateDocument = true, banPrototypeModifications = true) {\n    if (validateOperation) {\n        if (!Array.isArray(patch)) {\n            throw new JsonPatchError(\"Patch sequence must be an array\", \"SEQUENCE_NOT_AN_ARRAY\");\n        }\n    }\n    if (!mutateDocument) {\n        document = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(document);\n    }\n    const results = new Array(patch.length);\n    for(let i = 0, length = patch.length; i < length; i++){\n        // we don't need to pass mutateDocument argument because if it was true, we already deep cloned the object, we'll just pass `true`\n        results[i] = applyOperation(document, patch[i], validateOperation, true, banPrototypeModifications, i);\n        document = results[i].newDocument; // in case root was replaced\n    }\n    results.newDocument = document;\n    return results;\n}\n/**\n * Apply a single JSON Patch Operation on a JSON document.\n * Returns the updated document.\n * Suitable as a reducer.\n *\n * @param document The document to patch\n * @param operation The operation to apply\n * @return The updated document\n */ function applyReducer(document, operation, index) {\n    const operationResult = applyOperation(document, operation);\n    if (operationResult.test === false) {\n        // failed test\n        throw new JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n    }\n    return operationResult.newDocument;\n}\n/**\n * Validates a single operation. Called from `jsonpatch.validate`. Throws `JsonPatchError` in case of an error.\n * @param {object} operation - operation object (patch)\n * @param {number} index - index of operation in the sequence\n * @param {object} [document] - object where the operation is supposed to be applied\n * @param {string} [existingPathFragment] - comes along with `document`\n */ function validator(operation, index, document, existingPathFragment) {\n    if (typeof operation !== \"object\" || operation === null || Array.isArray(operation)) {\n        throw new JsonPatchError(\"Operation is not an object\", \"OPERATION_NOT_AN_OBJECT\", index, operation, document);\n    } else if (!objOps[operation.op]) {\n        throw new JsonPatchError(\"Operation `op` property is not one of operations defined in RFC-6902\", \"OPERATION_OP_INVALID\", index, operation, document);\n    } else if (typeof operation.path !== \"string\") {\n        throw new JsonPatchError(\"Operation `path` property is not a string\", \"OPERATION_PATH_INVALID\", index, operation, document);\n    } else if (operation.path.indexOf(\"/\") !== 0 && operation.path.length > 0) {\n        // paths that aren't empty string should start with \"/\"\n        throw new JsonPatchError('Operation `path` property must start with \"/\"', \"OPERATION_PATH_INVALID\", index, operation, document);\n    } else if ((operation.op === \"move\" || operation.op === \"copy\") && typeof operation.from !== \"string\") {\n        throw new JsonPatchError(\"Operation `from` property is not present (applicable in `move` and `copy` operations)\", \"OPERATION_FROM_REQUIRED\", index, operation, document);\n    } else if ((operation.op === \"add\" || operation.op === \"replace\" || operation.op === \"test\") && operation.value === undefined) {\n        throw new JsonPatchError(\"Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)\", \"OPERATION_VALUE_REQUIRED\", index, operation, document);\n    } else if ((operation.op === \"add\" || operation.op === \"replace\" || operation.op === \"test\") && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.hasUndefined)(operation.value)) {\n        throw new JsonPatchError(\"Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)\", \"OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED\", index, operation, document);\n    } else if (document) {\n        if (operation.op == \"add\") {\n            var pathLen = operation.path.split(\"/\").length;\n            var existingPathLen = existingPathFragment.split(\"/\").length;\n            if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) {\n                throw new JsonPatchError(\"Cannot perform an `add` operation at the desired path\", \"OPERATION_PATH_CANNOT_ADD\", index, operation, document);\n            }\n        } else if (operation.op === \"replace\" || operation.op === \"remove\" || operation.op === \"_get\") {\n            if (operation.path !== existingPathFragment) {\n                throw new JsonPatchError(\"Cannot perform the operation at a path that does not exist\", \"OPERATION_PATH_UNRESOLVABLE\", index, operation, document);\n            }\n        } else if (operation.op === \"move\" || operation.op === \"copy\") {\n            var existingValue = {\n                op: \"_get\",\n                path: operation.from,\n                value: undefined\n            };\n            var error = validate([\n                existingValue\n            ], document);\n            if (error && error.name === \"OPERATION_PATH_UNRESOLVABLE\") {\n                throw new JsonPatchError(\"Cannot perform the operation from a path that does not exist\", \"OPERATION_FROM_UNRESOLVABLE\", index, operation, document);\n            }\n        }\n    }\n}\n/**\n * Validates a sequence of operations. If `document` parameter is provided, the sequence is additionally validated against the object document.\n * If error is encountered, returns a JsonPatchError object\n * @param sequence\n * @param document\n * @returns {JsonPatchError|undefined}\n */ function validate(sequence, document, externalValidator) {\n    try {\n        if (!Array.isArray(sequence)) {\n            throw new JsonPatchError(\"Patch sequence must be an array\", \"SEQUENCE_NOT_AN_ARRAY\");\n        }\n        if (document) {\n            //clone document and sequence so that we can safely try applying operations\n            applyPatch((0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(document), (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(sequence), externalValidator || true);\n        } else {\n            externalValidator = externalValidator || validator;\n            for(var i = 0; i < sequence.length; i++){\n                externalValidator(sequence[i], i, document, undefined);\n            }\n        }\n    } catch (e) {\n        if (e instanceof JsonPatchError) {\n            return e;\n        } else {\n            throw e;\n        }\n    }\n}\n// based on https://github.com/epoberezkin/fast-deep-equal\n// MIT License\n// Copyright (c) 2017 Evgeny Poberezkin\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nfunction _areEquals(a, b) {\n    if (a === b) return true;\n    if (a && b && typeof a == \"object\" && typeof b == \"object\") {\n        var arrA = Array.isArray(a), arrB = Array.isArray(b), i, length, key;\n        if (arrA && arrB) {\n            length = a.length;\n            if (length != b.length) return false;\n            for(i = length; i-- !== 0;)if (!_areEquals(a[i], b[i])) return false;\n            return true;\n        }\n        if (arrA != arrB) return false;\n        var keys = Object.keys(a);\n        length = keys.length;\n        if (length !== Object.keys(b).length) return false;\n        for(i = length; i-- !== 0;)if (!b.hasOwnProperty(keys[i])) return false;\n        for(i = length; i-- !== 0;){\n            key = keys[i];\n            if (!_areEquals(a[key], b[key])) return false;\n        }\n        return true;\n    }\n    return a !== a && b !== b;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compare: () => (/* binding */ compare),\n/* harmony export */   generate: () => (/* binding */ generate),\n/* harmony export */   observe: () => (/* binding */ observe),\n/* harmony export */   unobserve: () => (/* binding */ unobserve)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js\");\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js\");\n// @ts-nocheck\n// Inlined because of ESM import issues\n/*!\n * https://github.com/Starcounter-Jack/JSON-Patch\n * (c) 2013-2021 Joachim Wester\n * MIT license\n */ \n\nvar beforeDict = new WeakMap();\nclass Mirror {\n    constructor(obj){\n        Object.defineProperty(this, \"obj\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"observers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n        Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.obj = obj;\n    }\n}\nclass ObserverInfo {\n    constructor(callback, observer){\n        Object.defineProperty(this, \"callback\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"observer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.callback = callback;\n        this.observer = observer;\n    }\n}\nfunction getMirror(obj) {\n    return beforeDict.get(obj);\n}\nfunction getObserverFromMirror(mirror, callback) {\n    return mirror.observers.get(callback);\n}\nfunction removeObserverFromMirror(mirror, observer) {\n    mirror.observers.delete(observer.callback);\n}\n/**\n * Detach an observer from an object\n */ function unobserve(root, observer) {\n    observer.unobserve();\n}\n/**\n * Observes changes made to an object, which can then be retrieved using generate\n */ function observe(obj, callback) {\n    var patches = [];\n    var observer;\n    var mirror = getMirror(obj);\n    if (!mirror) {\n        mirror = new Mirror(obj);\n        beforeDict.set(obj, mirror);\n    } else {\n        const observerInfo = getObserverFromMirror(mirror, callback);\n        observer = observerInfo && observerInfo.observer;\n    }\n    if (observer) {\n        return observer;\n    }\n    observer = {};\n    mirror.value = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(obj);\n    if (callback) {\n        observer.callback = callback;\n        observer.next = null;\n        var dirtyCheck = ()=>{\n            generate(observer);\n        };\n        var fastCheck = ()=>{\n            clearTimeout(observer.next);\n            observer.next = setTimeout(dirtyCheck);\n        };\n        if (false) {}\n    }\n    observer.patches = patches;\n    observer.object = obj;\n    observer.unobserve = ()=>{\n        generate(observer);\n        clearTimeout(observer.next);\n        removeObserverFromMirror(mirror, observer);\n        if (false) {}\n    };\n    mirror.observers.set(callback, new ObserverInfo(callback, observer));\n    return observer;\n}\n/**\n * Generate an array of patches from an observer\n */ function generate(observer, invertible = false) {\n    var mirror = beforeDict.get(observer.object);\n    _generate(mirror.value, observer.object, observer.patches, \"\", invertible);\n    if (observer.patches.length) {\n        (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.applyPatch)(mirror.value, observer.patches);\n    }\n    var temp = observer.patches;\n    if (temp.length > 0) {\n        observer.patches = [];\n        if (observer.callback) {\n            observer.callback(temp);\n        }\n    }\n    return temp;\n}\n// Dirty check if obj is different from mirror, generate patches and update mirror\nfunction _generate(mirror, obj, patches, path, invertible) {\n    if (obj === mirror) {\n        return;\n    }\n    if (typeof obj.toJSON === \"function\") {\n        obj = obj.toJSON();\n    }\n    var newKeys = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._objectKeys)(obj);\n    var oldKeys = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._objectKeys)(mirror);\n    var changed = false;\n    var deleted = false;\n    //if ever \"move\" operation is implemented here, make sure this test runs OK: \"should not generate the same patch twice (move)\"\n    for(var t = oldKeys.length - 1; t >= 0; t--){\n        var key = oldKeys[t];\n        var oldVal = mirror[key];\n        if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.hasOwnProperty)(obj, key) && !(obj[key] === undefined && oldVal !== undefined && Array.isArray(obj) === false)) {\n            var newVal = obj[key];\n            if (typeof oldVal == \"object\" && oldVal != null && typeof newVal == \"object\" && newVal != null && Array.isArray(oldVal) === Array.isArray(newVal)) {\n                _generate(oldVal, newVal, patches, path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key), invertible);\n            } else {\n                if (oldVal !== newVal) {\n                    changed = true;\n                    if (invertible) {\n                        patches.push({\n                            op: \"test\",\n                            path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key),\n                            value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(oldVal)\n                        });\n                    }\n                    patches.push({\n                        op: \"replace\",\n                        path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key),\n                        value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(newVal)\n                    });\n                }\n            }\n        } else if (Array.isArray(mirror) === Array.isArray(obj)) {\n            if (invertible) {\n                patches.push({\n                    op: \"test\",\n                    path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key),\n                    value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(oldVal)\n                });\n            }\n            patches.push({\n                op: \"remove\",\n                path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key)\n            });\n            deleted = true; // property has been deleted\n        } else {\n            if (invertible) {\n                patches.push({\n                    op: \"test\",\n                    path,\n                    value: mirror\n                });\n            }\n            patches.push({\n                op: \"replace\",\n                path,\n                value: obj\n            });\n            changed = true;\n        }\n    }\n    if (!deleted && newKeys.length == oldKeys.length) {\n        return;\n    }\n    for(var t = 0; t < newKeys.length; t++){\n        var key = newKeys[t];\n        if (!(0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.hasOwnProperty)(mirror, key) && obj[key] !== undefined) {\n            patches.push({\n                op: \"add\",\n                path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key),\n                value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(obj[key])\n            });\n        }\n    }\n}\n/**\n * Create an array of patches from the differences in two objects\n */ function compare(tree1, tree2, invertible = false) {\n    var patches = [];\n    _generate(tree1, tree2, patches, \"\", invertible);\n    return patches;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PatchError: () => (/* binding */ PatchError),\n/* harmony export */   _deepClone: () => (/* binding */ _deepClone),\n/* harmony export */   _getPathRecursive: () => (/* binding */ _getPathRecursive),\n/* harmony export */   _objectKeys: () => (/* binding */ _objectKeys),\n/* harmony export */   escapePathComponent: () => (/* binding */ escapePathComponent),\n/* harmony export */   getPath: () => (/* binding */ getPath),\n/* harmony export */   hasOwnProperty: () => (/* binding */ hasOwnProperty),\n/* harmony export */   hasUndefined: () => (/* binding */ hasUndefined),\n/* harmony export */   isInteger: () => (/* binding */ isInteger),\n/* harmony export */   unescapePathComponent: () => (/* binding */ unescapePathComponent)\n/* harmony export */ });\n// @ts-nocheck\n// Inlined because of ESM import issues\n/*!\n * https://github.com/Starcounter-Jack/JSON-Patch\n * (c) 2017-2022 Joachim Wester\n * MIT licensed\n */ const _hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwnProperty(obj, key) {\n    return _hasOwnProperty.call(obj, key);\n}\nfunction _objectKeys(obj) {\n    if (Array.isArray(obj)) {\n        const keys = new Array(obj.length);\n        for(let k = 0; k < keys.length; k++){\n            keys[k] = \"\" + k;\n        }\n        return keys;\n    }\n    if (Object.keys) {\n        return Object.keys(obj);\n    }\n    let keys = [];\n    for(let i in obj){\n        if (hasOwnProperty(obj, i)) {\n            keys.push(i);\n        }\n    }\n    return keys;\n}\n/**\n * Deeply clone the object.\n * https://jsperf.com/deep-copy-vs-json-stringify-json-parse/25 (recursiveDeepCopy)\n * @param  {any} obj value to clone\n * @return {any} cloned obj\n */ function _deepClone(obj) {\n    switch(typeof obj){\n        case \"object\":\n            return JSON.parse(JSON.stringify(obj)); //Faster than ES5 clone - http://jsperf.com/deep-cloning-of-objects/5\n        case \"undefined\":\n            return null; //this is how JSON.stringify behaves for array items\n        default:\n            return obj; //no need to clone primitives\n    }\n}\n//3x faster than cached /^\\d+$/.test(str)\nfunction isInteger(str) {\n    let i = 0;\n    const len = str.length;\n    let charCode;\n    while(i < len){\n        charCode = str.charCodeAt(i);\n        if (charCode >= 48 && charCode <= 57) {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\n/**\n * Escapes a json pointer path\n * @param path The raw pointer\n * @return the Escaped path\n */ function escapePathComponent(path) {\n    if (path.indexOf(\"/\") === -1 && path.indexOf(\"~\") === -1) return path;\n    return path.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n}\n/**\n * Unescapes a json pointer path\n * @param path The escaped pointer\n * @return The unescaped path\n */ function unescapePathComponent(path) {\n    return path.replace(/~1/g, \"/\").replace(/~0/g, \"~\");\n}\nfunction _getPathRecursive(root, obj) {\n    let found;\n    for(let key in root){\n        if (hasOwnProperty(root, key)) {\n            if (root[key] === obj) {\n                return escapePathComponent(key) + \"/\";\n            } else if (typeof root[key] === \"object\") {\n                found = _getPathRecursive(root[key], obj);\n                if (found != \"\") {\n                    return escapePathComponent(key) + \"/\" + found;\n                }\n            }\n        }\n    }\n    return \"\";\n}\nfunction getPath(root, obj) {\n    if (root === obj) {\n        return \"/\";\n    }\n    const path = _getPathRecursive(root, obj);\n    if (path === \"\") {\n        throw new Error(\"Object not found in root\");\n    }\n    return `/${path}`;\n}\n/**\n * Recursively checks whether an object has any undefined values inside.\n */ function hasUndefined(obj) {\n    if (obj === undefined) {\n        return true;\n    }\n    if (obj) {\n        if (Array.isArray(obj)) {\n            for(let i = 0, len = obj.length; i < len; i++){\n                if (hasUndefined(obj[i])) {\n                    return true;\n                }\n            }\n        } else if (typeof obj === \"object\") {\n            const objKeys = _objectKeys(obj);\n            const objKeysLength = objKeys.length;\n            for(var i = 0; i < objKeysLength; i++){\n                if (hasUndefined(obj[objKeys[i]])) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nfunction patchErrorMessageFormatter(message, args) {\n    const messageParts = [\n        message\n    ];\n    for(const key in args){\n        const value = typeof args[key] === \"object\" ? JSON.stringify(args[key], null, 2) : args[key]; // pretty print\n        if (typeof value !== \"undefined\") {\n            messageParts.push(`${key}: ${value}`);\n        }\n    }\n    return messageParts.join(\"\\n\");\n}\nclass PatchError extends Error {\n    constructor(message, name, index, operation, tree){\n        super(patchErrorMessageFormatter(message, {\n            name,\n            index,\n            operation,\n            tree\n        }));\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: name\n        });\n        Object.defineProperty(this, \"index\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: index\n        });\n        Object.defineProperty(this, \"operation\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: operation\n        });\n        Object.defineProperty(this, \"tree\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: tree\n        });\n        Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain, see https://stackoverflow.com/a/48342359\n        this.message = patchErrorMessageFormatter(message, {\n            name,\n            index,\n            operation,\n            tree\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/hash.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/hash.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   insecureHash: () => (/* reexport safe */ _js_sha1_hash_js__WEBPACK_IMPORTED_MODULE_0__.insecureHash)\n/* harmony export */ });\n/* harmony import */ var _js_sha1_hash_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js-sha1/hash.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/js-sha1/hash.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL2hhc2guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1nZW5haS9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvaGFzaC5qcz8zMDBiIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IGluc2VjdXJlSGFzaCB9IGZyb20gXCIuL2pzLXNoYTEvaGFzaC5qc1wiO1xuIl0sIm5hbWVzIjpbImluc2VjdXJlSGFzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/hash.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/js-sha1/hash.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/js-sha1/hash.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   insecureHash: () => (/* binding */ insecureHash)\n/* harmony export */ });\n// @ts-nocheck\n// Inlined to deal with portability issues with importing crypto module\n/*\n * [js-sha1]{@link https://github.com/emn178/js-sha1}\n *\n * @version 0.6.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */ /*jslint bitwise: true */ \nvar root =  false ? 0 : {};\nvar HEX_CHARS = \"0123456789abcdef\".split(\"\");\nvar EXTRA = [\n    -2147483648,\n    8388608,\n    32768,\n    128\n];\nvar SHIFT = [\n    24,\n    16,\n    8,\n    0\n];\nvar OUTPUT_TYPES = [\n    \"hex\",\n    \"array\",\n    \"digest\",\n    \"arrayBuffer\"\n];\nvar blocks = [];\nfunction Sha1(sharedMemory) {\n    if (sharedMemory) {\n        blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n        this.blocks = blocks;\n    } else {\n        this.blocks = [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ];\n    }\n    this.h0 = 0x67452301;\n    this.h1 = 0xefcdab89;\n    this.h2 = 0x98badcfe;\n    this.h3 = 0x10325476;\n    this.h4 = 0xc3d2e1f0;\n    this.block = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n}\nSha1.prototype.update = function(message) {\n    if (this.finalized) {\n        return;\n    }\n    var notString = typeof message !== \"string\";\n    if (notString && message.constructor === root.ArrayBuffer) {\n        message = new Uint8Array(message);\n    }\n    var code, index = 0, i, length = message.length || 0, blocks = this.blocks;\n    while(index < length){\n        if (this.hashed) {\n            this.hashed = false;\n            blocks[0] = this.block;\n            blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n        }\n        if (notString) {\n            for(i = this.start; index < length && i < 64; ++index){\n                blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n            }\n        } else {\n            for(i = this.start; index < length && i < 64; ++index){\n                code = message.charCodeAt(index);\n                if (code < 0x80) {\n                    blocks[i >> 2] |= code << SHIFT[i++ & 3];\n                } else if (code < 0x800) {\n                    blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                } else if (code < 0xd800 || code >= 0xe000) {\n                    blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                } else {\n                    code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);\n                    blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                }\n            }\n        }\n        this.lastByteIndex = i;\n        this.bytes += i - this.start;\n        if (i >= 64) {\n            this.block = blocks[16];\n            this.start = i - 64;\n            this.hash();\n            this.hashed = true;\n        } else {\n            this.start = i;\n        }\n    }\n    if (this.bytes > 4294967295) {\n        this.hBytes += this.bytes / 4294967296 << 0;\n        this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n};\nSha1.prototype.finalize = function() {\n    if (this.finalized) {\n        return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[16] = this.block;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    this.block = blocks[16];\n    if (i >= 56) {\n        if (!this.hashed) {\n            this.hash();\n        }\n        blocks[0] = this.block;\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;\n    blocks[15] = this.bytes << 3;\n    this.hash();\n};\nSha1.prototype.hash = function() {\n    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4;\n    var f, j, t, blocks = this.blocks;\n    for(j = 16; j < 80; ++j){\n        t = blocks[j - 3] ^ blocks[j - 8] ^ blocks[j - 14] ^ blocks[j - 16];\n        blocks[j] = t << 1 | t >>> 31;\n    }\n    for(j = 0; j < 20; j += 5){\n        f = b & c | ~b & d;\n        t = a << 5 | a >>> 27;\n        e = t + f + e + 1518500249 + blocks[j] << 0;\n        b = b << 30 | b >>> 2;\n        f = a & b | ~a & c;\n        t = e << 5 | e >>> 27;\n        d = t + f + d + 1518500249 + blocks[j + 1] << 0;\n        a = a << 30 | a >>> 2;\n        f = e & a | ~e & b;\n        t = d << 5 | d >>> 27;\n        c = t + f + c + 1518500249 + blocks[j + 2] << 0;\n        e = e << 30 | e >>> 2;\n        f = d & e | ~d & a;\n        t = c << 5 | c >>> 27;\n        b = t + f + b + 1518500249 + blocks[j + 3] << 0;\n        d = d << 30 | d >>> 2;\n        f = c & d | ~c & e;\n        t = b << 5 | b >>> 27;\n        a = t + f + a + 1518500249 + blocks[j + 4] << 0;\n        c = c << 30 | c >>> 2;\n    }\n    for(; j < 40; j += 5){\n        f = b ^ c ^ d;\n        t = a << 5 | a >>> 27;\n        e = t + f + e + 1859775393 + blocks[j] << 0;\n        b = b << 30 | b >>> 2;\n        f = a ^ b ^ c;\n        t = e << 5 | e >>> 27;\n        d = t + f + d + 1859775393 + blocks[j + 1] << 0;\n        a = a << 30 | a >>> 2;\n        f = e ^ a ^ b;\n        t = d << 5 | d >>> 27;\n        c = t + f + c + 1859775393 + blocks[j + 2] << 0;\n        e = e << 30 | e >>> 2;\n        f = d ^ e ^ a;\n        t = c << 5 | c >>> 27;\n        b = t + f + b + 1859775393 + blocks[j + 3] << 0;\n        d = d << 30 | d >>> 2;\n        f = c ^ d ^ e;\n        t = b << 5 | b >>> 27;\n        a = t + f + a + 1859775393 + blocks[j + 4] << 0;\n        c = c << 30 | c >>> 2;\n    }\n    for(; j < 60; j += 5){\n        f = b & c | b & d | c & d;\n        t = a << 5 | a >>> 27;\n        e = t + f + e - 1894007588 + blocks[j] << 0;\n        b = b << 30 | b >>> 2;\n        f = a & b | a & c | b & c;\n        t = e << 5 | e >>> 27;\n        d = t + f + d - 1894007588 + blocks[j + 1] << 0;\n        a = a << 30 | a >>> 2;\n        f = e & a | e & b | a & b;\n        t = d << 5 | d >>> 27;\n        c = t + f + c - 1894007588 + blocks[j + 2] << 0;\n        e = e << 30 | e >>> 2;\n        f = d & e | d & a | e & a;\n        t = c << 5 | c >>> 27;\n        b = t + f + b - 1894007588 + blocks[j + 3] << 0;\n        d = d << 30 | d >>> 2;\n        f = c & d | c & e | d & e;\n        t = b << 5 | b >>> 27;\n        a = t + f + a - 1894007588 + blocks[j + 4] << 0;\n        c = c << 30 | c >>> 2;\n    }\n    for(; j < 80; j += 5){\n        f = b ^ c ^ d;\n        t = a << 5 | a >>> 27;\n        e = t + f + e - 899497514 + blocks[j] << 0;\n        b = b << 30 | b >>> 2;\n        f = a ^ b ^ c;\n        t = e << 5 | e >>> 27;\n        d = t + f + d - 899497514 + blocks[j + 1] << 0;\n        a = a << 30 | a >>> 2;\n        f = e ^ a ^ b;\n        t = d << 5 | d >>> 27;\n        c = t + f + c - 899497514 + blocks[j + 2] << 0;\n        e = e << 30 | e >>> 2;\n        f = d ^ e ^ a;\n        t = c << 5 | c >>> 27;\n        b = t + f + b - 899497514 + blocks[j + 3] << 0;\n        d = d << 30 | d >>> 2;\n        f = c ^ d ^ e;\n        t = b << 5 | b >>> 27;\n        a = t + f + a - 899497514 + blocks[j + 4] << 0;\n        c = c << 30 | c >>> 2;\n    }\n    this.h0 = this.h0 + a << 0;\n    this.h1 = this.h1 + b << 0;\n    this.h2 = this.h2 + c << 0;\n    this.h3 = this.h3 + d << 0;\n    this.h4 = this.h4 + e << 0;\n};\nSha1.prototype.hex = function() {\n    this.finalize();\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;\n    return HEX_CHARS[h0 >> 28 & 0x0f] + HEX_CHARS[h0 >> 24 & 0x0f] + HEX_CHARS[h0 >> 20 & 0x0f] + HEX_CHARS[h0 >> 16 & 0x0f] + HEX_CHARS[h0 >> 12 & 0x0f] + HEX_CHARS[h0 >> 8 & 0x0f] + HEX_CHARS[h0 >> 4 & 0x0f] + HEX_CHARS[h0 & 0x0f] + HEX_CHARS[h1 >> 28 & 0x0f] + HEX_CHARS[h1 >> 24 & 0x0f] + HEX_CHARS[h1 >> 20 & 0x0f] + HEX_CHARS[h1 >> 16 & 0x0f] + HEX_CHARS[h1 >> 12 & 0x0f] + HEX_CHARS[h1 >> 8 & 0x0f] + HEX_CHARS[h1 >> 4 & 0x0f] + HEX_CHARS[h1 & 0x0f] + HEX_CHARS[h2 >> 28 & 0x0f] + HEX_CHARS[h2 >> 24 & 0x0f] + HEX_CHARS[h2 >> 20 & 0x0f] + HEX_CHARS[h2 >> 16 & 0x0f] + HEX_CHARS[h2 >> 12 & 0x0f] + HEX_CHARS[h2 >> 8 & 0x0f] + HEX_CHARS[h2 >> 4 & 0x0f] + HEX_CHARS[h2 & 0x0f] + HEX_CHARS[h3 >> 28 & 0x0f] + HEX_CHARS[h3 >> 24 & 0x0f] + HEX_CHARS[h3 >> 20 & 0x0f] + HEX_CHARS[h3 >> 16 & 0x0f] + HEX_CHARS[h3 >> 12 & 0x0f] + HEX_CHARS[h3 >> 8 & 0x0f] + HEX_CHARS[h3 >> 4 & 0x0f] + HEX_CHARS[h3 & 0x0f] + HEX_CHARS[h4 >> 28 & 0x0f] + HEX_CHARS[h4 >> 24 & 0x0f] + HEX_CHARS[h4 >> 20 & 0x0f] + HEX_CHARS[h4 >> 16 & 0x0f] + HEX_CHARS[h4 >> 12 & 0x0f] + HEX_CHARS[h4 >> 8 & 0x0f] + HEX_CHARS[h4 >> 4 & 0x0f] + HEX_CHARS[h4 & 0x0f];\n};\nSha1.prototype.toString = Sha1.prototype.hex;\nSha1.prototype.digest = function() {\n    this.finalize();\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;\n    return [\n        h0 >> 24 & 0xff,\n        h0 >> 16 & 0xff,\n        h0 >> 8 & 0xff,\n        h0 & 0xff,\n        h1 >> 24 & 0xff,\n        h1 >> 16 & 0xff,\n        h1 >> 8 & 0xff,\n        h1 & 0xff,\n        h2 >> 24 & 0xff,\n        h2 >> 16 & 0xff,\n        h2 >> 8 & 0xff,\n        h2 & 0xff,\n        h3 >> 24 & 0xff,\n        h3 >> 16 & 0xff,\n        h3 >> 8 & 0xff,\n        h3 & 0xff,\n        h4 >> 24 & 0xff,\n        h4 >> 16 & 0xff,\n        h4 >> 8 & 0xff,\n        h4 & 0xff\n    ];\n};\nSha1.prototype.array = Sha1.prototype.digest;\nSha1.prototype.arrayBuffer = function() {\n    this.finalize();\n    var buffer = new ArrayBuffer(20);\n    var dataView = new DataView(buffer);\n    dataView.setUint32(0, this.h0);\n    dataView.setUint32(4, this.h1);\n    dataView.setUint32(8, this.h2);\n    dataView.setUint32(12, this.h3);\n    dataView.setUint32(16, this.h4);\n    return buffer;\n};\nconst insecureHash = (message)=>{\n    return new Sha1(true).update(message)[\"hex\"]();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/js-sha1/hash.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/json.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/json.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseJsonMarkdown: () => (/* binding */ parseJsonMarkdown),\n/* harmony export */   parsePartialJson: () => (/* binding */ parsePartialJson)\n/* harmony export */ });\nfunction parseJsonMarkdown(s, parser = parsePartialJson) {\n    // eslint-disable-next-line no-param-reassign\n    s = s.trim();\n    const match = /```(json)?(.*)```/s.exec(s);\n    if (!match) {\n        return parser(s);\n    } else {\n        return parser(match[2]);\n    }\n}\n// Adapted from https://github.com/KillianLucas/open-interpreter/blob/main/interpreter/core/llm/utils/parse_partial_json.py\n// MIT License\nfunction parsePartialJson(s) {\n    // If the input is undefined, return null to indicate failure.\n    if (typeof s === \"undefined\") {\n        return null;\n    }\n    // Attempt to parse the string as-is.\n    try {\n        return JSON.parse(s);\n    } catch (error) {\n    // Pass\n    }\n    // Initialize variables.\n    let new_s = \"\";\n    const stack = [];\n    let isInsideString = false;\n    let escaped = false;\n    // Process each character in the string one at a time.\n    for (let char of s){\n        if (isInsideString) {\n            if (char === '\"' && !escaped) {\n                isInsideString = false;\n            } else if (char === \"\\n\" && !escaped) {\n                char = \"\\\\n\"; // Replace the newline character with the escape sequence.\n            } else if (char === \"\\\\\") {\n                escaped = !escaped;\n            } else {\n                escaped = false;\n            }\n        } else {\n            if (char === '\"') {\n                isInsideString = true;\n                escaped = false;\n            } else if (char === \"{\") {\n                stack.push(\"}\");\n            } else if (char === \"[\") {\n                stack.push(\"]\");\n            } else if (char === \"}\" || char === \"]\") {\n                if (stack && stack[stack.length - 1] === char) {\n                    stack.pop();\n                } else {\n                    // Mismatched closing character; the input is malformed.\n                    return null;\n                }\n            }\n        }\n        // Append the processed character to the new string.\n        new_s += char;\n    }\n    // If we're still inside a string at the end of processing,\n    // we need to close the string.\n    if (isInsideString) {\n        new_s += '\"';\n    }\n    // Close any remaining open structures in the reverse order that they were opened.\n    for(let i = stack.length - 1; i >= 0; i -= 1){\n        new_s += stack[i];\n    }\n    // Attempt to parse the modified string as JSON.\n    try {\n        return JSON.parse(new_s);\n    } catch (error) {\n        // If we still can't parse the string as JSON, return null to indicate failure.\n        return null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL2pzb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxTQUFTQSxrQkFBa0JDLENBQUMsRUFBRUMsU0FBU0MsZ0JBQWdCO0lBQzFELDZDQUE2QztJQUM3Q0YsSUFBSUEsRUFBRUcsSUFBSTtJQUNWLE1BQU1DLFFBQVEscUJBQXFCQyxJQUFJLENBQUNMO0lBQ3hDLElBQUksQ0FBQ0ksT0FBTztRQUNSLE9BQU9ILE9BQU9EO0lBQ2xCLE9BQ0s7UUFDRCxPQUFPQyxPQUFPRyxLQUFLLENBQUMsRUFBRTtJQUMxQjtBQUNKO0FBQ0EsMkhBQTJIO0FBQzNILGNBQWM7QUFDUCxTQUFTRixpQkFBaUJGLENBQUM7SUFDOUIsOERBQThEO0lBQzlELElBQUksT0FBT0EsTUFBTSxhQUFhO1FBQzFCLE9BQU87SUFDWDtJQUNBLHFDQUFxQztJQUNyQyxJQUFJO1FBQ0EsT0FBT00sS0FBS0MsS0FBSyxDQUFDUDtJQUN0QixFQUNBLE9BQU9RLE9BQU87SUFDVixPQUFPO0lBQ1g7SUFDQSx3QkFBd0I7SUFDeEIsSUFBSUMsUUFBUTtJQUNaLE1BQU1DLFFBQVEsRUFBRTtJQUNoQixJQUFJQyxpQkFBaUI7SUFDckIsSUFBSUMsVUFBVTtJQUNkLHNEQUFzRDtJQUN0RCxLQUFLLElBQUlDLFFBQVFiLEVBQUc7UUFDaEIsSUFBSVcsZ0JBQWdCO1lBQ2hCLElBQUlFLFNBQVMsT0FBTyxDQUFDRCxTQUFTO2dCQUMxQkQsaUJBQWlCO1lBQ3JCLE9BQ0ssSUFBSUUsU0FBUyxRQUFRLENBQUNELFNBQVM7Z0JBQ2hDQyxPQUFPLE9BQU8sMERBQTBEO1lBQzVFLE9BQ0ssSUFBSUEsU0FBUyxNQUFNO2dCQUNwQkQsVUFBVSxDQUFDQTtZQUNmLE9BQ0s7Z0JBQ0RBLFVBQVU7WUFDZDtRQUNKLE9BQ0s7WUFDRCxJQUFJQyxTQUFTLEtBQUs7Z0JBQ2RGLGlCQUFpQjtnQkFDakJDLFVBQVU7WUFDZCxPQUNLLElBQUlDLFNBQVMsS0FBSztnQkFDbkJILE1BQU1JLElBQUksQ0FBQztZQUNmLE9BQ0ssSUFBSUQsU0FBUyxLQUFLO2dCQUNuQkgsTUFBTUksSUFBSSxDQUFDO1lBQ2YsT0FDSyxJQUFJRCxTQUFTLE9BQU9BLFNBQVMsS0FBSztnQkFDbkMsSUFBSUgsU0FBU0EsS0FBSyxDQUFDQSxNQUFNSyxNQUFNLEdBQUcsRUFBRSxLQUFLRixNQUFNO29CQUMzQ0gsTUFBTU0sR0FBRztnQkFDYixPQUNLO29CQUNELHdEQUF3RDtvQkFDeEQsT0FBTztnQkFDWDtZQUNKO1FBQ0o7UUFDQSxvREFBb0Q7UUFDcERQLFNBQVNJO0lBQ2I7SUFDQSwyREFBMkQ7SUFDM0QsK0JBQStCO0lBQy9CLElBQUlGLGdCQUFnQjtRQUNoQkYsU0FBUztJQUNiO0lBQ0Esa0ZBQWtGO0lBQ2xGLElBQUssSUFBSVEsSUFBSVAsTUFBTUssTUFBTSxHQUFHLEdBQUdFLEtBQUssR0FBR0EsS0FBSyxFQUFHO1FBQzNDUixTQUFTQyxLQUFLLENBQUNPLEVBQUU7SUFDckI7SUFDQSxnREFBZ0Q7SUFDaEQsSUFBSTtRQUNBLE9BQU9YLEtBQUtDLEtBQUssQ0FBQ0U7SUFDdEIsRUFDQSxPQUFPRCxPQUFPO1FBQ1YsK0VBQStFO1FBQy9FLE9BQU87SUFDWDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL2pzb24uanM/MmE0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcGFyc2VKc29uTWFya2Rvd24ocywgcGFyc2VyID0gcGFyc2VQYXJ0aWFsSnNvbikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHMgPSBzLnRyaW0oKTtcbiAgICBjb25zdCBtYXRjaCA9IC9gYGAoanNvbik/KC4qKWBgYC9zLmV4ZWMocyk7XG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgICByZXR1cm4gcGFyc2VyKHMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlcihtYXRjaFsyXSk7XG4gICAgfVxufVxuLy8gQWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9LaWxsaWFuTHVjYXMvb3Blbi1pbnRlcnByZXRlci9ibG9iL21haW4vaW50ZXJwcmV0ZXIvY29yZS9sbG0vdXRpbHMvcGFyc2VfcGFydGlhbF9qc29uLnB5XG4vLyBNSVQgTGljZW5zZVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUGFydGlhbEpzb24ocykge1xuICAgIC8vIElmIHRoZSBpbnB1dCBpcyB1bmRlZmluZWQsIHJldHVybiBudWxsIHRvIGluZGljYXRlIGZhaWx1cmUuXG4gICAgaWYgKHR5cGVvZiBzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyBBdHRlbXB0IHRvIHBhcnNlIHRoZSBzdHJpbmcgYXMtaXMuXG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uocyk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBQYXNzXG4gICAgfVxuICAgIC8vIEluaXRpYWxpemUgdmFyaWFibGVzLlxuICAgIGxldCBuZXdfcyA9IFwiXCI7XG4gICAgY29uc3Qgc3RhY2sgPSBbXTtcbiAgICBsZXQgaXNJbnNpZGVTdHJpbmcgPSBmYWxzZTtcbiAgICBsZXQgZXNjYXBlZCA9IGZhbHNlO1xuICAgIC8vIFByb2Nlc3MgZWFjaCBjaGFyYWN0ZXIgaW4gdGhlIHN0cmluZyBvbmUgYXQgYSB0aW1lLlxuICAgIGZvciAobGV0IGNoYXIgb2Ygcykge1xuICAgICAgICBpZiAoaXNJbnNpZGVTdHJpbmcpIHtcbiAgICAgICAgICAgIGlmIChjaGFyID09PSAnXCInICYmICFlc2NhcGVkKSB7XG4gICAgICAgICAgICAgICAgaXNJbnNpZGVTdHJpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoYXIgPT09IFwiXFxuXCIgJiYgIWVzY2FwZWQpIHtcbiAgICAgICAgICAgICAgICBjaGFyID0gXCJcXFxcblwiOyAvLyBSZXBsYWNlIHRoZSBuZXdsaW5lIGNoYXJhY3RlciB3aXRoIHRoZSBlc2NhcGUgc2VxdWVuY2UuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGFyID09PSBcIlxcXFxcIikge1xuICAgICAgICAgICAgICAgIGVzY2FwZWQgPSAhZXNjYXBlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVzY2FwZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjaGFyID09PSAnXCInKSB7XG4gICAgICAgICAgICAgICAgaXNJbnNpZGVTdHJpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGVzY2FwZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoYXIgPT09IFwie1wiKSB7XG4gICAgICAgICAgICAgICAgc3RhY2sucHVzaChcIn1cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGFyID09PSBcIltcIikge1xuICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goXCJdXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hhciA9PT0gXCJ9XCIgfHwgY2hhciA9PT0gXCJdXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhY2sgJiYgc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0gPT09IGNoYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBNaXNtYXRjaGVkIGNsb3NpbmcgY2hhcmFjdGVyOyB0aGUgaW5wdXQgaXMgbWFsZm9ybWVkLlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQXBwZW5kIHRoZSBwcm9jZXNzZWQgY2hhcmFjdGVyIHRvIHRoZSBuZXcgc3RyaW5nLlxuICAgICAgICBuZXdfcyArPSBjaGFyO1xuICAgIH1cbiAgICAvLyBJZiB3ZSdyZSBzdGlsbCBpbnNpZGUgYSBzdHJpbmcgYXQgdGhlIGVuZCBvZiBwcm9jZXNzaW5nLFxuICAgIC8vIHdlIG5lZWQgdG8gY2xvc2UgdGhlIHN0cmluZy5cbiAgICBpZiAoaXNJbnNpZGVTdHJpbmcpIHtcbiAgICAgICAgbmV3X3MgKz0gJ1wiJztcbiAgICB9XG4gICAgLy8gQ2xvc2UgYW55IHJlbWFpbmluZyBvcGVuIHN0cnVjdHVyZXMgaW4gdGhlIHJldmVyc2Ugb3JkZXIgdGhhdCB0aGV5IHdlcmUgb3BlbmVkLlxuICAgIGZvciAobGV0IGkgPSBzdGFjay5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICBuZXdfcyArPSBzdGFja1tpXTtcbiAgICB9XG4gICAgLy8gQXR0ZW1wdCB0byBwYXJzZSB0aGUgbW9kaWZpZWQgc3RyaW5nIGFzIEpTT04uXG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UobmV3X3MpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gSWYgd2Ugc3RpbGwgY2FuJ3QgcGFyc2UgdGhlIHN0cmluZyBhcyBKU09OLCByZXR1cm4gbnVsbCB0byBpbmRpY2F0ZSBmYWlsdXJlLlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsicGFyc2VKc29uTWFya2Rvd24iLCJzIiwicGFyc2VyIiwicGFyc2VQYXJ0aWFsSnNvbiIsInRyaW0iLCJtYXRjaCIsImV4ZWMiLCJKU09OIiwicGFyc2UiLCJlcnJvciIsIm5ld19zIiwic3RhY2siLCJpc0luc2lkZVN0cmluZyIsImVzY2FwZWQiLCJjaGFyIiwicHVzaCIsImxlbmd0aCIsInBvcCIsImkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/json.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/stream.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/stream.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncGeneratorWithSetup: () => (/* binding */ AsyncGeneratorWithSetup),\n/* harmony export */   IterableReadableStream: () => (/* binding */ IterableReadableStream),\n/* harmony export */   atee: () => (/* binding */ atee),\n/* harmony export */   concat: () => (/* binding */ concat),\n/* harmony export */   pipeGeneratorWithSetup: () => (/* binding */ pipeGeneratorWithSetup)\n/* harmony export */ });\n/*\n * Support async iterator syntax for ReadableStreams in all environments.\n * Source: https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */ class IterableReadableStream extends ReadableStream {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"reader\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    ensureReader() {\n        if (!this.reader) {\n            this.reader = this.getReader();\n        }\n    }\n    async next() {\n        this.ensureReader();\n        try {\n            const result = await this.reader.read();\n            if (result.done) {\n                this.reader.releaseLock(); // release lock when stream becomes closed\n                return {\n                    done: true,\n                    value: undefined\n                };\n            } else {\n                return {\n                    done: false,\n                    value: result.value\n                };\n            }\n        } catch (e) {\n            this.reader.releaseLock(); // release lock when stream becomes errored\n            throw e;\n        }\n    }\n    async return() {\n        this.ensureReader();\n        // If wrapped in a Node stream, cancel is already called.\n        if (this.locked) {\n            const cancelPromise = this.reader.cancel(); // cancel first, but don't await yet\n            this.reader.releaseLock(); // release lock first\n            await cancelPromise; // now await it\n        }\n        return {\n            done: true,\n            value: undefined\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async throw(e) {\n        this.ensureReader();\n        if (this.locked) {\n            const cancelPromise = this.reader.cancel(); // cancel first, but don't await yet\n            this.reader.releaseLock(); // release lock first\n            await cancelPromise; // now await it\n        }\n        throw e;\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    static fromReadableStream(stream) {\n        // From https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_streams#reading_the_stream\n        const reader = stream.getReader();\n        return new IterableReadableStream({\n            start (controller) {\n                return pump();\n                function pump() {\n                    return reader.read().then(({ done, value })=>{\n                        // When no more data needs to be consumed, close the stream\n                        if (done) {\n                            controller.close();\n                            return;\n                        }\n                        // Enqueue the next data chunk into our target stream\n                        controller.enqueue(value);\n                        return pump();\n                    });\n                }\n            },\n            cancel () {\n                reader.releaseLock();\n            }\n        });\n    }\n    static fromAsyncGenerator(generator) {\n        return new IterableReadableStream({\n            async pull (controller) {\n                const { value, done } = await generator.next();\n                // When no more data needs to be consumed, close the stream\n                if (done) {\n                    controller.close();\n                }\n                // Fix: `else if (value)` will hang the streaming when nullish value (e.g. empty string) is pulled\n                controller.enqueue(value);\n            },\n            async cancel (reason) {\n                await generator.return(reason);\n            }\n        });\n    }\n}\nfunction atee(iter, length = 2) {\n    const buffers = Array.from({\n        length\n    }, ()=>[]);\n    return buffers.map(async function* makeIter(buffer) {\n        while(true){\n            if (buffer.length === 0) {\n                const result = await iter.next();\n                for (const buffer of buffers){\n                    buffer.push(result);\n                }\n            } else if (buffer[0].done) {\n                return;\n            } else {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                yield buffer.shift().value;\n            }\n        }\n    });\n}\nfunction concat(first, second) {\n    if (Array.isArray(first) && Array.isArray(second)) {\n        return first.concat(second);\n    } else if (typeof first === \"string\" && typeof second === \"string\") {\n        return first + second;\n    } else if (typeof first === \"number\" && typeof second === \"number\") {\n        return first + second;\n    } else if (// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    \"concat\" in first && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof first.concat === \"function\") {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return first.concat(second);\n    } else if (typeof first === \"object\" && typeof second === \"object\") {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const chunk = {\n            ...first\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        for (const [key, value] of Object.entries(second)){\n            if (key in chunk && !Array.isArray(chunk[key])) {\n                chunk[key] = concat(chunk[key], value);\n            } else {\n                chunk[key] = value;\n            }\n        }\n        return chunk;\n    } else {\n        throw new Error(`Cannot concat ${typeof first} and ${typeof second}`);\n    }\n}\nclass AsyncGeneratorWithSetup {\n    constructor(generator, startSetup){\n        Object.defineProperty(this, \"generator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"setup\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"firstResult\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"firstResultUsed\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        this.generator = generator;\n        // setup is a promise that resolves only after the first iterator value\n        // is available. this is useful when setup of several piped generators\n        // needs to happen in logical order, ie. in the order in which input to\n        // to each generator is available.\n        this.setup = new Promise((resolve, reject)=>{\n            this.firstResult = generator.next();\n            if (startSetup) {\n                this.firstResult.then(startSetup).then(resolve, reject);\n            } else {\n                this.firstResult.then((_result)=>resolve(undefined), reject);\n            }\n        });\n    }\n    async next(...args) {\n        if (!this.firstResultUsed) {\n            this.firstResultUsed = true;\n            return this.firstResult;\n        }\n        return this.generator.next(...args);\n    }\n    async return(value) {\n        return this.generator.return(value);\n    }\n    async throw(e) {\n        return this.generator.throw(e);\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n}\nasync function pipeGeneratorWithSetup(to, generator, startSetup, ...args) {\n    const gen = new AsyncGeneratorWithSetup(generator, startSetup);\n    const setup = await gen.setup;\n    return {\n        output: to(gen, setup, ...args),\n        setup\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL3N0cmVhbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7Q0FHQyxHQUNNLE1BQU1BLCtCQUErQkM7SUFDeENDLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1RDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsVUFBVTtZQUNsQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO0lBQ0o7SUFDQUMsZUFBZTtRQUNYLElBQUksQ0FBQyxJQUFJLENBQUNDLE1BQU0sRUFBRTtZQUNkLElBQUksQ0FBQ0EsTUFBTSxHQUFHLElBQUksQ0FBQ0MsU0FBUztRQUNoQztJQUNKO0lBQ0EsTUFBTUMsT0FBTztRQUNULElBQUksQ0FBQ0gsWUFBWTtRQUNqQixJQUFJO1lBQ0EsTUFBTUksU0FBUyxNQUFNLElBQUksQ0FBQ0gsTUFBTSxDQUFDSSxJQUFJO1lBQ3JDLElBQUlELE9BQU9FLElBQUksRUFBRTtnQkFDYixJQUFJLENBQUNMLE1BQU0sQ0FBQ00sV0FBVyxJQUFJLDBDQUEwQztnQkFDckUsT0FBTztvQkFDSEQsTUFBTTtvQkFDTlAsT0FBT1M7Z0JBQ1g7WUFDSixPQUNLO2dCQUNELE9BQU87b0JBQ0hGLE1BQU07b0JBQ05QLE9BQU9LLE9BQU9MLEtBQUs7Z0JBQ3ZCO1lBQ0o7UUFDSixFQUNBLE9BQU9VLEdBQUc7WUFDTixJQUFJLENBQUNSLE1BQU0sQ0FBQ00sV0FBVyxJQUFJLDJDQUEyQztZQUN0RSxNQUFNRTtRQUNWO0lBQ0o7SUFDQSxNQUFNQyxTQUFTO1FBQ1gsSUFBSSxDQUFDVixZQUFZO1FBQ2pCLHlEQUF5RDtRQUN6RCxJQUFJLElBQUksQ0FBQ1csTUFBTSxFQUFFO1lBQ2IsTUFBTUMsZ0JBQWdCLElBQUksQ0FBQ1gsTUFBTSxDQUFDWSxNQUFNLElBQUksb0NBQW9DO1lBQ2hGLElBQUksQ0FBQ1osTUFBTSxDQUFDTSxXQUFXLElBQUkscUJBQXFCO1lBQ2hELE1BQU1LLGVBQWUsZUFBZTtRQUN4QztRQUNBLE9BQU87WUFBRU4sTUFBTTtZQUFNUCxPQUFPUztRQUFVO0lBQzFDO0lBQ0EsOERBQThEO0lBQzlELE1BQU1NLE1BQU1MLENBQUMsRUFBRTtRQUNYLElBQUksQ0FBQ1QsWUFBWTtRQUNqQixJQUFJLElBQUksQ0FBQ1csTUFBTSxFQUFFO1lBQ2IsTUFBTUMsZ0JBQWdCLElBQUksQ0FBQ1gsTUFBTSxDQUFDWSxNQUFNLElBQUksb0NBQW9DO1lBQ2hGLElBQUksQ0FBQ1osTUFBTSxDQUFDTSxXQUFXLElBQUkscUJBQXFCO1lBQ2hELE1BQU1LLGVBQWUsZUFBZTtRQUN4QztRQUNBLE1BQU1IO0lBQ1Y7SUFDQSxDQUFDTSxPQUFPQyxhQUFhLENBQUMsR0FBRztRQUNyQixPQUFPLElBQUk7SUFDZjtJQUNBLE9BQU9DLG1CQUFtQkMsTUFBTSxFQUFFO1FBQzlCLDhHQUE4RztRQUM5RyxNQUFNakIsU0FBU2lCLE9BQU9oQixTQUFTO1FBQy9CLE9BQU8sSUFBSVosdUJBQXVCO1lBQzlCNkIsT0FBTUMsVUFBVTtnQkFDWixPQUFPQztnQkFDUCxTQUFTQTtvQkFDTCxPQUFPcEIsT0FBT0ksSUFBSSxHQUFHaUIsSUFBSSxDQUFDLENBQUMsRUFBRWhCLElBQUksRUFBRVAsS0FBSyxFQUFFO3dCQUN0QywyREFBMkQ7d0JBQzNELElBQUlPLE1BQU07NEJBQ05jLFdBQVdHLEtBQUs7NEJBQ2hCO3dCQUNKO3dCQUNBLHFEQUFxRDt3QkFDckRILFdBQVdJLE9BQU8sQ0FBQ3pCO3dCQUNuQixPQUFPc0I7b0JBQ1g7Z0JBQ0o7WUFDSjtZQUNBUjtnQkFDSVosT0FBT00sV0FBVztZQUN0QjtRQUNKO0lBQ0o7SUFDQSxPQUFPa0IsbUJBQW1CQyxTQUFTLEVBQUU7UUFDakMsT0FBTyxJQUFJcEMsdUJBQXVCO1lBQzlCLE1BQU1xQyxNQUFLUCxVQUFVO2dCQUNqQixNQUFNLEVBQUVyQixLQUFLLEVBQUVPLElBQUksRUFBRSxHQUFHLE1BQU1vQixVQUFVdkIsSUFBSTtnQkFDNUMsMkRBQTJEO2dCQUMzRCxJQUFJRyxNQUFNO29CQUNOYyxXQUFXRyxLQUFLO2dCQUNwQjtnQkFDQSxrR0FBa0c7Z0JBQ2xHSCxXQUFXSSxPQUFPLENBQUN6QjtZQUN2QjtZQUNBLE1BQU1jLFFBQU9lLE1BQU07Z0JBQ2YsTUFBTUYsVUFBVWhCLE1BQU0sQ0FBQ2tCO1lBQzNCO1FBQ0o7SUFDSjtBQUNKO0FBQ08sU0FBU0MsS0FBS0MsSUFBSSxFQUFFQyxTQUFTLENBQUM7SUFDakMsTUFBTUMsVUFBVUMsTUFBTUMsSUFBSSxDQUFDO1FBQUVIO0lBQU8sR0FBRyxJQUFNLEVBQUU7SUFDL0MsT0FBT0MsUUFBUUcsR0FBRyxDQUFDLGdCQUFnQkMsU0FBU0MsTUFBTTtRQUM5QyxNQUFPLEtBQU07WUFDVCxJQUFJQSxPQUFPTixNQUFNLEtBQUssR0FBRztnQkFDckIsTUFBTTNCLFNBQVMsTUFBTTBCLEtBQUszQixJQUFJO2dCQUM5QixLQUFLLE1BQU1rQyxVQUFVTCxRQUFTO29CQUMxQkssT0FBT0MsSUFBSSxDQUFDbEM7Z0JBQ2hCO1lBQ0osT0FDSyxJQUFJaUMsTUFBTSxDQUFDLEVBQUUsQ0FBQy9CLElBQUksRUFBRTtnQkFDckI7WUFDSixPQUNLO2dCQUNELG9FQUFvRTtnQkFDcEUsTUFBTStCLE9BQU9FLEtBQUssR0FBR3hDLEtBQUs7WUFDOUI7UUFDSjtJQUNKO0FBQ0o7QUFDTyxTQUFTeUMsT0FBT0MsS0FBSyxFQUFFQyxNQUFNO0lBQ2hDLElBQUlULE1BQU1VLE9BQU8sQ0FBQ0YsVUFBVVIsTUFBTVUsT0FBTyxDQUFDRCxTQUFTO1FBQy9DLE9BQU9ELE1BQU1ELE1BQU0sQ0FBQ0U7SUFDeEIsT0FDSyxJQUFJLE9BQU9ELFVBQVUsWUFBWSxPQUFPQyxXQUFXLFVBQVU7UUFDOUQsT0FBUUQsUUFBUUM7SUFDcEIsT0FDSyxJQUFJLE9BQU9ELFVBQVUsWUFBWSxPQUFPQyxXQUFXLFVBQVU7UUFDOUQsT0FBUUQsUUFBUUM7SUFDcEIsT0FDSyxJQUNMLDhEQUE4RDtJQUM5RCxZQUFZRCxTQUNSLDhEQUE4RDtJQUM5RCxPQUFPQSxNQUFNRCxNQUFNLEtBQUssWUFBWTtRQUNwQyw4REFBOEQ7UUFDOUQsT0FBT0MsTUFBTUQsTUFBTSxDQUFDRTtJQUN4QixPQUNLLElBQUksT0FBT0QsVUFBVSxZQUFZLE9BQU9DLFdBQVcsVUFBVTtRQUM5RCw4REFBOEQ7UUFDOUQsTUFBTUUsUUFBUTtZQUFFLEdBQUdILEtBQUs7UUFBQztRQUN6Qiw4REFBOEQ7UUFDOUQsS0FBSyxNQUFNLENBQUNJLEtBQUs5QyxNQUFNLElBQUlMLE9BQU9vRCxPQUFPLENBQUNKLFFBQVM7WUFDL0MsSUFBSUcsT0FBT0QsU0FBUyxDQUFDWCxNQUFNVSxPQUFPLENBQUNDLEtBQUssQ0FBQ0MsSUFBSSxHQUFHO2dCQUM1Q0QsS0FBSyxDQUFDQyxJQUFJLEdBQUdMLE9BQU9JLEtBQUssQ0FBQ0MsSUFBSSxFQUFFOUM7WUFDcEMsT0FDSztnQkFDRDZDLEtBQUssQ0FBQ0MsSUFBSSxHQUFHOUM7WUFDakI7UUFDSjtRQUNBLE9BQU82QztJQUNYLE9BQ0s7UUFDRCxNQUFNLElBQUlHLE1BQU0sQ0FBQyxjQUFjLEVBQUUsT0FBT04sTUFBTSxLQUFLLEVBQUUsT0FBT0MsT0FBTyxDQUFDO0lBQ3hFO0FBQ0o7QUFDTyxNQUFNTTtJQUNUeEQsWUFBWWtDLFNBQVMsRUFBRXVCLFVBQVUsQ0FBRTtRQUMvQnZELE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsYUFBYTtZQUNyQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsU0FBUztZQUNqQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZUFBZTtZQUN2Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CO1lBQzNDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO1FBQ1g7UUFDQSxJQUFJLENBQUMyQixTQUFTLEdBQUdBO1FBQ2pCLHVFQUF1RTtRQUN2RSxzRUFBc0U7UUFDdEUsdUVBQXVFO1FBQ3ZFLGtDQUFrQztRQUNsQyxJQUFJLENBQUN3QixLQUFLLEdBQUcsSUFBSUMsUUFBUSxDQUFDQyxTQUFTQztZQUMvQixJQUFJLENBQUNDLFdBQVcsR0FBRzVCLFVBQVV2QixJQUFJO1lBQ2pDLElBQUk4QyxZQUFZO2dCQUNaLElBQUksQ0FBQ0ssV0FBVyxDQUFDaEMsSUFBSSxDQUFDMkIsWUFBWTNCLElBQUksQ0FBQzhCLFNBQVNDO1lBQ3BELE9BQ0s7Z0JBQ0QsSUFBSSxDQUFDQyxXQUFXLENBQUNoQyxJQUFJLENBQUMsQ0FBQ2lDLFVBQVlILFFBQVE1QyxZQUFZNkM7WUFDM0Q7UUFDSjtJQUNKO0lBQ0EsTUFBTWxELEtBQUssR0FBR3FELElBQUksRUFBRTtRQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDQyxlQUFlLEVBQUU7WUFDdkIsSUFBSSxDQUFDQSxlQUFlLEdBQUc7WUFDdkIsT0FBTyxJQUFJLENBQUNILFdBQVc7UUFDM0I7UUFDQSxPQUFPLElBQUksQ0FBQzVCLFNBQVMsQ0FBQ3ZCLElBQUksSUFBSXFEO0lBQ2xDO0lBQ0EsTUFBTTlDLE9BQU9YLEtBQUssRUFBRTtRQUNoQixPQUFPLElBQUksQ0FBQzJCLFNBQVMsQ0FBQ2hCLE1BQU0sQ0FBQ1g7SUFDakM7SUFDQSxNQUFNZSxNQUFNTCxDQUFDLEVBQUU7UUFDWCxPQUFPLElBQUksQ0FBQ2lCLFNBQVMsQ0FBQ1osS0FBSyxDQUFDTDtJQUNoQztJQUNBLENBQUNNLE9BQU9DLGFBQWEsQ0FBQyxHQUFHO1FBQ3JCLE9BQU8sSUFBSTtJQUNmO0FBQ0o7QUFDTyxlQUFlMEMsdUJBQXVCQyxFQUFFLEVBQUVqQyxTQUFTLEVBQUV1QixVQUFVLEVBQUUsR0FBR08sSUFBSTtJQUMzRSxNQUFNSSxNQUFNLElBQUlaLHdCQUF3QnRCLFdBQVd1QjtJQUNuRCxNQUFNQyxRQUFRLE1BQU1VLElBQUlWLEtBQUs7SUFDN0IsT0FBTztRQUFFVyxRQUFRRixHQUFHQyxLQUFLVixVQUFVTTtRQUFPTjtJQUFNO0FBQ3BEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL3N0cmVhbS5qcz8zZmI3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBTdXBwb3J0IGFzeW5jIGl0ZXJhdG9yIHN5bnRheCBmb3IgUmVhZGFibGVTdHJlYW1zIGluIGFsbCBlbnZpcm9ubWVudHMuXG4gKiBTb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9NYXR0aWFzQnVlbGVucy93ZWItc3RyZWFtcy1wb2x5ZmlsbC9wdWxsLzEyMiNpc3N1ZWNvbW1lbnQtMTYyNzM1NDQ5MFxuICovXG5leHBvcnQgY2xhc3MgSXRlcmFibGVSZWFkYWJsZVN0cmVhbSBleHRlbmRzIFJlYWRhYmxlU3RyZWFtIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicmVhZGVyXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVuc3VyZVJlYWRlcigpIHtcbiAgICAgICAgaWYgKCF0aGlzLnJlYWRlcikge1xuICAgICAgICAgICAgdGhpcy5yZWFkZXIgPSB0aGlzLmdldFJlYWRlcigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIG5leHQoKSB7XG4gICAgICAgIHRoaXMuZW5zdXJlUmVhZGVyKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnJlYWRlci5yZWFkKCk7XG4gICAgICAgICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlYWRlci5yZWxlYXNlTG9jaygpOyAvLyByZWxlYXNlIGxvY2sgd2hlbiBzdHJlYW0gYmVjb21lcyBjbG9zZWRcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkb25lOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHJlc3VsdC52YWx1ZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aGlzLnJlYWRlci5yZWxlYXNlTG9jaygpOyAvLyByZWxlYXNlIGxvY2sgd2hlbiBzdHJlYW0gYmVjb21lcyBlcnJvcmVkXG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIHJldHVybigpIHtcbiAgICAgICAgdGhpcy5lbnN1cmVSZWFkZXIoKTtcbiAgICAgICAgLy8gSWYgd3JhcHBlZCBpbiBhIE5vZGUgc3RyZWFtLCBjYW5jZWwgaXMgYWxyZWFkeSBjYWxsZWQuXG4gICAgICAgIGlmICh0aGlzLmxvY2tlZCkge1xuICAgICAgICAgICAgY29uc3QgY2FuY2VsUHJvbWlzZSA9IHRoaXMucmVhZGVyLmNhbmNlbCgpOyAvLyBjYW5jZWwgZmlyc3QsIGJ1dCBkb24ndCBhd2FpdCB5ZXRcbiAgICAgICAgICAgIHRoaXMucmVhZGVyLnJlbGVhc2VMb2NrKCk7IC8vIHJlbGVhc2UgbG9jayBmaXJzdFxuICAgICAgICAgICAgYXdhaXQgY2FuY2VsUHJvbWlzZTsgLy8gbm93IGF3YWl0IGl0XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHVuZGVmaW5lZCB9O1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGFzeW5jIHRocm93KGUpIHtcbiAgICAgICAgdGhpcy5lbnN1cmVSZWFkZXIoKTtcbiAgICAgICAgaWYgKHRoaXMubG9ja2VkKSB7XG4gICAgICAgICAgICBjb25zdCBjYW5jZWxQcm9taXNlID0gdGhpcy5yZWFkZXIuY2FuY2VsKCk7IC8vIGNhbmNlbCBmaXJzdCwgYnV0IGRvbid0IGF3YWl0IHlldFxuICAgICAgICAgICAgdGhpcy5yZWFkZXIucmVsZWFzZUxvY2soKTsgLy8gcmVsZWFzZSBsb2NrIGZpcnN0XG4gICAgICAgICAgICBhd2FpdCBjYW5jZWxQcm9taXNlOyAvLyBub3cgYXdhaXQgaXRcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlO1xuICAgIH1cbiAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc3RhdGljIGZyb21SZWFkYWJsZVN0cmVhbShzdHJlYW0pIHtcbiAgICAgICAgLy8gRnJvbSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvU3RyZWFtc19BUEkvVXNpbmdfcmVhZGFibGVfc3RyZWFtcyNyZWFkaW5nX3RoZV9zdHJlYW1cbiAgICAgICAgY29uc3QgcmVhZGVyID0gc3RyZWFtLmdldFJlYWRlcigpO1xuICAgICAgICByZXR1cm4gbmV3IEl0ZXJhYmxlUmVhZGFibGVTdHJlYW0oe1xuICAgICAgICAgICAgc3RhcnQoY29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBwdW1wKCk7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcHVtcCgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5yZWFkKCkudGhlbigoeyBkb25lLCB2YWx1ZSB9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIG5vIG1vcmUgZGF0YSBuZWVkcyB0byBiZSBjb25zdW1lZCwgY2xvc2UgdGhlIHN0cmVhbVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRW5xdWV1ZSB0aGUgbmV4dCBkYXRhIGNodW5rIGludG8gb3VyIHRhcmdldCBzdHJlYW1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHVtcCgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2FuY2VsKCkge1xuICAgICAgICAgICAgICAgIHJlYWRlci5yZWxlYXNlTG9jaygpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tQXN5bmNHZW5lcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgSXRlcmFibGVSZWFkYWJsZVN0cmVhbSh7XG4gICAgICAgICAgICBhc3luYyBwdWxsKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBhd2FpdCBnZW5lcmF0b3IubmV4dCgpO1xuICAgICAgICAgICAgICAgIC8vIFdoZW4gbm8gbW9yZSBkYXRhIG5lZWRzIHRvIGJlIGNvbnN1bWVkLCBjbG9zZSB0aGUgc3RyZWFtXG4gICAgICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBGaXg6IGBlbHNlIGlmICh2YWx1ZSlgIHdpbGwgaGFuZyB0aGUgc3RyZWFtaW5nIHdoZW4gbnVsbGlzaCB2YWx1ZSAoZS5nLiBlbXB0eSBzdHJpbmcpIGlzIHB1bGxlZFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXN5bmMgY2FuY2VsKHJlYXNvbikge1xuICAgICAgICAgICAgICAgIGF3YWl0IGdlbmVyYXRvci5yZXR1cm4ocmVhc29uKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBhdGVlKGl0ZXIsIGxlbmd0aCA9IDIpIHtcbiAgICBjb25zdCBidWZmZXJzID0gQXJyYXkuZnJvbSh7IGxlbmd0aCB9LCAoKSA9PiBbXSk7XG4gICAgcmV0dXJuIGJ1ZmZlcnMubWFwKGFzeW5jIGZ1bmN0aW9uKiBtYWtlSXRlcihidWZmZXIpIHtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaXRlci5uZXh0KCk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBidWZmZXIgb2YgYnVmZmVycykge1xuICAgICAgICAgICAgICAgICAgICBidWZmZXIucHVzaChyZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGJ1ZmZlclswXS5kb25lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgICAgICAgICB5aWVsZCBidWZmZXIuc2hpZnQoKS52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdChmaXJzdCwgc2Vjb25kKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZmlyc3QpICYmIEFycmF5LmlzQXJyYXkoc2Vjb25kKSkge1xuICAgICAgICByZXR1cm4gZmlyc3QuY29uY2F0KHNlY29uZCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBmaXJzdCA9PT0gXCJzdHJpbmdcIiAmJiB0eXBlb2Ygc2Vjb25kID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiAoZmlyc3QgKyBzZWNvbmQpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZmlyc3QgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIHNlY29uZCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4gKGZpcnN0ICsgc2Vjb25kKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBcImNvbmNhdFwiIGluIGZpcnN0ICYmXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHR5cGVvZiBmaXJzdC5jb25jYXQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICByZXR1cm4gZmlyc3QuY29uY2F0KHNlY29uZCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBmaXJzdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygc2Vjb25kID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIGNvbnN0IGNodW5rID0geyAuLi5maXJzdCB9O1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzZWNvbmQpKSB7XG4gICAgICAgICAgICBpZiAoa2V5IGluIGNodW5rICYmICFBcnJheS5pc0FycmF5KGNodW5rW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgY2h1bmtba2V5XSA9IGNvbmNhdChjaHVua1trZXldLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjaHVua1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNodW5rO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgY29uY2F0ICR7dHlwZW9mIGZpcnN0fSBhbmQgJHt0eXBlb2Ygc2Vjb25kfWApO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBBc3luY0dlbmVyYXRvcldpdGhTZXR1cCB7XG4gICAgY29uc3RydWN0b3IoZ2VuZXJhdG9yLCBzdGFydFNldHVwKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImdlbmVyYXRvclwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJzZXR1cFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJmaXJzdFJlc3VsdFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJmaXJzdFJlc3VsdFVzZWRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmdlbmVyYXRvciA9IGdlbmVyYXRvcjtcbiAgICAgICAgLy8gc2V0dXAgaXMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgb25seSBhZnRlciB0aGUgZmlyc3QgaXRlcmF0b3IgdmFsdWVcbiAgICAgICAgLy8gaXMgYXZhaWxhYmxlLiB0aGlzIGlzIHVzZWZ1bCB3aGVuIHNldHVwIG9mIHNldmVyYWwgcGlwZWQgZ2VuZXJhdG9yc1xuICAgICAgICAvLyBuZWVkcyB0byBoYXBwZW4gaW4gbG9naWNhbCBvcmRlciwgaWUuIGluIHRoZSBvcmRlciBpbiB3aGljaCBpbnB1dCB0b1xuICAgICAgICAvLyB0byBlYWNoIGdlbmVyYXRvciBpcyBhdmFpbGFibGUuXG4gICAgICAgIHRoaXMuc2V0dXAgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmZpcnN0UmVzdWx0ID0gZ2VuZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgIGlmIChzdGFydFNldHVwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5maXJzdFJlc3VsdC50aGVuKHN0YXJ0U2V0dXApLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZmlyc3RSZXN1bHQudGhlbigoX3Jlc3VsdCkgPT4gcmVzb2x2ZSh1bmRlZmluZWQpLCByZWplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgbmV4dCguLi5hcmdzKSB7XG4gICAgICAgIGlmICghdGhpcy5maXJzdFJlc3VsdFVzZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyc3RSZXN1bHRVc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpcnN0UmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRvci5uZXh0KC4uLmFyZ3MpO1xuICAgIH1cbiAgICBhc3luYyByZXR1cm4odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdG9yLnJldHVybih2YWx1ZSk7XG4gICAgfVxuICAgIGFzeW5jIHRocm93KGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdG9yLnRocm93KGUpO1xuICAgIH1cbiAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcGlwZUdlbmVyYXRvcldpdGhTZXR1cCh0bywgZ2VuZXJhdG9yLCBzdGFydFNldHVwLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZ2VuID0gbmV3IEFzeW5jR2VuZXJhdG9yV2l0aFNldHVwKGdlbmVyYXRvciwgc3RhcnRTZXR1cCk7XG4gICAgY29uc3Qgc2V0dXAgPSBhd2FpdCBnZW4uc2V0dXA7XG4gICAgcmV0dXJuIHsgb3V0cHV0OiB0byhnZW4sIHNldHVwLCAuLi5hcmdzKSwgc2V0dXAgfTtcbn1cbiJdLCJuYW1lcyI6WyJJdGVyYWJsZVJlYWRhYmxlU3RyZWFtIiwiUmVhZGFibGVTdHJlYW0iLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJlbnN1cmVSZWFkZXIiLCJyZWFkZXIiLCJnZXRSZWFkZXIiLCJuZXh0IiwicmVzdWx0IiwicmVhZCIsImRvbmUiLCJyZWxlYXNlTG9jayIsInVuZGVmaW5lZCIsImUiLCJyZXR1cm4iLCJsb2NrZWQiLCJjYW5jZWxQcm9taXNlIiwiY2FuY2VsIiwidGhyb3ciLCJTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwiZnJvbVJlYWRhYmxlU3RyZWFtIiwic3RyZWFtIiwic3RhcnQiLCJjb250cm9sbGVyIiwicHVtcCIsInRoZW4iLCJjbG9zZSIsImVucXVldWUiLCJmcm9tQXN5bmNHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJwdWxsIiwicmVhc29uIiwiYXRlZSIsIml0ZXIiLCJsZW5ndGgiLCJidWZmZXJzIiwiQXJyYXkiLCJmcm9tIiwibWFwIiwibWFrZUl0ZXIiLCJidWZmZXIiLCJwdXNoIiwic2hpZnQiLCJjb25jYXQiLCJmaXJzdCIsInNlY29uZCIsImlzQXJyYXkiLCJjaHVuayIsImtleSIsImVudHJpZXMiLCJFcnJvciIsIkFzeW5jR2VuZXJhdG9yV2l0aFNldHVwIiwic3RhcnRTZXR1cCIsInNldHVwIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmaXJzdFJlc3VsdCIsIl9yZXN1bHQiLCJhcmdzIiwiZmlyc3RSZXN1bHRVc2VkIiwicGlwZUdlbmVyYXRvcldpdGhTZXR1cCIsInRvIiwiZ2VuIiwib3V0cHV0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/tiktoken.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/tiktoken.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodingForModel: () => (/* binding */ encodingForModel),\n/* harmony export */   getEncoding: () => (/* binding */ getEncoding)\n/* harmony export */ });\n/* harmony import */ var js_tiktoken_lite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-tiktoken/lite */ \"(rsc)/./node_modules/js-tiktoken/dist/lite.js\");\n/* harmony import */ var _async_caller_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./async_caller.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/async_caller.js\");\n\n\nconst cache = {};\nconst caller = /* #__PURE__ */ new _async_caller_js__WEBPACK_IMPORTED_MODULE_1__.AsyncCaller({});\nasync function getEncoding(encoding) {\n    if (!(encoding in cache)) {\n        cache[encoding] = caller.fetch(`https://tiktoken.pages.dev/js/${encoding}.json`).then((res)=>res.json()).then((data)=>new js_tiktoken_lite__WEBPACK_IMPORTED_MODULE_0__.Tiktoken(data)).catch((e)=>{\n            delete cache[encoding];\n            throw e;\n        });\n    }\n    return await cache[encoding];\n}\nasync function encodingForModel(model) {\n    return getEncoding((0,js_tiktoken_lite__WEBPACK_IMPORTED_MODULE_0__.getEncodingNameForModel)(model));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL3Rpa3Rva2VuLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBc0U7QUFDdEI7QUFDaEQsTUFBTUcsUUFBUSxDQUFDO0FBQ2YsTUFBTUMsU0FBUyxhQUFhLEdBQUcsSUFBSUYseURBQVdBLENBQUMsQ0FBQztBQUN6QyxlQUFlRyxZQUFZQyxRQUFRO0lBQ3RDLElBQUksQ0FBRUEsQ0FBQUEsWUFBWUgsS0FBSSxHQUFJO1FBQ3RCQSxLQUFLLENBQUNHLFNBQVMsR0FBR0YsT0FDYkcsS0FBSyxDQUFDLENBQUMsOEJBQThCLEVBQUVELFNBQVMsS0FBSyxDQUFDLEVBQ3RERSxJQUFJLENBQUMsQ0FBQ0MsTUFBUUEsSUFBSUMsSUFBSSxJQUN0QkYsSUFBSSxDQUFDLENBQUNHLE9BQVMsSUFBSVgsc0RBQVFBLENBQUNXLE9BQzVCQyxLQUFLLENBQUMsQ0FBQ0M7WUFDUixPQUFPVixLQUFLLENBQUNHLFNBQVM7WUFDdEIsTUFBTU87UUFDVjtJQUNKO0lBQ0EsT0FBTyxNQUFNVixLQUFLLENBQUNHLFNBQVM7QUFDaEM7QUFDTyxlQUFlUSxpQkFBaUJDLEtBQUs7SUFDeEMsT0FBT1YsWUFBWUoseUVBQXVCQSxDQUFDYztBQUMvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWdlbmFpL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC91dGlscy90aWt0b2tlbi5qcz8zOTJlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRpa3Rva2VuLCBnZXRFbmNvZGluZ05hbWVGb3JNb2RlbCwgfSBmcm9tIFwianMtdGlrdG9rZW4vbGl0ZVwiO1xuaW1wb3J0IHsgQXN5bmNDYWxsZXIgfSBmcm9tIFwiLi9hc3luY19jYWxsZXIuanNcIjtcbmNvbnN0IGNhY2hlID0ge307XG5jb25zdCBjYWxsZXIgPSAvKiAjX19QVVJFX18gKi8gbmV3IEFzeW5jQ2FsbGVyKHt9KTtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRFbmNvZGluZyhlbmNvZGluZykge1xuICAgIGlmICghKGVuY29kaW5nIGluIGNhY2hlKSkge1xuICAgICAgICBjYWNoZVtlbmNvZGluZ10gPSBjYWxsZXJcbiAgICAgICAgICAgIC5mZXRjaChgaHR0cHM6Ly90aWt0b2tlbi5wYWdlcy5kZXYvanMvJHtlbmNvZGluZ30uanNvbmApXG4gICAgICAgICAgICAudGhlbigocmVzKSA9PiByZXMuanNvbigpKVxuICAgICAgICAgICAgLnRoZW4oKGRhdGEpID0+IG5ldyBUaWt0b2tlbihkYXRhKSlcbiAgICAgICAgICAgIC5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgICAgZGVsZXRlIGNhY2hlW2VuY29kaW5nXTtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgY2FjaGVbZW5jb2RpbmddO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGVuY29kaW5nRm9yTW9kZWwobW9kZWwpIHtcbiAgICByZXR1cm4gZ2V0RW5jb2RpbmcoZ2V0RW5jb2RpbmdOYW1lRm9yTW9kZWwobW9kZWwpKTtcbn1cbiJdLCJuYW1lcyI6WyJUaWt0b2tlbiIsImdldEVuY29kaW5nTmFtZUZvck1vZGVsIiwiQXN5bmNDYWxsZXIiLCJjYWNoZSIsImNhbGxlciIsImdldEVuY29kaW5nIiwiZW5jb2RpbmciLCJmZXRjaCIsInRoZW4iLCJyZXMiLCJqc29uIiwiZGF0YSIsImNhdGNoIiwiZSIsImVuY29kaW5nRm9yTW9kZWwiLCJtb2RlbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/tiktoken.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/embeddings.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/embeddings.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Embeddings: () => (/* reexport safe */ _dist_embeddings_js__WEBPACK_IMPORTED_MODULE_0__.Embeddings)\n/* harmony export */ });\n/* harmony import */ var _dist_embeddings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/embeddings.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/embeddings.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9lbWJlZGRpbmdzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9lbWJlZGRpbmdzLmpzP2M1OWYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9kaXN0L2VtYmVkZGluZ3MuanMnIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/embeddings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/language_models/chat_models.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/language_models/chat_models.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseChatModel: () => (/* reexport safe */ _dist_language_models_chat_models_js__WEBPACK_IMPORTED_MODULE_0__.BaseChatModel),\n/* harmony export */   SimpleChatModel: () => (/* reexport safe */ _dist_language_models_chat_models_js__WEBPACK_IMPORTED_MODULE_0__.SimpleChatModel),\n/* harmony export */   createChatMessageChunkEncoderStream: () => (/* reexport safe */ _dist_language_models_chat_models_js__WEBPACK_IMPORTED_MODULE_0__.createChatMessageChunkEncoderStream)\n/* harmony export */ });\n/* harmony import */ var _dist_language_models_chat_models_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/language_models/chat_models.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/language_models/chat_models.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9sYW5ndWFnZV9tb2RlbHMvY2hhdF9tb2RlbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFzRCIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWdlbmFpL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvbGFuZ3VhZ2VfbW9kZWxzL2NoYXRfbW9kZWxzLmpzPzczNzgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi4vZGlzdC9sYW5ndWFnZV9tb2RlbHMvY2hhdF9tb2RlbHMuanMnIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/language_models/chat_models.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/messages.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/messages.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.AIMessage),\n/* harmony export */   AIMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.AIMessageChunk),\n/* harmony export */   BaseMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage),\n/* harmony export */   BaseMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageChunk),\n/* harmony export */   ChatMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.ChatMessage),\n/* harmony export */   ChatMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.ChatMessageChunk),\n/* harmony export */   FunctionMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.FunctionMessage),\n/* harmony export */   FunctionMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.FunctionMessageChunk),\n/* harmony export */   HumanMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.HumanMessage),\n/* harmony export */   HumanMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.HumanMessageChunk),\n/* harmony export */   SystemMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.SystemMessage),\n/* harmony export */   SystemMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.SystemMessageChunk),\n/* harmony export */   ToolMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.ToolMessage),\n/* harmony export */   ToolMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.ToolMessageChunk),\n/* harmony export */   _mergeDicts: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts),\n/* harmony export */   _mergeLists: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__._mergeLists),\n/* harmony export */   coerceMessageLikeToMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.coerceMessageLikeToMessage),\n/* harmony export */   convertToChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.convertToChunk),\n/* harmony export */   getBufferString: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.getBufferString),\n/* harmony export */   isAIMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isAIMessage),\n/* harmony export */   isBaseMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessage),\n/* harmony export */   isBaseMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessageChunk),\n/* harmony export */   isOpenAIToolCallArray: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isOpenAIToolCallArray),\n/* harmony export */   mapChatMessagesToStoredMessages: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.mapChatMessagesToStoredMessages),\n/* harmony export */   mapStoredMessageToChatMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.mapStoredMessageToChatMessage),\n/* harmony export */   mapStoredMessagesToChatMessages: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.mapStoredMessagesToChatMessages),\n/* harmony export */   mergeContent: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.mergeContent)\n/* harmony export */ });\n/* harmony import */ var _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/messages/index.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/messages/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9tZXNzYWdlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9tZXNzYWdlcy5qcz9jZmYxIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vZGlzdC9tZXNzYWdlcy9pbmRleC5qcyciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/messages.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/outputs.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/outputs.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatGenerationChunk: () => (/* reexport safe */ _dist_outputs_js__WEBPACK_IMPORTED_MODULE_0__.ChatGenerationChunk),\n/* harmony export */   GenerationChunk: () => (/* reexport safe */ _dist_outputs_js__WEBPACK_IMPORTED_MODULE_0__.GenerationChunk),\n/* harmony export */   RUN_KEY: () => (/* reexport safe */ _dist_outputs_js__WEBPACK_IMPORTED_MODULE_0__.RUN_KEY)\n/* harmony export */ });\n/* harmony import */ var _dist_outputs_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/outputs.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/outputs.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9vdXRwdXRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1nZW5haS9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL291dHB1dHMuanM/ZmY2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2Rpc3Qvb3V0cHV0cy5qcyciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/outputs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/utils/chunk_array.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/utils/chunk_array.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chunkArray: () => (/* reexport safe */ _dist_utils_chunk_array_js__WEBPACK_IMPORTED_MODULE_0__.chunkArray)\n/* harmony export */ });\n/* harmony import */ var _dist_utils_chunk_array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/utils/chunk_array.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/chunk_array.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS91dGlscy9jaHVua19hcnJheS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWdlbmFpL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvdXRpbHMvY2h1bmtfYXJyYXkuanM/YTZjNSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuLi9kaXN0L3V0aWxzL2NodW5rX2FycmF5LmpzJyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/utils/chunk_array.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/utils/env.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@langchain/google-genai/node_modules/@langchain/core/utils/env.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnv: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.getEnv),\n/* harmony export */   getEnvironmentVariable: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable),\n/* harmony export */   getRuntimeEnvironment: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.getRuntimeEnvironment),\n/* harmony export */   isBrowser: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isBrowser),\n/* harmony export */   isDeno: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isDeno),\n/* harmony export */   isJsDom: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isJsDom),\n/* harmony export */   isNode: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isNode),\n/* harmony export */   isWebWorker: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isWebWorker)\n/* harmony export */ });\n/* harmony import */ var _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/utils/env.js */ \"(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/dist/utils/env.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS91dGlscy9lbnYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS91dGlscy9lbnYuanM/Y2ExNSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuLi9kaXN0L3V0aWxzL2Vudi5qcyciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-genai/node_modules/@langchain/core/utils/env.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/mongodb/dist/chat_history.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/mongodb/dist/chat_history.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MongoDBChatMessageHistory: () => (/* binding */ MongoDBChatMessageHistory)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_chat_history__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/chat_history */ \"(rsc)/./node_modules/@langchain/core/chat_history.js\");\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/@langchain/core/messages.js\");\n\n\n/**\n * @example\n * ```typescript\n * const chatHistory = new MongoDBChatMessageHistory({\n *   collection: myCollection,\n *   sessionId: 'unique-session-id',\n * });\n * const messages = await chatHistory.getMessages();\n * await chatHistory.clear();\n * ```\n */ class MongoDBChatMessageHistory extends _langchain_core_chat_history__WEBPACK_IMPORTED_MODULE_0__.BaseListChatMessageHistory {\n    constructor({ collection, sessionId }){\n        super();\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"stores\",\n                \"message\",\n                \"mongodb\"\n            ]\n        });\n        Object.defineProperty(this, \"collection\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"sessionId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"idKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"sessionId\"\n        });\n        this.collection = collection;\n        this.sessionId = sessionId;\n    }\n    async getMessages() {\n        const document = await this.collection.findOne({\n            [this.idKey]: this.sessionId\n        });\n        const messages = document?.messages || [];\n        return (0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.mapStoredMessagesToChatMessages)(messages);\n    }\n    async addMessage(message) {\n        const messages = (0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.mapChatMessagesToStoredMessages)([\n            message\n        ]);\n        await this.collection.updateOne({\n            [this.idKey]: this.sessionId\n        }, {\n            $push: {\n                messages: {\n                    $each: messages\n                }\n            }\n        }, {\n            upsert: true\n        });\n    }\n    async clear() {\n        await this.collection.deleteOne({\n            [this.idKey]: this.sessionId\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9tb25nb2RiL2Rpc3QvY2hhdF9oaXN0b3J5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEwRTtBQUNtQztBQUM3Rzs7Ozs7Ozs7OztDQVVDLEdBQ00sTUFBTUcsa0NBQWtDSCxvRkFBMEJBO0lBQ3JFSSxZQUFZLEVBQUVDLFVBQVUsRUFBRUMsU0FBUyxFQUFFLENBQUU7UUFDbkMsS0FBSztRQUNMQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGdCQUFnQjtZQUN4Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztnQkFBQztnQkFBYTtnQkFBVTtnQkFBVzthQUFVO1FBQ3hEO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsY0FBYztZQUN0Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsYUFBYTtZQUNyQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsU0FBUztZQUNqQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO1FBQ0EsSUFBSSxDQUFDUCxVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0MsU0FBUyxHQUFHQTtJQUNyQjtJQUNBLE1BQU1PLGNBQWM7UUFDaEIsTUFBTUMsV0FBVyxNQUFNLElBQUksQ0FBQ1QsVUFBVSxDQUFDVSxPQUFPLENBQUM7WUFDM0MsQ0FBQyxJQUFJLENBQUNDLEtBQUssQ0FBQyxFQUFFLElBQUksQ0FBQ1YsU0FBUztRQUNoQztRQUNBLE1BQU1XLFdBQVdILFVBQVVHLFlBQVksRUFBRTtRQUN6QyxPQUFPZix5RkFBK0JBLENBQUNlO0lBQzNDO0lBQ0EsTUFBTUMsV0FBV0MsT0FBTyxFQUFFO1FBQ3RCLE1BQU1GLFdBQVdoQix5RkFBK0JBLENBQUM7WUFBQ2tCO1NBQVE7UUFDMUQsTUFBTSxJQUFJLENBQUNkLFVBQVUsQ0FBQ2UsU0FBUyxDQUFDO1lBQUUsQ0FBQyxJQUFJLENBQUNKLEtBQUssQ0FBQyxFQUFFLElBQUksQ0FBQ1YsU0FBUztRQUFDLEdBQUc7WUFDOURlLE9BQU87Z0JBQUVKLFVBQVU7b0JBQUVLLE9BQU9MO2dCQUFTO1lBQUU7UUFDM0MsR0FBRztZQUFFTSxRQUFRO1FBQUs7SUFDdEI7SUFDQSxNQUFNQyxRQUFRO1FBQ1YsTUFBTSxJQUFJLENBQUNuQixVQUFVLENBQUNvQixTQUFTLENBQUM7WUFBRSxDQUFDLElBQUksQ0FBQ1QsS0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDVixTQUFTO1FBQUM7SUFDbkU7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vbW9uZ29kYi9kaXN0L2NoYXRfaGlzdG9yeS5qcz8zYmE5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VMaXN0Q2hhdE1lc3NhZ2VIaXN0b3J5IH0gZnJvbSBcIkBsYW5nY2hhaW4vY29yZS9jaGF0X2hpc3RvcnlcIjtcbmltcG9ydCB7IG1hcENoYXRNZXNzYWdlc1RvU3RvcmVkTWVzc2FnZXMsIG1hcFN0b3JlZE1lc3NhZ2VzVG9DaGF0TWVzc2FnZXMsIH0gZnJvbSBcIkBsYW5nY2hhaW4vY29yZS9tZXNzYWdlc1wiO1xuLyoqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3QgY2hhdEhpc3RvcnkgPSBuZXcgTW9uZ29EQkNoYXRNZXNzYWdlSGlzdG9yeSh7XG4gKiAgIGNvbGxlY3Rpb246IG15Q29sbGVjdGlvbixcbiAqICAgc2Vzc2lvbklkOiAndW5pcXVlLXNlc3Npb24taWQnLFxuICogfSk7XG4gKiBjb25zdCBtZXNzYWdlcyA9IGF3YWl0IGNoYXRIaXN0b3J5LmdldE1lc3NhZ2VzKCk7XG4gKiBhd2FpdCBjaGF0SGlzdG9yeS5jbGVhcigpO1xuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBNb25nb0RCQ2hhdE1lc3NhZ2VIaXN0b3J5IGV4dGVuZHMgQmFzZUxpc3RDaGF0TWVzc2FnZUhpc3Rvcnkge1xuICAgIGNvbnN0cnVjdG9yKHsgY29sbGVjdGlvbiwgc2Vzc2lvbklkIH0pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGNfbmFtZXNwYWNlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBbXCJsYW5nY2hhaW5cIiwgXCJzdG9yZXNcIiwgXCJtZXNzYWdlXCIsIFwibW9uZ29kYlwiXVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiY29sbGVjdGlvblwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJzZXNzaW9uSWRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiaWRLZXlcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFwic2Vzc2lvbklkXCJcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgICAgIHRoaXMuc2Vzc2lvbklkID0gc2Vzc2lvbklkO1xuICAgIH1cbiAgICBhc3luYyBnZXRNZXNzYWdlcygpIHtcbiAgICAgICAgY29uc3QgZG9jdW1lbnQgPSBhd2FpdCB0aGlzLmNvbGxlY3Rpb24uZmluZE9uZSh7XG4gICAgICAgICAgICBbdGhpcy5pZEtleV06IHRoaXMuc2Vzc2lvbklkLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgbWVzc2FnZXMgPSBkb2N1bWVudD8ubWVzc2FnZXMgfHwgW107XG4gICAgICAgIHJldHVybiBtYXBTdG9yZWRNZXNzYWdlc1RvQ2hhdE1lc3NhZ2VzKG1lc3NhZ2VzKTtcbiAgICB9XG4gICAgYXN5bmMgYWRkTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gbWFwQ2hhdE1lc3NhZ2VzVG9TdG9yZWRNZXNzYWdlcyhbbWVzc2FnZV0pO1xuICAgICAgICBhd2FpdCB0aGlzLmNvbGxlY3Rpb24udXBkYXRlT25lKHsgW3RoaXMuaWRLZXldOiB0aGlzLnNlc3Npb25JZCB9LCB7XG4gICAgICAgICAgICAkcHVzaDogeyBtZXNzYWdlczogeyAkZWFjaDogbWVzc2FnZXMgfSB9LFxuICAgICAgICB9LCB7IHVwc2VydDogdHJ1ZSB9KTtcbiAgICB9XG4gICAgYXN5bmMgY2xlYXIoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuY29sbGVjdGlvbi5kZWxldGVPbmUoeyBbdGhpcy5pZEtleV06IHRoaXMuc2Vzc2lvbklkIH0pO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJCYXNlTGlzdENoYXRNZXNzYWdlSGlzdG9yeSIsIm1hcENoYXRNZXNzYWdlc1RvU3RvcmVkTWVzc2FnZXMiLCJtYXBTdG9yZWRNZXNzYWdlc1RvQ2hhdE1lc3NhZ2VzIiwiTW9uZ29EQkNoYXRNZXNzYWdlSGlzdG9yeSIsImNvbnN0cnVjdG9yIiwiY29sbGVjdGlvbiIsInNlc3Npb25JZCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJnZXRNZXNzYWdlcyIsImRvY3VtZW50IiwiZmluZE9uZSIsImlkS2V5IiwibWVzc2FnZXMiLCJhZGRNZXNzYWdlIiwibWVzc2FnZSIsInVwZGF0ZU9uZSIsIiRwdXNoIiwiJGVhY2giLCJ1cHNlcnQiLCJjbGVhciIsImRlbGV0ZU9uZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/mongodb/dist/chat_history.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/mongodb/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@langchain/mongodb/dist/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MongoDBAtlasVectorSearch: () => (/* reexport safe */ _vectorstores_js__WEBPACK_IMPORTED_MODULE_1__.MongoDBAtlasVectorSearch),\n/* harmony export */   MongoDBChatMessageHistory: () => (/* reexport safe */ _chat_history_js__WEBPACK_IMPORTED_MODULE_0__.MongoDBChatMessageHistory)\n/* harmony export */ });\n/* harmony import */ var _chat_history_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chat_history.js */ \"(rsc)/./node_modules/@langchain/mongodb/dist/chat_history.js\");\n/* harmony import */ var _vectorstores_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vectorstores.js */ \"(rsc)/./node_modules/@langchain/mongodb/dist/vectorstores.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9tb25nb2RiL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFrQztBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9tb25nb2RiL2Rpc3QvaW5kZXguanM/OTM3MiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9jaGF0X2hpc3RvcnkuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3ZlY3RvcnN0b3Jlcy5qc1wiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/mongodb/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/mongodb/dist/vectorstores.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/mongodb/dist/vectorstores.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MongoDBAtlasVectorSearch: () => (/* binding */ MongoDBAtlasVectorSearch)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_vectorstores__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/vectorstores */ \"(rsc)/./node_modules/@langchain/core/vectorstores.js\");\n/* harmony import */ var _langchain_core_documents__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/documents */ \"(rsc)/./node_modules/@langchain/core/documents.js\");\n/* harmony import */ var _langchain_core_utils_math__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/utils/math */ \"(rsc)/./node_modules/@langchain/core/utils/math.js\");\n/* harmony import */ var _langchain_core_utils_async_caller__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @langchain/core/utils/async_caller */ \"(rsc)/./node_modules/@langchain/core/utils/async_caller.js\");\n\n\n\n\n/**\n * Class that is a wrapper around MongoDB Atlas Vector Search. It is used\n * to store embeddings in MongoDB documents, create a vector search index,\n * and perform K-Nearest Neighbors (KNN) search with an approximate\n * nearest neighbor algorithm.\n */ class MongoDBAtlasVectorSearch extends _langchain_core_vectorstores__WEBPACK_IMPORTED_MODULE_0__.VectorStore {\n    _vectorstoreType() {\n        return \"mongodb_atlas\";\n    }\n    constructor(embeddings, args){\n        super(embeddings, args);\n        Object.defineProperty(this, \"collection\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"indexName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"textKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"embeddingKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"primaryKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"caller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.collection = args.collection;\n        this.indexName = args.indexName ?? \"default\";\n        this.textKey = args.textKey ?? \"text\";\n        this.embeddingKey = args.embeddingKey ?? \"embedding\";\n        this.primaryKey = args.primaryKey ?? \"_id\";\n        this.caller = new _langchain_core_utils_async_caller__WEBPACK_IMPORTED_MODULE_3__.AsyncCaller(args);\n    }\n    /**\n     * Method to add vectors and their corresponding documents to the MongoDB\n     * collection.\n     * @param vectors Vectors to be added.\n     * @param documents Corresponding documents to be added.\n     * @returns Promise that resolves when the vectors and documents have been added.\n     */ async addVectors(vectors, documents, options) {\n        const docs = vectors.map((embedding, idx)=>({\n                [this.textKey]: documents[idx].pageContent,\n                [this.embeddingKey]: embedding,\n                ...documents[idx].metadata\n            }));\n        if (options?.ids === undefined) {\n            await this.collection.insertMany(docs);\n        } else {\n            if (options.ids.length !== vectors.length) {\n                throw new Error(`If provided, \"options.ids\" must be an array with the same length as \"vectors\".`);\n            }\n            const { ids } = options;\n            for(let i = 0; i < docs.length; i += 1){\n                await this.caller.call(async ()=>{\n                    await this.collection.updateOne({\n                        [this.primaryKey]: ids[i]\n                    }, {\n                        $set: {\n                            [this.primaryKey]: ids[i],\n                            ...docs[i]\n                        }\n                    }, {\n                        upsert: true\n                    });\n                });\n            }\n        }\n        return options?.ids ?? docs.map((doc)=>doc[this.primaryKey]);\n    }\n    /**\n     * Method to add documents to the MongoDB collection. It first converts\n     * the documents to vectors using the embeddings and then calls the\n     * addVectors method.\n     * @param documents Documents to be added.\n     * @returns Promise that resolves when the documents have been added.\n     */ async addDocuments(documents, options) {\n        const texts = documents.map(({ pageContent })=>pageContent);\n        return this.addVectors(await this.embeddings.embedDocuments(texts), documents, options);\n    }\n    /**\n     * Method that performs a similarity search on the vectors stored in the\n     * MongoDB collection. It returns a list of documents and their\n     * corresponding similarity scores.\n     * @param query Query vector for the similarity search.\n     * @param k Number of nearest neighbors to return.\n     * @param filter Optional filter to be applied.\n     * @returns Promise that resolves to a list of documents and their corresponding similarity scores.\n     */ async similaritySearchVectorWithScore(query, k, filter) {\n        const postFilterPipeline = filter?.postFilterPipeline ?? [];\n        const preFilter = filter?.preFilter || filter?.postFilterPipeline || filter?.includeEmbeddings ? filter.preFilter : filter;\n        const removeEmbeddingsPipeline = !filter?.includeEmbeddings ? [\n            {\n                $project: {\n                    [this.embeddingKey]: 0\n                }\n            }\n        ] : [];\n        const pipeline = [\n            {\n                $vectorSearch: {\n                    queryVector: MongoDBAtlasVectorSearch.fixArrayPrecision(query),\n                    index: this.indexName,\n                    path: this.embeddingKey,\n                    limit: k,\n                    numCandidates: 10 * k,\n                    ...preFilter && {\n                        filter: preFilter\n                    }\n                }\n            },\n            {\n                $set: {\n                    score: {\n                        $meta: \"vectorSearchScore\"\n                    }\n                }\n            },\n            ...removeEmbeddingsPipeline,\n            ...postFilterPipeline\n        ];\n        const results = this.collection.aggregate(pipeline).map((result)=>{\n            const { score, [this.textKey]: text, ...metadata } = result;\n            return [\n                new _langchain_core_documents__WEBPACK_IMPORTED_MODULE_1__.Document({\n                    pageContent: text,\n                    metadata\n                }),\n                score\n            ];\n        });\n        return results.toArray();\n    }\n    /**\n     * Return documents selected using the maximal marginal relevance.\n     * Maximal marginal relevance optimizes for similarity to the query AND diversity\n     * among selected documents.\n     *\n     * @param {string} query - Text to look up documents similar to.\n     * @param {number} options.k - Number of documents to return.\n     * @param {number} options.fetchK=20- Number of documents to fetch before passing to the MMR algorithm.\n     * @param {number} options.lambda=0.5 - Number between 0 and 1 that determines the degree of diversity among the results,\n     *                 where 0 corresponds to maximum diversity and 1 to minimum diversity.\n     * @param {MongoDBAtlasFilter} options.filter - Optional Atlas Search operator to pre-filter on document fields\n     *                                      or post-filter following the knnBeta search.\n     *\n     * @returns {Promise<Document[]>} - List of documents selected by maximal marginal relevance.\n     */ async maxMarginalRelevanceSearch(query, options) {\n        const { k, fetchK = 20, lambda = 0.5, filter } = options;\n        const queryEmbedding = await this.embeddings.embedQuery(query);\n        // preserve the original value of includeEmbeddings\n        const includeEmbeddingsFlag = options.filter?.includeEmbeddings || false;\n        // update filter to include embeddings, as they will be used in MMR\n        const includeEmbeddingsFilter = {\n            ...filter,\n            includeEmbeddings: true\n        };\n        const resultDocs = await this.similaritySearchVectorWithScore(MongoDBAtlasVectorSearch.fixArrayPrecision(queryEmbedding), fetchK, includeEmbeddingsFilter);\n        const embeddingList = resultDocs.map((doc)=>doc[0].metadata[this.embeddingKey]);\n        const mmrIndexes = (0,_langchain_core_utils_math__WEBPACK_IMPORTED_MODULE_2__.maximalMarginalRelevance)(queryEmbedding, embeddingList, lambda, k);\n        return mmrIndexes.map((idx)=>{\n            const doc = resultDocs[idx][0];\n            // remove embeddings if they were not requested originally\n            if (!includeEmbeddingsFlag) {\n                delete doc.metadata[this.embeddingKey];\n            }\n            return doc;\n        });\n    }\n    /**\n     * Static method to create an instance of MongoDBAtlasVectorSearch from a\n     * list of texts. It first converts the texts to vectors and then adds\n     * them to the MongoDB collection.\n     * @param texts List of texts to be converted to vectors.\n     * @param metadatas Metadata for the texts.\n     * @param embeddings Embeddings to be used for conversion.\n     * @param dbConfig Database configuration for MongoDB Atlas.\n     * @returns Promise that resolves to a new instance of MongoDBAtlasVectorSearch.\n     */ static async fromTexts(texts, metadatas, embeddings, dbConfig) {\n        const docs = [];\n        for(let i = 0; i < texts.length; i += 1){\n            const metadata = Array.isArray(metadatas) ? metadatas[i] : metadatas;\n            const newDoc = new _langchain_core_documents__WEBPACK_IMPORTED_MODULE_1__.Document({\n                pageContent: texts[i],\n                metadata\n            });\n            docs.push(newDoc);\n        }\n        return MongoDBAtlasVectorSearch.fromDocuments(docs, embeddings, dbConfig);\n    }\n    /**\n     * Static method to create an instance of MongoDBAtlasVectorSearch from a\n     * list of documents. It first converts the documents to vectors and then\n     * adds them to the MongoDB collection.\n     * @param docs List of documents to be converted to vectors.\n     * @param embeddings Embeddings to be used for conversion.\n     * @param dbConfig Database configuration for MongoDB Atlas.\n     * @returns Promise that resolves to a new instance of MongoDBAtlasVectorSearch.\n     */ static async fromDocuments(docs, embeddings, dbConfig) {\n        const instance = new this(embeddings, dbConfig);\n        await instance.addDocuments(docs, {\n            ids: dbConfig.ids\n        });\n        return instance;\n    }\n    /**\n     * Static method to fix the precision of the array that ensures that\n     * every number in this array is always float when casted to other types.\n     * This is needed since MongoDB Atlas Vector Search does not cast integer\n     * inside vector search to float automatically.\n     * This method shall introduce a hint of error but should be safe to use\n     * since introduced error is very small, only applies to integer numbers\n     * returned by embeddings, and most embeddings shall not have precision\n     * as high as 15 decimal places.\n     * @param array Array of number to be fixed.\n     * @returns\n     */ static fixArrayPrecision(array) {\n        return array.map((value)=>{\n            if (Number.isInteger(value)) {\n                return value + 0.000000000000001;\n            }\n            return value;\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/mongodb/dist/vectorstores.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/mongodb/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@langchain/mongodb/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MongoDBAtlasVectorSearch: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.MongoDBAtlasVectorSearch),\n/* harmony export */   MongoDBChatMessageHistory: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.MongoDBChatMessageHistory)\n/* harmony export */ });\n/* harmony import */ var _dist_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/index.js */ \"(rsc)/./node_modules/@langchain/mongodb/dist/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9tb25nb2RiL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vbW9uZ29kYi9pbmRleC5qcz9hYmExIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vZGlzdC9pbmRleC5qcyciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/mongodb/index.js\n");

/***/ })

};
;