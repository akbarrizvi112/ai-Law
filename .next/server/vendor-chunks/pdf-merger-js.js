"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pdf-merger-js";
exports.ids = ["vendor-chunks/pdf-merger-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/pdf-merger-js/PDFMergerBase.js":
/*!*****************************************************!*\
  !*** ./node_modules/pdf-merger-js/PDFMergerBase.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PDFMergerBase)\n/* harmony export */ });\n/* harmony import */ var pdf_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pdf-lib */ \"(ssr)/./node_modules/pdf-lib/es/index.js\");\n/* harmony import */ var _parsePagesString_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parsePagesString.js */ \"(ssr)/./node_modules/pdf-merger-js/parsePagesString.js\");\n\n\n/**\n * @typedef {Object} Metadata\n * @property {string} [producer]\n * @property {string} [author]\n * @property {string} [title]\n * @property {string} [creator]\n */ /**\n * @typedef {Uint8Array | ArrayBuffer | Blob | URL} PdfInput\n */ class PDFMergerBase {\n    constructor(){\n        /**\n   * The internal pdf-lib document.\n   *\n   * @protected\n   * @type {PDFDocument | undefined}\n   */ this._doc = undefined;\n        /**\n   * The load options for pdf-lib.\n   *\n   * @type { import('pdf-lib').LoadOptions }\n   * @protected\n   */ this._loadOptions = {\n            // allow merging of encrypted pdfs (issue #88)\n            ignoreEncryption: true\n        };\n        this.reset();\n    }\n    /**\n   * Resets the internal state of the document, to start again.\n   *\n   * @returns {void}\n   */ reset() {\n        this._doc = undefined;\n    }\n    /**\n   * Set the metadata of the merged PDF.\n   *\n   * @async\n   * @param {Metadata} metadata\n   * @returns {Promise<void>}\n   */ async setMetadata(metadata) {\n        await this._ensureDoc();\n        if (metadata.producer) this._doc.setProducer(metadata.producer);\n        if (metadata.author) this._doc.setAuthor(metadata.author);\n        if (metadata.title) this._doc.setTitle(metadata.title);\n        if (metadata.creator) this._doc.setCreator(metadata.creator);\n    }\n    /**\n   * Add pages from a PDF document to the end of the merged document.\n   *\n   * @async\n   * @param {PdfInput} input - a pdf source\n   * @param {string | string[] | number | number[] | undefined | null} [pages]\n   * @returns {Promise<void>}\n   */ async add(input, pages) {\n        await this._ensureDoc();\n        if (typeof pages === \"undefined\" || pages === null || pages === \"all\") {\n            // of no pages are given, add the entire document\n            await this._addPagesFromDocument(input);\n        } else if (typeof pages === \"number\") {\n            // e.g. 2\n            await this._addPagesFromDocument(input, [\n                pages\n            ]);\n        } else if (Array.isArray(pages)) {\n            // e.g. [2,3,6] or [\"2\",\"3\",\"6\"]\n            const pagesAsNumbers = pages.map((p)=>typeof p === \"string\" ? parseInt(p.trim()) : p);\n            await this._addPagesFromDocument(input, pagesAsNumbers);\n        } else if (typeof pages === \"string\" || pages instanceof String) {\n            // e.g. \"2,3,6\" or \"2-6\" or \"2to6,8,10-12\"\n            const pagesArray = (0,_parsePagesString_js__WEBPACK_IMPORTED_MODULE_1__.parsePagesString)(pages);\n            await this._addPagesFromDocument(input, pagesArray);\n        } else {\n            throw new Error([\n                'Invalid parameter \"pages\".',\n                'Must be a string like \"1,2,3\" or \"1-3\" or an Array of numbers.'\n            ].join(\" \"));\n        }\n    }\n    /**\n   * Creates a new PDFDocument and sets the metadata\n   * if this.#doc does not exist yet\n   *\n   * @protected\n   * @async\n   * @returns {Promise<void>}\n   */ async _ensureDoc() {\n        if (!this._doc) {\n            this._doc = await pdf_lib__WEBPACK_IMPORTED_MODULE_0__.PDFDocument.create();\n            this._doc.setProducer(\"pdf-merger-js\");\n            this._doc.setCreationDate(new Date());\n        }\n    }\n    /**\n   * Get the merged PDF as a Uint8Array.\n   *\n   * @async\n   * @protected\n   * @returns {Promise<Uint8Array>}\n   */ async _saveAsUint8Array() {\n        await this._ensureDoc();\n        return await this._doc.save();\n    }\n    /**\n   * Get the merged PDF as a Base64 encoded string.\n   *\n   * @async\n   * @protected\n   * @returns {Promise<string>}\n   */ async _saveAsBase64() {\n        await this._ensureDoc();\n        return await this._doc.saveAsBase64({\n            dataUri: true\n        });\n    }\n    /**\n   * Converts the input to a Uint8Array.\n   * If the input is a string, it is treated as a URL and the document gets fetched.\n   *\n   * @async\n   * @protected\n   * @param {PdfInput} input\n   * @returns {Uint8Array}\n   */ async _getInputAsUint8Array(input) {\n        // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\n        if (input instanceof Uint8Array) {\n            return input;\n        }\n        // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n        if (input instanceof ArrayBuffer || Object.prototype.toString.call(input) === \"[object ArrayBuffer]\") {\n            return new Uint8Array(input);\n        }\n        // see https://developer.mozilla.org/en-US/docs/Web/API/Blob\n        if (typeof Blob !== \"undefined\" && input instanceof Blob) {\n            const aBuffer = await input.arrayBuffer();\n            return new Uint8Array(aBuffer);\n        }\n        // see https://developer.mozilla.org/en-US/docs/Web/API/URL\n        if (input instanceof URL) {\n            if (typeof fetch === \"undefined\") {\n                throw new Error(\"fetch is not defined. You need to use a polyfill for this to work.\");\n            }\n            const res = await fetch(input);\n            const aBuffer = await res.arrayBuffer();\n            return new Uint8Array(aBuffer);\n        }\n        // throw a meaningful error if input type is unknown or invalid\n        const allowedTypes = [\n            \"Uint8Array\",\n            \"ArrayBuffer\",\n            \"File\",\n            \"Blob\",\n            \"URL\"\n        ];\n        let errorMsg = `pdf-input must be of type ${allowedTypes.join(\", \")}, a valid filename or url!`;\n        if (typeof input === \"string\" || input instanceof String) {\n            errorMsg += ` Input was \"${input}\" wich is not an existing file, nor a valid URL!`;\n        } else {\n            errorMsg += ` Input was of type \"${typeof input}\" instead.`;\n        }\n        throw new Error(errorMsg);\n    }\n    /**\n   * @async\n   * @protected\n   * @param {PdfInput} input\n   * @param {number[] | undefined} pages - array of page numbers to add (starts at 1)\n   * @returns {Promise<void>}\n   */ async _addPagesFromDocument(input, pages = undefined) {\n        const src = await this._getInputAsUint8Array(input);\n        const srcDoc = await pdf_lib__WEBPACK_IMPORTED_MODULE_0__.PDFDocument.load(src, this._loadOptions);\n        let indices = [];\n        if (pages === undefined) {\n            // add the whole document\n            indices = srcDoc.getPageIndices();\n        } else {\n            // add selected pages switching to a 0-based index\n            indices = pages.map((p)=>p - 1);\n        }\n        const copiedPages = await this._doc.copyPages(srcDoc, indices);\n        copiedPages.forEach((page)=>{\n            this._doc.addPage(page);\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pdf-merger-js/PDFMergerBase.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pdf-merger-js/browser.js":
/*!***********************************************!*\
  !*** ./node_modules/pdf-merger-js/browser.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PDFMerger)\n/* harmony export */ });\n/* harmony import */ var _PDFMergerBase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PDFMergerBase.js */ \"(ssr)/./node_modules/pdf-merger-js/PDFMergerBase.js\");\n\nconst globalObject = typeof globalThis === \"object\" ? globalThis :  false ? 0 // Browser\n : typeof self === \"object\" ? self // Worker\n : undefined;\n/**\n * @typedef {import(./PDFMergerBase).PdfInput | File | String | string} PdfInput\n */ class PDFMerger extends _PDFMergerBase_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n   * Returns a Uint8Array of the input.\n   *\n   * If input is a string, it is treated as an URL.\n   *\n   * @async\n   * @protected\n   * @overwrite\n   * @param {PdfInput} input\n   * @returns {Uint8Array}\n   */ async _getInputAsUint8Array(input) {\n        // see https://developer.mozilla.org/en-US/docs/Web/API/File\n        if (input instanceof globalObject.File) {\n            return new Promise((resolve, reject)=>{\n                const fileReader = new globalObject.FileReader();\n                fileReader.onload = function(evt) {\n                    const result = fileReader.result;\n                    const arrayBuffer = new Uint8Array(result);\n                    return resolve(arrayBuffer);\n                };\n                fileReader.readAsArrayBuffer(input);\n            });\n        }\n        // strings are treated as URLs int the browser context\n        if (typeof input === \"string\" || input instanceof String) {\n            try {\n                Boolean(new URL(input));\n            } catch (e) {\n                throw new Error(`This is not a valid url: ${input}`);\n            }\n            input = new URL(input);\n        }\n        return await super._getInputAsUint8Array(input);\n    }\n    /**\n   * Return the merged PDF as a Uint8Array.\n   *\n   * @async\n   * @returns {Promise<Uint8Array>}\n   */ async saveAsBuffer() {\n        return await this._saveAsUint8Array();\n    }\n    /**\n   * Return the merged PDF as a Blob.\n   *\n   * @async\n   * @returns {Promise<Blob>}\n   */ async saveAsBlob() {\n        const buffer = await this._saveAsUint8Array();\n        return new globalObject.Blob([\n            buffer\n        ], {\n            type: \"application/pdf\"\n        });\n    }\n    /**\n   * Download the PDF as a file with the given name.\n   * The extension \".pdf\" is appended automatically.\n   *\n   * @async\n   * @param {string} fileName\n   * @returns {Promise<void>}\n   */ async save(fileName) {\n        const dataUri = await this._saveAsBase64();\n        const link = document.createElement(\"a\");\n        link.href = dataUri;\n        link.download = `${fileName}.pdf`;\n        link.click();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcGRmLW1lcmdlci1qcy9icm93c2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQThDO0FBRTlDLE1BQU1DLGVBQ0osT0FBT0MsZUFBZSxXQUNsQkEsYUFDQSxNQUFrQixHQUNoQkMsQ0FBTUEsQ0FBQyxVQUFVO0dBQ2pCLE9BQU9DLFNBQVMsV0FDZEEsS0FBSyxTQUFTO0dBQ2QsU0FBSTtBQUVkOztDQUVDLEdBRWMsTUFBTUMsa0JBQWtCTCx5REFBYUE7SUFDbEQ7Ozs7Ozs7Ozs7R0FVQyxHQUNELE1BQU1NLHNCQUF1QkMsS0FBSyxFQUFFO1FBQ2xDLDREQUE0RDtRQUM1RCxJQUFJQSxpQkFBaUJOLGFBQWFPLElBQUksRUFBRTtZQUN0QyxPQUFPLElBQUlDLFFBQVEsQ0FBQ0MsU0FBU0M7Z0JBQzNCLE1BQU1DLGFBQWEsSUFBSVgsYUFBYVksVUFBVTtnQkFDOUNELFdBQVdFLE1BQU0sR0FBRyxTQUFVQyxHQUFHO29CQUMvQixNQUFNQyxTQUFTSixXQUFXSSxNQUFNO29CQUNoQyxNQUFNQyxjQUFjLElBQUlDLFdBQVdGO29CQUNuQyxPQUFPTixRQUFRTztnQkFDakI7Z0JBQ0FMLFdBQVdPLGlCQUFpQixDQUFDWjtZQUMvQjtRQUNGO1FBRUEsc0RBQXNEO1FBQ3RELElBQUksT0FBT0EsVUFBVSxZQUFZQSxpQkFBaUJhLFFBQVE7WUFDeEQsSUFBSTtnQkFDRkMsUUFBUSxJQUFJQyxJQUFJZjtZQUNsQixFQUFFLE9BQU9nQixHQUFHO2dCQUNWLE1BQU0sSUFBSUMsTUFBTSxDQUFDLHlCQUF5QixFQUFFakIsTUFBTSxDQUFDO1lBQ3JEO1lBQ0FBLFFBQVEsSUFBSWUsSUFBSWY7UUFDbEI7UUFFQSxPQUFPLE1BQU0sS0FBSyxDQUFDRCxzQkFBc0JDO0lBQzNDO0lBRUE7Ozs7O0dBS0MsR0FDRCxNQUFNa0IsZUFBZ0I7UUFDcEIsT0FBTyxNQUFNLElBQUksQ0FBQ0MsaUJBQWlCO0lBQ3JDO0lBRUE7Ozs7O0dBS0MsR0FDRCxNQUFNQyxhQUFjO1FBQ2xCLE1BQU1DLFNBQVMsTUFBTSxJQUFJLENBQUNGLGlCQUFpQjtRQUUzQyxPQUFPLElBQUl6QixhQUFhNEIsSUFBSSxDQUFDO1lBQUNEO1NBQU8sRUFBRTtZQUNyQ0UsTUFBTTtRQUNSO0lBQ0Y7SUFFQTs7Ozs7OztHQU9DLEdBQ0QsTUFBTUMsS0FBTUMsUUFBUSxFQUFFO1FBQ3BCLE1BQU1DLFVBQVUsTUFBTSxJQUFJLENBQUNDLGFBQWE7UUFFeEMsTUFBTUMsT0FBT0MsU0FBU0MsYUFBYSxDQUFDO1FBQ3BDRixLQUFLRyxJQUFJLEdBQUdMO1FBQ1pFLEtBQUtJLFFBQVEsR0FBRyxDQUFDLEVBQUVQLFNBQVMsSUFBSSxDQUFDO1FBQ2pDRyxLQUFLSyxLQUFLO0lBQ1o7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL3BkZi1tZXJnZXItanMvYnJvd3Nlci5qcz9lNTAyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQREZNZXJnZXJCYXNlIGZyb20gJy4vUERGTWVyZ2VyQmFzZS5qcydcblxuY29uc3QgZ2xvYmFsT2JqZWN0ID1cbiAgdHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnXG4gICAgPyBnbG9iYWxUaGlzXG4gICAgOiB0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0J1xuICAgICAgPyB3aW5kb3cgLy8gQnJvd3NlclxuICAgICAgOiB0eXBlb2Ygc2VsZiA9PT0gJ29iamVjdCdcbiAgICAgICAgPyBzZWxmIC8vIFdvcmtlclxuICAgICAgICA6IHRoaXNcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KC4vUERGTWVyZ2VyQmFzZSkuUGRmSW5wdXQgfCBGaWxlIHwgU3RyaW5nIHwgc3RyaW5nfSBQZGZJbnB1dFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBERk1lcmdlciBleHRlbmRzIFBERk1lcmdlckJhc2Uge1xuICAvKipcbiAgICogUmV0dXJucyBhIFVpbnQ4QXJyYXkgb2YgdGhlIGlucHV0LlxuICAgKlxuICAgKiBJZiBpbnB1dCBpcyBhIHN0cmluZywgaXQgaXMgdHJlYXRlZCBhcyBhbiBVUkwuXG4gICAqXG4gICAqIEBhc3luY1xuICAgKiBAcHJvdGVjdGVkXG4gICAqIEBvdmVyd3JpdGVcbiAgICogQHBhcmFtIHtQZGZJbnB1dH0gaW5wdXRcbiAgICogQHJldHVybnMge1VpbnQ4QXJyYXl9XG4gICAqL1xuICBhc3luYyBfZ2V0SW5wdXRBc1VpbnQ4QXJyYXkgKGlucHV0KSB7XG4gICAgLy8gc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9GaWxlXG4gICAgaWYgKGlucHV0IGluc3RhbmNlb2YgZ2xvYmFsT2JqZWN0LkZpbGUpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IGZpbGVSZWFkZXIgPSBuZXcgZ2xvYmFsT2JqZWN0LkZpbGVSZWFkZXIoKVxuICAgICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSBmaWxlUmVhZGVyLnJlc3VsdFxuICAgICAgICAgIGNvbnN0IGFycmF5QnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkocmVzdWx0KVxuICAgICAgICAgIHJldHVybiByZXNvbHZlKGFycmF5QnVmZmVyKVxuICAgICAgICB9XG4gICAgICAgIGZpbGVSZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoaW5wdXQpXG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIHN0cmluZ3MgYXJlIHRyZWF0ZWQgYXMgVVJMcyBpbnQgdGhlIGJyb3dzZXIgY29udGV4dFxuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnIHx8IGlucHV0IGluc3RhbmNlb2YgU3RyaW5nKSB7XG4gICAgICB0cnkge1xuICAgICAgICBCb29sZWFuKG5ldyBVUkwoaW5wdXQpKVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoaXMgaXMgbm90IGEgdmFsaWQgdXJsOiAke2lucHV0fWApXG4gICAgICB9XG4gICAgICBpbnB1dCA9IG5ldyBVUkwoaW5wdXQpXG4gICAgfVxuXG4gICAgcmV0dXJuIGF3YWl0IHN1cGVyLl9nZXRJbnB1dEFzVWludDhBcnJheShpbnB1dClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIG1lcmdlZCBQREYgYXMgYSBVaW50OEFycmF5LlxuICAgKlxuICAgKiBAYXN5bmNcbiAgICogQHJldHVybnMge1Byb21pc2U8VWludDhBcnJheT59XG4gICAqL1xuICBhc3luYyBzYXZlQXNCdWZmZXIgKCkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLl9zYXZlQXNVaW50OEFycmF5KClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIG1lcmdlZCBQREYgYXMgYSBCbG9iLlxuICAgKlxuICAgKiBAYXN5bmNcbiAgICogQHJldHVybnMge1Byb21pc2U8QmxvYj59XG4gICAqL1xuICBhc3luYyBzYXZlQXNCbG9iICgpIHtcbiAgICBjb25zdCBidWZmZXIgPSBhd2FpdCB0aGlzLl9zYXZlQXNVaW50OEFycmF5KClcblxuICAgIHJldHVybiBuZXcgZ2xvYmFsT2JqZWN0LkJsb2IoW2J1ZmZlcl0sIHtcbiAgICAgIHR5cGU6ICdhcHBsaWNhdGlvbi9wZGYnXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBEb3dubG9hZCB0aGUgUERGIGFzIGEgZmlsZSB3aXRoIHRoZSBnaXZlbiBuYW1lLlxuICAgKiBUaGUgZXh0ZW5zaW9uIFwiLnBkZlwiIGlzIGFwcGVuZGVkIGF1dG9tYXRpY2FsbHkuXG4gICAqXG4gICAqIEBhc3luY1xuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZU5hbWVcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAqL1xuICBhc3luYyBzYXZlIChmaWxlTmFtZSkge1xuICAgIGNvbnN0IGRhdGFVcmkgPSBhd2FpdCB0aGlzLl9zYXZlQXNCYXNlNjQoKVxuXG4gICAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKVxuICAgIGxpbmsuaHJlZiA9IGRhdGFVcmlcbiAgICBsaW5rLmRvd25sb2FkID0gYCR7ZmlsZU5hbWV9LnBkZmBcbiAgICBsaW5rLmNsaWNrKClcbiAgfVxufVxuIl0sIm5hbWVzIjpbIlBERk1lcmdlckJhc2UiLCJnbG9iYWxPYmplY3QiLCJnbG9iYWxUaGlzIiwid2luZG93Iiwic2VsZiIsIlBERk1lcmdlciIsIl9nZXRJbnB1dEFzVWludDhBcnJheSIsImlucHV0IiwiRmlsZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZmlsZVJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJldnQiLCJyZXN1bHQiLCJhcnJheUJ1ZmZlciIsIlVpbnQ4QXJyYXkiLCJyZWFkQXNBcnJheUJ1ZmZlciIsIlN0cmluZyIsIkJvb2xlYW4iLCJVUkwiLCJlIiwiRXJyb3IiLCJzYXZlQXNCdWZmZXIiLCJfc2F2ZUFzVWludDhBcnJheSIsInNhdmVBc0Jsb2IiLCJidWZmZXIiLCJCbG9iIiwidHlwZSIsInNhdmUiLCJmaWxlTmFtZSIsImRhdGFVcmkiLCJfc2F2ZUFzQmFzZTY0IiwibGluayIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImhyZWYiLCJkb3dubG9hZCIsImNsaWNrIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pdf-merger-js/browser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pdf-merger-js/parsePagesString.js":
/*!********************************************************!*\
  !*** ./node_modules/pdf-merger-js/parsePagesString.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parsePagesString: () => (/* binding */ parsePagesString)\n/* harmony export */ });\n/**\n * Takes a string like \"1,2,3\" or \"1-3\" and returns an Array of numbers.\n *\n * @param {string} pages\n *\n * @example ```js\n * parsePagesString('2') // [2]\n * parsePagesString('1,2,3') // [1,2,3]\n * parsePagesString('1-3') // [1,2,3]\n * parsePagesString('1to3') // [1,2,3]\n * parsePagesString('1 to 3') // [1,2,3]\n * parsePagesString('10,1-3') // [10,1,2,3]\n * parsePagesString('9,1-3,5-7') // [9,1,2,3,5,6,7]\n * ```\n */ function parsePagesString(pages) {\n    const throwError = ()=>{\n        throw new Error([\n            'Invalid parameter \"pages\".',\n            'Must be a string like \"1,2,3\" or \"1-3\" or \"1to3\"',\n            `Was \"${pages}\" instead.`\n        ].join(\" \"));\n    };\n    const isRangeString = (rangeString)=>{\n        return rangeString.includes(\"-\") || rangeString.toLowerCase().includes(\"to\");\n    };\n    const parseRange = (rangeString)=>{\n        const [start, end] = rangeString.split(/-|to/).map((s)=>typeof s === \"string\" ? parseInt(s.trim()) : s);\n        return Array.from({\n            length: end - start + 1\n        }, (_, i)=>start + i);\n    };\n    if (typeof pages !== \"string\") {\n        throwError();\n    } else if (!pages.trim().replace(/ /g, \"\").match(/^(\\d+|\\d+-\\d+|\\d+to\\d+)(,(\\d+|\\d+-\\d+|\\d+to\\d+))*$/)) {\n        // string does not fit the expected pattern\n        throwError();\n    } else if (pages.trim().match(/^\\d+$/)) {\n        // string consists of a single page-number\n        return [\n            parseInt(pages.trim())\n        ];\n    } else if (pages.trim().includes(\",\")) {\n        // string consists od a list of page-numbers and/or ranges\n        return pages.split(\",\").flatMap((s)=>isRangeString(s) ? parseRange(s) : parseInt(s));\n    } else if (isRangeString(pages)) {\n        // string consists of a single range\n        return parseRange(pages);\n    }\n    throwError();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcGRmLW1lcmdlci1qcy9wYXJzZVBhZ2VzU3RyaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Q0FjQyxHQUNNLFNBQVNBLGlCQUFrQkMsS0FBSztJQUNyQyxNQUFNQyxhQUFhO1FBQ2pCLE1BQU0sSUFBSUMsTUFBTTtZQUNkO1lBQ0E7WUFDQSxDQUFDLEtBQUssRUFBRUYsTUFBTSxVQUFVLENBQUM7U0FDMUIsQ0FBQ0csSUFBSSxDQUFDO0lBQ1Q7SUFFQSxNQUFNQyxnQkFBZ0IsQ0FBQ0M7UUFDckIsT0FBT0EsWUFBWUMsUUFBUSxDQUFDLFFBQVFELFlBQVlFLFdBQVcsR0FBR0QsUUFBUSxDQUFDO0lBQ3pFO0lBRUEsTUFBTUUsYUFBYSxDQUFDSDtRQUNsQixNQUFNLENBQUNJLE9BQU9DLElBQUksR0FBR0wsWUFBWU0sS0FBSyxDQUFDLFFBQVFDLEdBQUcsQ0FBQ0MsQ0FBQUEsSUFBSyxPQUFPQSxNQUFNLFdBQVdDLFNBQVNELEVBQUVFLElBQUksTUFBTUY7UUFDckcsT0FBT0csTUFBTUMsSUFBSSxDQUFDO1lBQUVDLFFBQVFSLE1BQU1ELFFBQVE7UUFBRSxHQUFHLENBQUNVLEdBQUdDLElBQU1YLFFBQVFXO0lBQ25FO0lBRUEsSUFBSSxPQUFPcEIsVUFBVSxVQUFVO1FBQzdCQztJQUNGLE9BQU8sSUFBSSxDQUFDRCxNQUFNZSxJQUFJLEdBQUdNLE9BQU8sQ0FBQyxNQUFNLElBQUlDLEtBQUssQ0FBQyx1REFBdUQ7UUFDdEcsMkNBQTJDO1FBQzNDckI7SUFDRixPQUFPLElBQUlELE1BQU1lLElBQUksR0FBR08sS0FBSyxDQUFDLFVBQVU7UUFDdEMsMENBQTBDO1FBQzFDLE9BQU87WUFBQ1IsU0FBU2QsTUFBTWUsSUFBSTtTQUFJO0lBQ2pDLE9BQU8sSUFBSWYsTUFBTWUsSUFBSSxHQUFHVCxRQUFRLENBQUMsTUFBTTtRQUNyQywwREFBMEQ7UUFDMUQsT0FBT04sTUFBTVcsS0FBSyxDQUFDLEtBQUtZLE9BQU8sQ0FBQ1YsQ0FBQUEsSUFBS1QsY0FBY1MsS0FBS0wsV0FBV0ssS0FBS0MsU0FBU0Q7SUFDbkYsT0FBTyxJQUFJVCxjQUFjSixRQUFRO1FBQy9CLG9DQUFvQztRQUNwQyxPQUFPUSxXQUFXUjtJQUNwQjtJQUVBQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvcGRmLW1lcmdlci1qcy9wYXJzZVBhZ2VzU3RyaW5nLmpzPzgxNzIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUYWtlcyBhIHN0cmluZyBsaWtlIFwiMSwyLDNcIiBvciBcIjEtM1wiIGFuZCByZXR1cm5zIGFuIEFycmF5IG9mIG51bWJlcnMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhZ2VzXG4gKlxuICogQGV4YW1wbGUgYGBganNcbiAqIHBhcnNlUGFnZXNTdHJpbmcoJzInKSAvLyBbMl1cbiAqIHBhcnNlUGFnZXNTdHJpbmcoJzEsMiwzJykgLy8gWzEsMiwzXVxuICogcGFyc2VQYWdlc1N0cmluZygnMS0zJykgLy8gWzEsMiwzXVxuICogcGFyc2VQYWdlc1N0cmluZygnMXRvMycpIC8vIFsxLDIsM11cbiAqIHBhcnNlUGFnZXNTdHJpbmcoJzEgdG8gMycpIC8vIFsxLDIsM11cbiAqIHBhcnNlUGFnZXNTdHJpbmcoJzEwLDEtMycpIC8vIFsxMCwxLDIsM11cbiAqIHBhcnNlUGFnZXNTdHJpbmcoJzksMS0zLDUtNycpIC8vIFs5LDEsMiwzLDUsNiw3XVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVBhZ2VzU3RyaW5nIChwYWdlcykge1xuICBjb25zdCB0aHJvd0Vycm9yID0gKCkgPT4ge1xuICAgIHRocm93IG5ldyBFcnJvcihbXG4gICAgICAnSW52YWxpZCBwYXJhbWV0ZXIgXCJwYWdlc1wiLicsXG4gICAgICAnTXVzdCBiZSBhIHN0cmluZyBsaWtlIFwiMSwyLDNcIiBvciBcIjEtM1wiIG9yIFwiMXRvM1wiJyxcbiAgICAgIGBXYXMgXCIke3BhZ2VzfVwiIGluc3RlYWQuYFxuICAgIF0uam9pbignICcpKVxuICB9XG5cbiAgY29uc3QgaXNSYW5nZVN0cmluZyA9IChyYW5nZVN0cmluZykgPT4ge1xuICAgIHJldHVybiByYW5nZVN0cmluZy5pbmNsdWRlcygnLScpIHx8IHJhbmdlU3RyaW5nLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ3RvJylcbiAgfVxuXG4gIGNvbnN0IHBhcnNlUmFuZ2UgPSAocmFuZ2VTdHJpbmcpID0+IHtcbiAgICBjb25zdCBbc3RhcnQsIGVuZF0gPSByYW5nZVN0cmluZy5zcGxpdCgvLXx0by8pLm1hcChzID0+IHR5cGVvZiBzID09PSAnc3RyaW5nJyA/IHBhcnNlSW50KHMudHJpbSgpKSA6IHMpXG4gICAgcmV0dXJuIEFycmF5LmZyb20oeyBsZW5ndGg6IGVuZCAtIHN0YXJ0ICsgMSB9LCAoXywgaSkgPT4gc3RhcnQgKyBpKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBwYWdlcyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvd0Vycm9yKClcbiAgfSBlbHNlIGlmICghcGFnZXMudHJpbSgpLnJlcGxhY2UoLyAvZywgJycpLm1hdGNoKC9eKFxcZCt8XFxkKy1cXGQrfFxcZCt0b1xcZCspKCwoXFxkK3xcXGQrLVxcZCt8XFxkK3RvXFxkKykpKiQvKSkge1xuICAgIC8vIHN0cmluZyBkb2VzIG5vdCBmaXQgdGhlIGV4cGVjdGVkIHBhdHRlcm5cbiAgICB0aHJvd0Vycm9yKClcbiAgfSBlbHNlIGlmIChwYWdlcy50cmltKCkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgLy8gc3RyaW5nIGNvbnNpc3RzIG9mIGEgc2luZ2xlIHBhZ2UtbnVtYmVyXG4gICAgcmV0dXJuIFtwYXJzZUludChwYWdlcy50cmltKCkpXVxuICB9IGVsc2UgaWYgKHBhZ2VzLnRyaW0oKS5pbmNsdWRlcygnLCcpKSB7XG4gICAgLy8gc3RyaW5nIGNvbnNpc3RzIG9kIGEgbGlzdCBvZiBwYWdlLW51bWJlcnMgYW5kL29yIHJhbmdlc1xuICAgIHJldHVybiBwYWdlcy5zcGxpdCgnLCcpLmZsYXRNYXAocyA9PiBpc1JhbmdlU3RyaW5nKHMpID8gcGFyc2VSYW5nZShzKSA6IHBhcnNlSW50KHMpKVxuICB9IGVsc2UgaWYgKGlzUmFuZ2VTdHJpbmcocGFnZXMpKSB7XG4gICAgLy8gc3RyaW5nIGNvbnNpc3RzIG9mIGEgc2luZ2xlIHJhbmdlXG4gICAgcmV0dXJuIHBhcnNlUmFuZ2UocGFnZXMpXG4gIH1cblxuICB0aHJvd0Vycm9yKClcbn1cbiJdLCJuYW1lcyI6WyJwYXJzZVBhZ2VzU3RyaW5nIiwicGFnZXMiLCJ0aHJvd0Vycm9yIiwiRXJyb3IiLCJqb2luIiwiaXNSYW5nZVN0cmluZyIsInJhbmdlU3RyaW5nIiwiaW5jbHVkZXMiLCJ0b0xvd2VyQ2FzZSIsInBhcnNlUmFuZ2UiLCJzdGFydCIsImVuZCIsInNwbGl0IiwibWFwIiwicyIsInBhcnNlSW50IiwidHJpbSIsIkFycmF5IiwiZnJvbSIsImxlbmd0aCIsIl8iLCJpIiwicmVwbGFjZSIsIm1hdGNoIiwiZmxhdE1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pdf-merger-js/parsePagesString.js\n");

/***/ })

};
;