"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/langchain";
exports.ids = ["vendor-chunks/langchain"];
exports.modules = {

/***/ "(rsc)/./node_modules/langchain/dist/document_loaders/base.js":
/*!**************************************************************!*\
  !*** ./node_modules/langchain/dist/document_loaders/base.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseDocumentLoader: () => (/* binding */ BaseDocumentLoader)\n/* harmony export */ });\n/* harmony import */ var _text_splitter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../text_splitter.js */ \"(rsc)/./node_modules/langchain/dist/text_splitter.js\");\n\n/**\n * Abstract class that provides a default implementation for the\n * loadAndSplit() method from the DocumentLoader interface. The load()\n * method is left abstract and needs to be implemented by subclasses.\n */ class BaseDocumentLoader {\n    /**\n     * Loads the documents and splits them using a specified text splitter.\n     * @param textSplitter The TextSplitter instance to use for splitting the loaded documents. Defaults to a RecursiveCharacterTextSplitter instance.\n     * @returns A Promise that resolves with an array of Document instances, each split according to the provided TextSplitter.\n     */ async loadAndSplit(splitter = new _text_splitter_js__WEBPACK_IMPORTED_MODULE_0__.RecursiveCharacterTextSplitter()) {\n        const docs = await this.load();\n        return splitter.splitDocuments(docs);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvZG9jdW1lbnRfbG9hZGVycy9iYXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXNFO0FBQ3RFOzs7O0NBSUMsR0FDTSxNQUFNQztJQUNUOzs7O0tBSUMsR0FDRCxNQUFNQyxhQUFhQyxXQUFXLElBQUlILDZFQUE4QkEsRUFBRSxFQUFFO1FBQ2hFLE1BQU1JLE9BQU8sTUFBTSxJQUFJLENBQUNDLElBQUk7UUFDNUIsT0FBT0YsU0FBU0csY0FBYyxDQUFDRjtJQUNuQztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvZG9jdW1lbnRfbG9hZGVycy9iYXNlLmpzPzI0YTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVjdXJzaXZlQ2hhcmFjdGVyVGV4dFNwbGl0dGVyLCB9IGZyb20gXCIuLi90ZXh0X3NwbGl0dGVyLmpzXCI7XG4vKipcbiAqIEFic3RyYWN0IGNsYXNzIHRoYXQgcHJvdmlkZXMgYSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGZvciB0aGVcbiAqIGxvYWRBbmRTcGxpdCgpIG1ldGhvZCBmcm9tIHRoZSBEb2N1bWVudExvYWRlciBpbnRlcmZhY2UuIFRoZSBsb2FkKClcbiAqIG1ldGhvZCBpcyBsZWZ0IGFic3RyYWN0IGFuZCBuZWVkcyB0byBiZSBpbXBsZW1lbnRlZCBieSBzdWJjbGFzc2VzLlxuICovXG5leHBvcnQgY2xhc3MgQmFzZURvY3VtZW50TG9hZGVyIHtcbiAgICAvKipcbiAgICAgKiBMb2FkcyB0aGUgZG9jdW1lbnRzIGFuZCBzcGxpdHMgdGhlbSB1c2luZyBhIHNwZWNpZmllZCB0ZXh0IHNwbGl0dGVyLlxuICAgICAqIEBwYXJhbSB0ZXh0U3BsaXR0ZXIgVGhlIFRleHRTcGxpdHRlciBpbnN0YW5jZSB0byB1c2UgZm9yIHNwbGl0dGluZyB0aGUgbG9hZGVkIGRvY3VtZW50cy4gRGVmYXVsdHMgdG8gYSBSZWN1cnNpdmVDaGFyYWN0ZXJUZXh0U3BsaXR0ZXIgaW5zdGFuY2UuXG4gICAgICogQHJldHVybnMgQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhbiBhcnJheSBvZiBEb2N1bWVudCBpbnN0YW5jZXMsIGVhY2ggc3BsaXQgYWNjb3JkaW5nIHRvIHRoZSBwcm92aWRlZCBUZXh0U3BsaXR0ZXIuXG4gICAgICovXG4gICAgYXN5bmMgbG9hZEFuZFNwbGl0KHNwbGl0dGVyID0gbmV3IFJlY3Vyc2l2ZUNoYXJhY3RlclRleHRTcGxpdHRlcigpKSB7XG4gICAgICAgIGNvbnN0IGRvY3MgPSBhd2FpdCB0aGlzLmxvYWQoKTtcbiAgICAgICAgcmV0dXJuIHNwbGl0dGVyLnNwbGl0RG9jdW1lbnRzKGRvY3MpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJSZWN1cnNpdmVDaGFyYWN0ZXJUZXh0U3BsaXR0ZXIiLCJCYXNlRG9jdW1lbnRMb2FkZXIiLCJsb2FkQW5kU3BsaXQiLCJzcGxpdHRlciIsImRvY3MiLCJsb2FkIiwic3BsaXREb2N1bWVudHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/document_loaders/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/document_loaders/fs/directory.js":
/*!**********************************************************************!*\
  !*** ./node_modules/langchain/dist/document_loaders/fs/directory.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DirectoryLoader: () => (/* binding */ DirectoryLoader),\n/* harmony export */   UnknownHandling: () => (/* binding */ UnknownHandling)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/utils/env.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base.js */ \"(rsc)/./node_modules/langchain/dist/document_loaders/base.js\");\n\n\n// TypeScript enums are not tree-shakeable, so doing this instead\n// See https://bargsten.org/jsts/enums/\nconst UnknownHandling = {\n    Ignore: \"ignore\",\n    Warn: \"warn\",\n    Error: \"error\"\n};\n/**\n * A document loader that loads documents from a directory. It extends the\n * `BaseDocumentLoader` class and implements the `load()` method.\n * @example\n * ```typescript\n *\n * const directoryLoader = new DirectoryLoader(\n *   \"src/document_loaders/example_data/\",\n *   {\n *     \".pdf\": (path: string) => new PDFLoader(path),\n *   },\n * );\n *\n * const docs = await directoryLoader.load();\n * console.log({ docs });\n *\n * ```\n */ class DirectoryLoader extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseDocumentLoader {\n    constructor(directoryPath, loaders, recursive = true, unknown = UnknownHandling.Warn){\n        super();\n        Object.defineProperty(this, \"directoryPath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: directoryPath\n        });\n        Object.defineProperty(this, \"loaders\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: loaders\n        });\n        Object.defineProperty(this, \"recursive\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: recursive\n        });\n        Object.defineProperty(this, \"unknown\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: unknown\n        });\n        if (Object.keys(loaders).length === 0) {\n            throw new Error(\"Must provide at least one loader\");\n        }\n        for(const extension in loaders){\n            if (Object.hasOwn(loaders, extension)) {\n                if (extension[0] !== \".\") {\n                    throw new Error(`Extension must start with a dot: ${extension}`);\n                }\n            }\n        }\n    }\n    /**\n     * Loads the documents from the directory. If a file is a directory and\n     * `recursive` is `true`, it recursively loads documents from the\n     * subdirectory. If a file is a file, it checks if there is a\n     * corresponding loader function for the file extension in the `loaders`\n     * mapping. If there is, it loads the documents. If there is no\n     * corresponding loader function and `unknown` is set to `Warn`, it logs a\n     * warning message. If `unknown` is set to `Error`, it throws an error.\n     * @returns A promise that resolves to an array of loaded documents.\n     */ async load() {\n        const { readdir, extname, resolve } = await DirectoryLoader.imports();\n        const files = await readdir(this.directoryPath, {\n            withFileTypes: true\n        });\n        const documents = [];\n        for (const file of files){\n            const fullPath = resolve(this.directoryPath, file.name);\n            if (file.isDirectory()) {\n                if (this.recursive) {\n                    const loader = new DirectoryLoader(fullPath, this.loaders, this.recursive, this.unknown);\n                    documents.push(...await loader.load());\n                }\n            } else {\n                // I'm aware some things won't be files,\n                // but they will be caught by the \"unknown\" handling below.\n                const loaderFactory = this.loaders[extname(file.name)];\n                if (loaderFactory) {\n                    const loader = loaderFactory(fullPath);\n                    documents.push(...await loader.load());\n                } else {\n                    switch(this.unknown){\n                        case UnknownHandling.Ignore:\n                            break;\n                        case UnknownHandling.Warn:\n                            console.warn(`Unknown file type: ${file.name}`);\n                            break;\n                        case UnknownHandling.Error:\n                            throw new Error(`Unknown file type: ${file.name}`);\n                        default:\n                            throw new Error(`Unknown unknown handling: ${this.unknown}`);\n                    }\n                }\n            }\n        }\n        return documents;\n    }\n    /**\n     * Imports the necessary functions from the `node:path` and\n     * `node:fs/promises` modules. It is used to dynamically import the\n     * functions when needed. If the import fails, it throws an error\n     * indicating that the modules failed to load.\n     * @returns A promise that resolves to an object containing the imported functions.\n     */ static async imports() {\n        try {\n            const { extname, resolve } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:path */ \"node:path\", 19));\n            const { readdir } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:fs/promises */ \"node:fs/promises\", 19));\n            return {\n                readdir,\n                extname,\n                resolve\n            };\n        } catch (e) {\n            console.error(e);\n            throw new Error(`Failed to load fs/promises. DirectoryLoader available only on environment 'node'. It appears you are running environment '${(0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnv)()}'. See https://<link to docs> for alternatives.`);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/document_loaders/fs/directory.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/document_loaders/fs/unstructured.js":
/*!*************************************************************************!*\
  !*** ./node_modules/langchain/dist/document_loaders/fs/unstructured.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UnknownHandling: () => (/* reexport safe */ _directory_js__WEBPACK_IMPORTED_MODULE_2__.UnknownHandling),\n/* harmony export */   UnstructuredDirectoryLoader: () => (/* binding */ UnstructuredDirectoryLoader),\n/* harmony export */   UnstructuredLoader: () => (/* binding */ UnstructuredLoader)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_documents__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/documents */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/documents.js\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/utils/env.js\");\n/* harmony import */ var _directory_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./directory.js */ \"(rsc)/./node_modules/langchain/dist/document_loaders/fs/directory.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../base.js */ \"(rsc)/./node_modules/langchain/dist/document_loaders/base.js\");\n\n\n\n\nconst UNSTRUCTURED_API_FILETYPES = [\n    \".txt\",\n    \".text\",\n    \".pdf\",\n    \".docx\",\n    \".doc\",\n    \".jpg\",\n    \".jpeg\",\n    \".eml\",\n    \".html\",\n    \".htm\",\n    \".md\",\n    \".pptx\",\n    \".ppt\",\n    \".msg\",\n    \".rtf\",\n    \".xlsx\",\n    \".xls\",\n    \".odt\",\n    \".epub\"\n];\n/**\n * A document loader that uses the Unstructured API to load unstructured\n * documents. It supports both the new syntax with options object and the\n * legacy syntax for backward compatibility. The load() method sends a\n * partitioning request to the Unstructured API and retrieves the\n * partitioned elements. It creates a Document instance for each element\n * and returns an array of Document instances.\n */ class UnstructuredLoader extends _base_js__WEBPACK_IMPORTED_MODULE_3__.BaseDocumentLoader {\n    constructor(filePathOrLegacyApiUrl, optionsOrLegacyFilePath = {}){\n        super();\n        Object.defineProperty(this, \"filePath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"apiUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"https://api.unstructured.io/general/v0/general\"\n        });\n        Object.defineProperty(this, \"apiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"strategy\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"hi_res\"\n        });\n        Object.defineProperty(this, \"encoding\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"ocrLanguages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"coordinates\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"pdfInferTableStructure\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"xmlKeepTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"skipInferTableTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"hiResModelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includePageBreaks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"chunkingStrategy\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"multiPageSections\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"combineUnderNChars\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"newAfterNChars\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxCharacters\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // Temporary shim to avoid breaking existing users\n        // Remove when API keys are enforced by Unstructured and existing code will break anyway\n        const isLegacySyntax = typeof optionsOrLegacyFilePath === \"string\";\n        if (isLegacySyntax) {\n            this.filePath = optionsOrLegacyFilePath;\n            this.apiUrl = filePathOrLegacyApiUrl;\n        } else {\n            this.filePath = filePathOrLegacyApiUrl;\n            const options = optionsOrLegacyFilePath;\n            this.apiKey = options.apiKey;\n            this.apiUrl = options.apiUrl ?? this.apiUrl;\n            this.strategy = options.strategy ?? this.strategy;\n            this.encoding = options.encoding;\n            this.ocrLanguages = options.ocrLanguages ?? this.ocrLanguages;\n            this.coordinates = options.coordinates;\n            this.pdfInferTableStructure = options.pdfInferTableStructure;\n            this.xmlKeepTags = options.xmlKeepTags;\n            this.skipInferTableTypes = options.skipInferTableTypes;\n            this.hiResModelName = options.hiResModelName;\n            this.includePageBreaks = options.includePageBreaks;\n            this.chunkingStrategy = options.chunkingStrategy;\n            this.multiPageSections = options.multiPageSections;\n            this.combineUnderNChars = options.combineUnderNChars;\n            this.newAfterNChars = options.newAfterNChars;\n            this.maxCharacters = options.maxCharacters;\n        }\n    }\n    async _partition() {\n        const { readFile, basename } = await this.imports();\n        const buffer = await readFile(this.filePath);\n        const fileName = basename(this.filePath);\n        // I'm aware this reads the file into memory first, but we have lots of work\n        // to do on then consuming Documents in a streaming fashion anyway, so not\n        // worried about this for now.\n        const formData = new FormData();\n        formData.append(\"files\", new Blob([\n            buffer\n        ]), fileName);\n        formData.append(\"strategy\", this.strategy);\n        this.ocrLanguages.forEach((language)=>{\n            formData.append(\"ocr_languages\", language);\n        });\n        if (this.encoding) {\n            formData.append(\"encoding\", this.encoding);\n        }\n        if (this.coordinates === true) {\n            formData.append(\"coordinates\", \"true\");\n        }\n        if (this.pdfInferTableStructure === true) {\n            formData.append(\"pdf_infer_table_structure\", \"true\");\n        }\n        if (this.xmlKeepTags === true) {\n            formData.append(\"xml_keep_tags\", \"true\");\n        }\n        if (this.skipInferTableTypes) {\n            formData.append(\"skip_infer_table_types\", JSON.stringify(this.skipInferTableTypes));\n        }\n        if (this.hiResModelName) {\n            formData.append(\"hi_res_model_name\", this.hiResModelName);\n        }\n        if (this.includePageBreaks) {\n            formData.append(\"include_page_breaks\", \"true\");\n        }\n        if (this.chunkingStrategy) {\n            formData.append(\"chunking_strategy\", this.chunkingStrategy);\n        }\n        if (this.multiPageSections !== undefined) {\n            formData.append(\"multipage_sections\", this.multiPageSections ? \"true\" : \"false\");\n        }\n        if (this.combineUnderNChars !== undefined) {\n            formData.append(\"combine_under_n_chars\", String(this.combineUnderNChars));\n        }\n        if (this.newAfterNChars !== undefined) {\n            formData.append(\"new_after_n_chars\", String(this.newAfterNChars));\n        }\n        if (this.maxCharacters !== undefined) {\n            formData.append(\"max_characters\", String(this.maxCharacters));\n        }\n        const headers = {\n            \"UNSTRUCTURED-API-KEY\": this.apiKey ?? \"\"\n        };\n        const response = await fetch(this.apiUrl, {\n            method: \"POST\",\n            body: formData,\n            headers\n        });\n        if (!response.ok) {\n            throw new Error(`Failed to partition file ${this.filePath} with error ${response.status} and message ${await response.text()}`);\n        }\n        const elements = await response.json();\n        if (!Array.isArray(elements)) {\n            throw new Error(`Expected partitioning request to return an array, but got ${elements}`);\n        }\n        return elements.filter((el)=>typeof el.text === \"string\");\n    }\n    async load() {\n        const elements = await this._partition();\n        const documents = [];\n        for (const element of elements){\n            const { metadata, text } = element;\n            if (typeof text === \"string\") {\n                documents.push(new _langchain_core_documents__WEBPACK_IMPORTED_MODULE_0__.Document({\n                    pageContent: text,\n                    metadata: {\n                        ...metadata,\n                        category: element.type\n                    }\n                }));\n            }\n        }\n        return documents;\n    }\n    async imports() {\n        try {\n            const { readFile } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:fs/promises */ \"node:fs/promises\", 19));\n            const { basename } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:path */ \"node:path\", 19));\n            return {\n                readFile,\n                basename\n            };\n        } catch (e) {\n            console.error(e);\n            throw new Error(`Failed to load fs/promises. TextLoader available only on environment 'node'. It appears you are running environment '${(0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnv)()}'. See https://<link to docs> for alternatives.`);\n        }\n    }\n}\n/**\n * A document loader that loads unstructured documents from a directory\n * using the UnstructuredLoader. It creates a UnstructuredLoader instance\n * for each supported file type and passes it to the DirectoryLoader\n * constructor.\n * @example\n * ```typescript\n * const loader = new UnstructuredDirectoryLoader(\"path/to/directory\", {\n *   apiKey: \"MY_API_KEY\",\n * });\n * const docs = await loader.load();\n * ```\n */ class UnstructuredDirectoryLoader extends _directory_js__WEBPACK_IMPORTED_MODULE_2__.DirectoryLoader {\n    constructor(directoryPathOrLegacyApiUrl, optionsOrLegacyDirectoryPath, legacyOptionRecursive = true, legacyOptionUnknown = _directory_js__WEBPACK_IMPORTED_MODULE_2__.UnknownHandling.Warn){\n        let directoryPath;\n        let options;\n        // Temporary shim to avoid breaking existing users\n        // Remove when API keys are enforced by Unstructured and existing code will break anyway\n        const isLegacySyntax = typeof optionsOrLegacyDirectoryPath === \"string\";\n        if (isLegacySyntax) {\n            directoryPath = optionsOrLegacyDirectoryPath;\n            options = {\n                apiUrl: directoryPathOrLegacyApiUrl,\n                recursive: legacyOptionRecursive,\n                unknown: legacyOptionUnknown\n            };\n        } else {\n            directoryPath = directoryPathOrLegacyApiUrl;\n            options = optionsOrLegacyDirectoryPath;\n        }\n        const loader = (p)=>new UnstructuredLoader(p, options);\n        const loaders = UNSTRUCTURED_API_FILETYPES.reduce((loadersObject, filetype)=>{\n            // eslint-disable-next-line no-param-reassign\n            loadersObject[filetype] = loader;\n            return loadersObject;\n        }, {});\n        super(directoryPath, loaders, options.recursive, options.unknown);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/document_loaders/fs/unstructured.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/text_splitter.js":
/*!******************************************************!*\
  !*** ./node_modules/langchain/dist/text_splitter.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CharacterTextSplitter: () => (/* binding */ CharacterTextSplitter),\n/* harmony export */   LatexTextSplitter: () => (/* binding */ LatexTextSplitter),\n/* harmony export */   MarkdownTextSplitter: () => (/* binding */ MarkdownTextSplitter),\n/* harmony export */   RecursiveCharacterTextSplitter: () => (/* binding */ RecursiveCharacterTextSplitter),\n/* harmony export */   SupportedTextSplitterLanguages: () => (/* binding */ SupportedTextSplitterLanguages),\n/* harmony export */   TextSplitter: () => (/* binding */ TextSplitter),\n/* harmony export */   TokenTextSplitter: () => (/* binding */ TokenTextSplitter)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_documents__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/documents */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/documents.js\");\n/* harmony import */ var _langchain_core_utils_tiktoken__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/utils/tiktoken */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/utils/tiktoken.js\");\n\n\nclass TextSplitter extends _langchain_core_documents__WEBPACK_IMPORTED_MODULE_0__.BaseDocumentTransformer {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"document_transformers\",\n                \"text_splitters\"\n            ]\n        });\n        Object.defineProperty(this, \"chunkSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1000\n        });\n        Object.defineProperty(this, \"chunkOverlap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 200\n        });\n        Object.defineProperty(this, \"keepSeparator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lengthFunction\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chunkSize = fields?.chunkSize ?? this.chunkSize;\n        this.chunkOverlap = fields?.chunkOverlap ?? this.chunkOverlap;\n        this.keepSeparator = fields?.keepSeparator ?? this.keepSeparator;\n        this.lengthFunction = fields?.lengthFunction ?? ((text)=>text.length);\n        if (this.chunkOverlap >= this.chunkSize) {\n            throw new Error(\"Cannot have chunkOverlap >= chunkSize\");\n        }\n    }\n    async transformDocuments(documents, chunkHeaderOptions = {}) {\n        return this.splitDocuments(documents, chunkHeaderOptions);\n    }\n    splitOnSeparator(text, separator) {\n        let splits;\n        if (separator) {\n            if (this.keepSeparator) {\n                const regexEscapedSeparator = separator.replace(/[/\\-\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n                splits = text.split(new RegExp(`(?=${regexEscapedSeparator})`));\n            } else {\n                splits = text.split(separator);\n            }\n        } else {\n            splits = text.split(\"\");\n        }\n        return splits.filter((s)=>s !== \"\");\n    }\n    async createDocuments(texts, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    metadatas = [], chunkHeaderOptions = {}) {\n        // if no metadata is provided, we create an empty one for each text\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const _metadatas = metadatas.length > 0 ? metadatas : [\n            ...Array(texts.length)\n        ].map(()=>({}));\n        const { chunkHeader = \"\", chunkOverlapHeader = \"(cont'd) \", appendChunkOverlapHeader = false } = chunkHeaderOptions;\n        const documents = new Array();\n        for(let i = 0; i < texts.length; i += 1){\n            const text = texts[i];\n            let lineCounterIndex = 1;\n            let prevChunk = null;\n            let indexPrevChunk = -1;\n            for (const chunk of (await this.splitText(text))){\n                let pageContent = chunkHeader;\n                // we need to count the \\n that are in the text before getting removed by the splitting\n                const indexChunk = text.indexOf(chunk, indexPrevChunk + 1);\n                if (prevChunk === null) {\n                    const newLinesBeforeFirstChunk = this.numberOfNewLines(text, 0, indexChunk);\n                    lineCounterIndex += newLinesBeforeFirstChunk;\n                } else {\n                    const indexEndPrevChunk = indexPrevChunk + await this.lengthFunction(prevChunk);\n                    if (indexEndPrevChunk < indexChunk) {\n                        const numberOfIntermediateNewLines = this.numberOfNewLines(text, indexEndPrevChunk, indexChunk);\n                        lineCounterIndex += numberOfIntermediateNewLines;\n                    } else if (indexEndPrevChunk > indexChunk) {\n                        const numberOfIntermediateNewLines = this.numberOfNewLines(text, indexChunk, indexEndPrevChunk);\n                        lineCounterIndex -= numberOfIntermediateNewLines;\n                    }\n                    if (appendChunkOverlapHeader) {\n                        pageContent += chunkOverlapHeader;\n                    }\n                }\n                const newLinesCount = this.numberOfNewLines(chunk);\n                const loc = _metadatas[i].loc && typeof _metadatas[i].loc === \"object\" ? {\n                    ..._metadatas[i].loc\n                } : {};\n                loc.lines = {\n                    from: lineCounterIndex,\n                    to: lineCounterIndex + newLinesCount\n                };\n                const metadataWithLinesNumber = {\n                    ..._metadatas[i],\n                    loc\n                };\n                pageContent += chunk;\n                documents.push(new _langchain_core_documents__WEBPACK_IMPORTED_MODULE_0__.Document({\n                    pageContent,\n                    metadata: metadataWithLinesNumber\n                }));\n                lineCounterIndex += newLinesCount;\n                prevChunk = chunk;\n                indexPrevChunk = indexChunk;\n            }\n        }\n        return documents;\n    }\n    numberOfNewLines(text, start, end) {\n        const textSection = text.slice(start, end);\n        return (textSection.match(/\\n/g) || []).length;\n    }\n    async splitDocuments(documents, chunkHeaderOptions = {}) {\n        const selectedDocuments = documents.filter((doc)=>doc.pageContent !== undefined);\n        const texts = selectedDocuments.map((doc)=>doc.pageContent);\n        const metadatas = selectedDocuments.map((doc)=>doc.metadata);\n        return this.createDocuments(texts, metadatas, chunkHeaderOptions);\n    }\n    joinDocs(docs, separator) {\n        const text = docs.join(separator).trim();\n        return text === \"\" ? null : text;\n    }\n    async mergeSplits(splits, separator) {\n        const docs = [];\n        const currentDoc = [];\n        let total = 0;\n        for (const d of splits){\n            const _len = await this.lengthFunction(d);\n            if (total + _len + currentDoc.length * separator.length > this.chunkSize) {\n                if (total > this.chunkSize) {\n                    console.warn(`Created a chunk of size ${total}, +\nwhich is longer than the specified ${this.chunkSize}`);\n                }\n                if (currentDoc.length > 0) {\n                    const doc = this.joinDocs(currentDoc, separator);\n                    if (doc !== null) {\n                        docs.push(doc);\n                    }\n                    // Keep on popping if:\n                    // - we have a larger chunk than in the chunk overlap\n                    // - or if we still have any chunks and the length is long\n                    while(total > this.chunkOverlap || total + _len + currentDoc.length * separator.length > this.chunkSize && total > 0){\n                        total -= await this.lengthFunction(currentDoc[0]);\n                        currentDoc.shift();\n                    }\n                }\n            }\n            currentDoc.push(d);\n            total += _len;\n        }\n        const doc = this.joinDocs(currentDoc, separator);\n        if (doc !== null) {\n            docs.push(doc);\n        }\n        return docs;\n    }\n}\nclass CharacterTextSplitter extends TextSplitter {\n    static lc_name() {\n        return \"CharacterTextSplitter\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"separator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\\n\\n\"\n        });\n        this.separator = fields?.separator ?? this.separator;\n    }\n    async splitText(text) {\n        // First we naively split the large input into a bunch of smaller ones.\n        const splits = this.splitOnSeparator(text, this.separator);\n        return this.mergeSplits(splits, this.keepSeparator ? \"\" : this.separator);\n    }\n}\nconst SupportedTextSplitterLanguages = [\n    \"cpp\",\n    \"go\",\n    \"java\",\n    \"js\",\n    \"php\",\n    \"proto\",\n    \"python\",\n    \"rst\",\n    \"ruby\",\n    \"rust\",\n    \"scala\",\n    \"swift\",\n    \"markdown\",\n    \"latex\",\n    \"html\",\n    \"sol\"\n];\nclass RecursiveCharacterTextSplitter extends TextSplitter {\n    static lc_name() {\n        return \"RecursiveCharacterTextSplitter\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"separators\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ]\n        });\n        this.separators = fields?.separators ?? this.separators;\n        this.keepSeparator = fields?.keepSeparator ?? true;\n    }\n    async _splitText(text, separators) {\n        const finalChunks = [];\n        // Get appropriate separator to use\n        let separator = separators[separators.length - 1];\n        let newSeparators;\n        for(let i = 0; i < separators.length; i += 1){\n            const s = separators[i];\n            if (s === \"\") {\n                separator = s;\n                break;\n            }\n            if (text.includes(s)) {\n                separator = s;\n                newSeparators = separators.slice(i + 1);\n                break;\n            }\n        }\n        // Now that we have the separator, split the text\n        const splits = this.splitOnSeparator(text, separator);\n        // Now go merging things, recursively splitting longer texts.\n        let goodSplits = [];\n        const _separator = this.keepSeparator ? \"\" : separator;\n        for (const s of splits){\n            if (await this.lengthFunction(s) < this.chunkSize) {\n                goodSplits.push(s);\n            } else {\n                if (goodSplits.length) {\n                    const mergedText = await this.mergeSplits(goodSplits, _separator);\n                    finalChunks.push(...mergedText);\n                    goodSplits = [];\n                }\n                if (!newSeparators) {\n                    finalChunks.push(s);\n                } else {\n                    const otherInfo = await this._splitText(s, newSeparators);\n                    finalChunks.push(...otherInfo);\n                }\n            }\n        }\n        if (goodSplits.length) {\n            const mergedText = await this.mergeSplits(goodSplits, _separator);\n            finalChunks.push(...mergedText);\n        }\n        return finalChunks;\n    }\n    async splitText(text) {\n        return this._splitText(text, this.separators);\n    }\n    static fromLanguage(language, options) {\n        return new RecursiveCharacterTextSplitter({\n            ...options,\n            separators: RecursiveCharacterTextSplitter.getSeparatorsForLanguage(language)\n        });\n    }\n    static getSeparatorsForLanguage(language) {\n        if (language === \"cpp\") {\n            return [\n                // Split along class definitions\n                \"\\nclass \",\n                // Split along function definitions\n                \"\\nvoid \",\n                \"\\nint \",\n                \"\\nfloat \",\n                \"\\ndouble \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"go\") {\n            return [\n                // Split along function definitions\n                \"\\nfunc \",\n                \"\\nvar \",\n                \"\\nconst \",\n                \"\\ntype \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"java\") {\n            return [\n                // Split along class definitions\n                \"\\nclass \",\n                // Split along method definitions\n                \"\\npublic \",\n                \"\\nprotected \",\n                \"\\nprivate \",\n                \"\\nstatic \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"js\") {\n            return [\n                // Split along function definitions\n                \"\\nfunction \",\n                \"\\nconst \",\n                \"\\nlet \",\n                \"\\nvar \",\n                \"\\nclass \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                \"\\ndefault \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"php\") {\n            return [\n                // Split along function definitions\n                \"\\nfunction \",\n                // Split along class definitions\n                \"\\nclass \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nforeach \",\n                \"\\nwhile \",\n                \"\\ndo \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"proto\") {\n            return [\n                // Split along message definitions\n                \"\\nmessage \",\n                // Split along service definitions\n                \"\\nservice \",\n                // Split along enum definitions\n                \"\\nenum \",\n                // Split along option definitions\n                \"\\noption \",\n                // Split along import statements\n                \"\\nimport \",\n                // Split along syntax declarations\n                \"\\nsyntax \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"python\") {\n            return [\n                // First, try to split along class definitions\n                \"\\nclass \",\n                \"\\ndef \",\n                \"\\n\tdef \",\n                // Now split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"rst\") {\n            return [\n                // Split along section titles\n                \"\\n===\\n\",\n                \"\\n---\\n\",\n                \"\\n***\\n\",\n                // Split along directive markers\n                \"\\n.. \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"ruby\") {\n            return [\n                // Split along method definitions\n                \"\\ndef \",\n                \"\\nclass \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nunless \",\n                \"\\nwhile \",\n                \"\\nfor \",\n                \"\\ndo \",\n                \"\\nbegin \",\n                \"\\nrescue \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"rust\") {\n            return [\n                // Split along function definitions\n                \"\\nfn \",\n                \"\\nconst \",\n                \"\\nlet \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nwhile \",\n                \"\\nfor \",\n                \"\\nloop \",\n                \"\\nmatch \",\n                \"\\nconst \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"scala\") {\n            return [\n                // Split along class definitions\n                \"\\nclass \",\n                \"\\nobject \",\n                // Split along method definitions\n                \"\\ndef \",\n                \"\\nval \",\n                \"\\nvar \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\nmatch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"swift\") {\n            return [\n                // Split along function definitions\n                \"\\nfunc \",\n                // Split along class definitions\n                \"\\nclass \",\n                \"\\nstruct \",\n                \"\\nenum \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\ndo \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"markdown\") {\n            return [\n                // First, try to split along Markdown headings (starting with level 2)\n                \"\\n## \",\n                \"\\n### \",\n                \"\\n#### \",\n                \"\\n##### \",\n                \"\\n###### \",\n                // Note the alternative syntax for headings (below) is not handled here\n                // Heading level 2\n                // ---------------\n                // End of code block\n                \"```\\n\\n\",\n                // Horizontal lines\n                \"\\n\\n***\\n\\n\",\n                \"\\n\\n---\\n\\n\",\n                \"\\n\\n___\\n\\n\",\n                // Note that this splitter doesn't handle horizontal lines defined\n                // by *three or more* of ***, ---, or ___, but this is not handled\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"latex\") {\n            return [\n                // First, try to split along Latex sections\n                \"\\n\\\\chapter{\",\n                \"\\n\\\\section{\",\n                \"\\n\\\\subsection{\",\n                \"\\n\\\\subsubsection{\",\n                // Now split by environments\n                \"\\n\\\\begin{enumerate}\",\n                \"\\n\\\\begin{itemize}\",\n                \"\\n\\\\begin{description}\",\n                \"\\n\\\\begin{list}\",\n                \"\\n\\\\begin{quote}\",\n                \"\\n\\\\begin{quotation}\",\n                \"\\n\\\\begin{verse}\",\n                \"\\n\\\\begin{verbatim}\",\n                // Now split by math environments\n                \"\\n\\\\begin{align}\",\n                \"$$\",\n                \"$\",\n                // Now split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"html\") {\n            return [\n                // First, try to split along HTML tags\n                \"<body>\",\n                \"<div>\",\n                \"<p>\",\n                \"<br>\",\n                \"<li>\",\n                \"<h1>\",\n                \"<h2>\",\n                \"<h3>\",\n                \"<h4>\",\n                \"<h5>\",\n                \"<h6>\",\n                \"<span>\",\n                \"<table>\",\n                \"<tr>\",\n                \"<td>\",\n                \"<th>\",\n                \"<ul>\",\n                \"<ol>\",\n                \"<header>\",\n                \"<footer>\",\n                \"<nav>\",\n                // Head\n                \"<head>\",\n                \"<style>\",\n                \"<script>\",\n                \"<meta>\",\n                \"<title>\",\n                // Normal type of lines\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"sol\") {\n            return [\n                // Split along compiler informations definitions\n                \"\\npragma \",\n                \"\\nusing \",\n                // Split along contract definitions\n                \"\\ncontract \",\n                \"\\ninterface \",\n                \"\\nlibrary \",\n                // Split along method definitions\n                \"\\nconstructor \",\n                \"\\ntype \",\n                \"\\nfunction \",\n                \"\\nevent \",\n                \"\\nmodifier \",\n                \"\\nerror \",\n                \"\\nstruct \",\n                \"\\nenum \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\ndo while \",\n                \"\\nassembly \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else {\n            throw new Error(`Language ${language} is not supported.`);\n        }\n    }\n}\n/**\n * Implementation of splitter which looks at tokens.\n */ class TokenTextSplitter extends TextSplitter {\n    static lc_name() {\n        return \"TokenTextSplitter\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"encodingName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"allowedSpecial\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"disallowedSpecial\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tokenizer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.encodingName = fields?.encodingName ?? \"gpt2\";\n        this.allowedSpecial = fields?.allowedSpecial ?? [];\n        this.disallowedSpecial = fields?.disallowedSpecial ?? \"all\";\n    }\n    async splitText(text) {\n        if (!this.tokenizer) {\n            this.tokenizer = await (0,_langchain_core_utils_tiktoken__WEBPACK_IMPORTED_MODULE_1__.getEncoding)(this.encodingName);\n        }\n        const splits = [];\n        const input_ids = this.tokenizer.encode(text, this.allowedSpecial, this.disallowedSpecial);\n        let start_idx = 0;\n        while(start_idx < input_ids.length){\n            if (start_idx > 0) {\n                start_idx -= this.chunkOverlap;\n            }\n            const end_idx = Math.min(start_idx + this.chunkSize, input_ids.length);\n            const chunk_ids = input_ids.slice(start_idx, end_idx);\n            splits.push(this.tokenizer.decode(chunk_ids));\n            start_idx = end_idx;\n        }\n        return splits;\n    }\n}\nclass MarkdownTextSplitter extends RecursiveCharacterTextSplitter {\n    constructor(fields){\n        super({\n            ...fields,\n            separators: RecursiveCharacterTextSplitter.getSeparatorsForLanguage(\"markdown\")\n        });\n    }\n}\nclass LatexTextSplitter extends RecursiveCharacterTextSplitter {\n    constructor(fields){\n        super({\n            ...fields,\n            separators: RecursiveCharacterTextSplitter.getSeparatorsForLanguage(\"latex\")\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvdGV4dF9zcGxpdHRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBOEU7QUFDakI7QUFDdEQsTUFBTUcscUJBQXFCRiw4RUFBdUJBO0lBQ3JERyxZQUFZQyxNQUFNLENBQUU7UUFDaEIsS0FBSyxDQUFDQTtRQUNOQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGdCQUFnQjtZQUN4Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztnQkFBQztnQkFBYTtnQkFBeUI7YUFBaUI7UUFDbkU7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxhQUFhO1lBQ3JDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO1FBQ1g7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87UUFDWDtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGlCQUFpQjtZQUN6Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsa0JBQWtCO1lBQzFDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNDLFNBQVMsR0FBR1AsUUFBUU8sYUFBYSxJQUFJLENBQUNBLFNBQVM7UUFDcEQsSUFBSSxDQUFDQyxZQUFZLEdBQUdSLFFBQVFRLGdCQUFnQixJQUFJLENBQUNBLFlBQVk7UUFDN0QsSUFBSSxDQUFDQyxhQUFhLEdBQUdULFFBQVFTLGlCQUFpQixJQUFJLENBQUNBLGFBQWE7UUFDaEUsSUFBSSxDQUFDQyxjQUFjLEdBQ2ZWLFFBQVFVLGtCQUFtQixFQUFDQyxPQUFTQSxLQUFLQyxNQUFNO1FBQ3BELElBQUksSUFBSSxDQUFDSixZQUFZLElBQUksSUFBSSxDQUFDRCxTQUFTLEVBQUU7WUFDckMsTUFBTSxJQUFJTSxNQUFNO1FBQ3BCO0lBQ0o7SUFDQSxNQUFNQyxtQkFBbUJDLFNBQVMsRUFBRUMscUJBQXFCLENBQUMsQ0FBQyxFQUFFO1FBQ3pELE9BQU8sSUFBSSxDQUFDQyxjQUFjLENBQUNGLFdBQVdDO0lBQzFDO0lBQ0FFLGlCQUFpQlAsSUFBSSxFQUFFUSxTQUFTLEVBQUU7UUFDOUIsSUFBSUM7UUFDSixJQUFJRCxXQUFXO1lBQ1gsSUFBSSxJQUFJLENBQUNWLGFBQWEsRUFBRTtnQkFDcEIsTUFBTVksd0JBQXdCRixVQUFVRyxPQUFPLENBQUMsMEJBQTBCO2dCQUMxRUYsU0FBU1QsS0FBS1ksS0FBSyxDQUFDLElBQUlDLE9BQU8sQ0FBQyxHQUFHLEVBQUVILHNCQUFzQixDQUFDLENBQUM7WUFDakUsT0FDSztnQkFDREQsU0FBU1QsS0FBS1ksS0FBSyxDQUFDSjtZQUN4QjtRQUNKLE9BQ0s7WUFDREMsU0FBU1QsS0FBS1ksS0FBSyxDQUFDO1FBQ3hCO1FBQ0EsT0FBT0gsT0FBT0ssTUFBTSxDQUFDLENBQUNDLElBQU1BLE1BQU07SUFDdEM7SUFDQSxNQUFNQyxnQkFBZ0JDLEtBQUssRUFDM0IsOERBQThEO0lBQzlEQyxZQUFZLEVBQUUsRUFBRWIscUJBQXFCLENBQUMsQ0FBQyxFQUFFO1FBQ3JDLG1FQUFtRTtRQUNuRSw4REFBOEQ7UUFDOUQsTUFBTWMsYUFBYUQsVUFBVWpCLE1BQU0sR0FBRyxJQUNoQ2lCLFlBQ0E7ZUFBSUUsTUFBTUgsTUFBTWhCLE1BQU07U0FBRSxDQUFDb0IsR0FBRyxDQUFDLElBQU8sRUFBQztRQUMzQyxNQUFNLEVBQUVDLGNBQWMsRUFBRSxFQUFFQyxxQkFBcUIsV0FBVyxFQUFFQywyQkFBMkIsS0FBSyxFQUFHLEdBQUduQjtRQUNsRyxNQUFNRCxZQUFZLElBQUlnQjtRQUN0QixJQUFLLElBQUlLLElBQUksR0FBR0EsSUFBSVIsTUFBTWhCLE1BQU0sRUFBRXdCLEtBQUssRUFBRztZQUN0QyxNQUFNekIsT0FBT2lCLEtBQUssQ0FBQ1EsRUFBRTtZQUNyQixJQUFJQyxtQkFBbUI7WUFDdkIsSUFBSUMsWUFBWTtZQUNoQixJQUFJQyxpQkFBaUIsQ0FBQztZQUN0QixLQUFLLE1BQU1DLFNBQVMsT0FBTSxJQUFJLENBQUNDLFNBQVMsQ0FBQzlCLEtBQUksRUFBRztnQkFDNUMsSUFBSStCLGNBQWNUO2dCQUNsQix1RkFBdUY7Z0JBQ3ZGLE1BQU1VLGFBQWFoQyxLQUFLaUMsT0FBTyxDQUFDSixPQUFPRCxpQkFBaUI7Z0JBQ3hELElBQUlELGNBQWMsTUFBTTtvQkFDcEIsTUFBTU8sMkJBQTJCLElBQUksQ0FBQ0MsZ0JBQWdCLENBQUNuQyxNQUFNLEdBQUdnQztvQkFDaEVOLG9CQUFvQlE7Z0JBQ3hCLE9BQ0s7b0JBQ0QsTUFBTUUsb0JBQW9CUixpQkFBa0IsTUFBTSxJQUFJLENBQUM3QixjQUFjLENBQUM0QjtvQkFDdEUsSUFBSVMsb0JBQW9CSixZQUFZO3dCQUNoQyxNQUFNSywrQkFBK0IsSUFBSSxDQUFDRixnQkFBZ0IsQ0FBQ25DLE1BQU1vQyxtQkFBbUJKO3dCQUNwRk4sb0JBQW9CVztvQkFDeEIsT0FDSyxJQUFJRCxvQkFBb0JKLFlBQVk7d0JBQ3JDLE1BQU1LLCtCQUErQixJQUFJLENBQUNGLGdCQUFnQixDQUFDbkMsTUFBTWdDLFlBQVlJO3dCQUM3RVYsb0JBQW9CVztvQkFDeEI7b0JBQ0EsSUFBSWIsMEJBQTBCO3dCQUMxQk8sZUFBZVI7b0JBQ25CO2dCQUNKO2dCQUNBLE1BQU1lLGdCQUFnQixJQUFJLENBQUNILGdCQUFnQixDQUFDTjtnQkFDNUMsTUFBTVUsTUFBTXBCLFVBQVUsQ0FBQ00sRUFBRSxDQUFDYyxHQUFHLElBQUksT0FBT3BCLFVBQVUsQ0FBQ00sRUFBRSxDQUFDYyxHQUFHLEtBQUssV0FDeEQ7b0JBQUUsR0FBR3BCLFVBQVUsQ0FBQ00sRUFBRSxDQUFDYyxHQUFHO2dCQUFDLElBQ3ZCLENBQUM7Z0JBQ1BBLElBQUlDLEtBQUssR0FBRztvQkFDUkMsTUFBTWY7b0JBQ05nQixJQUFJaEIsbUJBQW1CWTtnQkFDM0I7Z0JBQ0EsTUFBTUssMEJBQTBCO29CQUM1QixHQUFHeEIsVUFBVSxDQUFDTSxFQUFFO29CQUNoQmM7Z0JBQ0o7Z0JBQ0FSLGVBQWVGO2dCQUNmekIsVUFBVXdDLElBQUksQ0FBQyxJQUFJNUQsK0RBQVFBLENBQUM7b0JBQ3hCK0M7b0JBQ0FjLFVBQVVGO2dCQUNkO2dCQUNBakIsb0JBQW9CWTtnQkFDcEJYLFlBQVlFO2dCQUNaRCxpQkFBaUJJO1lBQ3JCO1FBQ0o7UUFDQSxPQUFPNUI7SUFDWDtJQUNBK0IsaUJBQWlCbkMsSUFBSSxFQUFFOEMsS0FBSyxFQUFFQyxHQUFHLEVBQUU7UUFDL0IsTUFBTUMsY0FBY2hELEtBQUtpRCxLQUFLLENBQUNILE9BQU9DO1FBQ3RDLE9BQU8sQ0FBQ0MsWUFBWUUsS0FBSyxDQUFDLFVBQVUsRUFBRSxFQUFFakQsTUFBTTtJQUNsRDtJQUNBLE1BQU1LLGVBQWVGLFNBQVMsRUFBRUMscUJBQXFCLENBQUMsQ0FBQyxFQUFFO1FBQ3JELE1BQU04QyxvQkFBb0IvQyxVQUFVVSxNQUFNLENBQUMsQ0FBQ3NDLE1BQVFBLElBQUlyQixXQUFXLEtBQUtzQjtRQUN4RSxNQUFNcEMsUUFBUWtDLGtCQUFrQjlCLEdBQUcsQ0FBQyxDQUFDK0IsTUFBUUEsSUFBSXJCLFdBQVc7UUFDNUQsTUFBTWIsWUFBWWlDLGtCQUFrQjlCLEdBQUcsQ0FBQyxDQUFDK0IsTUFBUUEsSUFBSVAsUUFBUTtRQUM3RCxPQUFPLElBQUksQ0FBQzdCLGVBQWUsQ0FBQ0MsT0FBT0MsV0FBV2I7SUFDbEQ7SUFDQWlELFNBQVNDLElBQUksRUFBRS9DLFNBQVMsRUFBRTtRQUN0QixNQUFNUixPQUFPdUQsS0FBS0MsSUFBSSxDQUFDaEQsV0FBV2lELElBQUk7UUFDdEMsT0FBT3pELFNBQVMsS0FBSyxPQUFPQTtJQUNoQztJQUNBLE1BQU0wRCxZQUFZakQsTUFBTSxFQUFFRCxTQUFTLEVBQUU7UUFDakMsTUFBTStDLE9BQU8sRUFBRTtRQUNmLE1BQU1JLGFBQWEsRUFBRTtRQUNyQixJQUFJQyxRQUFRO1FBQ1osS0FBSyxNQUFNQyxLQUFLcEQsT0FBUTtZQUNwQixNQUFNcUQsT0FBTyxNQUFNLElBQUksQ0FBQy9ELGNBQWMsQ0FBQzhEO1lBQ3ZDLElBQUlELFFBQVFFLE9BQU9ILFdBQVcxRCxNQUFNLEdBQUdPLFVBQVVQLE1BQU0sR0FDbkQsSUFBSSxDQUFDTCxTQUFTLEVBQUU7Z0JBQ2hCLElBQUlnRSxRQUFRLElBQUksQ0FBQ2hFLFNBQVMsRUFBRTtvQkFDeEJtRSxRQUFRQyxJQUFJLENBQUMsQ0FBQyx3QkFBd0IsRUFBRUosTUFBTTttQ0FDL0IsRUFBRSxJQUFJLENBQUNoRSxTQUFTLENBQUMsQ0FBQztnQkFDckM7Z0JBQ0EsSUFBSStELFdBQVcxRCxNQUFNLEdBQUcsR0FBRztvQkFDdkIsTUFBTW1ELE1BQU0sSUFBSSxDQUFDRSxRQUFRLENBQUNLLFlBQVluRDtvQkFDdEMsSUFBSTRDLFFBQVEsTUFBTTt3QkFDZEcsS0FBS1gsSUFBSSxDQUFDUTtvQkFDZDtvQkFDQSxzQkFBc0I7b0JBQ3RCLHFEQUFxRDtvQkFDckQsMERBQTBEO29CQUMxRCxNQUFPUSxRQUFRLElBQUksQ0FBQy9ELFlBQVksSUFDM0IrRCxRQUFRRSxPQUFPSCxXQUFXMUQsTUFBTSxHQUFHTyxVQUFVUCxNQUFNLEdBQ2hELElBQUksQ0FBQ0wsU0FBUyxJQUNkZ0UsUUFBUSxFQUFJO3dCQUNoQkEsU0FBUyxNQUFNLElBQUksQ0FBQzdELGNBQWMsQ0FBQzRELFVBQVUsQ0FBQyxFQUFFO3dCQUNoREEsV0FBV00sS0FBSztvQkFDcEI7Z0JBQ0o7WUFDSjtZQUNBTixXQUFXZixJQUFJLENBQUNpQjtZQUNoQkQsU0FBU0U7UUFDYjtRQUNBLE1BQU1WLE1BQU0sSUFBSSxDQUFDRSxRQUFRLENBQUNLLFlBQVluRDtRQUN0QyxJQUFJNEMsUUFBUSxNQUFNO1lBQ2RHLEtBQUtYLElBQUksQ0FBQ1E7UUFDZDtRQUNBLE9BQU9HO0lBQ1g7QUFDSjtBQUNPLE1BQU1XLDhCQUE4Qi9FO0lBQ3ZDLE9BQU9nRixVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0EvRSxZQUFZQyxNQUFNLENBQUU7UUFDaEIsS0FBSyxDQUFDQTtRQUNOQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGFBQWE7WUFDckNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87UUFDWDtRQUNBLElBQUksQ0FBQ2EsU0FBUyxHQUFHbkIsUUFBUW1CLGFBQWEsSUFBSSxDQUFDQSxTQUFTO0lBQ3hEO0lBQ0EsTUFBTXNCLFVBQVU5QixJQUFJLEVBQUU7UUFDbEIsdUVBQXVFO1FBQ3ZFLE1BQU1TLFNBQVMsSUFBSSxDQUFDRixnQkFBZ0IsQ0FBQ1AsTUFBTSxJQUFJLENBQUNRLFNBQVM7UUFDekQsT0FBTyxJQUFJLENBQUNrRCxXQUFXLENBQUNqRCxRQUFRLElBQUksQ0FBQ1gsYUFBYSxHQUFHLEtBQUssSUFBSSxDQUFDVSxTQUFTO0lBQzVFO0FBQ0o7QUFDTyxNQUFNNEQsaUNBQWlDO0lBQzFDO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0gsQ0FBQztBQUNLLE1BQU1DLHVDQUF1Q2xGO0lBQ2hELE9BQU9nRixVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0EvRSxZQUFZQyxNQUFNLENBQUU7UUFDaEIsS0FBSyxDQUFDQTtRQUNOQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGNBQWM7WUFDdENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87Z0JBQUM7Z0JBQVE7Z0JBQU07Z0JBQUs7YUFBRztRQUNsQztRQUNBLElBQUksQ0FBQzJFLFVBQVUsR0FBR2pGLFFBQVFpRixjQUFjLElBQUksQ0FBQ0EsVUFBVTtRQUN2RCxJQUFJLENBQUN4RSxhQUFhLEdBQUdULFFBQVFTLGlCQUFpQjtJQUNsRDtJQUNBLE1BQU15RSxXQUFXdkUsSUFBSSxFQUFFc0UsVUFBVSxFQUFFO1FBQy9CLE1BQU1FLGNBQWMsRUFBRTtRQUN0QixtQ0FBbUM7UUFDbkMsSUFBSWhFLFlBQVk4RCxVQUFVLENBQUNBLFdBQVdyRSxNQUFNLEdBQUcsRUFBRTtRQUNqRCxJQUFJd0U7UUFDSixJQUFLLElBQUloRCxJQUFJLEdBQUdBLElBQUk2QyxXQUFXckUsTUFBTSxFQUFFd0IsS0FBSyxFQUFHO1lBQzNDLE1BQU1WLElBQUl1RCxVQUFVLENBQUM3QyxFQUFFO1lBQ3ZCLElBQUlWLE1BQU0sSUFBSTtnQkFDVlAsWUFBWU87Z0JBQ1o7WUFDSjtZQUNBLElBQUlmLEtBQUswRSxRQUFRLENBQUMzRCxJQUFJO2dCQUNsQlAsWUFBWU87Z0JBQ1owRCxnQkFBZ0JILFdBQVdyQixLQUFLLENBQUN4QixJQUFJO2dCQUNyQztZQUNKO1FBQ0o7UUFDQSxpREFBaUQ7UUFDakQsTUFBTWhCLFNBQVMsSUFBSSxDQUFDRixnQkFBZ0IsQ0FBQ1AsTUFBTVE7UUFDM0MsNkRBQTZEO1FBQzdELElBQUltRSxhQUFhLEVBQUU7UUFDbkIsTUFBTUMsYUFBYSxJQUFJLENBQUM5RSxhQUFhLEdBQUcsS0FBS1U7UUFDN0MsS0FBSyxNQUFNTyxLQUFLTixPQUFRO1lBQ3BCLElBQUksTUFBTyxJQUFJLENBQUNWLGNBQWMsQ0FBQ2dCLEtBQU0sSUFBSSxDQUFDbkIsU0FBUyxFQUFFO2dCQUNqRCtFLFdBQVcvQixJQUFJLENBQUM3QjtZQUNwQixPQUNLO2dCQUNELElBQUk0RCxXQUFXMUUsTUFBTSxFQUFFO29CQUNuQixNQUFNNEUsYUFBYSxNQUFNLElBQUksQ0FBQ25CLFdBQVcsQ0FBQ2lCLFlBQVlDO29CQUN0REosWUFBWTVCLElBQUksSUFBSWlDO29CQUNwQkYsYUFBYSxFQUFFO2dCQUNuQjtnQkFDQSxJQUFJLENBQUNGLGVBQWU7b0JBQ2hCRCxZQUFZNUIsSUFBSSxDQUFDN0I7Z0JBQ3JCLE9BQ0s7b0JBQ0QsTUFBTStELFlBQVksTUFBTSxJQUFJLENBQUNQLFVBQVUsQ0FBQ3hELEdBQUcwRDtvQkFDM0NELFlBQVk1QixJQUFJLElBQUlrQztnQkFDeEI7WUFDSjtRQUNKO1FBQ0EsSUFBSUgsV0FBVzFFLE1BQU0sRUFBRTtZQUNuQixNQUFNNEUsYUFBYSxNQUFNLElBQUksQ0FBQ25CLFdBQVcsQ0FBQ2lCLFlBQVlDO1lBQ3RESixZQUFZNUIsSUFBSSxJQUFJaUM7UUFDeEI7UUFDQSxPQUFPTDtJQUNYO0lBQ0EsTUFBTTFDLFVBQVU5QixJQUFJLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUN1RSxVQUFVLENBQUN2RSxNQUFNLElBQUksQ0FBQ3NFLFVBQVU7SUFDaEQ7SUFDQSxPQUFPUyxhQUFhQyxRQUFRLEVBQUVDLE9BQU8sRUFBRTtRQUNuQyxPQUFPLElBQUlaLCtCQUErQjtZQUN0QyxHQUFHWSxPQUFPO1lBQ1ZYLFlBQVlELCtCQUErQmEsd0JBQXdCLENBQUNGO1FBQ3hFO0lBQ0o7SUFDQSxPQUFPRSx5QkFBeUJGLFFBQVEsRUFBRTtRQUN0QyxJQUFJQSxhQUFhLE9BQU87WUFDcEIsT0FBTztnQkFDSCxnQ0FBZ0M7Z0JBQ2hDO2dCQUNBLG1DQUFtQztnQkFDbkM7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0Esc0NBQXNDO2dCQUN0QztnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQSxvQ0FBb0M7Z0JBQ3BDO2dCQUNBO2dCQUNBO2dCQUNBO2FBQ0g7UUFDTCxPQUNLLElBQUlBLGFBQWEsTUFBTTtZQUN4QixPQUFPO2dCQUNILG1DQUFtQztnQkFDbkM7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0Esc0NBQXNDO2dCQUN0QztnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQSxvQ0FBb0M7Z0JBQ3BDO2dCQUNBO2dCQUNBO2dCQUNBO2FBQ0g7UUFDTCxPQUNLLElBQUlBLGFBQWEsUUFBUTtZQUMxQixPQUFPO2dCQUNILGdDQUFnQztnQkFDaEM7Z0JBQ0EsaUNBQWlDO2dCQUNqQztnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQSxzQ0FBc0M7Z0JBQ3RDO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBLG9DQUFvQztnQkFDcEM7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7YUFDSDtRQUNMLE9BQ0ssSUFBSUEsYUFBYSxNQUFNO1lBQ3hCLE9BQU87Z0JBQ0gsbUNBQW1DO2dCQUNuQztnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQSxzQ0FBc0M7Z0JBQ3RDO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBLG9DQUFvQztnQkFDcEM7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7YUFDSDtRQUNMLE9BQ0ssSUFBSUEsYUFBYSxPQUFPO1lBQ3pCLE9BQU87Z0JBQ0gsbUNBQW1DO2dCQUNuQztnQkFDQSxnQ0FBZ0M7Z0JBQ2hDO2dCQUNBLHNDQUFzQztnQkFDdEM7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0Esb0NBQW9DO2dCQUNwQztnQkFDQTtnQkFDQTtnQkFDQTthQUNIO1FBQ0wsT0FDSyxJQUFJQSxhQUFhLFNBQVM7WUFDM0IsT0FBTztnQkFDSCxrQ0FBa0M7Z0JBQ2xDO2dCQUNBLGtDQUFrQztnQkFDbEM7Z0JBQ0EsK0JBQStCO2dCQUMvQjtnQkFDQSxpQ0FBaUM7Z0JBQ2pDO2dCQUNBLGdDQUFnQztnQkFDaEM7Z0JBQ0Esa0NBQWtDO2dCQUNsQztnQkFDQSxvQ0FBb0M7Z0JBQ3BDO2dCQUNBO2dCQUNBO2dCQUNBO2FBQ0g7UUFDTCxPQUNLLElBQUlBLGFBQWEsVUFBVTtZQUM1QixPQUFPO2dCQUNILDhDQUE4QztnQkFDOUM7Z0JBQ0E7Z0JBQ0E7Z0JBQ0Esd0NBQXdDO2dCQUN4QztnQkFDQTtnQkFDQTtnQkFDQTthQUNIO1FBQ0wsT0FDSyxJQUFJQSxhQUFhLE9BQU87WUFDekIsT0FBTztnQkFDSCw2QkFBNkI7Z0JBQzdCO2dCQUNBO2dCQUNBO2dCQUNBLGdDQUFnQztnQkFDaEM7Z0JBQ0Esb0NBQW9DO2dCQUNwQztnQkFDQTtnQkFDQTtnQkFDQTthQUNIO1FBQ0wsT0FDSyxJQUFJQSxhQUFhLFFBQVE7WUFDMUIsT0FBTztnQkFDSCxpQ0FBaUM7Z0JBQ2pDO2dCQUNBO2dCQUNBLHNDQUFzQztnQkFDdEM7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0Esb0NBQW9DO2dCQUNwQztnQkFDQTtnQkFDQTtnQkFDQTthQUNIO1FBQ0wsT0FDSyxJQUFJQSxhQUFhLFFBQVE7WUFDMUIsT0FBTztnQkFDSCxtQ0FBbUM7Z0JBQ25DO2dCQUNBO2dCQUNBO2dCQUNBLHNDQUFzQztnQkFDdEM7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0Esb0NBQW9DO2dCQUNwQztnQkFDQTtnQkFDQTtnQkFDQTthQUNIO1FBQ0wsT0FDSyxJQUFJQSxhQUFhLFNBQVM7WUFDM0IsT0FBTztnQkFDSCxnQ0FBZ0M7Z0JBQ2hDO2dCQUNBO2dCQUNBLGlDQUFpQztnQkFDakM7Z0JBQ0E7Z0JBQ0E7Z0JBQ0Esc0NBQXNDO2dCQUN0QztnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQSxvQ0FBb0M7Z0JBQ3BDO2dCQUNBO2dCQUNBO2dCQUNBO2FBQ0g7UUFDTCxPQUNLLElBQUlBLGFBQWEsU0FBUztZQUMzQixPQUFPO2dCQUNILG1DQUFtQztnQkFDbkM7Z0JBQ0EsZ0NBQWdDO2dCQUNoQztnQkFDQTtnQkFDQTtnQkFDQSxzQ0FBc0M7Z0JBQ3RDO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBLG9DQUFvQztnQkFDcEM7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7YUFDSDtRQUNMLE9BQ0ssSUFBSUEsYUFBYSxZQUFZO1lBQzlCLE9BQU87Z0JBQ0gsc0VBQXNFO2dCQUN0RTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQSx1RUFBdUU7Z0JBQ3ZFLGtCQUFrQjtnQkFDbEIsa0JBQWtCO2dCQUNsQixvQkFBb0I7Z0JBQ3BCO2dCQUNBLG1CQUFtQjtnQkFDbkI7Z0JBQ0E7Z0JBQ0E7Z0JBQ0Esa0VBQWtFO2dCQUNsRSxrRUFBa0U7Z0JBQ2xFO2dCQUNBO2dCQUNBO2dCQUNBO2FBQ0g7UUFDTCxPQUNLLElBQUlBLGFBQWEsU0FBUztZQUMzQixPQUFPO2dCQUNILDJDQUEyQztnQkFDM0M7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0EsNEJBQTRCO2dCQUM1QjtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQSxpQ0FBaUM7Z0JBQ2pDO2dCQUNBO2dCQUNBO2dCQUNBLHdDQUF3QztnQkFDeEM7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7YUFDSDtRQUNMLE9BQ0ssSUFBSUEsYUFBYSxRQUFRO1lBQzFCLE9BQU87Z0JBQ0gsc0NBQXNDO2dCQUN0QztnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQSxPQUFPO2dCQUNQO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBLHVCQUF1QjtnQkFDdkI7Z0JBQ0E7YUFDSDtRQUNMLE9BQ0ssSUFBSUEsYUFBYSxPQUFPO1lBQ3pCLE9BQU87Z0JBQ0gsZ0RBQWdEO2dCQUNoRDtnQkFDQTtnQkFDQSxtQ0FBbUM7Z0JBQ25DO2dCQUNBO2dCQUNBO2dCQUNBLGlDQUFpQztnQkFDakM7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0Esc0NBQXNDO2dCQUN0QztnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQSxvQ0FBb0M7Z0JBQ3BDO2dCQUNBO2dCQUNBO2dCQUNBO2FBQ0g7UUFDTCxPQUNLO1lBQ0QsTUFBTSxJQUFJOUUsTUFBTSxDQUFDLFNBQVMsRUFBRThFLFNBQVMsa0JBQWtCLENBQUM7UUFDNUQ7SUFDSjtBQUNKO0FBQ0E7O0NBRUMsR0FDTSxNQUFNRywwQkFBMEJoRztJQUNuQyxPQUFPZ0YsVUFBVTtRQUNiLE9BQU87SUFDWDtJQUNBL0UsWUFBWUMsTUFBTSxDQUFFO1FBQ2hCLEtBQUssQ0FBQ0E7UUFDTkMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGtCQUFrQjtZQUMxQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUscUJBQXFCO1lBQzdDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxhQUFhO1lBQ3JDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUN5RixZQUFZLEdBQUcvRixRQUFRK0YsZ0JBQWdCO1FBQzVDLElBQUksQ0FBQ0MsY0FBYyxHQUFHaEcsUUFBUWdHLGtCQUFrQixFQUFFO1FBQ2xELElBQUksQ0FBQ0MsaUJBQWlCLEdBQUdqRyxRQUFRaUcscUJBQXFCO0lBQzFEO0lBQ0EsTUFBTXhELFVBQVU5QixJQUFJLEVBQUU7UUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQ3VGLFNBQVMsRUFBRTtZQUNqQixJQUFJLENBQUNBLFNBQVMsR0FBRyxNQUFNckcsMkVBQVdBLENBQUMsSUFBSSxDQUFDa0csWUFBWTtRQUN4RDtRQUNBLE1BQU0zRSxTQUFTLEVBQUU7UUFDakIsTUFBTStFLFlBQVksSUFBSSxDQUFDRCxTQUFTLENBQUNFLE1BQU0sQ0FBQ3pGLE1BQU0sSUFBSSxDQUFDcUYsY0FBYyxFQUFFLElBQUksQ0FBQ0MsaUJBQWlCO1FBQ3pGLElBQUlJLFlBQVk7UUFDaEIsTUFBT0EsWUFBWUYsVUFBVXZGLE1BQU0sQ0FBRTtZQUNqQyxJQUFJeUYsWUFBWSxHQUFHO2dCQUNmQSxhQUFhLElBQUksQ0FBQzdGLFlBQVk7WUFDbEM7WUFDQSxNQUFNOEYsVUFBVUMsS0FBS0MsR0FBRyxDQUFDSCxZQUFZLElBQUksQ0FBQzlGLFNBQVMsRUFBRTRGLFVBQVV2RixNQUFNO1lBQ3JFLE1BQU02RixZQUFZTixVQUFVdkMsS0FBSyxDQUFDeUMsV0FBV0M7WUFDN0NsRixPQUFPbUMsSUFBSSxDQUFDLElBQUksQ0FBQzJDLFNBQVMsQ0FBQ1EsTUFBTSxDQUFDRDtZQUNsQ0osWUFBWUM7UUFDaEI7UUFDQSxPQUFPbEY7SUFDWDtBQUNKO0FBQ08sTUFBTXVGLDZCQUE2QjNCO0lBQ3RDakYsWUFBWUMsTUFBTSxDQUFFO1FBQ2hCLEtBQUssQ0FBQztZQUNGLEdBQUdBLE1BQU07WUFDVGlGLFlBQVlELCtCQUErQmEsd0JBQXdCLENBQUM7UUFDeEU7SUFDSjtBQUNKO0FBQ08sTUFBTWUsMEJBQTBCNUI7SUFDbkNqRixZQUFZQyxNQUFNLENBQUU7UUFDaEIsS0FBSyxDQUFDO1lBQ0YsR0FBR0EsTUFBTTtZQUNUaUYsWUFBWUQsK0JBQStCYSx3QkFBd0IsQ0FBQztRQUN4RTtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC90ZXh0X3NwbGl0dGVyLmpzPzVmYjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRG9jdW1lbnQsIEJhc2VEb2N1bWVudFRyYW5zZm9ybWVyIH0gZnJvbSBcIkBsYW5nY2hhaW4vY29yZS9kb2N1bWVudHNcIjtcbmltcG9ydCB7IGdldEVuY29kaW5nIH0gZnJvbSBcIkBsYW5nY2hhaW4vY29yZS91dGlscy90aWt0b2tlblwiO1xuZXhwb3J0IGNsYXNzIFRleHRTcGxpdHRlciBleHRlbmRzIEJhc2VEb2N1bWVudFRyYW5zZm9ybWVyIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGNfbmFtZXNwYWNlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBbXCJsYW5nY2hhaW5cIiwgXCJkb2N1bWVudF90cmFuc2Zvcm1lcnNcIiwgXCJ0ZXh0X3NwbGl0dGVyc1wiXVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiY2h1bmtTaXplXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAxMDAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjaHVua092ZXJsYXBcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IDIwMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwia2VlcFNlcGFyYXRvclwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxlbmd0aEZ1bmN0aW9uXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2h1bmtTaXplID0gZmllbGRzPy5jaHVua1NpemUgPz8gdGhpcy5jaHVua1NpemU7XG4gICAgICAgIHRoaXMuY2h1bmtPdmVybGFwID0gZmllbGRzPy5jaHVua092ZXJsYXAgPz8gdGhpcy5jaHVua092ZXJsYXA7XG4gICAgICAgIHRoaXMua2VlcFNlcGFyYXRvciA9IGZpZWxkcz8ua2VlcFNlcGFyYXRvciA/PyB0aGlzLmtlZXBTZXBhcmF0b3I7XG4gICAgICAgIHRoaXMubGVuZ3RoRnVuY3Rpb24gPVxuICAgICAgICAgICAgZmllbGRzPy5sZW5ndGhGdW5jdGlvbiA/PyAoKHRleHQpID0+IHRleHQubGVuZ3RoKTtcbiAgICAgICAgaWYgKHRoaXMuY2h1bmtPdmVybGFwID49IHRoaXMuY2h1bmtTaXplKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgaGF2ZSBjaHVua092ZXJsYXAgPj0gY2h1bmtTaXplXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIHRyYW5zZm9ybURvY3VtZW50cyhkb2N1bWVudHMsIGNodW5rSGVhZGVyT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwbGl0RG9jdW1lbnRzKGRvY3VtZW50cywgY2h1bmtIZWFkZXJPcHRpb25zKTtcbiAgICB9XG4gICAgc3BsaXRPblNlcGFyYXRvcih0ZXh0LCBzZXBhcmF0b3IpIHtcbiAgICAgICAgbGV0IHNwbGl0cztcbiAgICAgICAgaWYgKHNlcGFyYXRvcikge1xuICAgICAgICAgICAgaWYgKHRoaXMua2VlcFNlcGFyYXRvcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2V4RXNjYXBlZFNlcGFyYXRvciA9IHNlcGFyYXRvci5yZXBsYWNlKC9bL1xcLVxcXFxeJCorPy4oKXxbXFxde31dL2csIFwiXFxcXCQmXCIpO1xuICAgICAgICAgICAgICAgIHNwbGl0cyA9IHRleHQuc3BsaXQobmV3IFJlZ0V4cChgKD89JHtyZWdleEVzY2FwZWRTZXBhcmF0b3J9KWApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNwbGl0cyA9IHRleHQuc3BsaXQoc2VwYXJhdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNwbGl0cyA9IHRleHQuc3BsaXQoXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNwbGl0cy5maWx0ZXIoKHMpID0+IHMgIT09IFwiXCIpO1xuICAgIH1cbiAgICBhc3luYyBjcmVhdGVEb2N1bWVudHModGV4dHMsIFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgbWV0YWRhdGFzID0gW10sIGNodW5rSGVhZGVyT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIC8vIGlmIG5vIG1ldGFkYXRhIGlzIHByb3ZpZGVkLCB3ZSBjcmVhdGUgYW4gZW1wdHkgb25lIGZvciBlYWNoIHRleHRcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgY29uc3QgX21ldGFkYXRhcyA9IG1ldGFkYXRhcy5sZW5ndGggPiAwXG4gICAgICAgICAgICA/IG1ldGFkYXRhc1xuICAgICAgICAgICAgOiBbLi4uQXJyYXkodGV4dHMubGVuZ3RoKV0ubWFwKCgpID0+ICh7fSkpO1xuICAgICAgICBjb25zdCB7IGNodW5rSGVhZGVyID0gXCJcIiwgY2h1bmtPdmVybGFwSGVhZGVyID0gXCIoY29udCdkKSBcIiwgYXBwZW5kQ2h1bmtPdmVybGFwSGVhZGVyID0gZmFsc2UsIH0gPSBjaHVua0hlYWRlck9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGRvY3VtZW50cyA9IG5ldyBBcnJheSgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRleHRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0gdGV4dHNbaV07XG4gICAgICAgICAgICBsZXQgbGluZUNvdW50ZXJJbmRleCA9IDE7XG4gICAgICAgICAgICBsZXQgcHJldkNodW5rID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBpbmRleFByZXZDaHVuayA9IC0xO1xuICAgICAgICAgICAgZm9yIChjb25zdCBjaHVuayBvZiBhd2FpdCB0aGlzLnNwbGl0VGV4dCh0ZXh0KSkge1xuICAgICAgICAgICAgICAgIGxldCBwYWdlQ29udGVudCA9IGNodW5rSGVhZGVyO1xuICAgICAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gY291bnQgdGhlIFxcbiB0aGF0IGFyZSBpbiB0aGUgdGV4dCBiZWZvcmUgZ2V0dGluZyByZW1vdmVkIGJ5IHRoZSBzcGxpdHRpbmdcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleENodW5rID0gdGV4dC5pbmRleE9mKGNodW5rLCBpbmRleFByZXZDaHVuayArIDEpO1xuICAgICAgICAgICAgICAgIGlmIChwcmV2Q2h1bmsgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3TGluZXNCZWZvcmVGaXJzdENodW5rID0gdGhpcy5udW1iZXJPZk5ld0xpbmVzKHRleHQsIDAsIGluZGV4Q2h1bmspO1xuICAgICAgICAgICAgICAgICAgICBsaW5lQ291bnRlckluZGV4ICs9IG5ld0xpbmVzQmVmb3JlRmlyc3RDaHVuaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4RW5kUHJldkNodW5rID0gaW5kZXhQcmV2Q2h1bmsgKyAoYXdhaXQgdGhpcy5sZW5ndGhGdW5jdGlvbihwcmV2Q2h1bmspKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4RW5kUHJldkNodW5rIDwgaW5kZXhDaHVuaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbnVtYmVyT2ZJbnRlcm1lZGlhdGVOZXdMaW5lcyA9IHRoaXMubnVtYmVyT2ZOZXdMaW5lcyh0ZXh0LCBpbmRleEVuZFByZXZDaHVuaywgaW5kZXhDaHVuayk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lQ291bnRlckluZGV4ICs9IG51bWJlck9mSW50ZXJtZWRpYXRlTmV3TGluZXM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaW5kZXhFbmRQcmV2Q2h1bmsgPiBpbmRleENodW5rKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBudW1iZXJPZkludGVybWVkaWF0ZU5ld0xpbmVzID0gdGhpcy5udW1iZXJPZk5ld0xpbmVzKHRleHQsIGluZGV4Q2h1bmssIGluZGV4RW5kUHJldkNodW5rKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVDb3VudGVySW5kZXggLT0gbnVtYmVyT2ZJbnRlcm1lZGlhdGVOZXdMaW5lcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoYXBwZW5kQ2h1bmtPdmVybGFwSGVhZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlQ29udGVudCArPSBjaHVua092ZXJsYXBIZWFkZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3TGluZXNDb3VudCA9IHRoaXMubnVtYmVyT2ZOZXdMaW5lcyhjaHVuayk7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jID0gX21ldGFkYXRhc1tpXS5sb2MgJiYgdHlwZW9mIF9tZXRhZGF0YXNbaV0ubG9jID09PSBcIm9iamVjdFwiXG4gICAgICAgICAgICAgICAgICAgID8geyAuLi5fbWV0YWRhdGFzW2ldLmxvYyB9XG4gICAgICAgICAgICAgICAgICAgIDoge307XG4gICAgICAgICAgICAgICAgbG9jLmxpbmVzID0ge1xuICAgICAgICAgICAgICAgICAgICBmcm9tOiBsaW5lQ291bnRlckluZGV4LFxuICAgICAgICAgICAgICAgICAgICB0bzogbGluZUNvdW50ZXJJbmRleCArIG5ld0xpbmVzQ291bnQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXRhZGF0YVdpdGhMaW5lc051bWJlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uX21ldGFkYXRhc1tpXSxcbiAgICAgICAgICAgICAgICAgICAgbG9jLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcGFnZUNvbnRlbnQgKz0gY2h1bms7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnRzLnB1c2gobmV3IERvY3VtZW50KHtcbiAgICAgICAgICAgICAgICAgICAgcGFnZUNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBtZXRhZGF0YVdpdGhMaW5lc051bWJlcixcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgbGluZUNvdW50ZXJJbmRleCArPSBuZXdMaW5lc0NvdW50O1xuICAgICAgICAgICAgICAgIHByZXZDaHVuayA9IGNodW5rO1xuICAgICAgICAgICAgICAgIGluZGV4UHJldkNodW5rID0gaW5kZXhDaHVuaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZG9jdW1lbnRzO1xuICAgIH1cbiAgICBudW1iZXJPZk5ld0xpbmVzKHRleHQsIHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgY29uc3QgdGV4dFNlY3Rpb24gPSB0ZXh0LnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgICAgICByZXR1cm4gKHRleHRTZWN0aW9uLm1hdGNoKC9cXG4vZykgfHwgW10pLmxlbmd0aDtcbiAgICB9XG4gICAgYXN5bmMgc3BsaXREb2N1bWVudHMoZG9jdW1lbnRzLCBjaHVua0hlYWRlck9wdGlvbnMgPSB7fSkge1xuICAgICAgICBjb25zdCBzZWxlY3RlZERvY3VtZW50cyA9IGRvY3VtZW50cy5maWx0ZXIoKGRvYykgPT4gZG9jLnBhZ2VDb250ZW50ICE9PSB1bmRlZmluZWQpO1xuICAgICAgICBjb25zdCB0ZXh0cyA9IHNlbGVjdGVkRG9jdW1lbnRzLm1hcCgoZG9jKSA9PiBkb2MucGFnZUNvbnRlbnQpO1xuICAgICAgICBjb25zdCBtZXRhZGF0YXMgPSBzZWxlY3RlZERvY3VtZW50cy5tYXAoKGRvYykgPT4gZG9jLm1ldGFkYXRhKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRG9jdW1lbnRzKHRleHRzLCBtZXRhZGF0YXMsIGNodW5rSGVhZGVyT3B0aW9ucyk7XG4gICAgfVxuICAgIGpvaW5Eb2NzKGRvY3MsIHNlcGFyYXRvcikge1xuICAgICAgICBjb25zdCB0ZXh0ID0gZG9jcy5qb2luKHNlcGFyYXRvcikudHJpbSgpO1xuICAgICAgICByZXR1cm4gdGV4dCA9PT0gXCJcIiA/IG51bGwgOiB0ZXh0O1xuICAgIH1cbiAgICBhc3luYyBtZXJnZVNwbGl0cyhzcGxpdHMsIHNlcGFyYXRvcikge1xuICAgICAgICBjb25zdCBkb2NzID0gW107XG4gICAgICAgIGNvbnN0IGN1cnJlbnREb2MgPSBbXTtcbiAgICAgICAgbGV0IHRvdGFsID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBkIG9mIHNwbGl0cykge1xuICAgICAgICAgICAgY29uc3QgX2xlbiA9IGF3YWl0IHRoaXMubGVuZ3RoRnVuY3Rpb24oZCk7XG4gICAgICAgICAgICBpZiAodG90YWwgKyBfbGVuICsgY3VycmVudERvYy5sZW5ndGggKiBzZXBhcmF0b3IubGVuZ3RoID5cbiAgICAgICAgICAgICAgICB0aGlzLmNodW5rU2l6ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0b3RhbCA+IHRoaXMuY2h1bmtTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgQ3JlYXRlZCBhIGNodW5rIG9mIHNpemUgJHt0b3RhbH0sICtcbndoaWNoIGlzIGxvbmdlciB0aGFuIHRoZSBzcGVjaWZpZWQgJHt0aGlzLmNodW5rU2l6ZX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnREb2MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkb2MgPSB0aGlzLmpvaW5Eb2NzKGN1cnJlbnREb2MsIHNlcGFyYXRvcik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb2MgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3MucHVzaChkb2MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEtlZXAgb24gcG9wcGluZyBpZjpcbiAgICAgICAgICAgICAgICAgICAgLy8gLSB3ZSBoYXZlIGEgbGFyZ2VyIGNodW5rIHRoYW4gaW4gdGhlIGNodW5rIG92ZXJsYXBcbiAgICAgICAgICAgICAgICAgICAgLy8gLSBvciBpZiB3ZSBzdGlsbCBoYXZlIGFueSBjaHVua3MgYW5kIHRoZSBsZW5ndGggaXMgbG9uZ1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAodG90YWwgPiB0aGlzLmNodW5rT3ZlcmxhcCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKHRvdGFsICsgX2xlbiArIGN1cnJlbnREb2MubGVuZ3RoICogc2VwYXJhdG9yLmxlbmd0aCA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaHVua1NpemUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbCA+IDApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbCAtPSBhd2FpdCB0aGlzLmxlbmd0aEZ1bmN0aW9uKGN1cnJlbnREb2NbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudERvYy5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudERvYy5wdXNoKGQpO1xuICAgICAgICAgICAgdG90YWwgKz0gX2xlbjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkb2MgPSB0aGlzLmpvaW5Eb2NzKGN1cnJlbnREb2MsIHNlcGFyYXRvcik7XG4gICAgICAgIGlmIChkb2MgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGRvY3MucHVzaChkb2MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkb2NzO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBDaGFyYWN0ZXJUZXh0U3BsaXR0ZXIgZXh0ZW5kcyBUZXh0U3BsaXR0ZXIge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJDaGFyYWN0ZXJUZXh0U3BsaXR0ZXJcIjtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkcyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInNlcGFyYXRvclwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogXCJcXG5cXG5cIlxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZXBhcmF0b3IgPSBmaWVsZHM/LnNlcGFyYXRvciA/PyB0aGlzLnNlcGFyYXRvcjtcbiAgICB9XG4gICAgYXN5bmMgc3BsaXRUZXh0KHRleHQpIHtcbiAgICAgICAgLy8gRmlyc3Qgd2UgbmFpdmVseSBzcGxpdCB0aGUgbGFyZ2UgaW5wdXQgaW50byBhIGJ1bmNoIG9mIHNtYWxsZXIgb25lcy5cbiAgICAgICAgY29uc3Qgc3BsaXRzID0gdGhpcy5zcGxpdE9uU2VwYXJhdG9yKHRleHQsIHRoaXMuc2VwYXJhdG9yKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVyZ2VTcGxpdHMoc3BsaXRzLCB0aGlzLmtlZXBTZXBhcmF0b3IgPyBcIlwiIDogdGhpcy5zZXBhcmF0b3IpO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBTdXBwb3J0ZWRUZXh0U3BsaXR0ZXJMYW5ndWFnZXMgPSBbXG4gICAgXCJjcHBcIixcbiAgICBcImdvXCIsXG4gICAgXCJqYXZhXCIsXG4gICAgXCJqc1wiLFxuICAgIFwicGhwXCIsXG4gICAgXCJwcm90b1wiLFxuICAgIFwicHl0aG9uXCIsXG4gICAgXCJyc3RcIixcbiAgICBcInJ1YnlcIixcbiAgICBcInJ1c3RcIixcbiAgICBcInNjYWxhXCIsXG4gICAgXCJzd2lmdFwiLFxuICAgIFwibWFya2Rvd25cIixcbiAgICBcImxhdGV4XCIsXG4gICAgXCJodG1sXCIsXG4gICAgXCJzb2xcIixcbl07XG5leHBvcnQgY2xhc3MgUmVjdXJzaXZlQ2hhcmFjdGVyVGV4dFNwbGl0dGVyIGV4dGVuZHMgVGV4dFNwbGl0dGVyIHtcbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiUmVjdXJzaXZlQ2hhcmFjdGVyVGV4dFNwbGl0dGVyXCI7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBzdXBlcihmaWVsZHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJzZXBhcmF0b3JzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBbXCJcXG5cXG5cIiwgXCJcXG5cIiwgXCIgXCIsIFwiXCJdXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNlcGFyYXRvcnMgPSBmaWVsZHM/LnNlcGFyYXRvcnMgPz8gdGhpcy5zZXBhcmF0b3JzO1xuICAgICAgICB0aGlzLmtlZXBTZXBhcmF0b3IgPSBmaWVsZHM/LmtlZXBTZXBhcmF0b3IgPz8gdHJ1ZTtcbiAgICB9XG4gICAgYXN5bmMgX3NwbGl0VGV4dCh0ZXh0LCBzZXBhcmF0b3JzKSB7XG4gICAgICAgIGNvbnN0IGZpbmFsQ2h1bmtzID0gW107XG4gICAgICAgIC8vIEdldCBhcHByb3ByaWF0ZSBzZXBhcmF0b3IgdG8gdXNlXG4gICAgICAgIGxldCBzZXBhcmF0b3IgPSBzZXBhcmF0b3JzW3NlcGFyYXRvcnMubGVuZ3RoIC0gMV07XG4gICAgICAgIGxldCBuZXdTZXBhcmF0b3JzO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcGFyYXRvcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBzZXBhcmF0b3JzW2ldO1xuICAgICAgICAgICAgaWYgKHMgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3IgPSBzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRleHQuaW5jbHVkZXMocykpIHtcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3IgPSBzO1xuICAgICAgICAgICAgICAgIG5ld1NlcGFyYXRvcnMgPSBzZXBhcmF0b3JzLnNsaWNlKGkgKyAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBOb3cgdGhhdCB3ZSBoYXZlIHRoZSBzZXBhcmF0b3IsIHNwbGl0IHRoZSB0ZXh0XG4gICAgICAgIGNvbnN0IHNwbGl0cyA9IHRoaXMuc3BsaXRPblNlcGFyYXRvcih0ZXh0LCBzZXBhcmF0b3IpO1xuICAgICAgICAvLyBOb3cgZ28gbWVyZ2luZyB0aGluZ3MsIHJlY3Vyc2l2ZWx5IHNwbGl0dGluZyBsb25nZXIgdGV4dHMuXG4gICAgICAgIGxldCBnb29kU3BsaXRzID0gW107XG4gICAgICAgIGNvbnN0IF9zZXBhcmF0b3IgPSB0aGlzLmtlZXBTZXBhcmF0b3IgPyBcIlwiIDogc2VwYXJhdG9yO1xuICAgICAgICBmb3IgKGNvbnN0IHMgb2Ygc3BsaXRzKSB7XG4gICAgICAgICAgICBpZiAoKGF3YWl0IHRoaXMubGVuZ3RoRnVuY3Rpb24ocykpIDwgdGhpcy5jaHVua1NpemUpIHtcbiAgICAgICAgICAgICAgICBnb29kU3BsaXRzLnB1c2gocyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoZ29vZFNwbGl0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVyZ2VkVGV4dCA9IGF3YWl0IHRoaXMubWVyZ2VTcGxpdHMoZ29vZFNwbGl0cywgX3NlcGFyYXRvcik7XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsQ2h1bmtzLnB1c2goLi4ubWVyZ2VkVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGdvb2RTcGxpdHMgPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFuZXdTZXBhcmF0b3JzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsQ2h1bmtzLnB1c2gocyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvdGhlckluZm8gPSBhd2FpdCB0aGlzLl9zcGxpdFRleHQocywgbmV3U2VwYXJhdG9ycyk7XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsQ2h1bmtzLnB1c2goLi4ub3RoZXJJbmZvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdvb2RTcGxpdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBtZXJnZWRUZXh0ID0gYXdhaXQgdGhpcy5tZXJnZVNwbGl0cyhnb29kU3BsaXRzLCBfc2VwYXJhdG9yKTtcbiAgICAgICAgICAgIGZpbmFsQ2h1bmtzLnB1c2goLi4ubWVyZ2VkVGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbmFsQ2h1bmtzO1xuICAgIH1cbiAgICBhc3luYyBzcGxpdFRleHQodGV4dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3BsaXRUZXh0KHRleHQsIHRoaXMuc2VwYXJhdG9ycyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tTGFuZ3VhZ2UobGFuZ3VhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWN1cnNpdmVDaGFyYWN0ZXJUZXh0U3BsaXR0ZXIoe1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIHNlcGFyYXRvcnM6IFJlY3Vyc2l2ZUNoYXJhY3RlclRleHRTcGxpdHRlci5nZXRTZXBhcmF0b3JzRm9yTGFuZ3VhZ2UobGFuZ3VhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIGdldFNlcGFyYXRvcnNGb3JMYW5ndWFnZShsYW5ndWFnZSkge1xuICAgICAgICBpZiAobGFuZ3VhZ2UgPT09IFwiY3BwXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgYWxvbmcgY2xhc3MgZGVmaW5pdGlvbnNcbiAgICAgICAgICAgICAgICBcIlxcbmNsYXNzIFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIGZ1bmN0aW9uIGRlZmluaXRpb25zXG4gICAgICAgICAgICAgICAgXCJcXG52b2lkIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuaW50IFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuZmxvYXQgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5kb3VibGUgXCIsXG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgYWxvbmcgY29udHJvbCBmbG93IHN0YXRlbWVudHNcbiAgICAgICAgICAgICAgICBcIlxcbmlmIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuZm9yIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxud2hpbGUgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5zd2l0Y2ggXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5jYXNlIFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGJ5IHRoZSBub3JtYWwgdHlwZSBvZiBsaW5lc1xuICAgICAgICAgICAgICAgIFwiXFxuXFxuXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5cIixcbiAgICAgICAgICAgICAgICBcIiBcIixcbiAgICAgICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsYW5ndWFnZSA9PT0gXCJnb1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIGZ1bmN0aW9uIGRlZmluaXRpb25zXG4gICAgICAgICAgICAgICAgXCJcXG5mdW5jIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxudmFyIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuY29uc3QgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG50eXBlIFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIGNvbnRyb2wgZmxvdyBzdGF0ZW1lbnRzXG4gICAgICAgICAgICAgICAgXCJcXG5pZiBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmZvciBcIixcbiAgICAgICAgICAgICAgICBcIlxcbnN3aXRjaCBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmNhc2UgXCIsXG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgYnkgdGhlIG5vcm1hbCB0eXBlIG9mIGxpbmVzXG4gICAgICAgICAgICAgICAgXCJcXG5cXG5cIixcbiAgICAgICAgICAgICAgICBcIlxcblwiLFxuICAgICAgICAgICAgICAgIFwiIFwiLFxuICAgICAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxhbmd1YWdlID09PSBcImphdmFcIikge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBhbG9uZyBjbGFzcyBkZWZpbml0aW9uc1xuICAgICAgICAgICAgICAgIFwiXFxuY2xhc3MgXCIsXG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgYWxvbmcgbWV0aG9kIGRlZmluaXRpb25zXG4gICAgICAgICAgICAgICAgXCJcXG5wdWJsaWMgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5wcm90ZWN0ZWQgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5wcml2YXRlIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuc3RhdGljIFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIGNvbnRyb2wgZmxvdyBzdGF0ZW1lbnRzXG4gICAgICAgICAgICAgICAgXCJcXG5pZiBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmZvciBcIixcbiAgICAgICAgICAgICAgICBcIlxcbndoaWxlIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuc3dpdGNoIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuY2FzZSBcIixcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBieSB0aGUgbm9ybWFsIHR5cGUgb2YgbGluZXNcbiAgICAgICAgICAgICAgICBcIlxcblxcblwiLFxuICAgICAgICAgICAgICAgIFwiXFxuXCIsXG4gICAgICAgICAgICAgICAgXCIgXCIsXG4gICAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGFuZ3VhZ2UgPT09IFwianNcIikge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBhbG9uZyBmdW5jdGlvbiBkZWZpbml0aW9uc1xuICAgICAgICAgICAgICAgIFwiXFxuZnVuY3Rpb24gXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5jb25zdCBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmxldCBcIixcbiAgICAgICAgICAgICAgICBcIlxcbnZhciBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmNsYXNzIFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIGNvbnRyb2wgZmxvdyBzdGF0ZW1lbnRzXG4gICAgICAgICAgICAgICAgXCJcXG5pZiBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmZvciBcIixcbiAgICAgICAgICAgICAgICBcIlxcbndoaWxlIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuc3dpdGNoIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuY2FzZSBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmRlZmF1bHQgXCIsXG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgYnkgdGhlIG5vcm1hbCB0eXBlIG9mIGxpbmVzXG4gICAgICAgICAgICAgICAgXCJcXG5cXG5cIixcbiAgICAgICAgICAgICAgICBcIlxcblwiLFxuICAgICAgICAgICAgICAgIFwiIFwiLFxuICAgICAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxhbmd1YWdlID09PSBcInBocFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIGZ1bmN0aW9uIGRlZmluaXRpb25zXG4gICAgICAgICAgICAgICAgXCJcXG5mdW5jdGlvbiBcIixcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBhbG9uZyBjbGFzcyBkZWZpbml0aW9uc1xuICAgICAgICAgICAgICAgIFwiXFxuY2xhc3MgXCIsXG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgYWxvbmcgY29udHJvbCBmbG93IHN0YXRlbWVudHNcbiAgICAgICAgICAgICAgICBcIlxcbmlmIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuZm9yZWFjaCBcIixcbiAgICAgICAgICAgICAgICBcIlxcbndoaWxlIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuZG8gXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5zd2l0Y2ggXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5jYXNlIFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGJ5IHRoZSBub3JtYWwgdHlwZSBvZiBsaW5lc1xuICAgICAgICAgICAgICAgIFwiXFxuXFxuXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5cIixcbiAgICAgICAgICAgICAgICBcIiBcIixcbiAgICAgICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsYW5ndWFnZSA9PT0gXCJwcm90b1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIG1lc3NhZ2UgZGVmaW5pdGlvbnNcbiAgICAgICAgICAgICAgICBcIlxcbm1lc3NhZ2UgXCIsXG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgYWxvbmcgc2VydmljZSBkZWZpbml0aW9uc1xuICAgICAgICAgICAgICAgIFwiXFxuc2VydmljZSBcIixcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBhbG9uZyBlbnVtIGRlZmluaXRpb25zXG4gICAgICAgICAgICAgICAgXCJcXG5lbnVtIFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIG9wdGlvbiBkZWZpbml0aW9uc1xuICAgICAgICAgICAgICAgIFwiXFxub3B0aW9uIFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIGltcG9ydCBzdGF0ZW1lbnRzXG4gICAgICAgICAgICAgICAgXCJcXG5pbXBvcnQgXCIsXG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgYWxvbmcgc3ludGF4IGRlY2xhcmF0aW9uc1xuICAgICAgICAgICAgICAgIFwiXFxuc3ludGF4IFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGJ5IHRoZSBub3JtYWwgdHlwZSBvZiBsaW5lc1xuICAgICAgICAgICAgICAgIFwiXFxuXFxuXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5cIixcbiAgICAgICAgICAgICAgICBcIiBcIixcbiAgICAgICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsYW5ndWFnZSA9PT0gXCJweXRob25cIikge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAvLyBGaXJzdCwgdHJ5IHRvIHNwbGl0IGFsb25nIGNsYXNzIGRlZmluaXRpb25zXG4gICAgICAgICAgICAgICAgXCJcXG5jbGFzcyBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmRlZiBcIixcbiAgICAgICAgICAgICAgICBcIlxcblxcdGRlZiBcIixcbiAgICAgICAgICAgICAgICAvLyBOb3cgc3BsaXQgYnkgdGhlIG5vcm1hbCB0eXBlIG9mIGxpbmVzXG4gICAgICAgICAgICAgICAgXCJcXG5cXG5cIixcbiAgICAgICAgICAgICAgICBcIlxcblwiLFxuICAgICAgICAgICAgICAgIFwiIFwiLFxuICAgICAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxhbmd1YWdlID09PSBcInJzdFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIHNlY3Rpb24gdGl0bGVzXG4gICAgICAgICAgICAgICAgXCJcXG49PT1cXG5cIixcbiAgICAgICAgICAgICAgICBcIlxcbi0tLVxcblwiLFxuICAgICAgICAgICAgICAgIFwiXFxuKioqXFxuXCIsXG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgYWxvbmcgZGlyZWN0aXZlIG1hcmtlcnNcbiAgICAgICAgICAgICAgICBcIlxcbi4uIFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGJ5IHRoZSBub3JtYWwgdHlwZSBvZiBsaW5lc1xuICAgICAgICAgICAgICAgIFwiXFxuXFxuXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5cIixcbiAgICAgICAgICAgICAgICBcIiBcIixcbiAgICAgICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsYW5ndWFnZSA9PT0gXCJydWJ5XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgYWxvbmcgbWV0aG9kIGRlZmluaXRpb25zXG4gICAgICAgICAgICAgICAgXCJcXG5kZWYgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5jbGFzcyBcIixcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBhbG9uZyBjb250cm9sIGZsb3cgc3RhdGVtZW50c1xuICAgICAgICAgICAgICAgIFwiXFxuaWYgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG51bmxlc3MgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG53aGlsZSBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmZvciBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmRvIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuYmVnaW4gXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5yZXNjdWUgXCIsXG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgYnkgdGhlIG5vcm1hbCB0eXBlIG9mIGxpbmVzXG4gICAgICAgICAgICAgICAgXCJcXG5cXG5cIixcbiAgICAgICAgICAgICAgICBcIlxcblwiLFxuICAgICAgICAgICAgICAgIFwiIFwiLFxuICAgICAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxhbmd1YWdlID09PSBcInJ1c3RcIikge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBhbG9uZyBmdW5jdGlvbiBkZWZpbml0aW9uc1xuICAgICAgICAgICAgICAgIFwiXFxuZm4gXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5jb25zdCBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmxldCBcIixcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBhbG9uZyBjb250cm9sIGZsb3cgc3RhdGVtZW50c1xuICAgICAgICAgICAgICAgIFwiXFxuaWYgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG53aGlsZSBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmZvciBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmxvb3AgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5tYXRjaCBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmNvbnN0IFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGJ5IHRoZSBub3JtYWwgdHlwZSBvZiBsaW5lc1xuICAgICAgICAgICAgICAgIFwiXFxuXFxuXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5cIixcbiAgICAgICAgICAgICAgICBcIiBcIixcbiAgICAgICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsYW5ndWFnZSA9PT0gXCJzY2FsYVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIGNsYXNzIGRlZmluaXRpb25zXG4gICAgICAgICAgICAgICAgXCJcXG5jbGFzcyBcIixcbiAgICAgICAgICAgICAgICBcIlxcbm9iamVjdCBcIixcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBhbG9uZyBtZXRob2QgZGVmaW5pdGlvbnNcbiAgICAgICAgICAgICAgICBcIlxcbmRlZiBcIixcbiAgICAgICAgICAgICAgICBcIlxcbnZhbCBcIixcbiAgICAgICAgICAgICAgICBcIlxcbnZhciBcIixcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBhbG9uZyBjb250cm9sIGZsb3cgc3RhdGVtZW50c1xuICAgICAgICAgICAgICAgIFwiXFxuaWYgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5mb3IgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG53aGlsZSBcIixcbiAgICAgICAgICAgICAgICBcIlxcbm1hdGNoIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuY2FzZSBcIixcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBieSB0aGUgbm9ybWFsIHR5cGUgb2YgbGluZXNcbiAgICAgICAgICAgICAgICBcIlxcblxcblwiLFxuICAgICAgICAgICAgICAgIFwiXFxuXCIsXG4gICAgICAgICAgICAgICAgXCIgXCIsXG4gICAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGFuZ3VhZ2UgPT09IFwic3dpZnRcIikge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBhbG9uZyBmdW5jdGlvbiBkZWZpbml0aW9uc1xuICAgICAgICAgICAgICAgIFwiXFxuZnVuYyBcIixcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBhbG9uZyBjbGFzcyBkZWZpbml0aW9uc1xuICAgICAgICAgICAgICAgIFwiXFxuY2xhc3MgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5zdHJ1Y3QgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5lbnVtIFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIGNvbnRyb2wgZmxvdyBzdGF0ZW1lbnRzXG4gICAgICAgICAgICAgICAgXCJcXG5pZiBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmZvciBcIixcbiAgICAgICAgICAgICAgICBcIlxcbndoaWxlIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuZG8gXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5zd2l0Y2ggXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5jYXNlIFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGJ5IHRoZSBub3JtYWwgdHlwZSBvZiBsaW5lc1xuICAgICAgICAgICAgICAgIFwiXFxuXFxuXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5cIixcbiAgICAgICAgICAgICAgICBcIiBcIixcbiAgICAgICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsYW5ndWFnZSA9PT0gXCJtYXJrZG93blwiKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIC8vIEZpcnN0LCB0cnkgdG8gc3BsaXQgYWxvbmcgTWFya2Rvd24gaGVhZGluZ3MgKHN0YXJ0aW5nIHdpdGggbGV2ZWwgMilcbiAgICAgICAgICAgICAgICBcIlxcbiMjIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuIyMjIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuIyMjIyBcIixcbiAgICAgICAgICAgICAgICBcIlxcbiMjIyMjIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuIyMjIyMjIFwiLFxuICAgICAgICAgICAgICAgIC8vIE5vdGUgdGhlIGFsdGVybmF0aXZlIHN5bnRheCBmb3IgaGVhZGluZ3MgKGJlbG93KSBpcyBub3QgaGFuZGxlZCBoZXJlXG4gICAgICAgICAgICAgICAgLy8gSGVhZGluZyBsZXZlbCAyXG4gICAgICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICAgICAgLy8gRW5kIG9mIGNvZGUgYmxvY2tcbiAgICAgICAgICAgICAgICBcImBgYFxcblxcblwiLFxuICAgICAgICAgICAgICAgIC8vIEhvcml6b250YWwgbGluZXNcbiAgICAgICAgICAgICAgICBcIlxcblxcbioqKlxcblxcblwiLFxuICAgICAgICAgICAgICAgIFwiXFxuXFxuLS0tXFxuXFxuXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5cXG5fX19cXG5cXG5cIixcbiAgICAgICAgICAgICAgICAvLyBOb3RlIHRoYXQgdGhpcyBzcGxpdHRlciBkb2Vzbid0IGhhbmRsZSBob3Jpem9udGFsIGxpbmVzIGRlZmluZWRcbiAgICAgICAgICAgICAgICAvLyBieSAqdGhyZWUgb3IgbW9yZSogb2YgKioqLCAtLS0sIG9yIF9fXywgYnV0IHRoaXMgaXMgbm90IGhhbmRsZWRcbiAgICAgICAgICAgICAgICBcIlxcblxcblwiLFxuICAgICAgICAgICAgICAgIFwiXFxuXCIsXG4gICAgICAgICAgICAgICAgXCIgXCIsXG4gICAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGFuZ3VhZ2UgPT09IFwibGF0ZXhcIikge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAvLyBGaXJzdCwgdHJ5IHRvIHNwbGl0IGFsb25nIExhdGV4IHNlY3Rpb25zXG4gICAgICAgICAgICAgICAgXCJcXG5cXFxcY2hhcHRlcntcIixcbiAgICAgICAgICAgICAgICBcIlxcblxcXFxzZWN0aW9ue1wiLFxuICAgICAgICAgICAgICAgIFwiXFxuXFxcXHN1YnNlY3Rpb257XCIsXG4gICAgICAgICAgICAgICAgXCJcXG5cXFxcc3Vic3Vic2VjdGlvbntcIixcbiAgICAgICAgICAgICAgICAvLyBOb3cgc3BsaXQgYnkgZW52aXJvbm1lbnRzXG4gICAgICAgICAgICAgICAgXCJcXG5cXFxcYmVnaW57ZW51bWVyYXRlfVwiLFxuICAgICAgICAgICAgICAgIFwiXFxuXFxcXGJlZ2lue2l0ZW1pemV9XCIsXG4gICAgICAgICAgICAgICAgXCJcXG5cXFxcYmVnaW57ZGVzY3JpcHRpb259XCIsXG4gICAgICAgICAgICAgICAgXCJcXG5cXFxcYmVnaW57bGlzdH1cIixcbiAgICAgICAgICAgICAgICBcIlxcblxcXFxiZWdpbntxdW90ZX1cIixcbiAgICAgICAgICAgICAgICBcIlxcblxcXFxiZWdpbntxdW90YXRpb259XCIsXG4gICAgICAgICAgICAgICAgXCJcXG5cXFxcYmVnaW57dmVyc2V9XCIsXG4gICAgICAgICAgICAgICAgXCJcXG5cXFxcYmVnaW57dmVyYmF0aW19XCIsXG4gICAgICAgICAgICAgICAgLy8gTm93IHNwbGl0IGJ5IG1hdGggZW52aXJvbm1lbnRzXG4gICAgICAgICAgICAgICAgXCJcXG5cXFxcYmVnaW57YWxpZ259XCIsXG4gICAgICAgICAgICAgICAgXCIkJFwiLFxuICAgICAgICAgICAgICAgIFwiJFwiLFxuICAgICAgICAgICAgICAgIC8vIE5vdyBzcGxpdCBieSB0aGUgbm9ybWFsIHR5cGUgb2YgbGluZXNcbiAgICAgICAgICAgICAgICBcIlxcblxcblwiLFxuICAgICAgICAgICAgICAgIFwiXFxuXCIsXG4gICAgICAgICAgICAgICAgXCIgXCIsXG4gICAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGFuZ3VhZ2UgPT09IFwiaHRtbFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIC8vIEZpcnN0LCB0cnkgdG8gc3BsaXQgYWxvbmcgSFRNTCB0YWdzXG4gICAgICAgICAgICAgICAgXCI8Ym9keT5cIixcbiAgICAgICAgICAgICAgICBcIjxkaXY+XCIsXG4gICAgICAgICAgICAgICAgXCI8cD5cIixcbiAgICAgICAgICAgICAgICBcIjxicj5cIixcbiAgICAgICAgICAgICAgICBcIjxsaT5cIixcbiAgICAgICAgICAgICAgICBcIjxoMT5cIixcbiAgICAgICAgICAgICAgICBcIjxoMj5cIixcbiAgICAgICAgICAgICAgICBcIjxoMz5cIixcbiAgICAgICAgICAgICAgICBcIjxoND5cIixcbiAgICAgICAgICAgICAgICBcIjxoNT5cIixcbiAgICAgICAgICAgICAgICBcIjxoNj5cIixcbiAgICAgICAgICAgICAgICBcIjxzcGFuPlwiLFxuICAgICAgICAgICAgICAgIFwiPHRhYmxlPlwiLFxuICAgICAgICAgICAgICAgIFwiPHRyPlwiLFxuICAgICAgICAgICAgICAgIFwiPHRkPlwiLFxuICAgICAgICAgICAgICAgIFwiPHRoPlwiLFxuICAgICAgICAgICAgICAgIFwiPHVsPlwiLFxuICAgICAgICAgICAgICAgIFwiPG9sPlwiLFxuICAgICAgICAgICAgICAgIFwiPGhlYWRlcj5cIixcbiAgICAgICAgICAgICAgICBcIjxmb290ZXI+XCIsXG4gICAgICAgICAgICAgICAgXCI8bmF2PlwiLFxuICAgICAgICAgICAgICAgIC8vIEhlYWRcbiAgICAgICAgICAgICAgICBcIjxoZWFkPlwiLFxuICAgICAgICAgICAgICAgIFwiPHN0eWxlPlwiLFxuICAgICAgICAgICAgICAgIFwiPHNjcmlwdD5cIixcbiAgICAgICAgICAgICAgICBcIjxtZXRhPlwiLFxuICAgICAgICAgICAgICAgIFwiPHRpdGxlPlwiLFxuICAgICAgICAgICAgICAgIC8vIE5vcm1hbCB0eXBlIG9mIGxpbmVzXG4gICAgICAgICAgICAgICAgXCIgXCIsXG4gICAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGFuZ3VhZ2UgPT09IFwic29sXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgYWxvbmcgY29tcGlsZXIgaW5mb3JtYXRpb25zIGRlZmluaXRpb25zXG4gICAgICAgICAgICAgICAgXCJcXG5wcmFnbWEgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG51c2luZyBcIixcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBhbG9uZyBjb250cmFjdCBkZWZpbml0aW9uc1xuICAgICAgICAgICAgICAgIFwiXFxuY29udHJhY3QgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5pbnRlcmZhY2UgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5saWJyYXJ5IFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIG1ldGhvZCBkZWZpbml0aW9uc1xuICAgICAgICAgICAgICAgIFwiXFxuY29uc3RydWN0b3IgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG50eXBlIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuZnVuY3Rpb24gXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5ldmVudCBcIixcbiAgICAgICAgICAgICAgICBcIlxcbm1vZGlmaWVyIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuZXJyb3IgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5zdHJ1Y3QgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5lbnVtIFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIGNvbnRyb2wgZmxvdyBzdGF0ZW1lbnRzXG4gICAgICAgICAgICAgICAgXCJcXG5pZiBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmZvciBcIixcbiAgICAgICAgICAgICAgICBcIlxcbndoaWxlIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuZG8gd2hpbGUgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5hc3NlbWJseSBcIixcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBieSB0aGUgbm9ybWFsIHR5cGUgb2YgbGluZXNcbiAgICAgICAgICAgICAgICBcIlxcblxcblwiLFxuICAgICAgICAgICAgICAgIFwiXFxuXCIsXG4gICAgICAgICAgICAgICAgXCIgXCIsXG4gICAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYExhbmd1YWdlICR7bGFuZ3VhZ2V9IGlzIG5vdCBzdXBwb3J0ZWQuYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIHNwbGl0dGVyIHdoaWNoIGxvb2tzIGF0IHRva2Vucy5cbiAqL1xuZXhwb3J0IGNsYXNzIFRva2VuVGV4dFNwbGl0dGVyIGV4dGVuZHMgVGV4dFNwbGl0dGVyIHtcbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiVG9rZW5UZXh0U3BsaXR0ZXJcIjtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkcyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImVuY29kaW5nTmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJhbGxvd2VkU3BlY2lhbFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJkaXNhbGxvd2VkU3BlY2lhbFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0b2tlbml6ZXJcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbmNvZGluZ05hbWUgPSBmaWVsZHM/LmVuY29kaW5nTmFtZSA/PyBcImdwdDJcIjtcbiAgICAgICAgdGhpcy5hbGxvd2VkU3BlY2lhbCA9IGZpZWxkcz8uYWxsb3dlZFNwZWNpYWwgPz8gW107XG4gICAgICAgIHRoaXMuZGlzYWxsb3dlZFNwZWNpYWwgPSBmaWVsZHM/LmRpc2FsbG93ZWRTcGVjaWFsID8/IFwiYWxsXCI7XG4gICAgfVxuICAgIGFzeW5jIHNwbGl0VGV4dCh0ZXh0KSB7XG4gICAgICAgIGlmICghdGhpcy50b2tlbml6ZXIpIHtcbiAgICAgICAgICAgIHRoaXMudG9rZW5pemVyID0gYXdhaXQgZ2V0RW5jb2RpbmcodGhpcy5lbmNvZGluZ05hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNwbGl0cyA9IFtdO1xuICAgICAgICBjb25zdCBpbnB1dF9pZHMgPSB0aGlzLnRva2VuaXplci5lbmNvZGUodGV4dCwgdGhpcy5hbGxvd2VkU3BlY2lhbCwgdGhpcy5kaXNhbGxvd2VkU3BlY2lhbCk7XG4gICAgICAgIGxldCBzdGFydF9pZHggPSAwO1xuICAgICAgICB3aGlsZSAoc3RhcnRfaWR4IDwgaW5wdXRfaWRzLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKHN0YXJ0X2lkeCA+IDApIHtcbiAgICAgICAgICAgICAgICBzdGFydF9pZHggLT0gdGhpcy5jaHVua092ZXJsYXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBlbmRfaWR4ID0gTWF0aC5taW4oc3RhcnRfaWR4ICsgdGhpcy5jaHVua1NpemUsIGlucHV0X2lkcy5sZW5ndGgpO1xuICAgICAgICAgICAgY29uc3QgY2h1bmtfaWRzID0gaW5wdXRfaWRzLnNsaWNlKHN0YXJ0X2lkeCwgZW5kX2lkeCk7XG4gICAgICAgICAgICBzcGxpdHMucHVzaCh0aGlzLnRva2VuaXplci5kZWNvZGUoY2h1bmtfaWRzKSk7XG4gICAgICAgICAgICBzdGFydF9pZHggPSBlbmRfaWR4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzcGxpdHM7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE1hcmtkb3duVGV4dFNwbGl0dGVyIGV4dGVuZHMgUmVjdXJzaXZlQ2hhcmFjdGVyVGV4dFNwbGl0dGVyIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgLi4uZmllbGRzLFxuICAgICAgICAgICAgc2VwYXJhdG9yczogUmVjdXJzaXZlQ2hhcmFjdGVyVGV4dFNwbGl0dGVyLmdldFNlcGFyYXRvcnNGb3JMYW5ndWFnZShcIm1hcmtkb3duXCIpLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTGF0ZXhUZXh0U3BsaXR0ZXIgZXh0ZW5kcyBSZWN1cnNpdmVDaGFyYWN0ZXJUZXh0U3BsaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICAuLi5maWVsZHMsXG4gICAgICAgICAgICBzZXBhcmF0b3JzOiBSZWN1cnNpdmVDaGFyYWN0ZXJUZXh0U3BsaXR0ZXIuZ2V0U2VwYXJhdG9yc0Zvckxhbmd1YWdlKFwibGF0ZXhcIiksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJEb2N1bWVudCIsIkJhc2VEb2N1bWVudFRyYW5zZm9ybWVyIiwiZ2V0RW5jb2RpbmciLCJUZXh0U3BsaXR0ZXIiLCJjb25zdHJ1Y3RvciIsImZpZWxkcyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJjaHVua1NpemUiLCJjaHVua092ZXJsYXAiLCJrZWVwU2VwYXJhdG9yIiwibGVuZ3RoRnVuY3Rpb24iLCJ0ZXh0IiwibGVuZ3RoIiwiRXJyb3IiLCJ0cmFuc2Zvcm1Eb2N1bWVudHMiLCJkb2N1bWVudHMiLCJjaHVua0hlYWRlck9wdGlvbnMiLCJzcGxpdERvY3VtZW50cyIsInNwbGl0T25TZXBhcmF0b3IiLCJzZXBhcmF0b3IiLCJzcGxpdHMiLCJyZWdleEVzY2FwZWRTZXBhcmF0b3IiLCJyZXBsYWNlIiwic3BsaXQiLCJSZWdFeHAiLCJmaWx0ZXIiLCJzIiwiY3JlYXRlRG9jdW1lbnRzIiwidGV4dHMiLCJtZXRhZGF0YXMiLCJfbWV0YWRhdGFzIiwiQXJyYXkiLCJtYXAiLCJjaHVua0hlYWRlciIsImNodW5rT3ZlcmxhcEhlYWRlciIsImFwcGVuZENodW5rT3ZlcmxhcEhlYWRlciIsImkiLCJsaW5lQ291bnRlckluZGV4IiwicHJldkNodW5rIiwiaW5kZXhQcmV2Q2h1bmsiLCJjaHVuayIsInNwbGl0VGV4dCIsInBhZ2VDb250ZW50IiwiaW5kZXhDaHVuayIsImluZGV4T2YiLCJuZXdMaW5lc0JlZm9yZUZpcnN0Q2h1bmsiLCJudW1iZXJPZk5ld0xpbmVzIiwiaW5kZXhFbmRQcmV2Q2h1bmsiLCJudW1iZXJPZkludGVybWVkaWF0ZU5ld0xpbmVzIiwibmV3TGluZXNDb3VudCIsImxvYyIsImxpbmVzIiwiZnJvbSIsInRvIiwibWV0YWRhdGFXaXRoTGluZXNOdW1iZXIiLCJwdXNoIiwibWV0YWRhdGEiLCJzdGFydCIsImVuZCIsInRleHRTZWN0aW9uIiwic2xpY2UiLCJtYXRjaCIsInNlbGVjdGVkRG9jdW1lbnRzIiwiZG9jIiwidW5kZWZpbmVkIiwiam9pbkRvY3MiLCJkb2NzIiwiam9pbiIsInRyaW0iLCJtZXJnZVNwbGl0cyIsImN1cnJlbnREb2MiLCJ0b3RhbCIsImQiLCJfbGVuIiwiY29uc29sZSIsIndhcm4iLCJzaGlmdCIsIkNoYXJhY3RlclRleHRTcGxpdHRlciIsImxjX25hbWUiLCJTdXBwb3J0ZWRUZXh0U3BsaXR0ZXJMYW5ndWFnZXMiLCJSZWN1cnNpdmVDaGFyYWN0ZXJUZXh0U3BsaXR0ZXIiLCJzZXBhcmF0b3JzIiwiX3NwbGl0VGV4dCIsImZpbmFsQ2h1bmtzIiwibmV3U2VwYXJhdG9ycyIsImluY2x1ZGVzIiwiZ29vZFNwbGl0cyIsIl9zZXBhcmF0b3IiLCJtZXJnZWRUZXh0Iiwib3RoZXJJbmZvIiwiZnJvbUxhbmd1YWdlIiwibGFuZ3VhZ2UiLCJvcHRpb25zIiwiZ2V0U2VwYXJhdG9yc0Zvckxhbmd1YWdlIiwiVG9rZW5UZXh0U3BsaXR0ZXIiLCJlbmNvZGluZ05hbWUiLCJhbGxvd2VkU3BlY2lhbCIsImRpc2FsbG93ZWRTcGVjaWFsIiwidG9rZW5pemVyIiwiaW5wdXRfaWRzIiwiZW5jb2RlIiwic3RhcnRfaWR4IiwiZW5kX2lkeCIsIk1hdGgiLCJtaW4iLCJjaHVua19pZHMiLCJkZWNvZGUiLCJNYXJrZG93blRleHRTcGxpdHRlciIsIkxhdGV4VGV4dFNwbGl0dGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/text_splitter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/document_loaders/base.js":
/*!*********************************************************!*\
  !*** ./node_modules/langchain/document_loaders/base.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseDocumentLoader: () => (/* reexport safe */ _dist_document_loaders_base_js__WEBPACK_IMPORTED_MODULE_0__.BaseDocumentLoader)\n/* harmony export */ });\n/* harmony import */ var _dist_document_loaders_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/document_loaders/base.js */ \"(rsc)/./node_modules/langchain/dist/document_loaders/base.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2RvY3VtZW50X2xvYWRlcnMvYmFzZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFnRCIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kb2N1bWVudF9sb2FkZXJzL2Jhc2UuanM/ZTVkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuLi9kaXN0L2RvY3VtZW50X2xvYWRlcnMvYmFzZS5qcyciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/document_loaders/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/document_loaders/fs/directory.js":
/*!*****************************************************************!*\
  !*** ./node_modules/langchain/document_loaders/fs/directory.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DirectoryLoader: () => (/* reexport safe */ _dist_document_loaders_fs_directory_js__WEBPACK_IMPORTED_MODULE_0__.DirectoryLoader),\n/* harmony export */   UnknownHandling: () => (/* reexport safe */ _dist_document_loaders_fs_directory_js__WEBPACK_IMPORTED_MODULE_0__.UnknownHandling)\n/* harmony export */ });\n/* harmony import */ var _dist_document_loaders_fs_directory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../dist/document_loaders/fs/directory.js */ \"(rsc)/./node_modules/langchain/dist/document_loaders/fs/directory.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2RvY3VtZW50X2xvYWRlcnMvZnMvZGlyZWN0b3J5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEyRCIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kb2N1bWVudF9sb2FkZXJzL2ZzL2RpcmVjdG9yeS5qcz84ZDJkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4uLy4uL2Rpc3QvZG9jdW1lbnRfbG9hZGVycy9mcy9kaXJlY3RvcnkuanMnIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/document_loaders/fs/directory.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/document_loaders/fs/unstructured.js":
/*!********************************************************************!*\
  !*** ./node_modules/langchain/document_loaders/fs/unstructured.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UnknownHandling: () => (/* reexport safe */ _dist_document_loaders_fs_unstructured_js__WEBPACK_IMPORTED_MODULE_0__.UnknownHandling),\n/* harmony export */   UnstructuredDirectoryLoader: () => (/* reexport safe */ _dist_document_loaders_fs_unstructured_js__WEBPACK_IMPORTED_MODULE_0__.UnstructuredDirectoryLoader),\n/* harmony export */   UnstructuredLoader: () => (/* reexport safe */ _dist_document_loaders_fs_unstructured_js__WEBPACK_IMPORTED_MODULE_0__.UnstructuredLoader)\n/* harmony export */ });\n/* harmony import */ var _dist_document_loaders_fs_unstructured_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../dist/document_loaders/fs/unstructured.js */ \"(rsc)/./node_modules/langchain/dist/document_loaders/fs/unstructured.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2RvY3VtZW50X2xvYWRlcnMvZnMvdW5zdHJ1Y3R1cmVkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBOEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZG9jdW1lbnRfbG9hZGVycy9mcy91bnN0cnVjdHVyZWQuanM/YTRjZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuLi8uLi9kaXN0L2RvY3VtZW50X2xvYWRlcnMvZnMvdW5zdHJ1Y3R1cmVkLmpzJyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/document_loaders/fs/unstructured.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/callbacks/base.js":
/*!************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/callbacks/base.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseCallbackHandler: () => (/* binding */ BaseCallbackHandler)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../load/serializable.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/load/serializable.js\");\n/* harmony import */ var _utils_env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/env.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/env.js\");\n\n\n\n/**\n * Abstract class that provides a set of optional methods that can be\n * overridden in derived classes to handle various events during the\n * execution of a LangChain application.\n */ class BaseCallbackHandlerMethodsClass {\n}\n/**\n * Abstract base class for creating callback handlers in the LangChain\n * framework. It provides a set of optional methods that can be overridden\n * in derived classes to handle various events during the execution of a\n * LangChain application.\n */ class BaseCallbackHandler extends BaseCallbackHandlerMethodsClass {\n    get lc_namespace() {\n        return [\n            \"langchain_core\",\n            \"callbacks\",\n            this.name\n        ];\n    }\n    get lc_secrets() {\n        return undefined;\n    }\n    get lc_attributes() {\n        return undefined;\n    }\n    get lc_aliases() {\n        return undefined;\n    }\n    /**\n     * The name of the serializable. Override to provide an alias or\n     * to preserve the serialized module name in minified environments.\n     *\n     * Implemented as a static method to support loading logic.\n     */ static lc_name() {\n        return this.name;\n    }\n    /**\n     * The final serialized identifier for the module.\n     */ get lc_id() {\n        return [\n            ...this.lc_namespace,\n            (0,_load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.get_lc_unique_name)(this.constructor)\n        ];\n    }\n    constructor(input){\n        super();\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"ignoreLLM\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreAgent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreRetriever\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"awaitHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_CALLBACKS_BACKGROUND\") !== \"true\"\n        });\n        this.lc_kwargs = input || {};\n        if (input) {\n            this.ignoreLLM = input.ignoreLLM ?? this.ignoreLLM;\n            this.ignoreChain = input.ignoreChain ?? this.ignoreChain;\n            this.ignoreAgent = input.ignoreAgent ?? this.ignoreAgent;\n            this.ignoreRetriever = input.ignoreRetriever ?? this.ignoreRetriever;\n            this.awaitHandlers = input._awaitHandler ?? this.awaitHandlers;\n        }\n    }\n    copy() {\n        return new this.constructor(this);\n    }\n    toJSON() {\n        return _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable.prototype.toJSON.call(this);\n    }\n    toJSONNotImplemented() {\n        return _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable.prototype.toJSONNotImplemented.call(this);\n    }\n    static fromMethods(methods) {\n        class Handler extends BaseCallbackHandler {\n            constructor(){\n                super();\n                Object.defineProperty(this, \"name\", {\n                    enumerable: true,\n                    configurable: true,\n                    writable: true,\n                    value: uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"]()\n                });\n                Object.assign(this, methods);\n            }\n        }\n        return new Handler();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/callbacks/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/callbacks/manager.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/callbacks/manager.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseCallbackManager: () => (/* binding */ BaseCallbackManager),\n/* harmony export */   CallbackManager: () => (/* binding */ CallbackManager),\n/* harmony export */   CallbackManagerForChainRun: () => (/* binding */ CallbackManagerForChainRun),\n/* harmony export */   CallbackManagerForLLMRun: () => (/* binding */ CallbackManagerForLLMRun),\n/* harmony export */   CallbackManagerForRetrieverRun: () => (/* binding */ CallbackManagerForRetrieverRun),\n/* harmony export */   CallbackManagerForToolRun: () => (/* binding */ CallbackManagerForToolRun),\n/* harmony export */   TraceGroup: () => (/* binding */ TraceGroup),\n/* harmony export */   ensureHandler: () => (/* binding */ ensureHandler),\n/* harmony export */   parseCallbackConfigArg: () => (/* binding */ parseCallbackConfigArg),\n/* harmony export */   traceAsGroup: () => (/* binding */ traceAsGroup)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/callbacks/base.js\");\n/* harmony import */ var _tracers_console_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tracers/console.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/tracers/console.js\");\n/* harmony import */ var _tracers_initialize_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tracers/initialize.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/tracers/initialize.js\");\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../messages/index.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _utils_env_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/env.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/env.js\");\n/* harmony import */ var _tracers_tracer_langchain_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../tracers/tracer_langchain.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/tracers/tracer_langchain.js\");\n/* harmony import */ var _promises_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./promises.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/callbacks/promises.js\");\n\n\n\n\n\n\n\n\nif (/* #__PURE__ */ (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"LANGCHAIN_TRACING_V2\") === \"true\" && /* #__PURE__ */ (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"LANGCHAIN_CALLBACKS_BACKGROUND\") !== \"true\") {\n    /* #__PURE__ */ console.warn([\n        \"[WARN]: You have enabled LangSmith tracing without backgrounding callbacks.\",\n        \"[WARN]: If you are not using a serverless environment where you must wait for tracing calls to finish,\",\n        `[WARN]: we suggest setting \"process.env.LANGCHAIN_CALLBACKS_BACKGROUND=true\" to avoid additional latency.`\n    ].join(\"\\n\"));\n}\nfunction parseCallbackConfigArg(arg) {\n    if (!arg) {\n        return {};\n    } else if (Array.isArray(arg) || \"name\" in arg) {\n        return {\n            callbacks: arg\n        };\n    } else {\n        return arg;\n    }\n}\n/**\n * Manage callbacks from different components of LangChain.\n */ class BaseCallbackManager {\n    setHandler(handler) {\n        return this.setHandlers([\n            handler\n        ]);\n    }\n}\n/**\n * Base class for run manager in LangChain.\n */ class BaseRunManager {\n    constructor(runId, handlers, inheritableHandlers, tags, inheritableTags, metadata, inheritableMetadata, _parentRunId){\n        Object.defineProperty(this, \"runId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: runId\n        });\n        Object.defineProperty(this, \"handlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: handlers\n        });\n        Object.defineProperty(this, \"inheritableHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: inheritableHandlers\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: tags\n        });\n        Object.defineProperty(this, \"inheritableTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: inheritableTags\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: metadata\n        });\n        Object.defineProperty(this, \"inheritableMetadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: inheritableMetadata\n        });\n        Object.defineProperty(this, \"_parentRunId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _parentRunId\n        });\n    }\n    async handleText(text) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                try {\n                    await handler.handleText?.(text, this.runId, this._parentRunId, this.tags);\n                } catch (err) {\n                    console.error(`Error in handler ${handler.constructor.name}, handleText: ${err}`);\n                }\n            }, handler.awaitHandlers)));\n    }\n}\n/**\n * Manages callbacks for retriever runs.\n */ class CallbackManagerForRetrieverRun extends BaseRunManager {\n    getChild(tag) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const manager = new CallbackManager(this.runId);\n        manager.setHandlers(this.inheritableHandlers);\n        manager.addTags(this.inheritableTags);\n        manager.addMetadata(this.inheritableMetadata);\n        if (tag) {\n            manager.addTags([\n                tag\n            ], false);\n        }\n        return manager;\n    }\n    async handleRetrieverEnd(documents) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreRetriever) {\n                    try {\n                        await handler.handleRetrieverEnd?.(documents, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleRetriever`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleRetrieverError(err) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreRetriever) {\n                    try {\n                        await handler.handleRetrieverError?.(err, this.runId, this._parentRunId, this.tags);\n                    } catch (error) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleRetrieverError: ${error}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\nclass CallbackManagerForLLMRun extends BaseRunManager {\n    async handleLLMNewToken(token, idx, _runId, _parentRunId, _tags, fields) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreLLM) {\n                    try {\n                        await handler.handleLLMNewToken?.(token, idx ?? {\n                            prompt: 0,\n                            completion: 0\n                        }, this.runId, this._parentRunId, this.tags, fields);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleLLMNewToken: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleLLMError(err) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreLLM) {\n                    try {\n                        await handler.handleLLMError?.(err, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleLLMError: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleLLMEnd(output) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreLLM) {\n                    try {\n                        await handler.handleLLMEnd?.(output, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleLLMEnd: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\nclass CallbackManagerForChainRun extends BaseRunManager {\n    getChild(tag) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const manager = new CallbackManager(this.runId);\n        manager.setHandlers(this.inheritableHandlers);\n        manager.addTags(this.inheritableTags);\n        manager.addMetadata(this.inheritableMetadata);\n        if (tag) {\n            manager.addTags([\n                tag\n            ], false);\n        }\n        return manager;\n    }\n    async handleChainError(err, _runId, _parentRunId, _tags, kwargs) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreChain) {\n                    try {\n                        await handler.handleChainError?.(err, this.runId, this._parentRunId, this.tags, kwargs);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleChainError: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleChainEnd(output, _runId, _parentRunId, _tags, kwargs) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreChain) {\n                    try {\n                        await handler.handleChainEnd?.(output, this.runId, this._parentRunId, this.tags, kwargs);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleChainEnd: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleAgentAction(action) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleAgentAction?.(action, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleAgentAction: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleAgentEnd(action) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleAgentEnd?.(action, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleAgentEnd: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\nclass CallbackManagerForToolRun extends BaseRunManager {\n    getChild(tag) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const manager = new CallbackManager(this.runId);\n        manager.setHandlers(this.inheritableHandlers);\n        manager.addTags(this.inheritableTags);\n        manager.addMetadata(this.inheritableMetadata);\n        if (tag) {\n            manager.addTags([\n                tag\n            ], false);\n        }\n        return manager;\n    }\n    async handleToolError(err) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleToolError?.(err, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleToolError: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleToolEnd(output) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleToolEnd?.(output, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleToolEnd: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\n/**\n * @example\n * ```typescript\n * const prompt = PromptTemplate.fromTemplate(\"What is the answer to {question}?\");\n *\n * // Example of using LLMChain with OpenAI and a simple prompt\n * const chain = new LLMChain({\n *   llm: new ChatOpenAI({ temperature: 0.9 }),\n *   prompt,\n * });\n *\n * // Running the chain with a single question\n * const result = await chain.call({\n *   question: \"What is the airspeed velocity of an unladen swallow?\",\n * });\n * console.log(\"The answer is:\", result);\n * ```\n */ class CallbackManager extends BaseCallbackManager {\n    constructor(parentRunId, options){\n        super();\n        Object.defineProperty(this, \"handlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"inheritableHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"inheritableTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"inheritableMetadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"callback_manager\"\n        });\n        Object.defineProperty(this, \"_parentRunId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.handlers = options?.handlers ?? this.handlers;\n        this.inheritableHandlers = options?.inheritableHandlers ?? this.inheritableHandlers;\n        this.tags = options?.tags ?? this.tags;\n        this.inheritableTags = options?.inheritableTags ?? this.inheritableTags;\n        this.metadata = options?.metadata ?? this.metadata;\n        this.inheritableMetadata = options?.inheritableMetadata ?? this.inheritableMetadata;\n        this._parentRunId = parentRunId;\n    }\n    /**\n     * Gets the parent run ID, if any.\n     *\n     * @returns The parent run ID.\n     */ getParentRunId() {\n        return this._parentRunId;\n    }\n    async handleLLMStart(llm, prompts, runId = undefined, _parentRunId = undefined, extraParams = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        return Promise.all(prompts.map(async (prompt, idx)=>{\n            // Can't have duplicate runs with the same run ID (if provided)\n            const runId_ = idx === 0 && runId ? runId : (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])();\n            await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                    if (!handler.ignoreLLM) {\n                        try {\n                            await handler.handleLLMStart?.(llm, [\n                                prompt\n                            ], runId_, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                        } catch (err) {\n                            console.error(`Error in handler ${handler.constructor.name}, handleLLMStart: ${err}`);\n                        }\n                    }\n                }, handler.awaitHandlers)));\n            return new CallbackManagerForLLMRun(runId_, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n        }));\n    }\n    async handleChatModelStart(llm, messages, runId = undefined, _parentRunId = undefined, extraParams = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        return Promise.all(messages.map(async (messageGroup, idx)=>{\n            // Can't have duplicate runs with the same run ID (if provided)\n            const runId_ = idx === 0 && runId ? runId : (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])();\n            await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                    if (!handler.ignoreLLM) {\n                        try {\n                            if (handler.handleChatModelStart) {\n                                await handler.handleChatModelStart?.(llm, [\n                                    messageGroup\n                                ], runId_, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                            } else if (handler.handleLLMStart) {\n                                const messageString = (0,_messages_index_js__WEBPACK_IMPORTED_MODULE_3__.getBufferString)(messageGroup);\n                                await handler.handleLLMStart?.(llm, [\n                                    messageString\n                                ], runId_, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                            }\n                        } catch (err) {\n                            console.error(`Error in handler ${handler.constructor.name}, handleLLMStart: ${err}`);\n                        }\n                    }\n                }, handler.awaitHandlers)));\n            return new CallbackManagerForLLMRun(runId_, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n        }));\n    }\n    async handleChainStart(chain, inputs, runId = (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(), runType = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreChain) {\n                    try {\n                        await handler.handleChainStart?.(chain, inputs, runId, this._parentRunId, this.tags, this.metadata, runType, runName);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleChainStart: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n        return new CallbackManagerForChainRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n    }\n    async handleToolStart(tool, input, runId = (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(), _parentRunId = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleToolStart?.(tool, input, runId, this._parentRunId, this.tags, this.metadata, runName);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleToolStart: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n        return new CallbackManagerForToolRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n    }\n    async handleRetrieverStart(retriever, query, runId = (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(), _parentRunId = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreRetriever) {\n                    try {\n                        await handler.handleRetrieverStart?.(retriever, query, runId, this._parentRunId, this.tags, this.metadata, runName);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleRetrieverStart: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n        return new CallbackManagerForRetrieverRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n    }\n    addHandler(handler, inherit = true) {\n        this.handlers.push(handler);\n        if (inherit) {\n            this.inheritableHandlers.push(handler);\n        }\n    }\n    removeHandler(handler) {\n        this.handlers = this.handlers.filter((_handler)=>_handler !== handler);\n        this.inheritableHandlers = this.inheritableHandlers.filter((_handler)=>_handler !== handler);\n    }\n    setHandlers(handlers, inherit = true) {\n        this.handlers = [];\n        this.inheritableHandlers = [];\n        for (const handler of handlers){\n            this.addHandler(handler, inherit);\n        }\n    }\n    addTags(tags, inherit = true) {\n        this.removeTags(tags); // Remove duplicates\n        this.tags.push(...tags);\n        if (inherit) {\n            this.inheritableTags.push(...tags);\n        }\n    }\n    removeTags(tags) {\n        this.tags = this.tags.filter((tag)=>!tags.includes(tag));\n        this.inheritableTags = this.inheritableTags.filter((tag)=>!tags.includes(tag));\n    }\n    addMetadata(metadata, inherit = true) {\n        this.metadata = {\n            ...this.metadata,\n            ...metadata\n        };\n        if (inherit) {\n            this.inheritableMetadata = {\n                ...this.inheritableMetadata,\n                ...metadata\n            };\n        }\n    }\n    removeMetadata(metadata) {\n        for (const key of Object.keys(metadata)){\n            delete this.metadata[key];\n            delete this.inheritableMetadata[key];\n        }\n    }\n    copy(additionalHandlers = [], inherit = true) {\n        const manager = new CallbackManager(this._parentRunId);\n        for (const handler of this.handlers){\n            const inheritable = this.inheritableHandlers.includes(handler);\n            manager.addHandler(handler, inheritable);\n        }\n        for (const tag of this.tags){\n            const inheritable = this.inheritableTags.includes(tag);\n            manager.addTags([\n                tag\n            ], inheritable);\n        }\n        for (const key of Object.keys(this.metadata)){\n            const inheritable = Object.keys(this.inheritableMetadata).includes(key);\n            manager.addMetadata({\n                [key]: this.metadata[key]\n            }, inheritable);\n        }\n        for (const handler of additionalHandlers){\n            if (// Prevent multiple copies of console_callback_handler\n            manager.handlers.filter((h)=>h.name === \"console_callback_handler\").some((h)=>h.name === handler.name)) {\n                continue;\n            }\n            manager.addHandler(handler, inherit);\n        }\n        return manager;\n    }\n    static fromHandlers(handlers) {\n        class Handler extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseCallbackHandler {\n            constructor(){\n                super();\n                Object.defineProperty(this, \"name\", {\n                    enumerable: true,\n                    configurable: true,\n                    writable: true,\n                    value: (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])()\n                });\n                Object.assign(this, handlers);\n            }\n        }\n        const manager = new this();\n        manager.addHandler(new Handler());\n        return manager;\n    }\n    static async configure(inheritableHandlers, localHandlers, inheritableTags, localTags, inheritableMetadata, localMetadata, options) {\n        let callbackManager;\n        if (inheritableHandlers || localHandlers) {\n            if (Array.isArray(inheritableHandlers) || !inheritableHandlers) {\n                callbackManager = new CallbackManager();\n                callbackManager.setHandlers(inheritableHandlers?.map(ensureHandler) ?? [], true);\n            } else {\n                callbackManager = inheritableHandlers;\n            }\n            callbackManager = callbackManager.copy(Array.isArray(localHandlers) ? localHandlers.map(ensureHandler) : localHandlers?.handlers, false);\n        }\n        const verboseEnabled = (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"LANGCHAIN_VERBOSE\") === \"true\" || options?.verbose;\n        const tracingV2Enabled = (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"LANGCHAIN_TRACING_V2\") === \"true\";\n        const tracingEnabled = tracingV2Enabled || ((0,_utils_env_js__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"LANGCHAIN_TRACING\") ?? false);\n        if (verboseEnabled || tracingEnabled) {\n            if (!callbackManager) {\n                callbackManager = new CallbackManager();\n            }\n            if (verboseEnabled && !callbackManager.handlers.some((handler)=>handler.name === _tracers_console_js__WEBPACK_IMPORTED_MODULE_1__.ConsoleCallbackHandler.prototype.name)) {\n                const consoleHandler = new _tracers_console_js__WEBPACK_IMPORTED_MODULE_1__.ConsoleCallbackHandler();\n                callbackManager.addHandler(consoleHandler, true);\n            }\n            if (tracingEnabled && !callbackManager.handlers.some((handler)=>handler.name === \"langchain_tracer\")) {\n                if (tracingV2Enabled) {\n                    callbackManager.addHandler(await (0,_tracers_initialize_js__WEBPACK_IMPORTED_MODULE_2__.getTracingV2CallbackHandler)(), true);\n                }\n            }\n        }\n        if (inheritableTags || localTags) {\n            if (callbackManager) {\n                callbackManager.addTags(inheritableTags ?? []);\n                callbackManager.addTags(localTags ?? [], false);\n            }\n        }\n        if (inheritableMetadata || localMetadata) {\n            if (callbackManager) {\n                callbackManager.addMetadata(inheritableMetadata ?? {});\n                callbackManager.addMetadata(localMetadata ?? {}, false);\n            }\n        }\n        return callbackManager;\n    }\n}\nfunction ensureHandler(handler) {\n    if (\"name\" in handler) {\n        return handler;\n    }\n    return _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseCallbackHandler.fromMethods(handler);\n}\n/**\n * @example\n * ```typescript\n * const prompt = PromptTemplate.fromTemplate(`What is the answer to {question}?`);\n *\n * // Example of using LLMChain to process a series of questions\n * const chain = new LLMChain({\n *   llm: new ChatOpenAI({ temperature: 0.9 }),\n *   prompt,\n * });\n *\n * // Process questions using the chain\n * const processQuestions = async (questions) => {\n *   for (const question of questions) {\n *     const result = await chain.call({ question });\n *     console.log(result);\n *   }\n * };\n *\n * // Example questions\n * const questions = [\n *   \"What is your name?\",\n *   \"What is your quest?\",\n *   \"What is your favorite color?\",\n * ];\n *\n * // Run the example\n * processQuestions(questions).catch(console.error);\n *\n * ```\n */ class TraceGroup {\n    constructor(groupName, options){\n        Object.defineProperty(this, \"groupName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: groupName\n        });\n        Object.defineProperty(this, \"options\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: options\n        });\n        Object.defineProperty(this, \"runManager\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    async getTraceGroupCallbackManager(group_name, inputs, options) {\n        const cb = new _tracers_tracer_langchain_js__WEBPACK_IMPORTED_MODULE_5__.LangChainTracer(options);\n        const cm = await CallbackManager.configure([\n            cb\n        ]);\n        const runManager = await cm?.handleChainStart({\n            lc: 1,\n            type: \"not_implemented\",\n            id: [\n                \"langchain\",\n                \"callbacks\",\n                \"groups\",\n                group_name\n            ]\n        }, inputs ?? {});\n        if (!runManager) {\n            throw new Error(\"Failed to create run group callback manager.\");\n        }\n        return runManager;\n    }\n    async start(inputs) {\n        if (!this.runManager) {\n            this.runManager = await this.getTraceGroupCallbackManager(this.groupName, inputs, this.options);\n        }\n        return this.runManager.getChild();\n    }\n    async error(err) {\n        if (this.runManager) {\n            await this.runManager.handleChainError(err);\n            this.runManager = undefined;\n        }\n    }\n    async end(output) {\n        if (this.runManager) {\n            await this.runManager.handleChainEnd(output ?? {});\n            this.runManager = undefined;\n        }\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _coerceToDict(value, defaultKey) {\n    return value && !Array.isArray(value) && typeof value === \"object\" ? value : {\n        [defaultKey]: value\n    };\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function traceAsGroup(groupOptions, enclosedCode, ...args) {\n    const traceGroup = new TraceGroup(groupOptions.name, groupOptions);\n    const callbackManager = await traceGroup.start({\n        ...args\n    });\n    try {\n        const result = await enclosedCode(callbackManager, ...args);\n        await traceGroup.end(_coerceToDict(result, \"output\"));\n        return result;\n    } catch (err) {\n        await traceGroup.error(err);\n        throw err;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/callbacks/manager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/callbacks/promises.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/callbacks/promises.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   awaitAllCallbacks: () => (/* binding */ awaitAllCallbacks),\n/* harmony export */   consumeCallback: () => (/* binding */ consumeCallback)\n/* harmony export */ });\n/* harmony import */ var p_queue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-queue */ \"(rsc)/./node_modules/p-queue/dist/index.js\");\n\nlet queue;\n/**\n * Creates a queue using the p-queue library. The queue is configured to\n * auto-start and has a concurrency of 1, meaning it will process tasks\n * one at a time.\n */ function createQueue() {\n    const PQueue =  true ? p_queue__WEBPACK_IMPORTED_MODULE_0__[\"default\"] : p_queue__WEBPACK_IMPORTED_MODULE_0__;\n    return new PQueue({\n        autoStart: true,\n        concurrency: 1\n    });\n}\n/**\n * Consume a promise, either adding it to the queue or waiting for it to resolve\n * @param promise Promise to consume\n * @param wait Whether to wait for the promise to resolve or resolve immediately\n */ async function consumeCallback(promiseFn, wait) {\n    if (wait === true) {\n        await promiseFn();\n    } else {\n        if (typeof queue === \"undefined\") {\n            queue = createQueue();\n        }\n        void queue.add(promiseFn);\n    }\n}\n/**\n * Waits for all promises in the queue to resolve. If the queue is\n * undefined, it immediately resolves a promise.\n */ function awaitAllCallbacks() {\n    return typeof queue !== \"undefined\" ? queue.onIdle() : Promise.resolve();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9jYWxsYmFja3MvcHJvbWlzZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWdDO0FBQ2hDLElBQUlDO0FBQ0o7Ozs7Q0FJQyxHQUNELFNBQVNDO0lBQ0wsTUFBTUMsU0FBUyxLQUFzQkgsR0FBR0EsK0NBQWlCLEdBQUdBLG9DQUFTQTtJQUNyRSxPQUFPLElBQUlHLE9BQU87UUFDZEUsV0FBVztRQUNYQyxhQUFhO0lBQ2pCO0FBQ0o7QUFDQTs7OztDQUlDLEdBQ00sZUFBZUMsZ0JBQWdCQyxTQUFTLEVBQUVDLElBQUk7SUFDakQsSUFBSUEsU0FBUyxNQUFNO1FBQ2YsTUFBTUQ7SUFDVixPQUNLO1FBQ0QsSUFBSSxPQUFPUCxVQUFVLGFBQWE7WUFDOUJBLFFBQVFDO1FBQ1o7UUFDQSxLQUFLRCxNQUFNUyxHQUFHLENBQUNGO0lBQ25CO0FBQ0o7QUFDQTs7O0NBR0MsR0FDTSxTQUFTRztJQUNaLE9BQU8sT0FBT1YsVUFBVSxjQUFjQSxNQUFNVyxNQUFNLEtBQUtDLFFBQVFDLE9BQU87QUFDMUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L2NhbGxiYWNrcy9wcm9taXNlcy5qcz9hOTUyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQUXVldWVNb2QgZnJvbSBcInAtcXVldWVcIjtcbmxldCBxdWV1ZTtcbi8qKlxuICogQ3JlYXRlcyBhIHF1ZXVlIHVzaW5nIHRoZSBwLXF1ZXVlIGxpYnJhcnkuIFRoZSBxdWV1ZSBpcyBjb25maWd1cmVkIHRvXG4gKiBhdXRvLXN0YXJ0IGFuZCBoYXMgYSBjb25jdXJyZW5jeSBvZiAxLCBtZWFuaW5nIGl0IHdpbGwgcHJvY2VzcyB0YXNrc1xuICogb25lIGF0IGEgdGltZS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUXVldWUoKSB7XG4gICAgY29uc3QgUFF1ZXVlID0gXCJkZWZhdWx0XCIgaW4gUFF1ZXVlTW9kID8gUFF1ZXVlTW9kLmRlZmF1bHQgOiBQUXVldWVNb2Q7XG4gICAgcmV0dXJuIG5ldyBQUXVldWUoe1xuICAgICAgICBhdXRvU3RhcnQ6IHRydWUsXG4gICAgICAgIGNvbmN1cnJlbmN5OiAxLFxuICAgIH0pO1xufVxuLyoqXG4gKiBDb25zdW1lIGEgcHJvbWlzZSwgZWl0aGVyIGFkZGluZyBpdCB0byB0aGUgcXVldWUgb3Igd2FpdGluZyBmb3IgaXQgdG8gcmVzb2x2ZVxuICogQHBhcmFtIHByb21pc2UgUHJvbWlzZSB0byBjb25zdW1lXG4gKiBAcGFyYW0gd2FpdCBXaGV0aGVyIHRvIHdhaXQgZm9yIHRoZSBwcm9taXNlIHRvIHJlc29sdmUgb3IgcmVzb2x2ZSBpbW1lZGlhdGVseVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29uc3VtZUNhbGxiYWNrKHByb21pc2VGbiwgd2FpdCkge1xuICAgIGlmICh3YWl0ID09PSB0cnVlKSB7XG4gICAgICAgIGF3YWl0IHByb21pc2VGbigpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKHR5cGVvZiBxdWV1ZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgcXVldWUgPSBjcmVhdGVRdWV1ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHZvaWQgcXVldWUuYWRkKHByb21pc2VGbik7XG4gICAgfVxufVxuLyoqXG4gKiBXYWl0cyBmb3IgYWxsIHByb21pc2VzIGluIHRoZSBxdWV1ZSB0byByZXNvbHZlLiBJZiB0aGUgcXVldWUgaXNcbiAqIHVuZGVmaW5lZCwgaXQgaW1tZWRpYXRlbHkgcmVzb2x2ZXMgYSBwcm9taXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYXdhaXRBbGxDYWxsYmFja3MoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBxdWV1ZSAhPT0gXCJ1bmRlZmluZWRcIiA/IHF1ZXVlLm9uSWRsZSgpIDogUHJvbWlzZS5yZXNvbHZlKCk7XG59XG4iXSwibmFtZXMiOlsiUFF1ZXVlTW9kIiwicXVldWUiLCJjcmVhdGVRdWV1ZSIsIlBRdWV1ZSIsImRlZmF1bHQiLCJhdXRvU3RhcnQiLCJjb25jdXJyZW5jeSIsImNvbnN1bWVDYWxsYmFjayIsInByb21pc2VGbiIsIndhaXQiLCJhZGQiLCJhd2FpdEFsbENhbGxiYWNrcyIsIm9uSWRsZSIsIlByb21pc2UiLCJyZXNvbHZlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/callbacks/promises.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/documents/document.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/documents/document.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Document: () => (/* binding */ Document)\n/* harmony export */ });\n/**\n * Interface for interacting with a document.\n */ class Document {\n    constructor(fields){\n        Object.defineProperty(this, \"pageContent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.pageContent = fields.pageContent ? fields.pageContent.toString() : this.pageContent;\n        this.metadata = fields.metadata ?? {};\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9kb2N1bWVudHMvZG9jdW1lbnQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztDQUVDLEdBQ00sTUFBTUE7SUFDVEMsWUFBWUMsTUFBTSxDQUFFO1FBQ2hCQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGVBQWU7WUFDdkNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFlBQVk7WUFDcENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ0MsV0FBVyxHQUFHUCxPQUFPTyxXQUFXLEdBQy9CUCxPQUFPTyxXQUFXLENBQUNDLFFBQVEsS0FDM0IsSUFBSSxDQUFDRCxXQUFXO1FBQ3RCLElBQUksQ0FBQ0UsUUFBUSxHQUFHVCxPQUFPUyxRQUFRLElBQUksQ0FBQztJQUN4QztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9kb2N1bWVudHMvZG9jdW1lbnQuanM/YzI1YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEludGVyZmFjZSBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBhIGRvY3VtZW50LlxuICovXG5leHBvcnQgY2xhc3MgRG9jdW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJwYWdlQ29udGVudFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJtZXRhZGF0YVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnBhZ2VDb250ZW50ID0gZmllbGRzLnBhZ2VDb250ZW50XG4gICAgICAgICAgICA/IGZpZWxkcy5wYWdlQ29udGVudC50b1N0cmluZygpXG4gICAgICAgICAgICA6IHRoaXMucGFnZUNvbnRlbnQ7XG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSBmaWVsZHMubWV0YWRhdGEgPz8ge307XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkRvY3VtZW50IiwiY29uc3RydWN0b3IiLCJmaWVsZHMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwicGFnZUNvbnRlbnQiLCJ0b1N0cmluZyIsIm1ldGFkYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/documents/document.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/documents/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/documents/index.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseDocumentTransformer: () => (/* reexport safe */ _transformers_js__WEBPACK_IMPORTED_MODULE_1__.BaseDocumentTransformer),\n/* harmony export */   Document: () => (/* reexport safe */ _document_js__WEBPACK_IMPORTED_MODULE_0__.Document),\n/* harmony export */   MappingDocumentTransformer: () => (/* reexport safe */ _transformers_js__WEBPACK_IMPORTED_MODULE_1__.MappingDocumentTransformer)\n/* harmony export */ });\n/* harmony import */ var _document_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./document.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/documents/document.js\");\n/* harmony import */ var _transformers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transformers.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/documents/transformers.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9kb2N1bWVudHMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBOEI7QUFDSSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvZG9jdW1lbnRzL2luZGV4LmpzPzcyMTQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vZG9jdW1lbnQuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3RyYW5zZm9ybWVycy5qc1wiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/documents/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/documents/transformers.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/documents/transformers.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseDocumentTransformer: () => (/* binding */ BaseDocumentTransformer),\n/* harmony export */   MappingDocumentTransformer: () => (/* binding */ MappingDocumentTransformer)\n/* harmony export */ });\n/* harmony import */ var _runnables_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runnables/base.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/runnables/base.js\");\n\n/**\n * Abstract base class for document transformation systems.\n *\n * A document transformation system takes an array of Documents and returns an\n * array of transformed Documents. These arrays do not necessarily have to have\n * the same length.\n *\n * One example of this is a text splitter that splits a large document into\n * many smaller documents.\n */ class BaseDocumentTransformer extends _runnables_base_js__WEBPACK_IMPORTED_MODULE_0__.Runnable {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"documents\",\n                \"transformers\"\n            ]\n        });\n    }\n    /**\n     * Method to invoke the document transformation. This method calls the\n     * transformDocuments method with the provided input.\n     * @param input The input documents to be transformed.\n     * @param _options Optional configuration object to customize the behavior of callbacks.\n     * @returns A Promise that resolves to the transformed documents.\n     */ invoke(input, _options) {\n        return this.transformDocuments(input);\n    }\n}\n/**\n * Class for document transformers that return exactly one transformed document\n * for each input document.\n */ class MappingDocumentTransformer extends BaseDocumentTransformer {\n    async transformDocuments(documents) {\n        const newDocuments = [];\n        for (const document of documents){\n            const transformedDocument = await this._transformDocument(document);\n            newDocuments.push(transformedDocument);\n        }\n        return newDocuments;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9kb2N1bWVudHMvdHJhbnNmb3JtZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFnRDtBQUNoRDs7Ozs7Ozs7O0NBU0MsR0FDTSxNQUFNQyxnQ0FBZ0NELHdEQUFRQTtJQUNqREUsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVEMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87Z0JBQUM7Z0JBQWtCO2dCQUFhO2FBQWU7UUFDMUQ7SUFDSjtJQUNBOzs7Ozs7S0FNQyxHQUNEQyxPQUFPQyxLQUFLLEVBQUVDLFFBQVEsRUFBRTtRQUNwQixPQUFPLElBQUksQ0FBQ0Msa0JBQWtCLENBQUNGO0lBQ25DO0FBQ0o7QUFDQTs7O0NBR0MsR0FDTSxNQUFNRyxtQ0FBbUNiO0lBQzVDLE1BQU1ZLG1CQUFtQkUsU0FBUyxFQUFFO1FBQ2hDLE1BQU1DLGVBQWUsRUFBRTtRQUN2QixLQUFLLE1BQU1DLFlBQVlGLFVBQVc7WUFDOUIsTUFBTUcsc0JBQXNCLE1BQU0sSUFBSSxDQUFDQyxrQkFBa0IsQ0FBQ0Y7WUFDMURELGFBQWFJLElBQUksQ0FBQ0Y7UUFDdEI7UUFDQSxPQUFPRjtJQUNYO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L2RvY3VtZW50cy90cmFuc2Zvcm1lcnMuanM/ODliNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSdW5uYWJsZSB9IGZyb20gXCIuLi9ydW5uYWJsZXMvYmFzZS5qc1wiO1xuLyoqXG4gKiBBYnN0cmFjdCBiYXNlIGNsYXNzIGZvciBkb2N1bWVudCB0cmFuc2Zvcm1hdGlvbiBzeXN0ZW1zLlxuICpcbiAqIEEgZG9jdW1lbnQgdHJhbnNmb3JtYXRpb24gc3lzdGVtIHRha2VzIGFuIGFycmF5IG9mIERvY3VtZW50cyBhbmQgcmV0dXJucyBhblxuICogYXJyYXkgb2YgdHJhbnNmb3JtZWQgRG9jdW1lbnRzLiBUaGVzZSBhcnJheXMgZG8gbm90IG5lY2Vzc2FyaWx5IGhhdmUgdG8gaGF2ZVxuICogdGhlIHNhbWUgbGVuZ3RoLlxuICpcbiAqIE9uZSBleGFtcGxlIG9mIHRoaXMgaXMgYSB0ZXh0IHNwbGl0dGVyIHRoYXQgc3BsaXRzIGEgbGFyZ2UgZG9jdW1lbnQgaW50b1xuICogbWFueSBzbWFsbGVyIGRvY3VtZW50cy5cbiAqL1xuZXhwb3J0IGNsYXNzIEJhc2VEb2N1bWVudFRyYW5zZm9ybWVyIGV4dGVuZHMgUnVubmFibGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19uYW1lc3BhY2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFtcImxhbmdjaGFpbl9jb3JlXCIsIFwiZG9jdW1lbnRzXCIsIFwidHJhbnNmb3JtZXJzXCJdXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gaW52b2tlIHRoZSBkb2N1bWVudCB0cmFuc2Zvcm1hdGlvbi4gVGhpcyBtZXRob2QgY2FsbHMgdGhlXG4gICAgICogdHJhbnNmb3JtRG9jdW1lbnRzIG1ldGhvZCB3aXRoIHRoZSBwcm92aWRlZCBpbnB1dC5cbiAgICAgKiBAcGFyYW0gaW5wdXQgVGhlIGlucHV0IGRvY3VtZW50cyB0byBiZSB0cmFuc2Zvcm1lZC5cbiAgICAgKiBAcGFyYW0gX29wdGlvbnMgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3QgdG8gY3VzdG9taXplIHRoZSBiZWhhdmlvciBvZiBjYWxsYmFja3MuXG4gICAgICogQHJldHVybnMgQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHRyYW5zZm9ybWVkIGRvY3VtZW50cy5cbiAgICAgKi9cbiAgICBpbnZva2UoaW5wdXQsIF9vcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybURvY3VtZW50cyhpbnB1dCk7XG4gICAgfVxufVxuLyoqXG4gKiBDbGFzcyBmb3IgZG9jdW1lbnQgdHJhbnNmb3JtZXJzIHRoYXQgcmV0dXJuIGV4YWN0bHkgb25lIHRyYW5zZm9ybWVkIGRvY3VtZW50XG4gKiBmb3IgZWFjaCBpbnB1dCBkb2N1bWVudC5cbiAqL1xuZXhwb3J0IGNsYXNzIE1hcHBpbmdEb2N1bWVudFRyYW5zZm9ybWVyIGV4dGVuZHMgQmFzZURvY3VtZW50VHJhbnNmb3JtZXIge1xuICAgIGFzeW5jIHRyYW5zZm9ybURvY3VtZW50cyhkb2N1bWVudHMpIHtcbiAgICAgICAgY29uc3QgbmV3RG9jdW1lbnRzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgZG9jdW1lbnQgb2YgZG9jdW1lbnRzKSB7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1lZERvY3VtZW50ID0gYXdhaXQgdGhpcy5fdHJhbnNmb3JtRG9jdW1lbnQoZG9jdW1lbnQpO1xuICAgICAgICAgICAgbmV3RG9jdW1lbnRzLnB1c2godHJhbnNmb3JtZWREb2N1bWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld0RvY3VtZW50cztcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiUnVubmFibGUiLCJCYXNlRG9jdW1lbnRUcmFuc2Zvcm1lciIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsImludm9rZSIsImlucHV0IiwiX29wdGlvbnMiLCJ0cmFuc2Zvcm1Eb2N1bWVudHMiLCJNYXBwaW5nRG9jdW1lbnRUcmFuc2Zvcm1lciIsImRvY3VtZW50cyIsIm5ld0RvY3VtZW50cyIsImRvY3VtZW50IiwidHJhbnNmb3JtZWREb2N1bWVudCIsIl90cmFuc2Zvcm1Eb2N1bWVudCIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/documents/transformers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/load/map_keys.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/load/map_keys.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keyFromJson: () => (/* binding */ keyFromJson),\n/* harmony export */   keyToJson: () => (/* binding */ keyToJson),\n/* harmony export */   mapKeys: () => (/* binding */ mapKeys)\n/* harmony export */ });\n/* harmony import */ var decamelize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! decamelize */ \"(rsc)/./node_modules/decamelize/index.js\");\n/* harmony import */ var camelcase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! camelcase */ \"(rsc)/./node_modules/camelcase/index.js\");\n\n\nfunction keyToJson(key, map) {\n    return map?.[key] || decamelize__WEBPACK_IMPORTED_MODULE_0__(key);\n}\nfunction keyFromJson(key, map) {\n    return map?.[key] || camelcase__WEBPACK_IMPORTED_MODULE_1__(key);\n}\nfunction mapKeys(fields, mapper, map) {\n    const mapped = {};\n    for(const key in fields){\n        if (Object.hasOwn(fields, key)) {\n            mapped[mapper(key, map)] = fields[key];\n        }\n    }\n    return mapped;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9sb2FkL21hcF9rZXlzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQW1DO0FBQ0Q7QUFDM0IsU0FBU0UsVUFBVUMsR0FBRyxFQUFFQyxHQUFHO0lBQzlCLE9BQU9BLEtBQUssQ0FBQ0QsSUFBSSxJQUFJSCx1Q0FBU0EsQ0FBQ0c7QUFDbkM7QUFDTyxTQUFTRSxZQUFZRixHQUFHLEVBQUVDLEdBQUc7SUFDaEMsT0FBT0EsS0FBSyxDQUFDRCxJQUFJLElBQUlGLHNDQUFTQSxDQUFDRTtBQUNuQztBQUNPLFNBQVNHLFFBQVFDLE1BQU0sRUFBRUMsTUFBTSxFQUFFSixHQUFHO0lBQ3ZDLE1BQU1LLFNBQVMsQ0FBQztJQUNoQixJQUFLLE1BQU1OLE9BQU9JLE9BQVE7UUFDdEIsSUFBSUcsT0FBT0MsTUFBTSxDQUFDSixRQUFRSixNQUFNO1lBQzVCTSxNQUFNLENBQUNELE9BQU9MLEtBQUtDLEtBQUssR0FBR0csTUFBTSxDQUFDSixJQUFJO1FBQzFDO0lBQ0o7SUFDQSxPQUFPTTtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9sb2FkL21hcF9rZXlzLmpzP2UzOTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHNuYWtlQ2FzZSBmcm9tIFwiZGVjYW1lbGl6ZVwiO1xuaW1wb3J0IGNhbWVsQ2FzZSBmcm9tIFwiY2FtZWxjYXNlXCI7XG5leHBvcnQgZnVuY3Rpb24ga2V5VG9Kc29uKGtleSwgbWFwKSB7XG4gICAgcmV0dXJuIG1hcD8uW2tleV0gfHwgc25ha2VDYXNlKGtleSk7XG59XG5leHBvcnQgZnVuY3Rpb24ga2V5RnJvbUpzb24oa2V5LCBtYXApIHtcbiAgICByZXR1cm4gbWFwPy5ba2V5XSB8fCBjYW1lbENhc2Uoa2V5KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYXBLZXlzKGZpZWxkcywgbWFwcGVyLCBtYXApIHtcbiAgICBjb25zdCBtYXBwZWQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBmaWVsZHMpIHtcbiAgICAgICAgaWYgKE9iamVjdC5oYXNPd24oZmllbGRzLCBrZXkpKSB7XG4gICAgICAgICAgICBtYXBwZWRbbWFwcGVyKGtleSwgbWFwKV0gPSBmaWVsZHNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWFwcGVkO1xufVxuIl0sIm5hbWVzIjpbInNuYWtlQ2FzZSIsImNhbWVsQ2FzZSIsImtleVRvSnNvbiIsImtleSIsIm1hcCIsImtleUZyb21Kc29uIiwibWFwS2V5cyIsImZpZWxkcyIsIm1hcHBlciIsIm1hcHBlZCIsIk9iamVjdCIsImhhc093biJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/load/map_keys.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/load/serializable.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/load/serializable.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Serializable: () => (/* binding */ Serializable),\n/* harmony export */   get_lc_unique_name: () => (/* binding */ get_lc_unique_name)\n/* harmony export */ });\n/* harmony import */ var _map_keys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map_keys.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/load/map_keys.js\");\n\nfunction shallowCopy(obj) {\n    return Array.isArray(obj) ? [\n        ...obj\n    ] : {\n        ...obj\n    };\n}\nfunction replaceSecrets(root, secretsMap) {\n    const result = shallowCopy(root);\n    for (const [path, secretId] of Object.entries(secretsMap)){\n        const [last, ...partsReverse] = path.split(\".\").reverse();\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let current = result;\n        for (const part of partsReverse.reverse()){\n            if (current[part] === undefined) {\n                break;\n            }\n            current[part] = shallowCopy(current[part]);\n            current = current[part];\n        }\n        if (current[last] !== undefined) {\n            current[last] = {\n                lc: 1,\n                type: \"secret\",\n                id: [\n                    secretId\n                ]\n            };\n        }\n    }\n    return result;\n}\n/**\n * Get a unique name for the module, rather than parent class implementations.\n * Should not be subclassed, subclass lc_name above instead.\n */ function get_lc_unique_name(// eslint-disable-next-line @typescript-eslint/no-use-before-define\nserializableClass) {\n    // \"super\" here would refer to the parent class of Serializable,\n    // when we want the parent class of the module actually calling this method.\n    const parentClass = Object.getPrototypeOf(serializableClass);\n    const lcNameIsSubclassed = typeof serializableClass.lc_name === \"function\" && (typeof parentClass.lc_name !== \"function\" || serializableClass.lc_name() !== parentClass.lc_name());\n    if (lcNameIsSubclassed) {\n        return serializableClass.lc_name();\n    } else {\n        return serializableClass.name;\n    }\n}\nclass Serializable {\n    /**\n     * The name of the serializable. Override to provide an alias or\n     * to preserve the serialized module name in minified environments.\n     *\n     * Implemented as a static method to support loading logic.\n     */ static lc_name() {\n        return this.name;\n    }\n    /**\n     * The final serialized identifier for the module.\n     */ get lc_id() {\n        return [\n            ...this.lc_namespace,\n            get_lc_unique_name(this.constructor)\n        ];\n    }\n    /**\n     * A map of secrets, which will be omitted from serialization.\n     * Keys are paths to the secret in constructor args, e.g. \"foo.bar.baz\".\n     * Values are the secret ids, which will be used when deserializing.\n     */ get lc_secrets() {\n        return undefined;\n    }\n    /**\n     * A map of additional attributes to merge with constructor args.\n     * Keys are the attribute names, e.g. \"foo\".\n     * Values are the attribute values, which will be serialized.\n     * These attributes need to be accepted by the constructor as arguments.\n     */ get lc_attributes() {\n        return undefined;\n    }\n    /**\n     * A map of aliases for constructor args.\n     * Keys are the attribute names, e.g. \"foo\".\n     * Values are the alias that will replace the key in serialization.\n     * This is used to eg. make argument names match Python.\n     */ get lc_aliases() {\n        return undefined;\n    }\n    constructor(kwargs, ..._args){\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.lc_kwargs = kwargs || {};\n    }\n    toJSON() {\n        if (!this.lc_serializable) {\n            return this.toJSONNotImplemented();\n        }\n        if (// eslint-disable-next-line no-instanceof/no-instanceof\n        this.lc_kwargs instanceof Serializable || typeof this.lc_kwargs !== \"object\" || Array.isArray(this.lc_kwargs)) {\n            // We do not support serialization of classes with arg not a POJO\n            // I'm aware the check above isn't as strict as it could be\n            return this.toJSONNotImplemented();\n        }\n        const aliases = {};\n        const secrets = {};\n        const kwargs = Object.keys(this.lc_kwargs).reduce((acc, key)=>{\n            acc[key] = key in this ? this[key] : this.lc_kwargs[key];\n            return acc;\n        }, {});\n        // get secrets, attributes and aliases from all superclasses\n        for(// eslint-disable-next-line @typescript-eslint/no-this-alias\n        let current = Object.getPrototypeOf(this); current; current = Object.getPrototypeOf(current)){\n            Object.assign(aliases, Reflect.get(current, \"lc_aliases\", this));\n            Object.assign(secrets, Reflect.get(current, \"lc_secrets\", this));\n            Object.assign(kwargs, Reflect.get(current, \"lc_attributes\", this));\n        }\n        // include all secrets used, even if not in kwargs,\n        // will be replaced with sentinel value in replaceSecrets\n        Object.keys(secrets).forEach((keyPath)=>{\n            // eslint-disable-next-line @typescript-eslint/no-this-alias, @typescript-eslint/no-explicit-any\n            let read = this;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            let write = kwargs;\n            const [last, ...partsReverse] = keyPath.split(\".\").reverse();\n            for (const key of partsReverse.reverse()){\n                if (!(key in read) || read[key] === undefined) return;\n                if (!(key in write) || write[key] === undefined) {\n                    if (typeof read[key] === \"object\" && read[key] != null) {\n                        write[key] = {};\n                    } else if (Array.isArray(read[key])) {\n                        write[key] = [];\n                    }\n                }\n                read = read[key];\n                write = write[key];\n            }\n            if (last in read && read[last] !== undefined) {\n                write[last] = write[last] || read[last];\n            }\n        });\n        return {\n            lc: 1,\n            type: \"constructor\",\n            id: this.lc_id,\n            kwargs: (0,_map_keys_js__WEBPACK_IMPORTED_MODULE_0__.mapKeys)(Object.keys(secrets).length ? replaceSecrets(kwargs, secrets) : kwargs, _map_keys_js__WEBPACK_IMPORTED_MODULE_0__.keyToJson, aliases)\n        };\n    }\n    toJSONNotImplemented() {\n        return {\n            lc: 1,\n            type: \"not_implemented\",\n            id: this.lc_id\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/load/serializable.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/ai.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/messages/ai.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIMessage: () => (/* binding */ AIMessage),\n/* harmony export */   AIMessageChunk: () => (/* binding */ AIMessageChunk),\n/* harmony export */   isAIMessage: () => (/* binding */ isAIMessage)\n/* harmony export */ });\n/* harmony import */ var _utils_json_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/json.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/json.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/base.js\");\n/* harmony import */ var _tool_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tool.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/tool.js\");\n\n\n\n/**\n * Represents an AI message in a conversation.\n */ class AIMessage extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseMessage {\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            ...super.lc_aliases,\n            tool_calls: \"tool_calls\",\n            invalid_tool_calls: \"invalid_tool_calls\"\n        };\n    }\n    constructor(fields, /** @deprecated */ kwargs){\n        let initParams;\n        if (typeof fields === \"string\") {\n            initParams = {\n                content: fields,\n                tool_calls: [],\n                invalid_tool_calls: [],\n                additional_kwargs: kwargs ?? {}\n            };\n        } else {\n            initParams = fields;\n            const rawToolCalls = initParams.additional_kwargs?.tool_calls;\n            const toolCalls = initParams.tool_calls;\n            if (rawToolCalls !== undefined && rawToolCalls.length > 0 && (toolCalls === undefined || toolCalls.length === 0)) {\n                console.warn([\n                    \"New LangChain packages are available that more efficiently handle\",\n                    \"tool calling.\\n\\nPlease upgrade your packages to versions that set\",\n                    \"message tool calls. e.g., `yarn add @langchain/anthropic`,\",\n                    \"yarn add @langchain/openai`, etc.\"\n                ].join(\" \"));\n            }\n            try {\n                if (rawToolCalls !== undefined && toolCalls === undefined) {\n                    const [toolCalls, invalidToolCalls] = (0,_tool_js__WEBPACK_IMPORTED_MODULE_2__.defaultToolCallParser)(rawToolCalls);\n                    initParams.tool_calls = toolCalls ?? [];\n                    initParams.invalid_tool_calls = invalidToolCalls ?? [];\n                } else {\n                    initParams.tool_calls = initParams.tool_calls ?? [];\n                    initParams.invalid_tool_calls = initParams.invalid_tool_calls ?? [];\n                }\n            } catch (e) {\n                // Do nothing if parsing fails\n                initParams.tool_calls = [];\n                initParams.invalid_tool_calls = [];\n            }\n        }\n        // Sadly, TypeScript only allows super() calls at root if the class has\n        // properties with initializers, so we have to check types twice.\n        super(initParams);\n        // These are typed as optional to avoid breaking changes and allow for casting\n        // from BaseMessage.\n        Object.defineProperty(this, \"tool_calls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"invalid_tool_calls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        if (typeof initParams !== \"string\") {\n            this.tool_calls = initParams.tool_calls ?? this.tool_calls;\n            this.invalid_tool_calls = initParams.invalid_tool_calls ?? this.invalid_tool_calls;\n        }\n    }\n    static lc_name() {\n        return \"AIMessage\";\n    }\n    _getType() {\n        return \"ai\";\n    }\n}\nfunction isAIMessage(x) {\n    return x._getType() === \"ai\";\n}\n/**\n * Represents a chunk of an AI message, which can be concatenated with\n * other AI message chunks.\n */ class AIMessageChunk extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseMessageChunk {\n    constructor(fields){\n        let initParams;\n        if (typeof fields === \"string\") {\n            initParams = {\n                content: fields,\n                tool_calls: [],\n                invalid_tool_calls: [],\n                tool_call_chunks: []\n            };\n        } else if (fields.tool_call_chunks === undefined) {\n            initParams = {\n                ...fields,\n                tool_calls: [],\n                invalid_tool_calls: [],\n                tool_call_chunks: []\n            };\n        } else {\n            const toolCalls = [];\n            const invalidToolCalls = [];\n            for (const toolCallChunk of fields.tool_call_chunks){\n                let parsedArgs = {};\n                try {\n                    parsedArgs = (0,_utils_json_js__WEBPACK_IMPORTED_MODULE_0__.parsePartialJson)(toolCallChunk.args ?? \"{}\") ?? {};\n                    if (typeof parsedArgs !== \"object\" || Array.isArray(parsedArgs)) {\n                        throw new Error(\"Malformed tool call chunk args.\");\n                    }\n                    toolCalls.push({\n                        name: toolCallChunk.name ?? \"\",\n                        args: parsedArgs,\n                        id: toolCallChunk.id\n                    });\n                } catch (e) {\n                    invalidToolCalls.push({\n                        name: toolCallChunk.name,\n                        args: toolCallChunk.args,\n                        id: toolCallChunk.id,\n                        error: \"Malformed args.\"\n                    });\n                }\n            }\n            initParams = {\n                ...fields,\n                tool_calls: toolCalls,\n                invalid_tool_calls: invalidToolCalls\n            };\n        }\n        // Sadly, TypeScript only allows super() calls at root if the class has\n        // properties with initializers, so we have to check types twice.\n        super(initParams);\n        // Must redeclare tool call fields since there is no multiple inheritance in JS.\n        // These are typed as optional to avoid breaking changes and allow for casting\n        // from BaseMessage.\n        Object.defineProperty(this, \"tool_calls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"invalid_tool_calls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"tool_call_chunks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        this.tool_call_chunks = initParams?.tool_call_chunks ?? this.tool_call_chunks;\n        this.tool_calls = initParams?.tool_calls ?? this.tool_calls;\n        this.invalid_tool_calls = initParams?.invalid_tool_calls ?? this.invalid_tool_calls;\n    }\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            ...super.lc_aliases,\n            tool_calls: \"tool_calls\",\n            invalid_tool_calls: \"invalid_tool_calls\",\n            tool_call_chunks: \"tool_call_chunks\"\n        };\n    }\n    static lc_name() {\n        return \"AIMessageChunk\";\n    }\n    _getType() {\n        return \"ai\";\n    }\n    concat(chunk) {\n        const combinedFields = {\n            content: (0,_base_js__WEBPACK_IMPORTED_MODULE_1__.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0,_base_js__WEBPACK_IMPORTED_MODULE_1__._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0,_base_js__WEBPACK_IMPORTED_MODULE_1__._mergeDicts)(this.response_metadata, chunk.response_metadata),\n            tool_call_chunks: []\n        };\n        if (this.tool_call_chunks !== undefined || chunk.tool_call_chunks !== undefined) {\n            const rawToolCalls = (0,_base_js__WEBPACK_IMPORTED_MODULE_1__._mergeLists)(this.tool_call_chunks, chunk.tool_call_chunks);\n            if (rawToolCalls !== undefined && rawToolCalls.length > 0) {\n                combinedFields.tool_call_chunks = rawToolCalls;\n            }\n        }\n        return new AIMessageChunk(combinedFields);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/ai.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/base.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/messages/base.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseMessage: () => (/* binding */ BaseMessage),\n/* harmony export */   BaseMessageChunk: () => (/* binding */ BaseMessageChunk),\n/* harmony export */   _mergeDicts: () => (/* binding */ _mergeDicts),\n/* harmony export */   _mergeLists: () => (/* binding */ _mergeLists),\n/* harmony export */   isBaseMessage: () => (/* binding */ isBaseMessage),\n/* harmony export */   isBaseMessageChunk: () => (/* binding */ isBaseMessageChunk),\n/* harmony export */   isOpenAIToolCallArray: () => (/* binding */ isOpenAIToolCallArray),\n/* harmony export */   mergeContent: () => (/* binding */ mergeContent)\n/* harmony export */ });\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../load/serializable.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/load/serializable.js\");\n\nfunction mergeContent(firstContent, secondContent) {\n    // If first content is a string\n    if (typeof firstContent === \"string\") {\n        if (typeof secondContent === \"string\") {\n            return firstContent + secondContent;\n        } else {\n            return [\n                {\n                    type: \"text\",\n                    text: firstContent\n                },\n                ...secondContent\n            ];\n        }\n    // If both are arrays\n    } else if (Array.isArray(secondContent)) {\n        return [\n            ...firstContent,\n            ...secondContent\n        ];\n    // If the first content is a list and second is a string\n    } else {\n        // Otherwise, add the second content as a new element of the list\n        return [\n            ...firstContent,\n            {\n                type: \"text\",\n                text: secondContent\n            }\n        ];\n    }\n}\n/**\n * Base class for all types of messages in a conversation. It includes\n * properties like `content`, `name`, and `additional_kwargs`. It also\n * includes methods like `toDict()` and `_getType()`.\n */ class BaseMessage extends _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable {\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            additional_kwargs: \"additional_kwargs\",\n            response_metadata: \"response_metadata\"\n        };\n    }\n    /**\n     * @deprecated\n     * Use {@link BaseMessage.content} instead.\n     */ get text() {\n        return typeof this.content === \"string\" ? this.content : \"\";\n    }\n    constructor(fields, /** @deprecated */ kwargs){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                content: fields,\n                additional_kwargs: kwargs,\n                response_metadata: {}\n            };\n        }\n        // Make sure the default value for additional_kwargs is passed into super() for serialization\n        if (!fields.additional_kwargs) {\n            // eslint-disable-next-line no-param-reassign\n            fields.additional_kwargs = {};\n        }\n        if (!fields.response_metadata) {\n            // eslint-disable-next-line no-param-reassign\n            fields.response_metadata = {};\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"messages\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        /** The content of the message. */ Object.defineProperty(this, \"content\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** The name of the message sender in a multi-user chat. */ Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Additional keyword arguments */ Object.defineProperty(this, \"additional_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Response metadata. For example: response headers, logprobs, token counts. */ Object.defineProperty(this, \"response_metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = fields.name;\n        this.content = fields.content;\n        this.additional_kwargs = fields.additional_kwargs;\n        this.response_metadata = fields.response_metadata;\n    }\n    toDict() {\n        return {\n            type: this._getType(),\n            data: this.toJSON().kwargs\n        };\n    }\n}\nfunction isOpenAIToolCallArray(value) {\n    return Array.isArray(value) && value.every((v)=>typeof v.index === \"number\");\n}\nfunction _mergeDicts(// eslint-disable-next-line @typescript-eslint/no-explicit-any\nleft, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nright) {\n    const merged = {\n        ...left\n    };\n    for (const [key, value] of Object.entries(right)){\n        if (merged[key] == null) {\n            merged[key] = value;\n        } else if (value == null) {\n            continue;\n        } else if (typeof merged[key] !== typeof value || Array.isArray(merged[key]) !== Array.isArray(value)) {\n            throw new Error(`field[${key}] already exists in the message chunk, but with a different type.`);\n        } else if (typeof merged[key] === \"string\") {\n            merged[key] = merged[key] + value;\n        } else if (!Array.isArray(merged[key]) && typeof merged[key] === \"object\") {\n            merged[key] = _mergeDicts(merged[key], value);\n        } else if (Array.isArray(merged[key])) {\n            merged[key] = _mergeLists(merged[key], value);\n        } else if (merged[key] === value) {\n            continue;\n        } else {\n            console.warn(`field[${key}] already exists in this message chunk and value has unsupported type.`);\n        }\n    }\n    return merged;\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _mergeLists(left, right) {\n    if (left === undefined && right === undefined) {\n        return undefined;\n    } else if (left === undefined || right === undefined) {\n        return left || right;\n    } else {\n        const merged = [\n            ...left\n        ];\n        for (const item of right){\n            if (typeof item === \"object\" && \"index\" in item && typeof item.index === \"number\") {\n                const toMerge = merged.findIndex((leftItem)=>leftItem.index === item.index);\n                if (toMerge !== -1) {\n                    merged[toMerge] = _mergeDicts(merged[toMerge], item);\n                } else {\n                    merged.push(item);\n                }\n            } else {\n                merged.push(item);\n            }\n        }\n        return merged;\n    }\n}\n/**\n * Represents a chunk of a message, which can be concatenated with other\n * message chunks. It includes a method `_merge_kwargs_dict()` for merging\n * additional keyword arguments from another `BaseMessageChunk` into this\n * one. It also overrides the `__add__()` method to support concatenation\n * of `BaseMessageChunk` instances.\n */ class BaseMessageChunk extends BaseMessage {\n}\nfunction isBaseMessage(messageLike) {\n    return typeof messageLike?._getType === \"function\";\n}\nfunction isBaseMessageChunk(messageLike) {\n    return isBaseMessage(messageLike) && typeof messageLike.concat === \"function\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/chat.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/messages/chat.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatMessage: () => (/* binding */ ChatMessage),\n/* harmony export */   ChatMessageChunk: () => (/* binding */ ChatMessageChunk)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/base.js\");\n\n/**\n * Represents a chat message in a conversation.\n */ class ChatMessage extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage {\n    static lc_name() {\n        return \"ChatMessage\";\n    }\n    static _chatMessageClass() {\n        return ChatMessage;\n    }\n    constructor(fields, role){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = {\n                content: fields,\n                role: role\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"role\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.role = fields.role;\n    }\n    _getType() {\n        return \"generic\";\n    }\n    static isInstance(message) {\n        return message._getType() === \"generic\";\n    }\n}\n/**\n * Represents a chunk of a chat message, which can be concatenated with\n * other chat message chunks.\n */ class ChatMessageChunk extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageChunk {\n    static lc_name() {\n        return \"ChatMessageChunk\";\n    }\n    constructor(fields, role){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = {\n                content: fields,\n                role: role\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"role\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.role = fields.role;\n    }\n    _getType() {\n        return \"generic\";\n    }\n    concat(chunk) {\n        return new ChatMessageChunk({\n            content: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.response_metadata, chunk.response_metadata),\n            role: this.role\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9tZXNzYWdlcy9jaGF0LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFzRjtBQUN0Rjs7Q0FFQyxHQUNNLE1BQU1JLG9CQUFvQkosaURBQVdBO0lBQ3hDLE9BQU9LLFVBQVU7UUFDYixPQUFPO0lBQ1g7SUFDQSxPQUFPQyxvQkFBb0I7UUFDdkIsT0FBT0Y7SUFDWDtJQUNBRyxZQUFZQyxNQUFNLEVBQUVDLElBQUksQ0FBRTtRQUN0QixJQUFJLE9BQU9ELFdBQVcsVUFBVTtZQUM1Qix1RkFBdUY7WUFDdkZBLFNBQVM7Z0JBQUVFLFNBQVNGO2dCQUFRQyxNQUFNQTtZQUFLO1FBQzNDO1FBQ0EsS0FBSyxDQUFDRDtRQUNORyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVE7WUFDaENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ1AsSUFBSSxHQUFHRCxPQUFPQyxJQUFJO0lBQzNCO0lBQ0FRLFdBQVc7UUFDUCxPQUFPO0lBQ1g7SUFDQSxPQUFPQyxXQUFXQyxPQUFPLEVBQUU7UUFDdkIsT0FBT0EsUUFBUUYsUUFBUSxPQUFPO0lBQ2xDO0FBQ0o7QUFDQTs7O0NBR0MsR0FDTSxNQUFNRyx5QkFBeUJuQixzREFBZ0JBO0lBQ2xELE9BQU9JLFVBQVU7UUFDYixPQUFPO0lBQ1g7SUFDQUUsWUFBWUMsTUFBTSxFQUFFQyxJQUFJLENBQUU7UUFDdEIsSUFBSSxPQUFPRCxXQUFXLFVBQVU7WUFDNUIsdUZBQXVGO1lBQ3ZGQSxTQUFTO2dCQUFFRSxTQUFTRjtnQkFBUUMsTUFBTUE7WUFBSztRQUMzQztRQUNBLEtBQUssQ0FBQ0Q7UUFDTkcsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxRQUFRO1lBQ2hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNQLElBQUksR0FBR0QsT0FBT0MsSUFBSTtJQUMzQjtJQUNBUSxXQUFXO1FBQ1AsT0FBTztJQUNYO0lBQ0FJLE9BQU9DLEtBQUssRUFBRTtRQUNWLE9BQU8sSUFBSUYsaUJBQWlCO1lBQ3hCVixTQUFTUixzREFBWUEsQ0FBQyxJQUFJLENBQUNRLE9BQU8sRUFBRVksTUFBTVosT0FBTztZQUNqRGEsbUJBQW1CcEIscURBQVdBLENBQUMsSUFBSSxDQUFDb0IsaUJBQWlCLEVBQUVELE1BQU1DLGlCQUFpQjtZQUM5RUMsbUJBQW1CckIscURBQVdBLENBQUMsSUFBSSxDQUFDcUIsaUJBQWlCLEVBQUVGLE1BQU1FLGlCQUFpQjtZQUM5RWYsTUFBTSxJQUFJLENBQUNBLElBQUk7UUFDbkI7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9tZXNzYWdlcy9jaGF0LmpzPzliNjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZU1lc3NhZ2UsIEJhc2VNZXNzYWdlQ2h1bmssIG1lcmdlQ29udGVudCwgX21lcmdlRGljdHMsIH0gZnJvbSBcIi4vYmFzZS5qc1wiO1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgY2hhdCBtZXNzYWdlIGluIGEgY29udmVyc2F0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgQ2hhdE1lc3NhZ2UgZXh0ZW5kcyBCYXNlTWVzc2FnZSB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkNoYXRNZXNzYWdlXCI7XG4gICAgfVxuICAgIHN0YXRpYyBfY2hhdE1lc3NhZ2VDbGFzcygpIHtcbiAgICAgICAgcmV0dXJuIENoYXRNZXNzYWdlO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMsIHJvbGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmaWVsZHMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnbiwgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgZmllbGRzID0geyBjb250ZW50OiBmaWVsZHMsIHJvbGU6IHJvbGUgfTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcihmaWVsZHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJyb2xlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucm9sZSA9IGZpZWxkcy5yb2xlO1xuICAgIH1cbiAgICBfZ2V0VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiZ2VuZXJpY1wiO1xuICAgIH1cbiAgICBzdGF0aWMgaXNJbnN0YW5jZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBtZXNzYWdlLl9nZXRUeXBlKCkgPT09IFwiZ2VuZXJpY1wiO1xuICAgIH1cbn1cbi8qKlxuICogUmVwcmVzZW50cyBhIGNodW5rIG9mIGEgY2hhdCBtZXNzYWdlLCB3aGljaCBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGhcbiAqIG90aGVyIGNoYXQgbWVzc2FnZSBjaHVua3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBDaGF0TWVzc2FnZUNodW5rIGV4dGVuZHMgQmFzZU1lc3NhZ2VDaHVuayB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkNoYXRNZXNzYWdlQ2h1bmtcIjtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGRzLCByb2xlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZmllbGRzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ24sIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgICAgIGZpZWxkcyA9IHsgY29udGVudDogZmllbGRzLCByb2xlOiByb2xlIH07XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicm9sZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJvbGUgPSBmaWVsZHMucm9sZTtcbiAgICB9XG4gICAgX2dldFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcImdlbmVyaWNcIjtcbiAgICB9XG4gICAgY29uY2F0KGNodW5rKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ2hhdE1lc3NhZ2VDaHVuayh7XG4gICAgICAgICAgICBjb250ZW50OiBtZXJnZUNvbnRlbnQodGhpcy5jb250ZW50LCBjaHVuay5jb250ZW50KSxcbiAgICAgICAgICAgIGFkZGl0aW9uYWxfa3dhcmdzOiBfbWVyZ2VEaWN0cyh0aGlzLmFkZGl0aW9uYWxfa3dhcmdzLCBjaHVuay5hZGRpdGlvbmFsX2t3YXJncyksXG4gICAgICAgICAgICByZXNwb25zZV9tZXRhZGF0YTogX21lcmdlRGljdHModGhpcy5yZXNwb25zZV9tZXRhZGF0YSwgY2h1bmsucmVzcG9uc2VfbWV0YWRhdGEpLFxuICAgICAgICAgICAgcm9sZTogdGhpcy5yb2xlLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiQmFzZU1lc3NhZ2UiLCJCYXNlTWVzc2FnZUNodW5rIiwibWVyZ2VDb250ZW50IiwiX21lcmdlRGljdHMiLCJDaGF0TWVzc2FnZSIsImxjX25hbWUiLCJfY2hhdE1lc3NhZ2VDbGFzcyIsImNvbnN0cnVjdG9yIiwiZmllbGRzIiwicm9sZSIsImNvbnRlbnQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwiX2dldFR5cGUiLCJpc0luc3RhbmNlIiwibWVzc2FnZSIsIkNoYXRNZXNzYWdlQ2h1bmsiLCJjb25jYXQiLCJjaHVuayIsImFkZGl0aW9uYWxfa3dhcmdzIiwicmVzcG9uc2VfbWV0YWRhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/chat.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/function.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/messages/function.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FunctionMessage: () => (/* binding */ FunctionMessage),\n/* harmony export */   FunctionMessageChunk: () => (/* binding */ FunctionMessageChunk)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/base.js\");\n\n/**\n * Represents a function message in a conversation.\n */ class FunctionMessage extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage {\n    static lc_name() {\n        return \"FunctionMessage\";\n    }\n    constructor(fields, /** @deprecated */ name){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = {\n                content: fields,\n                name: name\n            };\n        }\n        super(fields);\n    }\n    _getType() {\n        return \"function\";\n    }\n}\n/**\n * Represents a chunk of a function message, which can be concatenated\n * with other function message chunks.\n */ class FunctionMessageChunk extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageChunk {\n    static lc_name() {\n        return \"FunctionMessageChunk\";\n    }\n    _getType() {\n        return \"function\";\n    }\n    concat(chunk) {\n        return new FunctionMessageChunk({\n            content: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.response_metadata, chunk.response_metadata),\n            name: this.name ?? \"\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9tZXNzYWdlcy9mdW5jdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBc0Y7QUFDdEY7O0NBRUMsR0FDTSxNQUFNSSx3QkFBd0JKLGlEQUFXQTtJQUM1QyxPQUFPSyxVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0FDLFlBQVlDLE1BQU0sRUFDbEIsZ0JBQWdCLEdBQ2hCQyxJQUFJLENBQUU7UUFDRixJQUFJLE9BQU9ELFdBQVcsVUFBVTtZQUM1Qix1RkFBdUY7WUFDdkZBLFNBQVM7Z0JBQUVFLFNBQVNGO2dCQUFRQyxNQUFNQTtZQUFLO1FBQzNDO1FBQ0EsS0FBSyxDQUFDRDtJQUNWO0lBQ0FHLFdBQVc7UUFDUCxPQUFPO0lBQ1g7QUFDSjtBQUNBOzs7Q0FHQyxHQUNNLE1BQU1DLDZCQUE2QlYsc0RBQWdCQTtJQUN0RCxPQUFPSSxVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0FLLFdBQVc7UUFDUCxPQUFPO0lBQ1g7SUFDQUUsT0FBT0MsS0FBSyxFQUFFO1FBQ1YsT0FBTyxJQUFJRixxQkFBcUI7WUFDNUJGLFNBQVNQLHNEQUFZQSxDQUFDLElBQUksQ0FBQ08sT0FBTyxFQUFFSSxNQUFNSixPQUFPO1lBQ2pESyxtQkFBbUJYLHFEQUFXQSxDQUFDLElBQUksQ0FBQ1csaUJBQWlCLEVBQUVELE1BQU1DLGlCQUFpQjtZQUM5RUMsbUJBQW1CWixxREFBV0EsQ0FBQyxJQUFJLENBQUNZLGlCQUFpQixFQUFFRixNQUFNRSxpQkFBaUI7WUFDOUVQLE1BQU0sSUFBSSxDQUFDQSxJQUFJLElBQUk7UUFDdkI7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9tZXNzYWdlcy9mdW5jdGlvbi5qcz84MzdhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VNZXNzYWdlLCBCYXNlTWVzc2FnZUNodW5rLCBtZXJnZUNvbnRlbnQsIF9tZXJnZURpY3RzLCB9IGZyb20gXCIuL2Jhc2UuanNcIjtcbi8qKlxuICogUmVwcmVzZW50cyBhIGZ1bmN0aW9uIG1lc3NhZ2UgaW4gYSBjb252ZXJzYXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBGdW5jdGlvbk1lc3NhZ2UgZXh0ZW5kcyBCYXNlTWVzc2FnZSB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkZ1bmN0aW9uTWVzc2FnZVwiO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMsIFxuICAgIC8qKiBAZGVwcmVjYXRlZCAqL1xuICAgIG5hbWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmaWVsZHMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnbiwgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgZmllbGRzID0geyBjb250ZW50OiBmaWVsZHMsIG5hbWU6IG5hbWUgfTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcihmaWVsZHMpO1xuICAgIH1cbiAgICBfZ2V0VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiZnVuY3Rpb25cIjtcbiAgICB9XG59XG4vKipcbiAqIFJlcHJlc2VudHMgYSBjaHVuayBvZiBhIGZ1bmN0aW9uIG1lc3NhZ2UsIHdoaWNoIGNhbiBiZSBjb25jYXRlbmF0ZWRcbiAqIHdpdGggb3RoZXIgZnVuY3Rpb24gbWVzc2FnZSBjaHVua3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBGdW5jdGlvbk1lc3NhZ2VDaHVuayBleHRlbmRzIEJhc2VNZXNzYWdlQ2h1bmsge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJGdW5jdGlvbk1lc3NhZ2VDaHVua1wiO1xuICAgIH1cbiAgICBfZ2V0VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiZnVuY3Rpb25cIjtcbiAgICB9XG4gICAgY29uY2F0KGNodW5rKSB7XG4gICAgICAgIHJldHVybiBuZXcgRnVuY3Rpb25NZXNzYWdlQ2h1bmsoe1xuICAgICAgICAgICAgY29udGVudDogbWVyZ2VDb250ZW50KHRoaXMuY29udGVudCwgY2h1bmsuY29udGVudCksXG4gICAgICAgICAgICBhZGRpdGlvbmFsX2t3YXJnczogX21lcmdlRGljdHModGhpcy5hZGRpdGlvbmFsX2t3YXJncywgY2h1bmsuYWRkaXRpb25hbF9rd2FyZ3MpLFxuICAgICAgICAgICAgcmVzcG9uc2VfbWV0YWRhdGE6IF9tZXJnZURpY3RzKHRoaXMucmVzcG9uc2VfbWV0YWRhdGEsIGNodW5rLnJlc3BvbnNlX21ldGFkYXRhKSxcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSA/PyBcIlwiLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiQmFzZU1lc3NhZ2UiLCJCYXNlTWVzc2FnZUNodW5rIiwibWVyZ2VDb250ZW50IiwiX21lcmdlRGljdHMiLCJGdW5jdGlvbk1lc3NhZ2UiLCJsY19uYW1lIiwiY29uc3RydWN0b3IiLCJmaWVsZHMiLCJuYW1lIiwiY29udGVudCIsIl9nZXRUeXBlIiwiRnVuY3Rpb25NZXNzYWdlQ2h1bmsiLCJjb25jYXQiLCJjaHVuayIsImFkZGl0aW9uYWxfa3dhcmdzIiwicmVzcG9uc2VfbWV0YWRhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/function.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/human.js":
/*!************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/messages/human.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HumanMessage: () => (/* binding */ HumanMessage),\n/* harmony export */   HumanMessageChunk: () => (/* binding */ HumanMessageChunk)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/base.js\");\n\n/**\n * Represents a human message in a conversation.\n */ class HumanMessage extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage {\n    static lc_name() {\n        return \"HumanMessage\";\n    }\n    _getType() {\n        return \"human\";\n    }\n}\n/**\n * Represents a chunk of a human message, which can be concatenated with\n * other human message chunks.\n */ class HumanMessageChunk extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageChunk {\n    static lc_name() {\n        return \"HumanMessageChunk\";\n    }\n    _getType() {\n        return \"human\";\n    }\n    concat(chunk) {\n        return new HumanMessageChunk({\n            content: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.response_metadata, chunk.response_metadata)\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9tZXNzYWdlcy9odW1hbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBc0Y7QUFDdEY7O0NBRUMsR0FDTSxNQUFNSSxxQkFBcUJKLGlEQUFXQTtJQUN6QyxPQUFPSyxVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0FDLFdBQVc7UUFDUCxPQUFPO0lBQ1g7QUFDSjtBQUNBOzs7Q0FHQyxHQUNNLE1BQU1DLDBCQUEwQk4sc0RBQWdCQTtJQUNuRCxPQUFPSSxVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0FDLFdBQVc7UUFDUCxPQUFPO0lBQ1g7SUFDQUUsT0FBT0MsS0FBSyxFQUFFO1FBQ1YsT0FBTyxJQUFJRixrQkFBa0I7WUFDekJHLFNBQVNSLHNEQUFZQSxDQUFDLElBQUksQ0FBQ1EsT0FBTyxFQUFFRCxNQUFNQyxPQUFPO1lBQ2pEQyxtQkFBbUJSLHFEQUFXQSxDQUFDLElBQUksQ0FBQ1EsaUJBQWlCLEVBQUVGLE1BQU1FLGlCQUFpQjtZQUM5RUMsbUJBQW1CVCxxREFBV0EsQ0FBQyxJQUFJLENBQUNTLGlCQUFpQixFQUFFSCxNQUFNRyxpQkFBaUI7UUFDbEY7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9tZXNzYWdlcy9odW1hbi5qcz84OTA5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VNZXNzYWdlLCBCYXNlTWVzc2FnZUNodW5rLCBtZXJnZUNvbnRlbnQsIF9tZXJnZURpY3RzLCB9IGZyb20gXCIuL2Jhc2UuanNcIjtcbi8qKlxuICogUmVwcmVzZW50cyBhIGh1bWFuIG1lc3NhZ2UgaW4gYSBjb252ZXJzYXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBIdW1hbk1lc3NhZ2UgZXh0ZW5kcyBCYXNlTWVzc2FnZSB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkh1bWFuTWVzc2FnZVwiO1xuICAgIH1cbiAgICBfZ2V0VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiaHVtYW5cIjtcbiAgICB9XG59XG4vKipcbiAqIFJlcHJlc2VudHMgYSBjaHVuayBvZiBhIGh1bWFuIG1lc3NhZ2UsIHdoaWNoIGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aFxuICogb3RoZXIgaHVtYW4gbWVzc2FnZSBjaHVua3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBIdW1hbk1lc3NhZ2VDaHVuayBleHRlbmRzIEJhc2VNZXNzYWdlQ2h1bmsge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJIdW1hbk1lc3NhZ2VDaHVua1wiO1xuICAgIH1cbiAgICBfZ2V0VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiaHVtYW5cIjtcbiAgICB9XG4gICAgY29uY2F0KGNodW5rKSB7XG4gICAgICAgIHJldHVybiBuZXcgSHVtYW5NZXNzYWdlQ2h1bmsoe1xuICAgICAgICAgICAgY29udGVudDogbWVyZ2VDb250ZW50KHRoaXMuY29udGVudCwgY2h1bmsuY29udGVudCksXG4gICAgICAgICAgICBhZGRpdGlvbmFsX2t3YXJnczogX21lcmdlRGljdHModGhpcy5hZGRpdGlvbmFsX2t3YXJncywgY2h1bmsuYWRkaXRpb25hbF9rd2FyZ3MpLFxuICAgICAgICAgICAgcmVzcG9uc2VfbWV0YWRhdGE6IF9tZXJnZURpY3RzKHRoaXMucmVzcG9uc2VfbWV0YWRhdGEsIGNodW5rLnJlc3BvbnNlX21ldGFkYXRhKSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkJhc2VNZXNzYWdlIiwiQmFzZU1lc3NhZ2VDaHVuayIsIm1lcmdlQ29udGVudCIsIl9tZXJnZURpY3RzIiwiSHVtYW5NZXNzYWdlIiwibGNfbmFtZSIsIl9nZXRUeXBlIiwiSHVtYW5NZXNzYWdlQ2h1bmsiLCJjb25jYXQiLCJjaHVuayIsImNvbnRlbnQiLCJhZGRpdGlvbmFsX2t3YXJncyIsInJlc3BvbnNlX21ldGFkYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/human.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/messages/index.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIMessage: () => (/* reexport safe */ _ai_js__WEBPACK_IMPORTED_MODULE_0__.AIMessage),\n/* harmony export */   AIMessageChunk: () => (/* reexport safe */ _ai_js__WEBPACK_IMPORTED_MODULE_0__.AIMessageChunk),\n/* harmony export */   BaseMessage: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseMessage),\n/* harmony export */   BaseMessageChunk: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseMessageChunk),\n/* harmony export */   ChatMessage: () => (/* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_2__.ChatMessage),\n/* harmony export */   ChatMessageChunk: () => (/* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_2__.ChatMessageChunk),\n/* harmony export */   FunctionMessage: () => (/* reexport safe */ _function_js__WEBPACK_IMPORTED_MODULE_3__.FunctionMessage),\n/* harmony export */   FunctionMessageChunk: () => (/* reexport safe */ _function_js__WEBPACK_IMPORTED_MODULE_3__.FunctionMessageChunk),\n/* harmony export */   HumanMessage: () => (/* reexport safe */ _human_js__WEBPACK_IMPORTED_MODULE_4__.HumanMessage),\n/* harmony export */   HumanMessageChunk: () => (/* reexport safe */ _human_js__WEBPACK_IMPORTED_MODULE_4__.HumanMessageChunk),\n/* harmony export */   SystemMessage: () => (/* reexport safe */ _system_js__WEBPACK_IMPORTED_MODULE_5__.SystemMessage),\n/* harmony export */   SystemMessageChunk: () => (/* reexport safe */ _system_js__WEBPACK_IMPORTED_MODULE_5__.SystemMessageChunk),\n/* harmony export */   ToolMessage: () => (/* reexport safe */ _tool_js__WEBPACK_IMPORTED_MODULE_7__.ToolMessage),\n/* harmony export */   ToolMessageChunk: () => (/* reexport safe */ _tool_js__WEBPACK_IMPORTED_MODULE_7__.ToolMessageChunk),\n/* harmony export */   _mergeDicts: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__._mergeDicts),\n/* harmony export */   _mergeLists: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__._mergeLists),\n/* harmony export */   coerceMessageLikeToMessage: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.coerceMessageLikeToMessage),\n/* harmony export */   convertToChunk: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.convertToChunk),\n/* harmony export */   getBufferString: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.getBufferString),\n/* harmony export */   isAIMessage: () => (/* reexport safe */ _ai_js__WEBPACK_IMPORTED_MODULE_0__.isAIMessage),\n/* harmony export */   isBaseMessage: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.isBaseMessage),\n/* harmony export */   isBaseMessageChunk: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.isBaseMessageChunk),\n/* harmony export */   isOpenAIToolCallArray: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.isOpenAIToolCallArray),\n/* harmony export */   mapChatMessagesToStoredMessages: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.mapChatMessagesToStoredMessages),\n/* harmony export */   mapStoredMessageToChatMessage: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.mapStoredMessageToChatMessage),\n/* harmony export */   mapStoredMessagesToChatMessages: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.mapStoredMessagesToChatMessages),\n/* harmony export */   mergeContent: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.mergeContent)\n/* harmony export */ });\n/* harmony import */ var _ai_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ai.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/ai.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/base.js\");\n/* harmony import */ var _chat_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chat.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/chat.js\");\n/* harmony import */ var _function_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./function.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/function.js\");\n/* harmony import */ var _human_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./human.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/human.js\");\n/* harmony import */ var _system_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./system.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/system.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/utils.js\");\n/* harmony import */ var _tool_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tool.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/tool.js\");\n\n\n\n\n\n\n\n// TODO: Use a star export when we deprecate the\n// existing \"ToolCall\" type in \"base.js\".\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9tZXNzYWdlcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF3QjtBQUNFO0FBQ0E7QUFDSTtBQUNIO0FBQ0M7QUFDRDtBQUMzQixnREFBZ0Q7QUFDaEQseUNBQXlDO0FBQ2tCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9tZXNzYWdlcy9pbmRleC5qcz85YTFkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2FpLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9iYXNlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jaGF0LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9mdW5jdGlvbi5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vaHVtYW4uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3N5c3RlbS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdXRpbHMuanNcIjtcbi8vIFRPRE86IFVzZSBhIHN0YXIgZXhwb3J0IHdoZW4gd2UgZGVwcmVjYXRlIHRoZVxuLy8gZXhpc3RpbmcgXCJUb29sQ2FsbFwiIHR5cGUgaW4gXCJiYXNlLmpzXCIuXG5leHBvcnQgeyBUb29sTWVzc2FnZSwgVG9vbE1lc3NhZ2VDaHVuaywgfSBmcm9tIFwiLi90b29sLmpzXCI7XG4iXSwibmFtZXMiOlsiVG9vbE1lc3NhZ2UiLCJUb29sTWVzc2FnZUNodW5rIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/system.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/messages/system.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SystemMessage: () => (/* binding */ SystemMessage),\n/* harmony export */   SystemMessageChunk: () => (/* binding */ SystemMessageChunk)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/base.js\");\n\n/**\n * Represents a system message in a conversation.\n */ class SystemMessage extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage {\n    static lc_name() {\n        return \"SystemMessage\";\n    }\n    _getType() {\n        return \"system\";\n    }\n}\n/**\n * Represents a chunk of a system message, which can be concatenated with\n * other system message chunks.\n */ class SystemMessageChunk extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageChunk {\n    static lc_name() {\n        return \"SystemMessageChunk\";\n    }\n    _getType() {\n        return \"system\";\n    }\n    concat(chunk) {\n        return new SystemMessageChunk({\n            content: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.response_metadata, chunk.response_metadata)\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9tZXNzYWdlcy9zeXN0ZW0uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXNGO0FBQ3RGOztDQUVDLEdBQ00sTUFBTUksc0JBQXNCSixpREFBV0E7SUFDMUMsT0FBT0ssVUFBVTtRQUNiLE9BQU87SUFDWDtJQUNBQyxXQUFXO1FBQ1AsT0FBTztJQUNYO0FBQ0o7QUFDQTs7O0NBR0MsR0FDTSxNQUFNQywyQkFBMkJOLHNEQUFnQkE7SUFDcEQsT0FBT0ksVUFBVTtRQUNiLE9BQU87SUFDWDtJQUNBQyxXQUFXO1FBQ1AsT0FBTztJQUNYO0lBQ0FFLE9BQU9DLEtBQUssRUFBRTtRQUNWLE9BQU8sSUFBSUYsbUJBQW1CO1lBQzFCRyxTQUFTUixzREFBWUEsQ0FBQyxJQUFJLENBQUNRLE9BQU8sRUFBRUQsTUFBTUMsT0FBTztZQUNqREMsbUJBQW1CUixxREFBV0EsQ0FBQyxJQUFJLENBQUNRLGlCQUFpQixFQUFFRixNQUFNRSxpQkFBaUI7WUFDOUVDLG1CQUFtQlQscURBQVdBLENBQUMsSUFBSSxDQUFDUyxpQkFBaUIsRUFBRUgsTUFBTUcsaUJBQWlCO1FBQ2xGO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvc3lzdGVtLmpzP2Y4YjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZU1lc3NhZ2UsIEJhc2VNZXNzYWdlQ2h1bmssIG1lcmdlQ29udGVudCwgX21lcmdlRGljdHMsIH0gZnJvbSBcIi4vYmFzZS5qc1wiO1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgc3lzdGVtIG1lc3NhZ2UgaW4gYSBjb252ZXJzYXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBTeXN0ZW1NZXNzYWdlIGV4dGVuZHMgQmFzZU1lc3NhZ2Uge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJTeXN0ZW1NZXNzYWdlXCI7XG4gICAgfVxuICAgIF9nZXRUeXBlKCkge1xuICAgICAgICByZXR1cm4gXCJzeXN0ZW1cIjtcbiAgICB9XG59XG4vKipcbiAqIFJlcHJlc2VudHMgYSBjaHVuayBvZiBhIHN5c3RlbSBtZXNzYWdlLCB3aGljaCBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGhcbiAqIG90aGVyIHN5c3RlbSBtZXNzYWdlIGNodW5rcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFN5c3RlbU1lc3NhZ2VDaHVuayBleHRlbmRzIEJhc2VNZXNzYWdlQ2h1bmsge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJTeXN0ZW1NZXNzYWdlQ2h1bmtcIjtcbiAgICB9XG4gICAgX2dldFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcInN5c3RlbVwiO1xuICAgIH1cbiAgICBjb25jYXQoY2h1bmspIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTeXN0ZW1NZXNzYWdlQ2h1bmsoe1xuICAgICAgICAgICAgY29udGVudDogbWVyZ2VDb250ZW50KHRoaXMuY29udGVudCwgY2h1bmsuY29udGVudCksXG4gICAgICAgICAgICBhZGRpdGlvbmFsX2t3YXJnczogX21lcmdlRGljdHModGhpcy5hZGRpdGlvbmFsX2t3YXJncywgY2h1bmsuYWRkaXRpb25hbF9rd2FyZ3MpLFxuICAgICAgICAgICAgcmVzcG9uc2VfbWV0YWRhdGE6IF9tZXJnZURpY3RzKHRoaXMucmVzcG9uc2VfbWV0YWRhdGEsIGNodW5rLnJlc3BvbnNlX21ldGFkYXRhKSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkJhc2VNZXNzYWdlIiwiQmFzZU1lc3NhZ2VDaHVuayIsIm1lcmdlQ29udGVudCIsIl9tZXJnZURpY3RzIiwiU3lzdGVtTWVzc2FnZSIsImxjX25hbWUiLCJfZ2V0VHlwZSIsIlN5c3RlbU1lc3NhZ2VDaHVuayIsImNvbmNhdCIsImNodW5rIiwiY29udGVudCIsImFkZGl0aW9uYWxfa3dhcmdzIiwicmVzcG9uc2VfbWV0YWRhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/system.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/tool.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/messages/tool.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ToolMessage: () => (/* binding */ ToolMessage),\n/* harmony export */   ToolMessageChunk: () => (/* binding */ ToolMessageChunk),\n/* harmony export */   defaultToolCallParser: () => (/* binding */ defaultToolCallParser)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/base.js\");\n\n/**\n * Represents a tool message in a conversation.\n */ class ToolMessage extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage {\n    static lc_name() {\n        return \"ToolMessage\";\n    }\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            tool_call_id: \"tool_call_id\"\n        };\n    }\n    constructor(fields, tool_call_id, name){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = {\n                content: fields,\n                name,\n                tool_call_id: tool_call_id\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"tool_call_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.tool_call_id = fields.tool_call_id;\n    }\n    _getType() {\n        return \"tool\";\n    }\n    static isInstance(message) {\n        return message._getType() === \"tool\";\n    }\n}\n/**\n * Represents a chunk of a tool message, which can be concatenated\n * with other tool message chunks.\n */ class ToolMessageChunk extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageChunk {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"tool_call_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.tool_call_id = fields.tool_call_id;\n    }\n    static lc_name() {\n        return \"ToolMessageChunk\";\n    }\n    _getType() {\n        return \"tool\";\n    }\n    concat(chunk) {\n        return new ToolMessageChunk({\n            content: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.response_metadata, chunk.response_metadata),\n            tool_call_id: this.tool_call_id\n        });\n    }\n}\nfunction defaultToolCallParser(// eslint-disable-next-line @typescript-eslint/no-explicit-any\nrawToolCalls) {\n    const toolCalls = [];\n    const invalidToolCalls = [];\n    for (const toolCall of rawToolCalls){\n        if (!toolCall.function) {\n            continue;\n        } else {\n            const functionName = toolCall.function.name;\n            try {\n                const functionArgs = JSON.parse(toolCall.function.arguments);\n                const parsed = {\n                    name: functionName || \"\",\n                    args: functionArgs || {},\n                    id: toolCall.id\n                };\n                toolCalls.push(parsed);\n            } catch (error) {\n                invalidToolCalls.push({\n                    name: functionName,\n                    args: toolCall.function.arguments,\n                    id: toolCall.id,\n                    error: \"Malformed args.\"\n                });\n            }\n        }\n    }\n    return [\n        toolCalls,\n        invalidToolCalls\n    ];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9tZXNzYWdlcy90b29sLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBc0Y7QUFDdEY7O0NBRUMsR0FDTSxNQUFNSSxvQkFBb0JKLGlEQUFXQTtJQUN4QyxPQUFPSyxVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0EsSUFBSUMsYUFBYTtRQUNiLCtDQUErQztRQUMvQyxPQUFPO1lBQUVDLGNBQWM7UUFBZTtJQUMxQztJQUNBQyxZQUFZQyxNQUFNLEVBQUVGLFlBQVksRUFBRUcsSUFBSSxDQUFFO1FBQ3BDLElBQUksT0FBT0QsV0FBVyxVQUFVO1lBQzVCLHVGQUF1RjtZQUN2RkEsU0FBUztnQkFBRUUsU0FBU0Y7Z0JBQVFDO2dCQUFNSCxjQUFjQTtZQUFhO1FBQ2pFO1FBQ0EsS0FBSyxDQUFDRTtRQUNORyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGdCQUFnQjtZQUN4Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsSUFBSSxDQUFDVixZQUFZLEdBQUdFLE9BQU9GLFlBQVk7SUFDM0M7SUFDQVcsV0FBVztRQUNQLE9BQU87SUFDWDtJQUNBLE9BQU9DLFdBQVdDLE9BQU8sRUFBRTtRQUN2QixPQUFPQSxRQUFRRixRQUFRLE9BQU87SUFDbEM7QUFDSjtBQUNBOzs7Q0FHQyxHQUNNLE1BQU1HLHlCQUF5QnBCLHNEQUFnQkE7SUFDbERPLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQixLQUFLLENBQUNBO1FBQ05HLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNWLFlBQVksR0FBR0UsT0FBT0YsWUFBWTtJQUMzQztJQUNBLE9BQU9GLFVBQVU7UUFDYixPQUFPO0lBQ1g7SUFDQWEsV0FBVztRQUNQLE9BQU87SUFDWDtJQUNBSSxPQUFPQyxLQUFLLEVBQUU7UUFDVixPQUFPLElBQUlGLGlCQUFpQjtZQUN4QlYsU0FBU1Qsc0RBQVlBLENBQUMsSUFBSSxDQUFDUyxPQUFPLEVBQUVZLE1BQU1aLE9BQU87WUFDakRhLG1CQUFtQnJCLHFEQUFXQSxDQUFDLElBQUksQ0FBQ3FCLGlCQUFpQixFQUFFRCxNQUFNQyxpQkFBaUI7WUFDOUVDLG1CQUFtQnRCLHFEQUFXQSxDQUFDLElBQUksQ0FBQ3NCLGlCQUFpQixFQUFFRixNQUFNRSxpQkFBaUI7WUFDOUVsQixjQUFjLElBQUksQ0FBQ0EsWUFBWTtRQUNuQztJQUNKO0FBQ0o7QUFDTyxTQUFTbUIsc0JBQ2hCLDhEQUE4RDtBQUM5REMsWUFBWTtJQUNSLE1BQU1DLFlBQVksRUFBRTtJQUNwQixNQUFNQyxtQkFBbUIsRUFBRTtJQUMzQixLQUFLLE1BQU1DLFlBQVlILGFBQWM7UUFDakMsSUFBSSxDQUFDRyxTQUFTQyxRQUFRLEVBQUU7WUFDcEI7UUFDSixPQUNLO1lBQ0QsTUFBTUMsZUFBZUYsU0FBU0MsUUFBUSxDQUFDckIsSUFBSTtZQUMzQyxJQUFJO2dCQUNBLE1BQU11QixlQUFlQyxLQUFLQyxLQUFLLENBQUNMLFNBQVNDLFFBQVEsQ0FBQ0ssU0FBUztnQkFDM0QsTUFBTUMsU0FBUztvQkFDWDNCLE1BQU1zQixnQkFBZ0I7b0JBQ3RCTSxNQUFNTCxnQkFBZ0IsQ0FBQztvQkFDdkJNLElBQUlULFNBQVNTLEVBQUU7Z0JBQ25CO2dCQUNBWCxVQUFVWSxJQUFJLENBQUNIO1lBQ25CLEVBQ0EsT0FBT0ksT0FBTztnQkFDVlosaUJBQWlCVyxJQUFJLENBQUM7b0JBQ2xCOUIsTUFBTXNCO29CQUNOTSxNQUFNUixTQUFTQyxRQUFRLENBQUNLLFNBQVM7b0JBQ2pDRyxJQUFJVCxTQUFTUyxFQUFFO29CQUNmRSxPQUFPO2dCQUNYO1lBQ0o7UUFDSjtJQUNKO0lBQ0EsT0FBTztRQUFDYjtRQUFXQztLQUFpQjtBQUN4QyIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvdG9vbC5qcz85ZTE2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VNZXNzYWdlLCBCYXNlTWVzc2FnZUNodW5rLCBtZXJnZUNvbnRlbnQsIF9tZXJnZURpY3RzLCB9IGZyb20gXCIuL2Jhc2UuanNcIjtcbi8qKlxuICogUmVwcmVzZW50cyBhIHRvb2wgbWVzc2FnZSBpbiBhIGNvbnZlcnNhdGlvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIFRvb2xNZXNzYWdlIGV4dGVuZHMgQmFzZU1lc3NhZ2Uge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJUb29sTWVzc2FnZVwiO1xuICAgIH1cbiAgICBnZXQgbGNfYWxpYXNlcygpIHtcbiAgICAgICAgLy8gZXhjbHVkZSBzbmFrZSBjYXNlIGNvbnZlcnNpb24gdG8gcGFzY2FsIGNhc2VcbiAgICAgICAgcmV0dXJuIHsgdG9vbF9jYWxsX2lkOiBcInRvb2xfY2FsbF9pZFwiIH07XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZpZWxkcywgdG9vbF9jYWxsX2lkLCBuYW1lKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZmllbGRzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ24sIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgICAgIGZpZWxkcyA9IHsgY29udGVudDogZmllbGRzLCBuYW1lLCB0b29sX2NhbGxfaWQ6IHRvb2xfY2FsbF9pZCB9O1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKGZpZWxkcyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInRvb2xfY2FsbF9pZFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRvb2xfY2FsbF9pZCA9IGZpZWxkcy50b29sX2NhbGxfaWQ7XG4gICAgfVxuICAgIF9nZXRUeXBlKCkge1xuICAgICAgICByZXR1cm4gXCJ0b29sXCI7XG4gICAgfVxuICAgIHN0YXRpYyBpc0luc3RhbmNlKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2UuX2dldFR5cGUoKSA9PT0gXCJ0b29sXCI7XG4gICAgfVxufVxuLyoqXG4gKiBSZXByZXNlbnRzIGEgY2h1bmsgb2YgYSB0b29sIG1lc3NhZ2UsIHdoaWNoIGNhbiBiZSBjb25jYXRlbmF0ZWRcbiAqIHdpdGggb3RoZXIgdG9vbCBtZXNzYWdlIGNodW5rcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFRvb2xNZXNzYWdlQ2h1bmsgZXh0ZW5kcyBCYXNlTWVzc2FnZUNodW5rIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidG9vbF9jYWxsX2lkXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudG9vbF9jYWxsX2lkID0gZmllbGRzLnRvb2xfY2FsbF9pZDtcbiAgICB9XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIlRvb2xNZXNzYWdlQ2h1bmtcIjtcbiAgICB9XG4gICAgX2dldFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcInRvb2xcIjtcbiAgICB9XG4gICAgY29uY2F0KGNodW5rKSB7XG4gICAgICAgIHJldHVybiBuZXcgVG9vbE1lc3NhZ2VDaHVuayh7XG4gICAgICAgICAgICBjb250ZW50OiBtZXJnZUNvbnRlbnQodGhpcy5jb250ZW50LCBjaHVuay5jb250ZW50KSxcbiAgICAgICAgICAgIGFkZGl0aW9uYWxfa3dhcmdzOiBfbWVyZ2VEaWN0cyh0aGlzLmFkZGl0aW9uYWxfa3dhcmdzLCBjaHVuay5hZGRpdGlvbmFsX2t3YXJncyksXG4gICAgICAgICAgICByZXNwb25zZV9tZXRhZGF0YTogX21lcmdlRGljdHModGhpcy5yZXNwb25zZV9tZXRhZGF0YSwgY2h1bmsucmVzcG9uc2VfbWV0YWRhdGEpLFxuICAgICAgICAgICAgdG9vbF9jYWxsX2lkOiB0aGlzLnRvb2xfY2FsbF9pZCxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRUb29sQ2FsbFBhcnNlcihcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5yYXdUb29sQ2FsbHMpIHtcbiAgICBjb25zdCB0b29sQ2FsbHMgPSBbXTtcbiAgICBjb25zdCBpbnZhbGlkVG9vbENhbGxzID0gW107XG4gICAgZm9yIChjb25zdCB0b29sQ2FsbCBvZiByYXdUb29sQ2FsbHMpIHtcbiAgICAgICAgaWYgKCF0b29sQ2FsbC5mdW5jdGlvbikge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBmdW5jdGlvbk5hbWUgPSB0b29sQ2FsbC5mdW5jdGlvbi5uYW1lO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBmdW5jdGlvbkFyZ3MgPSBKU09OLnBhcnNlKHRvb2xDYWxsLmZ1bmN0aW9uLmFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkID0ge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBmdW5jdGlvbk5hbWUgfHwgXCJcIixcbiAgICAgICAgICAgICAgICAgICAgYXJnczogZnVuY3Rpb25BcmdzIHx8IHt9LFxuICAgICAgICAgICAgICAgICAgICBpZDogdG9vbENhbGwuaWQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0b29sQ2FsbHMucHVzaChwYXJzZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaW52YWxpZFRvb2xDYWxscy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogZnVuY3Rpb25OYW1lLFxuICAgICAgICAgICAgICAgICAgICBhcmdzOiB0b29sQ2FsbC5mdW5jdGlvbi5hcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgICAgIGlkOiB0b29sQ2FsbC5pZCxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IFwiTWFsZm9ybWVkIGFyZ3MuXCIsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFt0b29sQ2FsbHMsIGludmFsaWRUb29sQ2FsbHNdO1xufVxuIl0sIm5hbWVzIjpbIkJhc2VNZXNzYWdlIiwiQmFzZU1lc3NhZ2VDaHVuayIsIm1lcmdlQ29udGVudCIsIl9tZXJnZURpY3RzIiwiVG9vbE1lc3NhZ2UiLCJsY19uYW1lIiwibGNfYWxpYXNlcyIsInRvb2xfY2FsbF9pZCIsImNvbnN0cnVjdG9yIiwiZmllbGRzIiwibmFtZSIsImNvbnRlbnQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwiX2dldFR5cGUiLCJpc0luc3RhbmNlIiwibWVzc2FnZSIsIlRvb2xNZXNzYWdlQ2h1bmsiLCJjb25jYXQiLCJjaHVuayIsImFkZGl0aW9uYWxfa3dhcmdzIiwicmVzcG9uc2VfbWV0YWRhdGEiLCJkZWZhdWx0VG9vbENhbGxQYXJzZXIiLCJyYXdUb29sQ2FsbHMiLCJ0b29sQ2FsbHMiLCJpbnZhbGlkVG9vbENhbGxzIiwidG9vbENhbGwiLCJmdW5jdGlvbiIsImZ1bmN0aW9uTmFtZSIsImZ1bmN0aW9uQXJncyIsIkpTT04iLCJwYXJzZSIsImFyZ3VtZW50cyIsInBhcnNlZCIsImFyZ3MiLCJpZCIsInB1c2giLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/tool.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/utils.js":
/*!************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/messages/utils.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   coerceMessageLikeToMessage: () => (/* binding */ coerceMessageLikeToMessage),\n/* harmony export */   convertToChunk: () => (/* binding */ convertToChunk),\n/* harmony export */   getBufferString: () => (/* binding */ getBufferString),\n/* harmony export */   mapChatMessagesToStoredMessages: () => (/* binding */ mapChatMessagesToStoredMessages),\n/* harmony export */   mapStoredMessageToChatMessage: () => (/* binding */ mapStoredMessageToChatMessage),\n/* harmony export */   mapStoredMessagesToChatMessages: () => (/* binding */ mapStoredMessagesToChatMessages)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/base.js\");\n/* harmony import */ var _human_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./human.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/human.js\");\n/* harmony import */ var _ai_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ai.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/ai.js\");\n/* harmony import */ var _system_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./system.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/system.js\");\n/* harmony import */ var _chat_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chat.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/chat.js\");\n/* harmony import */ var _function_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./function.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/function.js\");\n/* harmony import */ var _tool_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tool.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/tool.js\");\n\n\n\n\n\n\n\nfunction coerceMessageLikeToMessage(messageLike) {\n    if (typeof messageLike === \"string\") {\n        return new _human_js__WEBPACK_IMPORTED_MODULE_1__.HumanMessage(messageLike);\n    } else if ((0,_base_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessage)(messageLike)) {\n        return messageLike;\n    }\n    const [type, content] = messageLike;\n    if (type === \"human\" || type === \"user\") {\n        return new _human_js__WEBPACK_IMPORTED_MODULE_1__.HumanMessage({\n            content\n        });\n    } else if (type === \"ai\" || type === \"assistant\") {\n        return new _ai_js__WEBPACK_IMPORTED_MODULE_2__.AIMessage({\n            content\n        });\n    } else if (type === \"system\") {\n        return new _system_js__WEBPACK_IMPORTED_MODULE_3__.SystemMessage({\n            content\n        });\n    } else {\n        throw new Error(`Unable to coerce message from array: only human, AI, or system message coercion is currently supported.`);\n    }\n}\n/**\n * This function is used by memory classes to get a string representation\n * of the chat message history, based on the message content and role.\n */ function getBufferString(messages, humanPrefix = \"Human\", aiPrefix = \"AI\") {\n    const string_messages = [];\n    for (const m of messages){\n        let role;\n        if (m._getType() === \"human\") {\n            role = humanPrefix;\n        } else if (m._getType() === \"ai\") {\n            role = aiPrefix;\n        } else if (m._getType() === \"system\") {\n            role = \"System\";\n        } else if (m._getType() === \"function\") {\n            role = \"Function\";\n        } else if (m._getType() === \"tool\") {\n            role = \"Tool\";\n        } else if (m._getType() === \"generic\") {\n            role = m.role;\n        } else {\n            throw new Error(`Got unsupported message type: ${m._getType()}`);\n        }\n        const nameStr = m.name ? `${m.name}, ` : \"\";\n        string_messages.push(`${role}: ${nameStr}${m.content}`);\n    }\n    return string_messages.join(\"\\n\");\n}\n/**\n * Maps messages from an older format (V1) to the current `StoredMessage`\n * format. If the message is already in the `StoredMessage` format, it is\n * returned as is. Otherwise, it transforms the V1 message into a\n * `StoredMessage`. This function is important for maintaining\n * compatibility with older message formats.\n */ function mapV1MessageToStoredMessage(message) {\n    // TODO: Remove this mapper when we deprecate the old message format.\n    if (message.data !== undefined) {\n        return message;\n    } else {\n        const v1Message = message;\n        return {\n            type: v1Message.type,\n            data: {\n                content: v1Message.text,\n                role: v1Message.role,\n                name: undefined,\n                tool_call_id: undefined\n            }\n        };\n    }\n}\nfunction mapStoredMessageToChatMessage(message) {\n    const storedMessage = mapV1MessageToStoredMessage(message);\n    switch(storedMessage.type){\n        case \"human\":\n            return new _human_js__WEBPACK_IMPORTED_MODULE_1__.HumanMessage(storedMessage.data);\n        case \"ai\":\n            return new _ai_js__WEBPACK_IMPORTED_MODULE_2__.AIMessage(storedMessage.data);\n        case \"system\":\n            return new _system_js__WEBPACK_IMPORTED_MODULE_3__.SystemMessage(storedMessage.data);\n        case \"function\":\n            if (storedMessage.data.name === undefined) {\n                throw new Error(\"Name must be defined for function messages\");\n            }\n            return new _function_js__WEBPACK_IMPORTED_MODULE_5__.FunctionMessage(storedMessage.data);\n        case \"tool\":\n            if (storedMessage.data.tool_call_id === undefined) {\n                throw new Error(\"Tool call ID must be defined for tool messages\");\n            }\n            return new _tool_js__WEBPACK_IMPORTED_MODULE_6__.ToolMessage(storedMessage.data);\n        case \"chat\":\n            {\n                if (storedMessage.data.role === undefined) {\n                    throw new Error(\"Role must be defined for chat messages\");\n                }\n                return new _chat_js__WEBPACK_IMPORTED_MODULE_4__.ChatMessage(storedMessage.data);\n            }\n        default:\n            throw new Error(`Got unexpected type: ${storedMessage.type}`);\n    }\n}\n/**\n * Transforms an array of `StoredMessage` instances into an array of\n * `BaseMessage` instances. It uses the `mapV1MessageToStoredMessage`\n * function to ensure all messages are in the `StoredMessage` format, then\n * creates new instances of the appropriate `BaseMessage` subclass based\n * on the type of each message. This function is used to prepare stored\n * messages for use in a chat context.\n */ function mapStoredMessagesToChatMessages(messages) {\n    return messages.map(mapStoredMessageToChatMessage);\n}\n/**\n * Transforms an array of `BaseMessage` instances into an array of\n * `StoredMessage` instances. It does this by calling the `toDict` method\n * on each `BaseMessage`, which returns a `StoredMessage`. This function\n * is used to prepare chat messages for storage.\n */ function mapChatMessagesToStoredMessages(messages) {\n    return messages.map((message)=>message.toDict());\n}\nfunction convertToChunk(message) {\n    const type = message._getType();\n    if (type === \"human\") {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new _human_js__WEBPACK_IMPORTED_MODULE_1__.HumanMessageChunk({\n            ...message\n        });\n    } else if (type === \"ai\") {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new _ai_js__WEBPACK_IMPORTED_MODULE_2__.AIMessageChunk({\n            ...message\n        });\n    } else if (type === \"system\") {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new _system_js__WEBPACK_IMPORTED_MODULE_3__.SystemMessageChunk({\n            ...message\n        });\n    } else if (type === \"function\") {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new _function_js__WEBPACK_IMPORTED_MODULE_5__.FunctionMessageChunk({\n            ...message\n        });\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    } else if (_chat_js__WEBPACK_IMPORTED_MODULE_4__.ChatMessage.isInstance(message)) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new _chat_js__WEBPACK_IMPORTED_MODULE_4__.ChatMessageChunk({\n            ...message\n        });\n    } else {\n        throw new Error(\"Unknown message type.\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/runnables/base.js":
/*!************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/runnables/base.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Runnable: () => (/* binding */ Runnable),\n/* harmony export */   RunnableAssign: () => (/* binding */ RunnableAssign),\n/* harmony export */   RunnableBinding: () => (/* binding */ RunnableBinding),\n/* harmony export */   RunnableEach: () => (/* binding */ RunnableEach),\n/* harmony export */   RunnableLambda: () => (/* binding */ RunnableLambda),\n/* harmony export */   RunnableMap: () => (/* binding */ RunnableMap),\n/* harmony export */   RunnableParallel: () => (/* binding */ RunnableParallel),\n/* harmony export */   RunnablePick: () => (/* binding */ RunnablePick),\n/* harmony export */   RunnableRetry: () => (/* binding */ RunnableRetry),\n/* harmony export */   RunnableSequence: () => (/* binding */ RunnableSequence),\n/* harmony export */   RunnableWithFallbacks: () => (/* binding */ RunnableWithFallbacks),\n/* harmony export */   _coerceToDict: () => (/* binding */ _coerceToDict),\n/* harmony export */   _coerceToRunnable: () => (/* binding */ _coerceToRunnable)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var p_retry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-retry */ \"(rsc)/./node_modules/p-retry/index.js\");\n/* harmony import */ var _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../callbacks/manager.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/callbacks/manager.js\");\n/* harmony import */ var _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tracers/log_stream.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/tracers/log_stream.js\");\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../load/serializable.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/load/serializable.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/stream.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/stream.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./config.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/runnables/config.js\");\n/* harmony import */ var _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/async_caller.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/async_caller.js\");\n/* harmony import */ var _tracers_root_listener_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../tracers/root_listener.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/tracers/root_listener.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/runnables/utils.js\");\n/* harmony import */ var _singletons_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../singletons/index.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/singletons/index.js\");\n/* harmony import */ var _graph_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./graph.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/runnables/graph.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _coerceToDict(value, defaultKey) {\n    return value && !Array.isArray(value) && // eslint-disable-next-line no-instanceof/no-instanceof\n    !(value instanceof Date) && typeof value === \"object\" ? value : {\n        [defaultKey]: value\n    };\n}\n/**\n * A Runnable is a generic unit of work that can be invoked, batched, streamed, and/or\n * transformed.\n */ class Runnable extends _load_serializable_js__WEBPACK_IMPORTED_MODULE_3__.Serializable {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_runnable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    getName(suffix) {\n        const name = // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.name ?? this.constructor.lc_name() ?? this.constructor.name;\n        return suffix ? `${name}${suffix}` : name;\n    }\n    /**\n     * Bind arguments to a Runnable, returning a new Runnable.\n     * @param kwargs\n     * @returns A new RunnableBinding that, when invoked, will apply the bound args.\n     */ bind(kwargs) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableBinding({\n            bound: this,\n            kwargs,\n            config: {}\n        });\n    }\n    /**\n     * Return a new Runnable that maps a list of inputs to a list of outputs,\n     * by calling invoke() with each input.\n     */ map() {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableEach({\n            bound: this\n        });\n    }\n    /**\n     * Add retry logic to an existing runnable.\n     * @param kwargs\n     * @returns A new RunnableRetry that, when invoked, will retry according to the parameters.\n     */ withRetry(fields) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableRetry({\n            bound: this,\n            kwargs: {},\n            config: {},\n            maxAttemptNumber: fields?.stopAfterAttempt,\n            ...fields\n        });\n    }\n    /**\n     * Bind config to a Runnable, returning a new Runnable.\n     * @param config New configuration parameters to attach to the new runnable.\n     * @returns A new RunnableBinding with a config matching what's passed.\n     */ withConfig(config) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableBinding({\n            bound: this,\n            config,\n            kwargs: {}\n        });\n    }\n    /**\n     * Create a new runnable from the current one that will try invoking\n     * other passed fallback runnables if the initial invocation fails.\n     * @param fields.fallbacks Other runnables to call if the runnable errors.\n     * @returns A new RunnableWithFallbacks.\n     */ withFallbacks(fields) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableWithFallbacks({\n            runnable: this,\n            fallbacks: fields.fallbacks\n        });\n    }\n    _getOptionsList(options, length = 0) {\n        if (Array.isArray(options) && options.length !== length) {\n            throw new Error(`Passed \"options\" must be an array with the same length as the inputs, but got ${options.length} options for ${length} inputs`);\n        }\n        if (Array.isArray(options)) {\n            return options.map(_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig);\n        }\n        if (length > 1 && !Array.isArray(options) && options.runId) {\n            console.warn(\"Provided runId will be used only for the first element of the batch.\");\n            const subsequent = Object.fromEntries(Object.entries(options).filter(([key])=>key !== \"runId\"));\n            return Array.from({\n                length\n            }, (_, i)=>(0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(i === 0 ? options : subsequent));\n        }\n        return Array.from({\n            length\n        }, ()=>(0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options));\n    }\n    async batch(inputs, options, batchOptions) {\n        const configList = this._getOptionsList(options ?? {}, inputs.length);\n        const maxConcurrency = configList[0]?.maxConcurrency ?? batchOptions?.maxConcurrency;\n        const caller = new _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_6__.AsyncCaller({\n            maxConcurrency,\n            onFailedAttempt: (e)=>{\n                throw e;\n            }\n        });\n        const batchCalls = inputs.map((input, i)=>caller.call(async ()=>{\n                try {\n                    const result = await this.invoke(input, configList[i]);\n                    return result;\n                } catch (e) {\n                    if (batchOptions?.returnExceptions) {\n                        return e;\n                    }\n                    throw e;\n                }\n            }));\n        return Promise.all(batchCalls);\n    }\n    /**\n     * Default streaming implementation.\n     * Subclasses should override this method if they support streaming output.\n     * @param input\n     * @param options\n     */ async *_streamIterator(input, options) {\n        yield this.invoke(input, options);\n    }\n    /**\n     * Stream output in chunks.\n     * @param input\n     * @param options\n     * @returns A readable stream that is also an iterable.\n     */ async stream(input, options) {\n        // Buffer the first streamed chunk to allow for initial errors\n        // to surface immediately.\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.AsyncGeneratorWithSetup(this._streamIterator(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options)));\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n    _separateRunnableConfigFromCallOptions(options) {\n        let runnableConfig;\n        if (options === undefined) {\n            runnableConfig = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options);\n        } else {\n            runnableConfig = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)({\n                callbacks: options.callbacks,\n                tags: options.tags,\n                metadata: options.metadata,\n                runName: options.runName,\n                configurable: options.configurable,\n                recursionLimit: options.recursionLimit,\n                maxConcurrency: options.maxConcurrency,\n                runId: options.runId\n            });\n        }\n        const callOptions = {\n            ...options\n        };\n        delete callOptions.callbacks;\n        delete callOptions.tags;\n        delete callOptions.metadata;\n        delete callOptions.runName;\n        delete callOptions.configurable;\n        delete callOptions.recursionLimit;\n        delete callOptions.maxConcurrency;\n        delete callOptions.runId;\n        return [\n            runnableConfig,\n            callOptions\n        ];\n    }\n    async _callWithConfig(func, input, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig)(config);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), config.runId, config?.runType, undefined, undefined, config?.runName ?? this.getName());\n        delete config.runId;\n        let output;\n        try {\n            output = await func.call(this, input, config, runManager);\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(output, \"output\"));\n        return output;\n    }\n    /**\n     * Internal method that handles batching and configuration for a runnable\n     * It takes a function, input values, and optional configuration, and\n     * returns a promise that resolves to the output values.\n     * @param func The function to be executed for each input value.\n     * @param input The input values to be processed.\n     * @param config Optional configuration for the function execution.\n     * @returns A promise that resolves to the output values.\n     */ async _batchWithConfig(func, inputs, options, batchOptions) {\n        const optionsList = this._getOptionsList(options ?? {}, inputs.length);\n        const callbackManagers = await Promise.all(optionsList.map(_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig));\n        const runManagers = await Promise.all(callbackManagers.map(async (callbackManager, i)=>{\n            const handleStartRes = await callbackManager?.handleChainStart(this.toJSON(), _coerceToDict(inputs[i], \"input\"), optionsList[i].runId, optionsList[i].runType, undefined, undefined, optionsList[i].runName ?? this.getName());\n            delete optionsList[i].runId;\n            return handleStartRes;\n        }));\n        let outputs;\n        try {\n            outputs = await func.call(this, inputs, optionsList, runManagers, batchOptions);\n        } catch (e) {\n            await Promise.all(runManagers.map((runManager)=>runManager?.handleChainError(e)));\n            throw e;\n        }\n        await Promise.all(runManagers.map((runManager)=>runManager?.handleChainEnd(_coerceToDict(outputs, \"output\"))));\n        return outputs;\n    }\n    /**\n     * Helper method to transform an Iterator of Input values into an Iterator of\n     * Output values, with callbacks.\n     * Use this to implement `stream()` or `transform()` in Runnable subclasses.\n     */ async *_transformStreamWithConfig(inputGenerator, transformer, options) {\n        let finalInput;\n        let finalInputSupported = true;\n        let finalOutput;\n        let finalOutputSupported = true;\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig)(config);\n        async function* wrapInputForTracing() {\n            for await (const chunk of inputGenerator){\n                if (finalInputSupported) {\n                    if (finalInput === undefined) {\n                        finalInput = chunk;\n                    } else {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            finalInput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.concat)(finalInput, chunk);\n                        } catch  {\n                            finalInput = undefined;\n                            finalInputSupported = false;\n                        }\n                    }\n                }\n                yield chunk;\n            }\n        }\n        let runManager;\n        try {\n            const pipe = await (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.pipeGeneratorWithSetup)(transformer.bind(this), wrapInputForTracing(), async ()=>callbackManager_?.handleChainStart(this.toJSON(), {\n                    input: \"\"\n                }, config.runId, config.runType, undefined, undefined, config.runName ?? this.getName()), config);\n            delete config.runId;\n            runManager = pipe.setup;\n            const isLogStreamHandler = (handler)=>handler.name === \"log_stream_tracer\";\n            const streamLogHandler = runManager?.handlers.find(isLogStreamHandler);\n            let iterator = pipe.output;\n            if (streamLogHandler !== undefined && runManager !== undefined) {\n                iterator = await streamLogHandler.tapOutputIterable(runManager.runId, pipe.output);\n            }\n            for await (const chunk of iterator){\n                yield chunk;\n                if (finalOutputSupported) {\n                    if (finalOutput === undefined) {\n                        finalOutput = chunk;\n                    } else {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            finalOutput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.concat)(finalOutput, chunk);\n                        } catch  {\n                            finalOutput = undefined;\n                            finalOutputSupported = false;\n                        }\n                    }\n                }\n            }\n        } catch (e) {\n            await runManager?.handleChainError(e, undefined, undefined, undefined, {\n                inputs: _coerceToDict(finalInput, \"input\")\n            });\n            throw e;\n        }\n        await runManager?.handleChainEnd(finalOutput ?? {}, undefined, undefined, undefined, {\n            inputs: _coerceToDict(finalInput, \"input\")\n        });\n    }\n    getGraph(_) {\n        const graph = new _graph_js__WEBPACK_IMPORTED_MODULE_10__.Graph();\n        // TODO: Add input schema for runnables\n        const inputNode = graph.addNode({\n            name: `${this.getName()}Input`,\n            schema: zod__WEBPACK_IMPORTED_MODULE_11__.z.any()\n        });\n        const runnableNode = graph.addNode(this);\n        // TODO: Add output schemas for runnables\n        const outputNode = graph.addNode({\n            name: `${this.getName()}Output`,\n            schema: zod__WEBPACK_IMPORTED_MODULE_11__.z.any()\n        });\n        graph.addEdge(inputNode, runnableNode);\n        graph.addEdge(runnableNode, outputNode);\n        return graph;\n    }\n    /**\n     * Create a new runnable sequence that runs each individual runnable in series,\n     * piping the output of one runnable into another runnable or runnable-like.\n     * @param coerceable A runnable, function, or object whose values are functions or runnables.\n     * @returns A new runnable sequence.\n     */ pipe(coerceable) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableSequence({\n            first: this,\n            last: _coerceToRunnable(coerceable)\n        });\n    }\n    /**\n     * Pick keys from the dict output of this runnable. Returns a new runnable.\n     */ pick(keys) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return this.pipe(new RunnablePick(keys));\n    }\n    /**\n     * Assigns new fields to the dict output of this runnable. Returns a new runnable.\n     */ assign(mapping) {\n        return this.pipe(// eslint-disable-next-line @typescript-eslint/no-use-before-define\n        new RunnableAssign(// eslint-disable-next-line @typescript-eslint/no-use-before-define\n        new RunnableMap({\n            steps: mapping\n        })));\n    }\n    /**\n     * Default implementation of transform, which buffers input and then calls stream.\n     * Subclasses should override this method if they can start producing output while\n     * input is still being generated.\n     * @param generator\n     * @param options\n     */ async *transform(generator, options) {\n        let finalChunk;\n        for await (const chunk of generator){\n            if (finalChunk === undefined) {\n                finalChunk = chunk;\n            } else {\n                // Make a best effort to gather, for any type that supports concat.\n                // This method should throw an error if gathering fails.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                finalChunk = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.concat)(finalChunk, chunk);\n            }\n        }\n        yield* this._streamIterator(finalChunk, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options));\n    }\n    /**\n     * Stream all output from a runnable, as reported to the callback system.\n     * This includes all inner runs of LLMs, Retrievers, Tools, etc.\n     * Output is streamed as Log objects, which include a list of\n     * jsonpatch ops that describe how the state of the run has changed in each\n     * step, and the final state of the run.\n     * The jsonpatch ops can be applied in order to construct state.\n     * @param input\n     * @param options\n     * @param streamOptions\n     */ async *streamLog(input, options, streamOptions) {\n        const logStreamCallbackHandler = new _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__.LogStreamCallbackHandler({\n            ...streamOptions,\n            autoClose: false,\n            _schemaFormat: \"original\"\n        });\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options);\n        yield* this._streamLog(input, logStreamCallbackHandler, config);\n    }\n    async *_streamLog(input, logStreamCallbackHandler, config) {\n        const { callbacks } = config;\n        if (callbacks === undefined) {\n            // eslint-disable-next-line no-param-reassign\n            config.callbacks = [\n                logStreamCallbackHandler\n            ];\n        } else if (Array.isArray(callbacks)) {\n            // eslint-disable-next-line no-param-reassign\n            config.callbacks = callbacks.concat([\n                logStreamCallbackHandler\n            ]);\n        } else {\n            const copiedCallbacks = callbacks.copy();\n            copiedCallbacks.inheritableHandlers.push(logStreamCallbackHandler);\n            // eslint-disable-next-line no-param-reassign\n            config.callbacks = copiedCallbacks;\n        }\n        const runnableStreamPromise = this.stream(input, config);\n        async function consumeRunnableStream() {\n            try {\n                const runnableStream = await runnableStreamPromise;\n                for await (const chunk of runnableStream){\n                    const patch = new _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__.RunLogPatch({\n                        ops: [\n                            {\n                                op: \"add\",\n                                path: \"/streamed_output/-\",\n                                value: chunk\n                            }\n                        ]\n                    });\n                    await logStreamCallbackHandler.writer.write(patch);\n                }\n            } finally{\n                await logStreamCallbackHandler.writer.close();\n            }\n        }\n        const runnableStreamConsumePromise = consumeRunnableStream();\n        try {\n            for await (const log of logStreamCallbackHandler){\n                yield log;\n            }\n        } finally{\n            await runnableStreamConsumePromise;\n        }\n    }\n    /**\n     * Generate a stream of events emitted by the internal steps of the runnable.\n     *\n     * Use to create an iterator over StreamEvents that provide real-time information\n     * about the progress of the runnable, including StreamEvents from intermediate\n     * results.\n     *\n     * A StreamEvent is a dictionary with the following schema:\n     *\n     * - `event`: string - Event names are of the format: on_[runnable_type]_(start|stream|end).\n     * - `name`: string - The name of the runnable that generated the event.\n     * - `run_id`: string - Randomly generated ID associated with the given execution of\n     *   the runnable that emitted the event. A child runnable that gets invoked as part of the execution of a\n     *   parent runnable is assigned its own unique ID.\n     * - `tags`: string[] - The tags of the runnable that generated the event.\n     * - `metadata`: Record<string, any> - The metadata of the runnable that generated the event.\n     * - `data`: Record<string, any>\n     *\n     * Below is a table that illustrates some events that might be emitted by various\n     * chains. Metadata fields have been omitted from the table for brevity.\n     * Chain definitions have been included after the table.\n     *\n     * | event                | name             | chunk                              | input                                         | output                                          |\n     * |----------------------|------------------|------------------------------------|-----------------------------------------------|-------------------------------------------------|\n     * | on_llm_start         | [model name]     |                                    | {'input': 'hello'}                            |                                                 |\n     * | on_llm_stream        | [model name]     | 'Hello' OR AIMessageChunk(\"hello\") |                                               |                                                 |\n     * | on_llm_end           | [model name]     |                                    | 'Hello human!'                                |\n     * | on_chain_start       | format_docs      |                                    |                                               |                                                 |\n     * | on_chain_stream      | format_docs      | \"hello world!, goodbye world!\"     |                                               |                                                 |\n     * | on_chain_end         | format_docs      |                                    | [Document(...)]                               | \"hello world!, goodbye world!\"                  |\n     * | on_tool_start        | some_tool        |                                    | {\"x\": 1, \"y\": \"2\"}                            |                                                 |\n     * | on_tool_stream       | some_tool        |   {\"x\": 1, \"y\": \"2\"}               |                                               |                                                 |\n     * | on_tool_end          | some_tool        |                                    |                                               | {\"x\": 1, \"y\": \"2\"}                              |\n     * | on_retriever_start   | [retriever name] |                                    | {\"query\": \"hello\"}                            |                                                 |\n     * | on_retriever_chunk   | [retriever name] |  {documents: [...]}                |                                               |                                                 |\n     * | on_retriever_end     | [retriever name] |                                    | {\"query\": \"hello\"}                            | {documents: [...]}                              |\n     * | on_prompt_start      | [template_name]  |                                    | {\"question\": \"hello\"}                         |                                                 |\n     * | on_prompt_end        | [template_name]  |                                    | {\"question\": \"hello\"}                         | ChatPromptValue(messages: [SystemMessage, ...]) |\n     */ async *streamEvents(input, options, streamOptions) {\n        if (options.version !== \"v1\") {\n            throw new Error(`Only version \"v1\" of the events schema is currently supported.`);\n        }\n        let runLog;\n        let hasEncounteredStartEvent = false;\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options);\n        const rootTags = config.tags ?? [];\n        const rootMetadata = config.metadata ?? {};\n        const rootName = config.runName ?? this.getName();\n        const logStreamCallbackHandler = new _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__.LogStreamCallbackHandler({\n            ...streamOptions,\n            autoClose: false,\n            _schemaFormat: \"streaming_events\"\n        });\n        const rootEventFilter = new _utils_js__WEBPACK_IMPORTED_MODULE_8__._RootEventFilter({\n            ...streamOptions\n        });\n        const logStream = this._streamLog(input, logStreamCallbackHandler, config);\n        for await (const log of logStream){\n            if (!runLog) {\n                runLog = _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__.RunLog.fromRunLogPatch(log);\n            } else {\n                runLog = runLog.concat(log);\n            }\n            if (runLog.state === undefined) {\n                throw new Error(`Internal error: \"streamEvents\" state is missing. Please open a bug report.`);\n            }\n            // Yield the start event for the root runnable if it hasn't been seen.\n            // The root run is never filtered out\n            if (!hasEncounteredStartEvent) {\n                hasEncounteredStartEvent = true;\n                const state = {\n                    ...runLog.state\n                };\n                const event = {\n                    run_id: state.id,\n                    event: `on_${state.type}_start`,\n                    name: rootName,\n                    tags: rootTags,\n                    metadata: rootMetadata,\n                    data: {\n                        input\n                    }\n                };\n                if (rootEventFilter.includeEvent(event, state.type)) {\n                    yield event;\n                }\n            }\n            const paths = log.ops.filter((op)=>op.path.startsWith(\"/logs/\")).map((op)=>op.path.split(\"/\")[2]);\n            const dedupedPaths = [\n                ...new Set(paths)\n            ];\n            for (const path of dedupedPaths){\n                let eventType;\n                let data = {};\n                const logEntry = runLog.state.logs[path];\n                if (logEntry.end_time === undefined) {\n                    if (logEntry.streamed_output.length > 0) {\n                        eventType = \"stream\";\n                    } else {\n                        eventType = \"start\";\n                    }\n                } else {\n                    eventType = \"end\";\n                }\n                if (eventType === \"start\") {\n                    // Include the inputs with the start event if they are available.\n                    // Usually they will NOT be available for components that operate\n                    // on streams, since those components stream the input and\n                    // don't know its final value until the end of the stream.\n                    if (logEntry.inputs !== undefined) {\n                        data.input = logEntry.inputs;\n                    }\n                } else if (eventType === \"end\") {\n                    if (logEntry.inputs !== undefined) {\n                        data.input = logEntry.inputs;\n                    }\n                    data.output = logEntry.final_output;\n                } else if (eventType === \"stream\") {\n                    const chunkCount = logEntry.streamed_output.length;\n                    if (chunkCount !== 1) {\n                        throw new Error(`Expected exactly one chunk of streamed output, got ${chunkCount} instead. Encountered in: \"${logEntry.name}\"`);\n                    }\n                    data = {\n                        chunk: logEntry.streamed_output[0]\n                    };\n                    // Clean up the stream, we don't need it anymore.\n                    // And this avoids duplicates as well!\n                    logEntry.streamed_output = [];\n                }\n                yield {\n                    event: `on_${logEntry.type}_${eventType}`,\n                    name: logEntry.name,\n                    run_id: logEntry.id,\n                    tags: logEntry.tags,\n                    metadata: logEntry.metadata,\n                    data\n                };\n            }\n            // Finally, we take care of the streaming output from the root chain\n            // if there is any.\n            const { state } = runLog;\n            if (state.streamed_output.length > 0) {\n                const chunkCount = state.streamed_output.length;\n                if (chunkCount !== 1) {\n                    throw new Error(`Expected exactly one chunk of streamed output, got ${chunkCount} instead. Encountered in: \"${state.name}\"`);\n                }\n                const data = {\n                    chunk: state.streamed_output[0]\n                };\n                // Clean up the stream, we don't need it anymore.\n                state.streamed_output = [];\n                const event = {\n                    event: `on_${state.type}_stream`,\n                    run_id: state.id,\n                    tags: rootTags,\n                    metadata: rootMetadata,\n                    name: rootName,\n                    data\n                };\n                if (rootEventFilter.includeEvent(event, state.type)) {\n                    yield event;\n                }\n            }\n        }\n        const state = runLog?.state;\n        if (state !== undefined) {\n            // Finally, yield the end event for the root runnable.\n            const event = {\n                event: `on_${state.type}_end`,\n                name: rootName,\n                run_id: state.id,\n                tags: rootTags,\n                metadata: rootMetadata,\n                data: {\n                    output: state.final_output\n                }\n            };\n            if (rootEventFilter.includeEvent(event, state.type)) yield event;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static isRunnable(thing) {\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_8__.isRunnableInterface)(thing);\n    }\n    /**\n     * Bind lifecycle listeners to a Runnable, returning a new Runnable.\n     * The Run object contains information about the run, including its id,\n     * type, input, output, error, startTime, endTime, and any tags or metadata\n     * added to the run.\n     *\n     * @param {Object} params - The object containing the callback functions.\n     * @param {(run: Run) => void} params.onStart - Called before the runnable starts running, with the Run object.\n     * @param {(run: Run) => void} params.onEnd - Called after the runnable finishes running, with the Run object.\n     * @param {(run: Run) => void} params.onError - Called if the runnable throws an error, with the Run object.\n     */ withListeners({ onStart, onEnd, onError }) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableBinding({\n            bound: this,\n            config: {},\n            configFactories: [\n                (config)=>({\n                        callbacks: [\n                            new _tracers_root_listener_js__WEBPACK_IMPORTED_MODULE_7__.RootListenersTracer({\n                                config,\n                                onStart,\n                                onEnd,\n                                onError\n                            })\n                        ]\n                    })\n            ]\n        });\n    }\n}\n/**\n * A runnable that delegates calls to another runnable with a set of kwargs.\n */ class RunnableBinding extends Runnable {\n    static lc_name() {\n        return \"RunnableBinding\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"bound\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"config\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"configFactories\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.bound = fields.bound;\n        this.kwargs = fields.kwargs;\n        this.config = fields.config;\n        this.configFactories = fields.configFactories;\n    }\n    getName(suffix) {\n        return this.bound.getName(suffix);\n    }\n    async _mergeConfig(...options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.mergeConfigs)(this.config, ...options);\n        return (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.mergeConfigs)(config, ...this.configFactories ? await Promise.all(this.configFactories.map(async (configFactory)=>await configFactory(config))) : []);\n    }\n    bind(kwargs) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return new this.constructor({\n            bound: this.bound,\n            kwargs: {\n                ...this.kwargs,\n                ...kwargs\n            },\n            config: this.config\n        });\n    }\n    withConfig(config) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return new this.constructor({\n            bound: this.bound,\n            kwargs: this.kwargs,\n            config: {\n                ...this.config,\n                ...config\n            }\n        });\n    }\n    withRetry(fields) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return new this.constructor({\n            bound: this.bound.withRetry(fields),\n            kwargs: this.kwargs,\n            config: this.config\n        });\n    }\n    async invoke(input, options) {\n        return this.bound.invoke(input, await this._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options), this.kwargs));\n    }\n    async batch(inputs, options, batchOptions) {\n        const mergedOptions = Array.isArray(options) ? await Promise.all(options.map(async (individualOption)=>this._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(individualOption), this.kwargs))) : await this._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options), this.kwargs);\n        return this.bound.batch(inputs, mergedOptions, batchOptions);\n    }\n    async *_streamIterator(input, options) {\n        yield* this.bound._streamIterator(input, await this._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options), this.kwargs));\n    }\n    async stream(input, options) {\n        return this.bound.stream(input, await this._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options), this.kwargs));\n    }\n    async *transform(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    generator, options) {\n        yield* this.bound.transform(generator, await this._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options), this.kwargs));\n    }\n    async *streamEvents(input, options, streamOptions) {\n        yield* this.bound.streamEvents(input, {\n            ...await this._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options), this.kwargs),\n            version: options.version\n        }, streamOptions);\n    }\n    static isRunnableBinding(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    thing) {\n        return thing.bound && Runnable.isRunnable(thing.bound);\n    }\n    /**\n     * Bind lifecycle listeners to a Runnable, returning a new Runnable.\n     * The Run object contains information about the run, including its id,\n     * type, input, output, error, startTime, endTime, and any tags or metadata\n     * added to the run.\n     *\n     * @param {Object} params - The object containing the callback functions.\n     * @param {(run: Run) => void} params.onStart - Called before the runnable starts running, with the Run object.\n     * @param {(run: Run) => void} params.onEnd - Called after the runnable finishes running, with the Run object.\n     * @param {(run: Run) => void} params.onError - Called if the runnable throws an error, with the Run object.\n     */ withListeners({ onStart, onEnd, onError }) {\n        return new RunnableBinding({\n            bound: this.bound,\n            kwargs: this.kwargs,\n            config: this.config,\n            configFactories: [\n                (config)=>({\n                        callbacks: [\n                            new _tracers_root_listener_js__WEBPACK_IMPORTED_MODULE_7__.RootListenersTracer({\n                                config,\n                                onStart,\n                                onEnd,\n                                onError\n                            })\n                        ]\n                    })\n            ]\n        });\n    }\n}\n/**\n * A runnable that delegates calls to another runnable\n * with each element of the input sequence.\n */ class RunnableEach extends Runnable {\n    static lc_name() {\n        return \"RunnableEach\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"bound\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.bound = fields.bound;\n    }\n    /**\n     * Binds the runnable with the specified arguments.\n     * @param kwargs The arguments to bind the runnable with.\n     * @returns A new instance of the `RunnableEach` class that is bound with the specified arguments.\n     */ bind(kwargs) {\n        return new RunnableEach({\n            bound: this.bound.bind(kwargs)\n        });\n    }\n    /**\n     * Invokes the runnable with the specified input and configuration.\n     * @param input The input to invoke the runnable with.\n     * @param config The configuration to invoke the runnable with.\n     * @returns A promise that resolves to the output of the runnable.\n     */ async invoke(inputs, config) {\n        return this._callWithConfig(this._invoke, inputs, config);\n    }\n    /**\n     * A helper method that is used to invoke the runnable with the specified input and configuration.\n     * @param input The input to invoke the runnable with.\n     * @param config The configuration to invoke the runnable with.\n     * @returns A promise that resolves to the output of the runnable.\n     */ async _invoke(inputs, config, runManager) {\n        return this.bound.batch(inputs, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n            callbacks: runManager?.getChild()\n        }));\n    }\n    /**\n     * Bind lifecycle listeners to a Runnable, returning a new Runnable.\n     * The Run object contains information about the run, including its id,\n     * type, input, output, error, startTime, endTime, and any tags or metadata\n     * added to the run.\n     *\n     * @param {Object} params - The object containing the callback functions.\n     * @param {(run: Run) => void} params.onStart - Called before the runnable starts running, with the Run object.\n     * @param {(run: Run) => void} params.onEnd - Called after the runnable finishes running, with the Run object.\n     * @param {(run: Run) => void} params.onError - Called if the runnable throws an error, with the Run object.\n     */ withListeners({ onStart, onEnd, onError }) {\n        return new RunnableEach({\n            bound: this.bound.withListeners({\n                onStart,\n                onEnd,\n                onError\n            })\n        });\n    }\n}\n/**\n * Base class for runnables that can be retried a\n * specified number of times.\n */ class RunnableRetry extends RunnableBinding {\n    static lc_name() {\n        return \"RunnableRetry\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"maxAttemptNumber\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 3\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"onFailedAttempt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: ()=>{}\n        });\n        this.maxAttemptNumber = fields.maxAttemptNumber ?? this.maxAttemptNumber;\n        this.onFailedAttempt = fields.onFailedAttempt ?? this.onFailedAttempt;\n    }\n    _patchConfigForRetry(attempt, config, runManager) {\n        const tag = attempt > 1 ? `retry:attempt:${attempt}` : undefined;\n        return (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n            callbacks: runManager?.getChild(tag)\n        });\n    }\n    async _invoke(input, config, runManager) {\n        return p_retry__WEBPACK_IMPORTED_MODULE_0__((attemptNumber)=>super.invoke(input, this._patchConfigForRetry(attemptNumber, config, runManager)), {\n            onFailedAttempt: this.onFailedAttempt,\n            retries: Math.max(this.maxAttemptNumber - 1, 0),\n            randomize: true\n        });\n    }\n    /**\n     * Method that invokes the runnable with the specified input, run manager,\n     * and config. It handles the retry logic by catching any errors and\n     * recursively invoking itself with the updated config for the next retry\n     * attempt.\n     * @param input The input for the runnable.\n     * @param runManager The run manager for the runnable.\n     * @param config The config for the runnable.\n     * @returns A promise that resolves to the output of the runnable.\n     */ async invoke(input, config) {\n        return this._callWithConfig(this._invoke, input, config);\n    }\n    async _batch(inputs, configs, runManagers, batchOptions) {\n        const resultsMap = {};\n        try {\n            await p_retry__WEBPACK_IMPORTED_MODULE_0__(async (attemptNumber)=>{\n                const remainingIndexes = inputs.map((_, i)=>i).filter((i)=>resultsMap[i.toString()] === undefined || // eslint-disable-next-line no-instanceof/no-instanceof\n                    resultsMap[i.toString()] instanceof Error);\n                const remainingInputs = remainingIndexes.map((i)=>inputs[i]);\n                const patchedConfigs = remainingIndexes.map((i)=>this._patchConfigForRetry(attemptNumber, configs?.[i], runManagers?.[i]));\n                const results = await super.batch(remainingInputs, patchedConfigs, {\n                    ...batchOptions,\n                    returnExceptions: true\n                });\n                let firstException;\n                for(let i = 0; i < results.length; i += 1){\n                    const result = results[i];\n                    const resultMapIndex = remainingIndexes[i];\n                    // eslint-disable-next-line no-instanceof/no-instanceof\n                    if (result instanceof Error) {\n                        if (firstException === undefined) {\n                            firstException = result;\n                        }\n                    }\n                    resultsMap[resultMapIndex.toString()] = result;\n                }\n                if (firstException) {\n                    throw firstException;\n                }\n                return results;\n            }, {\n                onFailedAttempt: this.onFailedAttempt,\n                retries: Math.max(this.maxAttemptNumber - 1, 0),\n                randomize: true\n            });\n        } catch (e) {\n            if (batchOptions?.returnExceptions !== true) {\n                throw e;\n            }\n        }\n        return Object.keys(resultsMap).sort((a, b)=>parseInt(a, 10) - parseInt(b, 10)).map((key)=>resultsMap[parseInt(key, 10)]);\n    }\n    async batch(inputs, options, batchOptions) {\n        return this._batchWithConfig(this._batch.bind(this), inputs, options, batchOptions);\n    }\n}\n/**\n * A sequence of runnables, where the output of each is the input of the next.\n * @example\n * ```typescript\n * const promptTemplate = PromptTemplate.fromTemplate(\n *   \"Tell me a joke about {topic}\",\n * );\n * const chain = RunnableSequence.from([promptTemplate, new ChatOpenAI({})]);\n * const result = await chain.invoke({ topic: \"bears\" });\n * ```\n */ class RunnableSequence extends Runnable {\n    static lc_name() {\n        return \"RunnableSequence\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"first\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"middle\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"last\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        this.first = fields.first;\n        this.middle = fields.middle ?? this.middle;\n        this.last = fields.last;\n        this.name = fields.name;\n    }\n    get steps() {\n        return [\n            this.first,\n            ...this.middle,\n            this.last\n        ];\n    }\n    async invoke(input, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig)(config);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), config.runId, undefined, undefined, undefined, config?.runName);\n        delete config.runId;\n        let nextStepInput = input;\n        let finalOutput;\n        try {\n            const initialSteps = [\n                this.first,\n                ...this.middle\n            ];\n            for(let i = 0; i < initialSteps.length; i += 1){\n                const step = initialSteps[i];\n                nextStepInput = await step.invoke(nextStepInput, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n                    callbacks: runManager?.getChild(`seq:step:${i + 1}`)\n                }));\n            }\n            // TypeScript can't detect that the last output of the sequence returns RunOutput, so call it out of the loop here\n            finalOutput = await this.last.invoke(nextStepInput, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n                callbacks: runManager?.getChild(`seq:step:${this.steps.length}`)\n            }));\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(finalOutput, \"output\"));\n        return finalOutput;\n    }\n    async batch(inputs, options, batchOptions) {\n        const configList = this._getOptionsList(options ?? {}, inputs.length);\n        const callbackManagers = await Promise.all(configList.map(_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig));\n        const runManagers = await Promise.all(callbackManagers.map(async (callbackManager, i)=>{\n            const handleStartRes = await callbackManager?.handleChainStart(this.toJSON(), _coerceToDict(inputs[i], \"input\"), configList[i].runId, undefined, undefined, undefined, configList[i].runName);\n            delete configList[i].runId;\n            return handleStartRes;\n        }));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let nextStepInputs = inputs;\n        try {\n            for(let i = 0; i < this.steps.length; i += 1){\n                const step = this.steps[i];\n                nextStepInputs = await step.batch(nextStepInputs, runManagers.map((runManager, j)=>{\n                    const childRunManager = runManager?.getChild(`seq:step:${i + 1}`);\n                    return (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(configList[j], {\n                        callbacks: childRunManager\n                    });\n                }), batchOptions);\n            }\n        } catch (e) {\n            await Promise.all(runManagers.map((runManager)=>runManager?.handleChainError(e)));\n            throw e;\n        }\n        await Promise.all(runManagers.map((runManager)=>runManager?.handleChainEnd(_coerceToDict(nextStepInputs, \"output\"))));\n        return nextStepInputs;\n    }\n    async *_streamIterator(input, options) {\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig)(options);\n        const { runId, ...otherOptions } = options ?? {};\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), runId, undefined, undefined, undefined, otherOptions?.runName);\n        const steps = [\n            this.first,\n            ...this.middle,\n            this.last\n        ];\n        let concatSupported = true;\n        let finalOutput;\n        async function* inputGenerator() {\n            yield input;\n        }\n        try {\n            let finalGenerator = steps[0].transform(inputGenerator(), (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(otherOptions, {\n                callbacks: runManager?.getChild(`seq:step:1`)\n            }));\n            for(let i = 1; i < steps.length; i += 1){\n                const step = steps[i];\n                finalGenerator = await step.transform(finalGenerator, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(otherOptions, {\n                    callbacks: runManager?.getChild(`seq:step:${i + 1}`)\n                }));\n            }\n            for await (const chunk of finalGenerator){\n                yield chunk;\n                if (concatSupported) {\n                    if (finalOutput === undefined) {\n                        finalOutput = chunk;\n                    } else {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            finalOutput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.concat)(finalOutput, chunk);\n                        } catch (e) {\n                            finalOutput = undefined;\n                            concatSupported = false;\n                        }\n                    }\n                }\n            }\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(finalOutput, \"output\"));\n    }\n    getGraph(config) {\n        const graph = new _graph_js__WEBPACK_IMPORTED_MODULE_10__.Graph();\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let currentLastNode = null;\n        this.steps.forEach((step, index)=>{\n            const stepGraph = step.getGraph(config);\n            if (index !== 0) {\n                stepGraph.trimFirstNode();\n            }\n            if (index !== this.steps.length - 1) {\n                stepGraph.trimLastNode();\n            }\n            graph.extend(stepGraph);\n            const stepFirstNode = stepGraph.firstNode();\n            if (!stepFirstNode) {\n                throw new Error(`Runnable ${step} has no first node`);\n            }\n            if (currentLastNode) {\n                graph.addEdge(currentLastNode, stepFirstNode);\n            }\n            currentLastNode = stepGraph.lastNode();\n        });\n        return graph;\n    }\n    pipe(coerceable) {\n        if (RunnableSequence.isRunnableSequence(coerceable)) {\n            return new RunnableSequence({\n                first: this.first,\n                middle: this.middle.concat([\n                    this.last,\n                    coerceable.first,\n                    ...coerceable.middle\n                ]),\n                last: coerceable.last,\n                name: this.name ?? coerceable.name\n            });\n        } else {\n            return new RunnableSequence({\n                first: this.first,\n                middle: [\n                    ...this.middle,\n                    this.last\n                ],\n                last: _coerceToRunnable(coerceable),\n                name: this.name\n            });\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static isRunnableSequence(thing) {\n        return Array.isArray(thing.middle) && Runnable.isRunnable(thing);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static from([first, ...runnables], name) {\n        return new RunnableSequence({\n            first: _coerceToRunnable(first),\n            middle: runnables.slice(0, -1).map(_coerceToRunnable),\n            last: _coerceToRunnable(runnables[runnables.length - 1]),\n            name\n        });\n    }\n}\n/**\n * A runnable that runs a mapping of runnables in parallel,\n * and returns a mapping of their outputs.\n * @example\n * ```typescript\n * const mapChain = RunnableMap.from({\n *   joke: PromptTemplate.fromTemplate(\"Tell me a joke about {topic}\").pipe(\n *     new ChatAnthropic({}),\n *   ),\n *   poem: PromptTemplate.fromTemplate(\"write a 2-line poem about {topic}\").pipe(\n *     new ChatAnthropic({}),\n *   ),\n * });\n * const result = await mapChain.invoke({ topic: \"bear\" });\n * ```\n */ class RunnableMap extends Runnable {\n    static lc_name() {\n        return \"RunnableMap\";\n    }\n    getStepsKeys() {\n        return Object.keys(this.steps);\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"steps\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.steps = {};\n        for (const [key, value] of Object.entries(fields.steps)){\n            this.steps[key] = _coerceToRunnable(value);\n        }\n    }\n    static from(steps) {\n        return new RunnableMap({\n            steps\n        });\n    }\n    async invoke(input, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.getCallbackManagerForConfig)(config);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), {\n            input\n        }, config.runId, undefined, undefined, undefined, config?.runName);\n        delete config.runId;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const output = {};\n        try {\n            await Promise.all(Object.entries(this.steps).map(async ([key, runnable])=>{\n                output[key] = await runnable.invoke(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n                    callbacks: runManager?.getChild(`map:key:${key}`)\n                }));\n            }));\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(output);\n        return output;\n    }\n    async *_transform(generator, runManager, options) {\n        // shallow copy steps to ignore changes while iterating\n        const steps = {\n            ...this.steps\n        };\n        // each step gets a copy of the input iterator\n        const inputCopies = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.atee)(generator, Object.keys(steps).length);\n        // start the first iteration of each output iterator\n        const tasks = new Map(Object.entries(steps).map(([key, runnable], i)=>{\n            const gen = runnable.transform(inputCopies[i], (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(options, {\n                callbacks: runManager?.getChild(`map:key:${key}`)\n            }));\n            return [\n                key,\n                gen.next().then((result)=>({\n                        key,\n                        gen,\n                        result\n                    }))\n            ];\n        }));\n        // yield chunks as they become available,\n        // starting new iterations as needed,\n        // until all iterators are done\n        while(tasks.size){\n            const { key, result, gen } = await Promise.race(tasks.values());\n            tasks.delete(key);\n            if (!result.done) {\n                yield {\n                    [key]: result.value\n                };\n                tasks.set(key, gen.next().then((result)=>({\n                        key,\n                        gen,\n                        result\n                    })));\n            }\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.AsyncGeneratorWithSetup(this.transform(generator(), options));\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\n/**\n * A runnable that runs a callable.\n */ class RunnableLambda extends Runnable {\n    static lc_name() {\n        return \"RunnableLambda\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"func\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.func = fields.func;\n    }\n    static from(func) {\n        return new RunnableLambda({\n            func\n        });\n    }\n    async _invoke(input, config, runManager) {\n        return new Promise((resolve, reject)=>{\n            const childConfig = (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n                callbacks: runManager?.getChild(),\n                recursionLimit: (config?.recursionLimit ?? _config_js__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_RECURSION_LIMIT) - 1\n            });\n            void _singletons_index_js__WEBPACK_IMPORTED_MODULE_9__.AsyncLocalStorageProviderSingleton.getInstance().run(childConfig, async ()=>{\n                try {\n                    let output = await this.func(input, {\n                        ...childConfig,\n                        config: childConfig\n                    });\n                    if (output && Runnable.isRunnable(output)) {\n                        if (config?.recursionLimit === 0) {\n                            throw new Error(\"Recursion limit reached.\");\n                        }\n                        output = await output.invoke(input, {\n                            ...childConfig,\n                            recursionLimit: (childConfig.recursionLimit ?? _config_js__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_RECURSION_LIMIT) - 1\n                        });\n                    }\n                    resolve(output);\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    async invoke(input, options) {\n        return this._callWithConfig(this._invoke, input, options);\n    }\n    async *_transform(generator, runManager, config) {\n        let finalChunk;\n        for await (const chunk of generator){\n            if (finalChunk === undefined) {\n                finalChunk = chunk;\n            } else {\n                // Make a best effort to gather, for any type that supports concat.\n                try {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    finalChunk = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.concat)(finalChunk, chunk);\n                } catch (e) {\n                    finalChunk = chunk;\n                }\n            }\n        }\n        const output = await new Promise((resolve, reject)=>{\n            void _singletons_index_js__WEBPACK_IMPORTED_MODULE_9__.AsyncLocalStorageProviderSingleton.getInstance().run(config, async ()=>{\n                try {\n                    const res = await this.func(finalChunk, {\n                        ...config,\n                        config\n                    });\n                    resolve(res);\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        });\n        if (output && Runnable.isRunnable(output)) {\n            if (config?.recursionLimit === 0) {\n                throw new Error(\"Recursion limit reached.\");\n            }\n            const stream = await output.stream(finalChunk, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(config, {\n                callbacks: runManager?.getChild(),\n                recursionLimit: (config?.recursionLimit ?? _config_js__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_RECURSION_LIMIT) - 1\n            }));\n            for await (const chunk of stream){\n                yield chunk;\n            }\n        } else {\n            yield output;\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.AsyncGeneratorWithSetup(this.transform(generator(), options));\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\nclass RunnableParallel extends RunnableMap {\n}\n/**\n * A Runnable that can fallback to other Runnables if it fails.\n */ class RunnableWithFallbacks extends Runnable {\n    static lc_name() {\n        return \"RunnableWithFallbacks\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"runnable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"fallbacks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.runnable = fields.runnable;\n        this.fallbacks = fields.fallbacks;\n    }\n    *runnables() {\n        yield this.runnable;\n        for (const fallback of this.fallbacks){\n            yield fallback;\n        }\n    }\n    async invoke(input, options) {\n        const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_1__.CallbackManager.configure(options?.callbacks, undefined, options?.tags, undefined, options?.metadata);\n        const { runId, ...otherOptions } = options ?? {};\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), runId, undefined, undefined, undefined, otherOptions?.runName);\n        let firstError;\n        for (const runnable of this.runnables()){\n            try {\n                const output = await runnable.invoke(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(otherOptions, {\n                    callbacks: runManager?.getChild()\n                }));\n                await runManager?.handleChainEnd(_coerceToDict(output, \"output\"));\n                return output;\n            } catch (e) {\n                if (firstError === undefined) {\n                    firstError = e;\n                }\n            }\n        }\n        if (firstError === undefined) {\n            throw new Error(\"No error stored at end of fallback.\");\n        }\n        await runManager?.handleChainError(firstError);\n        throw firstError;\n    }\n    async batch(inputs, options, batchOptions) {\n        if (batchOptions?.returnExceptions) {\n            throw new Error(\"Not implemented.\");\n        }\n        const configList = this._getOptionsList(options ?? {}, inputs.length);\n        const callbackManagers = await Promise.all(configList.map((config)=>_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_1__.CallbackManager.configure(config?.callbacks, undefined, config?.tags, undefined, config?.metadata)));\n        const runManagers = await Promise.all(callbackManagers.map(async (callbackManager, i)=>{\n            const handleStartRes = await callbackManager?.handleChainStart(this.toJSON(), _coerceToDict(inputs[i], \"input\"), configList[i].runId, undefined, undefined, undefined, configList[i].runName);\n            delete configList[i].runId;\n            return handleStartRes;\n        }));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let firstError;\n        for (const runnable of this.runnables()){\n            try {\n                const outputs = await runnable.batch(inputs, runManagers.map((runManager, j)=>(0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(configList[j], {\n                        callbacks: runManager?.getChild()\n                    })), batchOptions);\n                await Promise.all(runManagers.map((runManager, i)=>runManager?.handleChainEnd(_coerceToDict(outputs[i], \"output\"))));\n                return outputs;\n            } catch (e) {\n                if (firstError === undefined) {\n                    firstError = e;\n                }\n            }\n        }\n        if (!firstError) {\n            throw new Error(\"No error stored at end of fallbacks.\");\n        }\n        await Promise.all(runManagers.map((runManager)=>runManager?.handleChainError(firstError)));\n        throw firstError;\n    }\n}\n// TODO: Figure out why the compiler needs help eliminating Error as a RunOutput type\nfunction _coerceToRunnable(coerceable) {\n    if (typeof coerceable === \"function\") {\n        return new RunnableLambda({\n            func: coerceable\n        });\n    } else if (Runnable.isRunnable(coerceable)) {\n        return coerceable;\n    } else if (!Array.isArray(coerceable) && typeof coerceable === \"object\") {\n        const runnables = {};\n        for (const [key, value] of Object.entries(coerceable)){\n            runnables[key] = _coerceToRunnable(value);\n        }\n        return new RunnableMap({\n            steps: runnables\n        });\n    } else {\n        throw new Error(`Expected a Runnable, function or object.\\nInstead got an unsupported type.`);\n    }\n}\n/**\n * A runnable that assigns key-value pairs to inputs of type `Record<string, unknown>`.\n */ class RunnableAssign extends Runnable {\n    static lc_name() {\n        return \"RunnableAssign\";\n    }\n    constructor(fields){\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (fields instanceof RunnableMap) {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                mapper: fields\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"mapper\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.mapper = fields.mapper;\n    }\n    async invoke(input, options) {\n        const mapperResult = await this.mapper.invoke(input, options);\n        return {\n            ...input,\n            ...mapperResult\n        };\n    }\n    async *_transform(generator, runManager, options) {\n        // collect mapper keys\n        const mapperKeys = this.mapper.getStepsKeys();\n        // create two input gens, one for the mapper, one for the input\n        const [forPassthrough, forMapper] = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.atee)(generator);\n        // create mapper output gen\n        const mapperOutput = this.mapper.transform(forMapper, (0,_config_js__WEBPACK_IMPORTED_MODULE_5__.patchConfig)(options, {\n            callbacks: runManager?.getChild()\n        }));\n        // start the mapper\n        const firstMapperChunkPromise = mapperOutput.next();\n        // yield the passthrough\n        for await (const chunk of forPassthrough){\n            if (typeof chunk !== \"object\" || Array.isArray(chunk)) {\n                throw new Error(`RunnableAssign can only be used with objects as input, got ${typeof chunk}`);\n            }\n            const filtered = Object.fromEntries(Object.entries(chunk).filter(([key])=>!mapperKeys.includes(key)));\n            if (Object.keys(filtered).length > 0) {\n                yield filtered;\n            }\n        }\n        // yield the mapper output\n        yield (await firstMapperChunkPromise).value;\n        for await (const chunk of mapperOutput){\n            yield chunk;\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.AsyncGeneratorWithSetup(this.transform(generator(), options));\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\n/**\n * A runnable that assigns key-value pairs to inputs of type `Record<string, unknown>`.\n */ class RunnablePick extends Runnable {\n    static lc_name() {\n        return \"RunnablePick\";\n    }\n    constructor(fields){\n        if (typeof fields === \"string\" || Array.isArray(fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                keys: fields\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"keys\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.keys = fields.keys;\n    }\n    async _pick(input) {\n        if (typeof this.keys === \"string\") {\n            return input[this.keys];\n        } else {\n            const picked = this.keys.map((key)=>[\n                    key,\n                    input[key]\n                ]).filter((v)=>v[1] !== undefined);\n            return picked.length === 0 ? undefined : Object.fromEntries(picked);\n        }\n    }\n    async invoke(input, options) {\n        return this._callWithConfig(this._pick.bind(this), input, options);\n    }\n    async *_transform(generator) {\n        for await (const chunk of generator){\n            const picked = await this._pick(chunk);\n            if (picked !== undefined) {\n                yield picked;\n            }\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.AsyncGeneratorWithSetup(this.transform(generator(), options));\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/runnables/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/runnables/config.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/runnables/config.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_RECURSION_LIMIT: () => (/* binding */ DEFAULT_RECURSION_LIMIT),\n/* harmony export */   ensureConfig: () => (/* binding */ ensureConfig),\n/* harmony export */   getCallbackManagerForConfig: () => (/* binding */ getCallbackManagerForConfig),\n/* harmony export */   mergeConfigs: () => (/* binding */ mergeConfigs),\n/* harmony export */   patchConfig: () => (/* binding */ patchConfig)\n/* harmony export */ });\n/* harmony import */ var _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../callbacks/manager.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/callbacks/manager.js\");\n/* harmony import */ var _singletons_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../singletons/index.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/singletons/index.js\");\n\n\nconst DEFAULT_RECURSION_LIMIT = 25;\nasync function getCallbackManagerForConfig(config) {\n    return _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.CallbackManager.configure(config?.callbacks, undefined, config?.tags, undefined, config?.metadata);\n}\nfunction mergeConfigs(...configs) {\n    // We do not want to call ensureConfig on the empty state here as this may cause\n    // double loading of callbacks if async local storage is being used.\n    const copy = {};\n    for (const options of configs.filter((c)=>!!c)){\n        for (const key of Object.keys(options)){\n            if (key === \"metadata\") {\n                copy[key] = {\n                    ...copy[key],\n                    ...options[key]\n                };\n            } else if (key === \"tags\") {\n                const baseKeys = copy[key] ?? [];\n                copy[key] = [\n                    ...new Set(baseKeys.concat(options[key] ?? []))\n                ];\n            } else if (key === \"configurable\") {\n                copy[key] = {\n                    ...copy[key],\n                    ...options[key]\n                };\n            } else if (key === \"callbacks\") {\n                const baseCallbacks = copy.callbacks;\n                const providedCallbacks = options.callbacks;\n                // callbacks can be either undefined, Array<handler> or manager\n                // so merging two callbacks values has 6 cases\n                if (Array.isArray(providedCallbacks)) {\n                    if (!baseCallbacks) {\n                        copy.callbacks = providedCallbacks;\n                    } else if (Array.isArray(baseCallbacks)) {\n                        copy.callbacks = baseCallbacks.concat(providedCallbacks);\n                    } else {\n                        // baseCallbacks is a manager\n                        const manager = baseCallbacks.copy();\n                        for (const callback of providedCallbacks){\n                            manager.addHandler((0,_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.ensureHandler)(callback), true);\n                        }\n                        copy.callbacks = manager;\n                    }\n                } else if (providedCallbacks) {\n                    // providedCallbacks is a manager\n                    if (!baseCallbacks) {\n                        copy.callbacks = providedCallbacks;\n                    } else if (Array.isArray(baseCallbacks)) {\n                        const manager = providedCallbacks.copy();\n                        for (const callback of baseCallbacks){\n                            manager.addHandler((0,_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.ensureHandler)(callback), true);\n                        }\n                        copy.callbacks = manager;\n                    } else {\n                        // baseCallbacks is also a manager\n                        copy.callbacks = new _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.CallbackManager(providedCallbacks._parentRunId, {\n                            handlers: baseCallbacks.handlers.concat(providedCallbacks.handlers),\n                            inheritableHandlers: baseCallbacks.inheritableHandlers.concat(providedCallbacks.inheritableHandlers),\n                            tags: Array.from(new Set(baseCallbacks.tags.concat(providedCallbacks.tags))),\n                            inheritableTags: Array.from(new Set(baseCallbacks.inheritableTags.concat(providedCallbacks.inheritableTags))),\n                            metadata: {\n                                ...baseCallbacks.metadata,\n                                ...providedCallbacks.metadata\n                            }\n                        });\n                    }\n                }\n            } else {\n                const typedKey = key;\n                copy[typedKey] = options[typedKey] ?? copy[typedKey];\n            }\n        }\n    }\n    return copy;\n}\nconst PRIMITIVES = new Set([\n    \"string\",\n    \"number\",\n    \"boolean\"\n]);\n/**\n * Ensure that a passed config is an object with all required keys present.\n *\n * Note: To make sure async local storage loading works correctly, this\n * should not be called with a default or prepopulated config argument.\n */ function ensureConfig(config) {\n    const loadedConfig = config ?? _singletons_index_js__WEBPACK_IMPORTED_MODULE_1__.AsyncLocalStorageProviderSingleton.getInstance().getStore();\n    let empty = {\n        tags: [],\n        metadata: {},\n        callbacks: undefined,\n        recursionLimit: 25,\n        runId: undefined\n    };\n    if (loadedConfig) {\n        empty = {\n            ...empty,\n            ...loadedConfig\n        };\n    }\n    if (loadedConfig?.configurable) {\n        for (const key of Object.keys(loadedConfig.configurable)){\n            if (PRIMITIVES.has(typeof loadedConfig.configurable[key]) && !empty.metadata?.[key]) {\n                if (!empty.metadata) {\n                    empty.metadata = {};\n                }\n                empty.metadata[key] = loadedConfig.configurable[key];\n            }\n        }\n    }\n    return empty;\n}\n/**\n * Helper function that patches runnable configs with updated properties.\n */ function patchConfig(config = {}, { callbacks, maxConcurrency, recursionLimit, runName, configurable, runId } = {}) {\n    const newConfig = ensureConfig(config);\n    if (callbacks !== undefined) {\n        /**\n         * If we're replacing callbacks we need to unset runName\n         * since that should apply only to the same run as the original callbacks\n         */ delete newConfig.runName;\n        newConfig.callbacks = callbacks;\n    }\n    if (recursionLimit !== undefined) {\n        newConfig.recursionLimit = recursionLimit;\n    }\n    if (maxConcurrency !== undefined) {\n        newConfig.maxConcurrency = maxConcurrency;\n    }\n    if (runName !== undefined) {\n        newConfig.runName = runName;\n    }\n    if (configurable !== undefined) {\n        newConfig.configurable = {\n            ...newConfig.configurable,\n            ...configurable\n        };\n    }\n    if (runId !== undefined) {\n        delete newConfig.runId;\n    }\n    return newConfig;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/runnables/config.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/runnables/graph.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/runnables/graph.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Graph: () => (/* binding */ Graph),\n/* harmony export */   nodeDataStr: () => (/* binding */ nodeDataStr)\n/* harmony export */ });\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/validate.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/runnables/utils.js\");\n\n\n\nconst MAX_DATA_DISPLAY_NAME_LENGTH = 42;\nfunction nodeDataStr(node) {\n    if (!(0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(node.id)) {\n        return node.id;\n    } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isRunnableInterface)(node.data)) {\n        try {\n            let data = node.data.toString();\n            if (data.startsWith(\"<\") || data[0] !== data[0].toUpperCase() || data.split(\"\\n\").length > 1) {\n                data = node.data.getName();\n            } else if (data.length > MAX_DATA_DISPLAY_NAME_LENGTH) {\n                data = `${data.substring(0, MAX_DATA_DISPLAY_NAME_LENGTH)}...`;\n            }\n            return data.startsWith(\"Runnable\") ? data.slice(\"Runnable\".length) : data;\n        } catch (error) {\n            return node.data.getName();\n        }\n    } else {\n        return node.data.name ?? \"UnknownSchema\";\n    }\n}\nfunction nodeDataJson(node) {\n    // if node.data is implements Runnable\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isRunnableInterface)(node.data)) {\n        return {\n            type: \"runnable\",\n            data: {\n                id: node.data.lc_id,\n                name: node.data.getName()\n            }\n        };\n    } else {\n        return {\n            type: \"schema\",\n            data: {\n                ...(0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(node.data.schema),\n                title: node.data.name\n            }\n        };\n    }\n}\nclass Graph {\n    constructor(){\n        Object.defineProperty(this, \"nodes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"edges\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n    }\n    // Convert the graph to a JSON-serializable format.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    toJSON() {\n        const stableNodeIds = {};\n        Object.values(this.nodes).forEach((node, i)=>{\n            stableNodeIds[node.id] = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(node.id) ? i : node.id;\n        });\n        return {\n            nodes: Object.values(this.nodes).map((node)=>({\n                    id: stableNodeIds[node.id],\n                    ...nodeDataJson(node)\n                })),\n            edges: this.edges.map((edge)=>edge.data ? {\n                    source: stableNodeIds[edge.source],\n                    target: stableNodeIds[edge.target],\n                    data: edge.data\n                } : {\n                    source: stableNodeIds[edge.source],\n                    target: stableNodeIds[edge.target]\n                })\n        };\n    }\n    addNode(data, id) {\n        if (id !== undefined && this.nodes[id] !== undefined) {\n            throw new Error(`Node with id ${id} already exists`);\n        }\n        const nodeId = id || (0,uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n        const node = {\n            id: nodeId,\n            data\n        };\n        this.nodes[nodeId] = node;\n        return node;\n    }\n    removeNode(node) {\n        // Remove the node from the nodes map\n        delete this.nodes[node.id];\n        // Filter out edges connected to the node\n        this.edges = this.edges.filter((edge)=>edge.source !== node.id && edge.target !== node.id);\n    }\n    addEdge(source, target, data) {\n        if (this.nodes[source.id] === undefined) {\n            throw new Error(`Source node ${source.id} not in graph`);\n        }\n        if (this.nodes[target.id] === undefined) {\n            throw new Error(`Target node ${target.id} not in graph`);\n        }\n        const edge = {\n            source: source.id,\n            target: target.id,\n            data\n        };\n        this.edges.push(edge);\n        return edge;\n    }\n    firstNode() {\n        const targets = new Set(this.edges.map((edge)=>edge.target));\n        const found = [];\n        Object.values(this.nodes).forEach((node)=>{\n            if (!targets.has(node.id)) {\n                found.push(node);\n            }\n        });\n        return found[0];\n    }\n    lastNode() {\n        const sources = new Set(this.edges.map((edge)=>edge.source));\n        const found = [];\n        Object.values(this.nodes).forEach((node)=>{\n            if (!sources.has(node.id)) {\n                found.push(node);\n            }\n        });\n        return found[0];\n    }\n    extend(graph) {\n        // Add all nodes from the other graph, taking care to avoid duplicates\n        Object.entries(graph.nodes).forEach(([key, value])=>{\n            this.nodes[key] = value;\n        });\n        // Add all edges from the other graph\n        this.edges = [\n            ...this.edges,\n            ...graph.edges\n        ];\n    }\n    trimFirstNode() {\n        const firstNode = this.firstNode();\n        if (firstNode) {\n            const outgoingEdges = this.edges.filter((edge)=>edge.source === firstNode.id);\n            if (Object.keys(this.nodes).length === 1 || outgoingEdges.length === 1) {\n                this.removeNode(firstNode);\n            }\n        }\n    }\n    trimLastNode() {\n        const lastNode = this.lastNode();\n        if (lastNode) {\n            const incomingEdges = this.edges.filter((edge)=>edge.target === lastNode.id);\n            if (Object.keys(this.nodes).length === 1 || incomingEdges.length === 1) {\n                this.removeNode(lastNode);\n            }\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/runnables/graph.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/runnables/utils.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/runnables/utils.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _RootEventFilter: () => (/* binding */ _RootEventFilter),\n/* harmony export */   isRunnableInterface: () => (/* binding */ isRunnableInterface)\n/* harmony export */ });\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isRunnableInterface(thing) {\n    return thing ? thing.lc_runnable : false;\n}\n/**\n * Utility to filter the root event in the streamEvents implementation.\n * This is simply binding the arguments to the namespace to make save on\n * a bit of typing in the streamEvents implementation.\n *\n * TODO: Refactor and remove.\n */ class _RootEventFilter {\n    constructor(fields){\n        Object.defineProperty(this, \"includeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.includeNames = fields.includeNames;\n        this.includeTypes = fields.includeTypes;\n        this.includeTags = fields.includeTags;\n        this.excludeNames = fields.excludeNames;\n        this.excludeTypes = fields.excludeTypes;\n        this.excludeTags = fields.excludeTags;\n    }\n    includeEvent(event, rootType) {\n        let include = this.includeNames === undefined && this.includeTypes === undefined && this.includeTags === undefined;\n        const eventTags = event.tags ?? [];\n        if (this.includeNames !== undefined) {\n            include = include || this.includeNames.includes(event.name);\n        }\n        if (this.includeTypes !== undefined) {\n            include = include || this.includeTypes.includes(rootType);\n        }\n        if (this.includeTags !== undefined) {\n            include = include || eventTags.some((tag)=>this.includeTags?.includes(tag));\n        }\n        if (this.excludeNames !== undefined) {\n            include = include && !this.excludeNames.includes(event.name);\n        }\n        if (this.excludeTypes !== undefined) {\n            include = include && !this.excludeTypes.includes(rootType);\n        }\n        if (this.excludeTags !== undefined) {\n            include = include && eventTags.every((tag)=>!this.excludeTags?.includes(tag));\n        }\n        return include;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9ydW5uYWJsZXMvdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw4REFBOEQ7QUFDdkQsU0FBU0Esb0JBQW9CQyxLQUFLO0lBQ3JDLE9BQU9BLFFBQVFBLE1BQU1DLFdBQVcsR0FBRztBQUN2QztBQUNBOzs7Ozs7Q0FNQyxHQUNNLE1BQU1DO0lBQ1RDLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQkMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGdCQUFnQjtZQUN4Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZUFBZTtZQUN2Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGVBQWU7WUFDdkNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ0MsWUFBWSxHQUFHUCxPQUFPTyxZQUFZO1FBQ3ZDLElBQUksQ0FBQ0MsWUFBWSxHQUFHUixPQUFPUSxZQUFZO1FBQ3ZDLElBQUksQ0FBQ0MsV0FBVyxHQUFHVCxPQUFPUyxXQUFXO1FBQ3JDLElBQUksQ0FBQ0MsWUFBWSxHQUFHVixPQUFPVSxZQUFZO1FBQ3ZDLElBQUksQ0FBQ0MsWUFBWSxHQUFHWCxPQUFPVyxZQUFZO1FBQ3ZDLElBQUksQ0FBQ0MsV0FBVyxHQUFHWixPQUFPWSxXQUFXO0lBQ3pDO0lBQ0FDLGFBQWFDLEtBQUssRUFBRUMsUUFBUSxFQUFFO1FBQzFCLElBQUlDLFVBQVUsSUFBSSxDQUFDVCxZQUFZLEtBQUtVLGFBQ2hDLElBQUksQ0FBQ1QsWUFBWSxLQUFLUyxhQUN0QixJQUFJLENBQUNSLFdBQVcsS0FBS1E7UUFDekIsTUFBTUMsWUFBWUosTUFBTUssSUFBSSxJQUFJLEVBQUU7UUFDbEMsSUFBSSxJQUFJLENBQUNaLFlBQVksS0FBS1UsV0FBVztZQUNqQ0QsVUFBVUEsV0FBVyxJQUFJLENBQUNULFlBQVksQ0FBQ2EsUUFBUSxDQUFDTixNQUFNTyxJQUFJO1FBQzlEO1FBQ0EsSUFBSSxJQUFJLENBQUNiLFlBQVksS0FBS1MsV0FBVztZQUNqQ0QsVUFBVUEsV0FBVyxJQUFJLENBQUNSLFlBQVksQ0FBQ1ksUUFBUSxDQUFDTDtRQUNwRDtRQUNBLElBQUksSUFBSSxDQUFDTixXQUFXLEtBQUtRLFdBQVc7WUFDaENELFVBQ0lBLFdBQVdFLFVBQVVJLElBQUksQ0FBQyxDQUFDQyxNQUFRLElBQUksQ0FBQ2QsV0FBVyxFQUFFVyxTQUFTRztRQUN0RTtRQUNBLElBQUksSUFBSSxDQUFDYixZQUFZLEtBQUtPLFdBQVc7WUFDakNELFVBQVVBLFdBQVcsQ0FBQyxJQUFJLENBQUNOLFlBQVksQ0FBQ1UsUUFBUSxDQUFDTixNQUFNTyxJQUFJO1FBQy9EO1FBQ0EsSUFBSSxJQUFJLENBQUNWLFlBQVksS0FBS00sV0FBVztZQUNqQ0QsVUFBVUEsV0FBVyxDQUFDLElBQUksQ0FBQ0wsWUFBWSxDQUFDUyxRQUFRLENBQUNMO1FBQ3JEO1FBQ0EsSUFBSSxJQUFJLENBQUNILFdBQVcsS0FBS0ssV0FBVztZQUNoQ0QsVUFDSUEsV0FBV0UsVUFBVU0sS0FBSyxDQUFDLENBQUNELE1BQVEsQ0FBQyxJQUFJLENBQUNYLFdBQVcsRUFBRVEsU0FBU0c7UUFDeEU7UUFDQSxPQUFPUDtJQUNYO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3J1bm5hYmxlcy91dGlscy5qcz8wOWRjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5leHBvcnQgZnVuY3Rpb24gaXNSdW5uYWJsZUludGVyZmFjZSh0aGluZykge1xuICAgIHJldHVybiB0aGluZyA/IHRoaW5nLmxjX3J1bm5hYmxlIDogZmFsc2U7XG59XG4vKipcbiAqIFV0aWxpdHkgdG8gZmlsdGVyIHRoZSByb290IGV2ZW50IGluIHRoZSBzdHJlYW1FdmVudHMgaW1wbGVtZW50YXRpb24uXG4gKiBUaGlzIGlzIHNpbXBseSBiaW5kaW5nIHRoZSBhcmd1bWVudHMgdG8gdGhlIG5hbWVzcGFjZSB0byBtYWtlIHNhdmUgb25cbiAqIGEgYml0IG9mIHR5cGluZyBpbiB0aGUgc3RyZWFtRXZlbnRzIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIFRPRE86IFJlZmFjdG9yIGFuZCByZW1vdmUuXG4gKi9cbmV4cG9ydCBjbGFzcyBfUm9vdEV2ZW50RmlsdGVyIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiaW5jbHVkZU5hbWVzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImluY2x1ZGVUeXBlc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJpbmNsdWRlVGFnc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJleGNsdWRlTmFtZXNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZXhjbHVkZVR5cGVzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImV4Y2x1ZGVUYWdzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaW5jbHVkZU5hbWVzID0gZmllbGRzLmluY2x1ZGVOYW1lcztcbiAgICAgICAgdGhpcy5pbmNsdWRlVHlwZXMgPSBmaWVsZHMuaW5jbHVkZVR5cGVzO1xuICAgICAgICB0aGlzLmluY2x1ZGVUYWdzID0gZmllbGRzLmluY2x1ZGVUYWdzO1xuICAgICAgICB0aGlzLmV4Y2x1ZGVOYW1lcyA9IGZpZWxkcy5leGNsdWRlTmFtZXM7XG4gICAgICAgIHRoaXMuZXhjbHVkZVR5cGVzID0gZmllbGRzLmV4Y2x1ZGVUeXBlcztcbiAgICAgICAgdGhpcy5leGNsdWRlVGFncyA9IGZpZWxkcy5leGNsdWRlVGFncztcbiAgICB9XG4gICAgaW5jbHVkZUV2ZW50KGV2ZW50LCByb290VHlwZSkge1xuICAgICAgICBsZXQgaW5jbHVkZSA9IHRoaXMuaW5jbHVkZU5hbWVzID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHRoaXMuaW5jbHVkZVR5cGVzID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHRoaXMuaW5jbHVkZVRhZ3MgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgZXZlbnRUYWdzID0gZXZlbnQudGFncyA/PyBbXTtcbiAgICAgICAgaWYgKHRoaXMuaW5jbHVkZU5hbWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGluY2x1ZGUgPSBpbmNsdWRlIHx8IHRoaXMuaW5jbHVkZU5hbWVzLmluY2x1ZGVzKGV2ZW50Lm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmluY2x1ZGVUeXBlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbmNsdWRlID0gaW5jbHVkZSB8fCB0aGlzLmluY2x1ZGVUeXBlcy5pbmNsdWRlcyhyb290VHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaW5jbHVkZVRhZ3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaW5jbHVkZSA9XG4gICAgICAgICAgICAgICAgaW5jbHVkZSB8fCBldmVudFRhZ3Muc29tZSgodGFnKSA9PiB0aGlzLmluY2x1ZGVUYWdzPy5pbmNsdWRlcyh0YWcpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5leGNsdWRlTmFtZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaW5jbHVkZSA9IGluY2x1ZGUgJiYgIXRoaXMuZXhjbHVkZU5hbWVzLmluY2x1ZGVzKGV2ZW50Lm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmV4Y2x1ZGVUeXBlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbmNsdWRlID0gaW5jbHVkZSAmJiAhdGhpcy5leGNsdWRlVHlwZXMuaW5jbHVkZXMocm9vdFR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmV4Y2x1ZGVUYWdzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGluY2x1ZGUgPVxuICAgICAgICAgICAgICAgIGluY2x1ZGUgJiYgZXZlbnRUYWdzLmV2ZXJ5KCh0YWcpID0+ICF0aGlzLmV4Y2x1ZGVUYWdzPy5pbmNsdWRlcyh0YWcpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5jbHVkZTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiaXNSdW5uYWJsZUludGVyZmFjZSIsInRoaW5nIiwibGNfcnVubmFibGUiLCJfUm9vdEV2ZW50RmlsdGVyIiwiY29uc3RydWN0b3IiLCJmaWVsZHMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwiaW5jbHVkZU5hbWVzIiwiaW5jbHVkZVR5cGVzIiwiaW5jbHVkZVRhZ3MiLCJleGNsdWRlTmFtZXMiLCJleGNsdWRlVHlwZXMiLCJleGNsdWRlVGFncyIsImluY2x1ZGVFdmVudCIsImV2ZW50Iiwicm9vdFR5cGUiLCJpbmNsdWRlIiwidW5kZWZpbmVkIiwiZXZlbnRUYWdzIiwidGFncyIsImluY2x1ZGVzIiwibmFtZSIsInNvbWUiLCJ0YWciLCJldmVyeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/runnables/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/singletons/index.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/singletons/index.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncLocalStorageProviderSingleton: () => (/* binding */ AsyncLocalStorageProviderSingleton),\n/* harmony export */   MockAsyncLocalStorage: () => (/* binding */ MockAsyncLocalStorage)\n/* harmony export */ });\n/* eslint-disable @typescript-eslint/no-explicit-any */ class MockAsyncLocalStorage {\n    getStore() {\n        return undefined;\n    }\n    run(_store, callback) {\n        callback();\n    }\n}\nclass AsyncLocalStorageProvider {\n    constructor(){\n        Object.defineProperty(this, \"asyncLocalStorage\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new MockAsyncLocalStorage()\n        });\n        Object.defineProperty(this, \"hasBeenInitialized\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n    }\n    getInstance() {\n        return this.asyncLocalStorage;\n    }\n    initializeGlobalInstance(instance) {\n        if (!this.hasBeenInitialized) {\n            this.hasBeenInitialized = true;\n            this.asyncLocalStorage = instance;\n        }\n    }\n}\nconst AsyncLocalStorageProviderSingleton = new AsyncLocalStorageProvider();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9zaW5nbGV0b25zL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEscURBQXFELEdBQzlDLE1BQU1BO0lBQ1RDLFdBQVc7UUFDUCxPQUFPQztJQUNYO0lBQ0FDLElBQUlDLE1BQU0sRUFBRUMsUUFBUSxFQUFFO1FBQ2xCQTtJQUNKO0FBQ0o7QUFDQSxNQUFNQztJQUNGQyxhQUFjO1FBQ1ZDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUscUJBQXFCO1lBQzdDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLElBQUliO1FBQ2Y7UUFDQVEsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxzQkFBc0I7WUFDOUNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87UUFDWDtJQUNKO0lBQ0FDLGNBQWM7UUFDVixPQUFPLElBQUksQ0FBQ0MsaUJBQWlCO0lBQ2pDO0lBQ0FDLHlCQUF5QkMsUUFBUSxFQUFFO1FBQy9CLElBQUksQ0FBQyxJQUFJLENBQUNDLGtCQUFrQixFQUFFO1lBQzFCLElBQUksQ0FBQ0Esa0JBQWtCLEdBQUc7WUFDMUIsSUFBSSxDQUFDSCxpQkFBaUIsR0FBR0U7UUFDN0I7SUFDSjtBQUNKO0FBQ0EsTUFBTUUscUNBQXFDLElBQUliO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3NpbmdsZXRvbnMvaW5kZXguanM/ZDA2NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5leHBvcnQgY2xhc3MgTW9ja0FzeW5jTG9jYWxTdG9yYWdlIHtcbiAgICBnZXRTdG9yZSgpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcnVuKF9zdG9yZSwgY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG59XG5jbGFzcyBBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiYXN5bmNMb2NhbFN0b3JhZ2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IG5ldyBNb2NrQXN5bmNMb2NhbFN0b3JhZ2UoKVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiaGFzQmVlbkluaXRpYWxpemVkXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0SW5zdGFuY2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFzeW5jTG9jYWxTdG9yYWdlO1xuICAgIH1cbiAgICBpbml0aWFsaXplR2xvYmFsSW5zdGFuY2UoaW5zdGFuY2UpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhc0JlZW5Jbml0aWFsaXplZCkge1xuICAgICAgICAgICAgdGhpcy5oYXNCZWVuSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5hc3luY0xvY2FsU3RvcmFnZSA9IGluc3RhbmNlO1xuICAgICAgICB9XG4gICAgfVxufVxuY29uc3QgQXN5bmNMb2NhbFN0b3JhZ2VQcm92aWRlclNpbmdsZXRvbiA9IG5ldyBBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyKCk7XG5leHBvcnQgeyBBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyU2luZ2xldG9uIH07XG4iXSwibmFtZXMiOlsiTW9ja0FzeW5jTG9jYWxTdG9yYWdlIiwiZ2V0U3RvcmUiLCJ1bmRlZmluZWQiLCJydW4iLCJfc3RvcmUiLCJjYWxsYmFjayIsIkFzeW5jTG9jYWxTdG9yYWdlUHJvdmlkZXIiLCJjb25zdHJ1Y3RvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJnZXRJbnN0YW5jZSIsImFzeW5jTG9jYWxTdG9yYWdlIiwiaW5pdGlhbGl6ZUdsb2JhbEluc3RhbmNlIiwiaW5zdGFuY2UiLCJoYXNCZWVuSW5pdGlhbGl6ZWQiLCJBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyU2luZ2xldG9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/singletons/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/tracers/base.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/tracers/base.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseTracer: () => (/* binding */ BaseTracer)\n/* harmony export */ });\n/* harmony import */ var _callbacks_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../callbacks/base.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/callbacks/base.js\");\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _coerceToDict(value, defaultKey) {\n    return value && !Array.isArray(value) && typeof value === \"object\" ? value : {\n        [defaultKey]: value\n    };\n}\nfunction stripNonAlphanumeric(input) {\n    return input.replace(/[-:.]/g, \"\");\n}\nfunction convertToDottedOrderFormat(epoch, runId) {\n    return stripNonAlphanumeric(`${new Date(epoch).toISOString().slice(0, -1)}000Z`) + runId;\n}\nclass BaseTracer extends _callbacks_base_js__WEBPACK_IMPORTED_MODULE_0__.BaseCallbackHandler {\n    constructor(_fields){\n        super(...arguments);\n        Object.defineProperty(this, \"runMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n    }\n    copy() {\n        return this;\n    }\n    stringifyError(error) {\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (error instanceof Error) {\n            return error.message + (error?.stack ? `\\n\\n${error.stack}` : \"\");\n        }\n        if (typeof error === \"string\") {\n            return error;\n        }\n        return `${error}`;\n    }\n    _addChildRun(parentRun, childRun) {\n        parentRun.child_runs.push(childRun);\n    }\n    async _startTrace(run) {\n        const currentDottedOrder = convertToDottedOrderFormat(run.start_time, run.id);\n        const storedRun = {\n            ...run\n        };\n        if (storedRun.parent_run_id !== undefined) {\n            const parentRun = this.runMap.get(storedRun.parent_run_id);\n            if (parentRun) {\n                this._addChildRun(parentRun, storedRun);\n                parentRun.child_execution_order = Math.max(parentRun.child_execution_order, storedRun.child_execution_order);\n                storedRun.trace_id = parentRun.trace_id;\n                if (parentRun.dotted_order !== undefined) {\n                    storedRun.dotted_order = [\n                        parentRun.dotted_order,\n                        currentDottedOrder\n                    ].join(\".\");\n                } else {\n                // This can happen naturally for callbacks added within a run\n                // console.debug(`Parent run with UUID ${storedRun.parent_run_id} has no dotted order.`);\n                }\n            } else {\n            // This can happen naturally for callbacks added within a run\n            // console.debug(\n            //   `Parent run with UUID ${storedRun.parent_run_id} not found.`\n            // );\n            }\n        } else {\n            storedRun.trace_id = storedRun.id;\n            storedRun.dotted_order = currentDottedOrder;\n        }\n        this.runMap.set(storedRun.id, storedRun);\n        await this.onRunCreate?.(storedRun);\n    }\n    async _endTrace(run) {\n        const parentRun = run.parent_run_id !== undefined && this.runMap.get(run.parent_run_id);\n        if (parentRun) {\n            parentRun.child_execution_order = Math.max(parentRun.child_execution_order, run.child_execution_order);\n        } else {\n            await this.persistRun(run);\n        }\n        this.runMap.delete(run.id);\n        await this.onRunUpdate?.(run);\n    }\n    _getExecutionOrder(parentRunId) {\n        const parentRun = parentRunId !== undefined && this.runMap.get(parentRunId);\n        // If a run has no parent then execution order is 1\n        if (!parentRun) {\n            return 1;\n        }\n        return parentRun.child_execution_order + 1;\n    }\n    async handleLLMStart(llm, prompts, runId, parentRunId, extraParams, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const finalExtraParams = metadata ? {\n            ...extraParams,\n            metadata\n        } : extraParams;\n        const run = {\n            id: runId,\n            name: name ?? llm.id[llm.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: llm,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                prompts\n            },\n            execution_order,\n            child_runs: [],\n            child_execution_order: execution_order,\n            run_type: \"llm\",\n            extra: finalExtraParams ?? {},\n            tags: tags || []\n        };\n        await this._startTrace(run);\n        await this.onLLMStart?.(run);\n        return run;\n    }\n    async handleChatModelStart(llm, messages, runId, parentRunId, extraParams, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const finalExtraParams = metadata ? {\n            ...extraParams,\n            metadata\n        } : extraParams;\n        const run = {\n            id: runId,\n            name: name ?? llm.id[llm.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: llm,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                messages\n            },\n            execution_order,\n            child_runs: [],\n            child_execution_order: execution_order,\n            run_type: \"llm\",\n            extra: finalExtraParams ?? {},\n            tags: tags || []\n        };\n        await this._startTrace(run);\n        await this.onLLMStart?.(run);\n        return run;\n    }\n    async handleLLMEnd(output, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            throw new Error(\"No LLM run to end.\");\n        }\n        run.end_time = Date.now();\n        run.outputs = output;\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onLLMEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleLLMError(error, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            throw new Error(\"No LLM run to end.\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onLLMError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleChainStart(chain, inputs, runId, parentRunId, tags, metadata, runType, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: name ?? chain.id[chain.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: chain,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs,\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: runType ?? \"chain\",\n            child_runs: [],\n            extra: metadata ? {\n                metadata\n            } : {},\n            tags: tags || []\n        };\n        await this._startTrace(run);\n        await this.onChainStart?.(run);\n        return run;\n    }\n    async handleChainEnd(outputs, runId, _parentRunId, _tags, kwargs) {\n        const run = this.runMap.get(runId);\n        if (!run) {\n            throw new Error(\"No chain run to end.\");\n        }\n        run.end_time = Date.now();\n        run.outputs = _coerceToDict(outputs, \"output\");\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        if (kwargs?.inputs !== undefined) {\n            run.inputs = _coerceToDict(kwargs.inputs, \"input\");\n        }\n        await this.onChainEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleChainError(error, runId, _parentRunId, _tags, kwargs) {\n        const run = this.runMap.get(runId);\n        if (!run) {\n            throw new Error(\"No chain run to end.\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        if (kwargs?.inputs !== undefined) {\n            run.inputs = _coerceToDict(kwargs.inputs, \"input\");\n        }\n        await this.onChainError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleToolStart(tool, input, runId, parentRunId, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: name ?? tool.id[tool.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: tool,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                input\n            },\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: \"tool\",\n            child_runs: [],\n            extra: metadata ? {\n                metadata\n            } : {},\n            tags: tags || []\n        };\n        await this._startTrace(run);\n        await this.onToolStart?.(run);\n        return run;\n    }\n    async handleToolEnd(output, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"tool\") {\n            throw new Error(\"No tool run to end\");\n        }\n        run.end_time = Date.now();\n        run.outputs = {\n            output\n        };\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onToolEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleToolError(error, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"tool\") {\n            throw new Error(\"No tool run to end\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onToolError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleAgentAction(action, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        const agentRun = run;\n        agentRun.actions = agentRun.actions || [];\n        agentRun.actions.push(action);\n        agentRun.events.push({\n            name: \"agent_action\",\n            time: new Date().toISOString(),\n            kwargs: {\n                action\n            }\n        });\n        await this.onAgentAction?.(run);\n    }\n    async handleAgentEnd(action, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        run.events.push({\n            name: \"agent_end\",\n            time: new Date().toISOString(),\n            kwargs: {\n                action\n            }\n        });\n        await this.onAgentEnd?.(run);\n    }\n    async handleRetrieverStart(retriever, query, runId, parentRunId, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: name ?? retriever.id[retriever.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: retriever,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                query\n            },\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: \"retriever\",\n            child_runs: [],\n            extra: metadata ? {\n                metadata\n            } : {},\n            tags: tags || []\n        };\n        await this._startTrace(run);\n        await this.onRetrieverStart?.(run);\n        return run;\n    }\n    async handleRetrieverEnd(documents, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"retriever\") {\n            throw new Error(\"No retriever run to end\");\n        }\n        run.end_time = Date.now();\n        run.outputs = {\n            documents\n        };\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onRetrieverEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleRetrieverError(error, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"retriever\") {\n            throw new Error(\"No retriever run to end\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onRetrieverError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleText(text, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        run.events.push({\n            name: \"text\",\n            time: new Date().toISOString(),\n            kwargs: {\n                text\n            }\n        });\n        await this.onText?.(run);\n    }\n    async handleLLMNewToken(token, idx, runId, _parentRunId, _tags, fields) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            throw new Error(`Invalid \"runId\" provided to \"handleLLMNewToken\" callback.`);\n        }\n        run.events.push({\n            name: \"new_token\",\n            time: new Date().toISOString(),\n            kwargs: {\n                token,\n                idx,\n                chunk: fields?.chunk\n            }\n        });\n        await this.onLLMNewToken?.(run, token, {\n            chunk: fields?.chunk\n        });\n        return run;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/tracers/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/tracers/console.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/tracers/console.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConsoleCallbackHandler: () => (/* binding */ ConsoleCallbackHandler)\n/* harmony export */ });\n/* harmony import */ var ansi_styles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ansi-styles */ \"(rsc)/./node_modules/ansi-styles/index.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/tracers/base.js\");\n\n\nfunction wrap(style, text) {\n    return `${style.open}${text}${style.close}`;\n}\nfunction tryJsonStringify(obj, fallback) {\n    try {\n        return JSON.stringify(obj, null, 2);\n    } catch (err) {\n        return fallback;\n    }\n}\nfunction elapsed(run) {\n    if (!run.end_time) return \"\";\n    const elapsed = run.end_time - run.start_time;\n    if (elapsed < 1000) {\n        return `${elapsed}ms`;\n    }\n    return `${(elapsed / 1000).toFixed(2)}s`;\n}\nconst { color } = ansi_styles__WEBPACK_IMPORTED_MODULE_0__;\n/**\n * A tracer that logs all events to the console. It extends from the\n * `BaseTracer` class and overrides its methods to provide custom logging\n * functionality.\n * @example\n * ```typescript\n *\n * const llm = new ChatAnthropic({\n *   temperature: 0,\n *   tags: [\"example\", \"callbacks\", \"constructor\"],\n *   callbacks: [new ConsoleCallbackHandler()],\n * });\n *\n * ```\n */ class ConsoleCallbackHandler extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseTracer {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"console_callback_handler\"\n        });\n    }\n    /**\n     * Method used to persist the run. In this case, it simply returns a\n     * resolved promise as there's no persistence logic.\n     * @param _run The run to persist.\n     * @returns A resolved promise.\n     */ persistRun(_run) {\n        return Promise.resolve();\n    }\n    // utility methods\n    /**\n     * Method used to get all the parent runs of a given run.\n     * @param run The run whose parents are to be retrieved.\n     * @returns An array of parent runs.\n     */ getParents(run) {\n        const parents = [];\n        let currentRun = run;\n        while(currentRun.parent_run_id){\n            const parent = this.runMap.get(currentRun.parent_run_id);\n            if (parent) {\n                parents.push(parent);\n                currentRun = parent;\n            } else {\n                break;\n            }\n        }\n        return parents;\n    }\n    /**\n     * Method used to get a string representation of the run's lineage, which\n     * is used in logging.\n     * @param run The run whose lineage is to be retrieved.\n     * @returns A string representation of the run's lineage.\n     */ getBreadcrumbs(run) {\n        const parents = this.getParents(run).reverse();\n        const string = [\n            ...parents,\n            run\n        ].map((parent, i, arr)=>{\n            const name = `${parent.execution_order}:${parent.run_type}:${parent.name}`;\n            return i === arr.length - 1 ? wrap(ansi_styles__WEBPACK_IMPORTED_MODULE_0__.bold, name) : name;\n        }).join(\" > \");\n        return wrap(color.grey, string);\n    }\n    // logging methods\n    /**\n     * Method used to log the start of a chain run.\n     * @param run The chain run that has started.\n     * @returns void\n     */ onChainStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.green, \"[chain/start]\")} [${crumbs}] Entering Chain run with input: ${tryJsonStringify(run.inputs, \"[inputs]\")}`);\n    }\n    /**\n     * Method used to log the end of a chain run.\n     * @param run The chain run that has ended.\n     * @returns void\n     */ onChainEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[chain/end]\")} [${crumbs}] [${elapsed(run)}] Exiting Chain run with output: ${tryJsonStringify(run.outputs, \"[outputs]\")}`);\n    }\n    /**\n     * Method used to log any errors of a chain run.\n     * @param run The chain run that has errored.\n     * @returns void\n     */ onChainError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[chain/error]\")} [${crumbs}] [${elapsed(run)}] Chain run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the start of an LLM run.\n     * @param run The LLM run that has started.\n     * @returns void\n     */ onLLMStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        const inputs = \"prompts\" in run.inputs ? {\n            prompts: run.inputs.prompts.map((p)=>p.trim())\n        } : run.inputs;\n        console.log(`${wrap(color.green, \"[llm/start]\")} [${crumbs}] Entering LLM run with input: ${tryJsonStringify(inputs, \"[inputs]\")}`);\n    }\n    /**\n     * Method used to log the end of an LLM run.\n     * @param run The LLM run that has ended.\n     * @returns void\n     */ onLLMEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[llm/end]\")} [${crumbs}] [${elapsed(run)}] Exiting LLM run with output: ${tryJsonStringify(run.outputs, \"[response]\")}`);\n    }\n    /**\n     * Method used to log any errors of an LLM run.\n     * @param run The LLM run that has errored.\n     * @returns void\n     */ onLLMError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[llm/error]\")} [${crumbs}] [${elapsed(run)}] LLM run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the start of a tool run.\n     * @param run The tool run that has started.\n     * @returns void\n     */ onToolStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.green, \"[tool/start]\")} [${crumbs}] Entering Tool run with input: \"${run.inputs.input?.trim()}\"`);\n    }\n    /**\n     * Method used to log the end of a tool run.\n     * @param run The tool run that has ended.\n     * @returns void\n     */ onToolEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[tool/end]\")} [${crumbs}] [${elapsed(run)}] Exiting Tool run with output: \"${run.outputs?.output?.trim()}\"`);\n    }\n    /**\n     * Method used to log any errors of a tool run.\n     * @param run The tool run that has errored.\n     * @returns void\n     */ onToolError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[tool/error]\")} [${crumbs}] [${elapsed(run)}] Tool run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the start of a retriever run.\n     * @param run The retriever run that has started.\n     * @returns void\n     */ onRetrieverStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.green, \"[retriever/start]\")} [${crumbs}] Entering Retriever run with input: ${tryJsonStringify(run.inputs, \"[inputs]\")}`);\n    }\n    /**\n     * Method used to log the end of a retriever run.\n     * @param run The retriever run that has ended.\n     * @returns void\n     */ onRetrieverEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[retriever/end]\")} [${crumbs}] [${elapsed(run)}] Exiting Retriever run with output: ${tryJsonStringify(run.outputs, \"[outputs]\")}`);\n    }\n    /**\n     * Method used to log any errors of a retriever run.\n     * @param run The retriever run that has errored.\n     * @returns void\n     */ onRetrieverError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[retriever/error]\")} [${crumbs}] [${elapsed(run)}] Retriever run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the action selected by the agent.\n     * @param run The run in which the agent action occurred.\n     * @returns void\n     */ onAgentAction(run) {\n        const agentRun = run;\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.blue, \"[agent/action]\")} [${crumbs}] Agent selected action: ${tryJsonStringify(agentRun.actions[agentRun.actions.length - 1], \"[action]\")}`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/tracers/console.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/tracers/initialize.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/tracers/initialize.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTracingCallbackHandler: () => (/* binding */ getTracingCallbackHandler),\n/* harmony export */   getTracingV2CallbackHandler: () => (/* binding */ getTracingV2CallbackHandler)\n/* harmony export */ });\n/* harmony import */ var _tracer_langchain_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tracer_langchain.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/tracers/tracer_langchain.js\");\n/* harmony import */ var _tracer_langchain_v1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tracer_langchain_v1.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/tracers/tracer_langchain_v1.js\");\n\n\n/**\n * @deprecated Use the V2 handler instead.\n *\n * Function that returns an instance of `LangChainTracerV1`. If a session\n * is provided, it loads that session into the tracer; otherwise, it loads\n * a default session.\n * @param session Optional session to load into the tracer.\n * @returns An instance of `LangChainTracerV1`.\n */ async function getTracingCallbackHandler(session) {\n    const tracer = new _tracer_langchain_v1_js__WEBPACK_IMPORTED_MODULE_1__.LangChainTracerV1();\n    if (session) {\n        await tracer.loadSession(session);\n    } else {\n        await tracer.loadDefaultSession();\n    }\n    return tracer;\n}\n/**\n * Function that returns an instance of `LangChainTracer`. It does not\n * load any session data.\n * @returns An instance of `LangChainTracer`.\n */ async function getTracingV2CallbackHandler() {\n    return new _tracer_langchain_js__WEBPACK_IMPORTED_MODULE_0__.LangChainTracer();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC90cmFjZXJzL2luaXRpYWxpemUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF3RDtBQUNLO0FBQzdEOzs7Ozs7OztDQVFDLEdBQ00sZUFBZUUsMEJBQTBCQyxPQUFPO0lBQ25ELE1BQU1DLFNBQVMsSUFBSUgsc0VBQWlCQTtJQUNwQyxJQUFJRSxTQUFTO1FBQ1QsTUFBTUMsT0FBT0MsV0FBVyxDQUFDRjtJQUM3QixPQUNLO1FBQ0QsTUFBTUMsT0FBT0Usa0JBQWtCO0lBQ25DO0lBQ0EsT0FBT0Y7QUFDWDtBQUNBOzs7O0NBSUMsR0FDTSxlQUFlRztJQUNsQixPQUFPLElBQUlQLGlFQUFlQTtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdHJhY2Vycy9pbml0aWFsaXplLmpzPzYzOGUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTGFuZ0NoYWluVHJhY2VyIH0gZnJvbSBcIi4vdHJhY2VyX2xhbmdjaGFpbi5qc1wiO1xuaW1wb3J0IHsgTGFuZ0NoYWluVHJhY2VyVjEgfSBmcm9tIFwiLi90cmFjZXJfbGFuZ2NoYWluX3YxLmpzXCI7XG4vKipcbiAqIEBkZXByZWNhdGVkIFVzZSB0aGUgVjIgaGFuZGxlciBpbnN0ZWFkLlxuICpcbiAqIEZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBpbnN0YW5jZSBvZiBgTGFuZ0NoYWluVHJhY2VyVjFgLiBJZiBhIHNlc3Npb25cbiAqIGlzIHByb3ZpZGVkLCBpdCBsb2FkcyB0aGF0IHNlc3Npb24gaW50byB0aGUgdHJhY2VyOyBvdGhlcndpc2UsIGl0IGxvYWRzXG4gKiBhIGRlZmF1bHQgc2Vzc2lvbi5cbiAqIEBwYXJhbSBzZXNzaW9uIE9wdGlvbmFsIHNlc3Npb24gdG8gbG9hZCBpbnRvIHRoZSB0cmFjZXIuXG4gKiBAcmV0dXJucyBBbiBpbnN0YW5jZSBvZiBgTGFuZ0NoYWluVHJhY2VyVjFgLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VHJhY2luZ0NhbGxiYWNrSGFuZGxlcihzZXNzaW9uKSB7XG4gICAgY29uc3QgdHJhY2VyID0gbmV3IExhbmdDaGFpblRyYWNlclYxKCk7XG4gICAgaWYgKHNlc3Npb24pIHtcbiAgICAgICAgYXdhaXQgdHJhY2VyLmxvYWRTZXNzaW9uKHNlc3Npb24pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYXdhaXQgdHJhY2VyLmxvYWREZWZhdWx0U2Vzc2lvbigpO1xuICAgIH1cbiAgICByZXR1cm4gdHJhY2VyO1xufVxuLyoqXG4gKiBGdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gaW5zdGFuY2Ugb2YgYExhbmdDaGFpblRyYWNlcmAuIEl0IGRvZXMgbm90XG4gKiBsb2FkIGFueSBzZXNzaW9uIGRhdGEuXG4gKiBAcmV0dXJucyBBbiBpbnN0YW5jZSBvZiBgTGFuZ0NoYWluVHJhY2VyYC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFRyYWNpbmdWMkNhbGxiYWNrSGFuZGxlcigpIHtcbiAgICByZXR1cm4gbmV3IExhbmdDaGFpblRyYWNlcigpO1xufVxuIl0sIm5hbWVzIjpbIkxhbmdDaGFpblRyYWNlciIsIkxhbmdDaGFpblRyYWNlclYxIiwiZ2V0VHJhY2luZ0NhbGxiYWNrSGFuZGxlciIsInNlc3Npb24iLCJ0cmFjZXIiLCJsb2FkU2Vzc2lvbiIsImxvYWREZWZhdWx0U2Vzc2lvbiIsImdldFRyYWNpbmdWMkNhbGxiYWNrSGFuZGxlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/tracers/initialize.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/tracers/log_stream.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/tracers/log_stream.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogStreamCallbackHandler: () => (/* binding */ LogStreamCallbackHandler),\n/* harmony export */   RunLog: () => (/* binding */ RunLog),\n/* harmony export */   RunLogPatch: () => (/* binding */ RunLogPatch)\n/* harmony export */ });\n/* harmony import */ var _utils_fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/fast-json-patch/index.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/fast-json-patch/index.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/tracers/base.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/stream.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/stream.js\");\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../messages/index.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/index.js\");\n\n\n\n\n/**\n * List of jsonpatch JSONPatchOperations, which describe how to create the run state\n * from an empty dict. This is the minimal representation of the log, designed to\n * be serialized as JSON and sent over the wire to reconstruct the log on the other\n * side. Reconstruction of the state can be done with any jsonpatch-compliant library,\n * see https://jsonpatch.com for more information.\n */ class RunLogPatch {\n    constructor(fields){\n        Object.defineProperty(this, \"ops\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.ops = fields.ops ?? [];\n    }\n    concat(other) {\n        const ops = this.ops.concat(other.ops);\n        const states = (0,_utils_fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch)({}, ops);\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunLog({\n            ops,\n            state: states[states.length - 1].newDocument\n        });\n    }\n}\nclass RunLog extends RunLogPatch {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"state\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.state = fields.state;\n    }\n    concat(other) {\n        const ops = this.ops.concat(other.ops);\n        const states = (0,_utils_fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch)(this.state, other.ops);\n        return new RunLog({\n            ops,\n            state: states[states.length - 1].newDocument\n        });\n    }\n    static fromRunLogPatch(patch) {\n        const states = (0,_utils_fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch)({}, patch.ops);\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunLog({\n            ops: patch.ops,\n            state: states[states.length - 1].newDocument\n        });\n    }\n}\n/**\n * Extract standardized inputs from a run.\n *\n * Standardizes the inputs based on the type of the runnable used.\n *\n * @param run - Run object\n * @param schemaFormat - The schema format to use.\n *\n * @returns Valid inputs are only dict. By conventions, inputs always represented\n * invocation using named arguments.\n * A null means that the input is not yet known!\n */ async function _getStandardizedInputs(run, schemaFormat) {\n    if (schemaFormat === \"original\") {\n        throw new Error(\"Do not assign inputs with original schema drop the key for now. \" + \"When inputs are added to streamLog they should be added with \" + \"standardized schema for streaming events.\");\n    }\n    const { inputs } = run;\n    if ([\n        \"retriever\",\n        \"llm\",\n        \"prompt\"\n    ].includes(run.run_type)) {\n        return inputs;\n    }\n    if (Object.keys(inputs).length === 1 && inputs?.input === \"\") {\n        return undefined;\n    }\n    // new style chains\n    // These nest an additional 'input' key inside the 'inputs' to make sure\n    // the input is always a dict. We need to unpack and user the inner value.\n    // We should try to fix this in Runnables and callbacks/tracers\n    // Runnables should be using a null type here not a placeholder\n    // dict.\n    return inputs.input;\n}\nasync function _getStandardizedOutputs(run, schemaFormat) {\n    const { outputs } = run;\n    if (schemaFormat === \"original\") {\n        // Return the old schema, without standardizing anything\n        return outputs;\n    }\n    if ([\n        \"retriever\",\n        \"llm\",\n        \"prompt\"\n    ].includes(run.run_type)) {\n        return outputs;\n    }\n    // TODO: Remove this hacky check\n    if (outputs !== undefined && Object.keys(outputs).length === 1 && outputs?.output !== undefined) {\n        return outputs.output;\n    }\n    return outputs;\n}\nfunction isChatGenerationChunk(x) {\n    return x !== undefined && x.message !== undefined;\n}\n/**\n * Class that extends the `BaseTracer` class from the\n * `langchain.callbacks.tracers.base` module. It represents a callback\n * handler that logs the execution of runs and emits `RunLog` instances to a\n * `RunLogStream`.\n */ class LogStreamCallbackHandler extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseTracer {\n    constructor(fields){\n        super({\n            _awaitHandler: true,\n            ...fields\n        });\n        Object.defineProperty(this, \"autoClose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"includeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_schemaFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"original\"\n        });\n        Object.defineProperty(this, \"rootId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"keyMapByRunId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"counterMapByRunName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"transformStream\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"writer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"receiveStream\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"log_stream_tracer\"\n        });\n        this.autoClose = fields?.autoClose ?? true;\n        this.includeNames = fields?.includeNames;\n        this.includeTypes = fields?.includeTypes;\n        this.includeTags = fields?.includeTags;\n        this.excludeNames = fields?.excludeNames;\n        this.excludeTypes = fields?.excludeTypes;\n        this.excludeTags = fields?.excludeTags;\n        this._schemaFormat = fields?._schemaFormat ?? this._schemaFormat;\n        this.transformStream = new TransformStream();\n        this.writer = this.transformStream.writable.getWriter();\n        this.receiveStream = _utils_stream_js__WEBPACK_IMPORTED_MODULE_2__.IterableReadableStream.fromReadableStream(this.transformStream.readable);\n    }\n    [Symbol.asyncIterator]() {\n        return this.receiveStream;\n    }\n    async persistRun(_run) {\n    // This is a legacy method only called once for an entire run tree\n    // and is therefore not useful here\n    }\n    _includeRun(run) {\n        if (run.id === this.rootId) {\n            return false;\n        }\n        const runTags = run.tags ?? [];\n        let include = this.includeNames === undefined && this.includeTags === undefined && this.includeTypes === undefined;\n        if (this.includeNames !== undefined) {\n            include = include || this.includeNames.includes(run.name);\n        }\n        if (this.includeTypes !== undefined) {\n            include = include || this.includeTypes.includes(run.run_type);\n        }\n        if (this.includeTags !== undefined) {\n            include = include || runTags.find((tag)=>this.includeTags?.includes(tag)) !== undefined;\n        }\n        if (this.excludeNames !== undefined) {\n            include = include && !this.excludeNames.includes(run.name);\n        }\n        if (this.excludeTypes !== undefined) {\n            include = include && !this.excludeTypes.includes(run.run_type);\n        }\n        if (this.excludeTags !== undefined) {\n            include = include && runTags.every((tag)=>!this.excludeTags?.includes(tag));\n        }\n        return include;\n    }\n    async *tapOutputIterable(runId, output) {\n        // Tap an output async iterator to stream its values to the log.\n        for await (const chunk of output){\n            // root run is handled in .streamLog()\n            if (runId !== this.rootId) {\n                // if we can't find the run silently ignore\n                // eg. because this run wasn't included in the log\n                const key = this.keyMapByRunId[runId];\n                if (key) {\n                    await this.writer.write(new RunLogPatch({\n                        ops: [\n                            {\n                                op: \"add\",\n                                path: `/logs/${key}/streamed_output/-`,\n                                value: chunk\n                            }\n                        ]\n                    }));\n                }\n            }\n            yield chunk;\n        }\n    }\n    async onRunCreate(run) {\n        if (this.rootId === undefined) {\n            this.rootId = run.id;\n            await this.writer.write(new RunLogPatch({\n                ops: [\n                    {\n                        op: \"replace\",\n                        path: \"\",\n                        value: {\n                            id: run.id,\n                            name: run.name,\n                            type: run.run_type,\n                            streamed_output: [],\n                            final_output: undefined,\n                            logs: {}\n                        }\n                    }\n                ]\n            }));\n        }\n        if (!this._includeRun(run)) {\n            return;\n        }\n        if (this.counterMapByRunName[run.name] === undefined) {\n            this.counterMapByRunName[run.name] = 0;\n        }\n        this.counterMapByRunName[run.name] += 1;\n        const count = this.counterMapByRunName[run.name];\n        this.keyMapByRunId[run.id] = count === 1 ? run.name : `${run.name}:${count}`;\n        const logEntry = {\n            id: run.id,\n            name: run.name,\n            type: run.run_type,\n            tags: run.tags ?? [],\n            metadata: run.extra?.metadata ?? {},\n            start_time: new Date(run.start_time).toISOString(),\n            streamed_output: [],\n            streamed_output_str: [],\n            final_output: undefined,\n            end_time: undefined\n        };\n        if (this._schemaFormat === \"streaming_events\") {\n            logEntry.inputs = await _getStandardizedInputs(run, this._schemaFormat);\n        }\n        await this.writer.write(new RunLogPatch({\n            ops: [\n                {\n                    op: \"add\",\n                    path: `/logs/${this.keyMapByRunId[run.id]}`,\n                    value: logEntry\n                }\n            ]\n        }));\n    }\n    async onRunUpdate(run) {\n        try {\n            const runName = this.keyMapByRunId[run.id];\n            if (runName === undefined) {\n                return;\n            }\n            const ops = [];\n            if (this._schemaFormat === \"streaming_events\") {\n                ops.push({\n                    op: \"replace\",\n                    path: `/logs/${runName}/inputs`,\n                    value: await _getStandardizedInputs(run, this._schemaFormat)\n                });\n            }\n            ops.push({\n                op: \"add\",\n                path: `/logs/${runName}/final_output`,\n                value: await _getStandardizedOutputs(run, this._schemaFormat)\n            });\n            if (run.end_time !== undefined) {\n                ops.push({\n                    op: \"add\",\n                    path: `/logs/${runName}/end_time`,\n                    value: new Date(run.end_time).toISOString()\n                });\n            }\n            const patch = new RunLogPatch({\n                ops\n            });\n            await this.writer.write(patch);\n        } finally{\n            if (run.id === this.rootId) {\n                const patch = new RunLogPatch({\n                    ops: [\n                        {\n                            op: \"replace\",\n                            path: \"/final_output\",\n                            value: await _getStandardizedOutputs(run, this._schemaFormat)\n                        }\n                    ]\n                });\n                await this.writer.write(patch);\n                if (this.autoClose) {\n                    await this.writer.close();\n                }\n            }\n        }\n    }\n    async onLLMNewToken(run, token, kwargs) {\n        const runName = this.keyMapByRunId[run.id];\n        if (runName === undefined) {\n            return;\n        }\n        // TODO: Remove hack\n        const isChatModel = run.inputs.messages !== undefined;\n        let streamedOutputValue;\n        if (isChatModel) {\n            if (isChatGenerationChunk(kwargs?.chunk)) {\n                streamedOutputValue = kwargs?.chunk;\n            } else {\n                streamedOutputValue = new _messages_index_js__WEBPACK_IMPORTED_MODULE_3__.AIMessageChunk(token);\n            }\n        } else {\n            streamedOutputValue = token;\n        }\n        const patch = new RunLogPatch({\n            ops: [\n                {\n                    op: \"add\",\n                    path: `/logs/${runName}/streamed_output_str/-`,\n                    value: token\n                },\n                {\n                    op: \"add\",\n                    path: `/logs/${runName}/streamed_output/-`,\n                    value: streamedOutputValue\n                }\n            ]\n        });\n        await this.writer.write(patch);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/tracers/log_stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/tracers/root_listener.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/tracers/root_listener.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RootListenersTracer: () => (/* binding */ RootListenersTracer)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/tracers/base.js\");\n\nclass RootListenersTracer extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseTracer {\n    constructor({ config, onStart, onEnd, onError }){\n        super({\n            _awaitHandler: true\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"RootListenersTracer\"\n        });\n        /** The Run's ID. Type UUID */ Object.defineProperty(this, \"rootId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"config\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"argOnStart\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"argOnEnd\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"argOnError\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.config = config;\n        this.argOnStart = onStart;\n        this.argOnEnd = onEnd;\n        this.argOnError = onError;\n    }\n    /**\n     * This is a legacy method only called once for an entire run tree\n     * therefore not useful here\n     * @param {Run} _ Not used\n     */ persistRun(_) {\n        return Promise.resolve();\n    }\n    async onRunCreate(run) {\n        if (this.rootId) {\n            return;\n        }\n        this.rootId = run.id;\n        if (this.argOnStart) {\n            if (this.argOnStart.length === 1) {\n                await this.argOnStart(run);\n            } else if (this.argOnStart.length === 2) {\n                await this.argOnStart(run, this.config);\n            }\n        }\n    }\n    async onRunUpdate(run) {\n        if (run.id !== this.rootId) {\n            return;\n        }\n        if (!run.error) {\n            if (this.argOnEnd) {\n                if (this.argOnEnd.length === 1) {\n                    await this.argOnEnd(run);\n                } else if (this.argOnEnd.length === 2) {\n                    await this.argOnEnd(run, this.config);\n                }\n            }\n        } else if (this.argOnError) {\n            if (this.argOnError.length === 1) {\n                await this.argOnError(run);\n            } else if (this.argOnError.length === 2) {\n                await this.argOnError(run, this.config);\n            }\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC90cmFjZXJzL3Jvb3RfbGlzdGVuZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBdUM7QUFDaEMsTUFBTUMsNEJBQTRCRCxnREFBVUE7SUFDL0NFLFlBQVksRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLEtBQUssRUFBRUMsT0FBTyxFQUFHLENBQUU7UUFDOUMsS0FBSyxDQUFDO1lBQUVDLGVBQWU7UUFBSztRQUM1QkMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxRQUFRO1lBQ2hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO1FBQ1g7UUFDQSw0QkFBNEIsR0FDNUJMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsVUFBVTtZQUNsQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsVUFBVTtZQUNsQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsY0FBYztZQUN0Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsWUFBWTtZQUNwQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsY0FBYztZQUN0Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsSUFBSSxDQUFDVixNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDVyxVQUFVLEdBQUdWO1FBQ2xCLElBQUksQ0FBQ1csUUFBUSxHQUFHVjtRQUNoQixJQUFJLENBQUNXLFVBQVUsR0FBR1Y7SUFDdEI7SUFDQTs7OztLQUlDLEdBQ0RXLFdBQVdDLENBQUMsRUFBRTtRQUNWLE9BQU9DLFFBQVFDLE9BQU87SUFDMUI7SUFDQSxNQUFNQyxZQUFZQyxHQUFHLEVBQUU7UUFDbkIsSUFBSSxJQUFJLENBQUNDLE1BQU0sRUFBRTtZQUNiO1FBQ0o7UUFDQSxJQUFJLENBQUNBLE1BQU0sR0FBR0QsSUFBSUUsRUFBRTtRQUNwQixJQUFJLElBQUksQ0FBQ1YsVUFBVSxFQUFFO1lBQ2pCLElBQUksSUFBSSxDQUFDQSxVQUFVLENBQUNXLE1BQU0sS0FBSyxHQUFHO2dCQUM5QixNQUFNLElBQUksQ0FBQ1gsVUFBVSxDQUFDUTtZQUMxQixPQUNLLElBQUksSUFBSSxDQUFDUixVQUFVLENBQUNXLE1BQU0sS0FBSyxHQUFHO2dCQUNuQyxNQUFNLElBQUksQ0FBQ1gsVUFBVSxDQUFDUSxLQUFLLElBQUksQ0FBQ25CLE1BQU07WUFDMUM7UUFDSjtJQUNKO0lBQ0EsTUFBTXVCLFlBQVlKLEdBQUcsRUFBRTtRQUNuQixJQUFJQSxJQUFJRSxFQUFFLEtBQUssSUFBSSxDQUFDRCxNQUFNLEVBQUU7WUFDeEI7UUFDSjtRQUNBLElBQUksQ0FBQ0QsSUFBSUssS0FBSyxFQUFFO1lBQ1osSUFBSSxJQUFJLENBQUNaLFFBQVEsRUFBRTtnQkFDZixJQUFJLElBQUksQ0FBQ0EsUUFBUSxDQUFDVSxNQUFNLEtBQUssR0FBRztvQkFDNUIsTUFBTSxJQUFJLENBQUNWLFFBQVEsQ0FBQ087Z0JBQ3hCLE9BQ0ssSUFBSSxJQUFJLENBQUNQLFFBQVEsQ0FBQ1UsTUFBTSxLQUFLLEdBQUc7b0JBQ2pDLE1BQU0sSUFBSSxDQUFDVixRQUFRLENBQUNPLEtBQUssSUFBSSxDQUFDbkIsTUFBTTtnQkFDeEM7WUFDSjtRQUNKLE9BQ0ssSUFBSSxJQUFJLENBQUNhLFVBQVUsRUFBRTtZQUN0QixJQUFJLElBQUksQ0FBQ0EsVUFBVSxDQUFDUyxNQUFNLEtBQUssR0FBRztnQkFDOUIsTUFBTSxJQUFJLENBQUNULFVBQVUsQ0FBQ007WUFDMUIsT0FDSyxJQUFJLElBQUksQ0FBQ04sVUFBVSxDQUFDUyxNQUFNLEtBQUssR0FBRztnQkFDbkMsTUFBTSxJQUFJLENBQUNULFVBQVUsQ0FBQ00sS0FBSyxJQUFJLENBQUNuQixNQUFNO1lBQzFDO1FBQ0o7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC90cmFjZXJzL3Jvb3RfbGlzdGVuZXIuanM/ZTgzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlVHJhY2VyIH0gZnJvbSBcIi4vYmFzZS5qc1wiO1xuZXhwb3J0IGNsYXNzIFJvb3RMaXN0ZW5lcnNUcmFjZXIgZXh0ZW5kcyBCYXNlVHJhY2VyIHtcbiAgICBjb25zdHJ1Y3Rvcih7IGNvbmZpZywgb25TdGFydCwgb25FbmQsIG9uRXJyb3IsIH0pIHtcbiAgICAgICAgc3VwZXIoeyBfYXdhaXRIYW5kbGVyOiB0cnVlIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBcIlJvb3RMaXN0ZW5lcnNUcmFjZXJcIlxuICAgICAgICB9KTtcbiAgICAgICAgLyoqIFRoZSBSdW4ncyBJRC4gVHlwZSBVVUlEICovXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJvb3RJZFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjb25maWdcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiYXJnT25TdGFydFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJhcmdPbkVuZFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJhcmdPbkVycm9yXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLmFyZ09uU3RhcnQgPSBvblN0YXJ0O1xuICAgICAgICB0aGlzLmFyZ09uRW5kID0gb25FbmQ7XG4gICAgICAgIHRoaXMuYXJnT25FcnJvciA9IG9uRXJyb3I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgYSBsZWdhY3kgbWV0aG9kIG9ubHkgY2FsbGVkIG9uY2UgZm9yIGFuIGVudGlyZSBydW4gdHJlZVxuICAgICAqIHRoZXJlZm9yZSBub3QgdXNlZnVsIGhlcmVcbiAgICAgKiBAcGFyYW0ge1J1bn0gXyBOb3QgdXNlZFxuICAgICAqL1xuICAgIHBlcnNpc3RSdW4oXykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGFzeW5jIG9uUnVuQ3JlYXRlKHJ1bikge1xuICAgICAgICBpZiAodGhpcy5yb290SWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJvb3RJZCA9IHJ1bi5pZDtcbiAgICAgICAgaWYgKHRoaXMuYXJnT25TdGFydCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXJnT25TdGFydC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFyZ09uU3RhcnQocnVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuYXJnT25TdGFydC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFyZ09uU3RhcnQocnVuLCB0aGlzLmNvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgb25SdW5VcGRhdGUocnVuKSB7XG4gICAgICAgIGlmIChydW4uaWQgIT09IHRoaXMucm9vdElkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFydW4uZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFyZ09uRW5kKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYXJnT25FbmQubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYXJnT25FbmQocnVuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5hcmdPbkVuZC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hcmdPbkVuZChydW4sIHRoaXMuY29uZmlnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5hcmdPbkVycm9yKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hcmdPbkVycm9yLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYXJnT25FcnJvcihydW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5hcmdPbkVycm9yLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYXJnT25FcnJvcihydW4sIHRoaXMuY29uZmlnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJCYXNlVHJhY2VyIiwiUm9vdExpc3RlbmVyc1RyYWNlciIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwib25TdGFydCIsIm9uRW5kIiwib25FcnJvciIsIl9hd2FpdEhhbmRsZXIiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwiYXJnT25TdGFydCIsImFyZ09uRW5kIiwiYXJnT25FcnJvciIsInBlcnNpc3RSdW4iLCJfIiwiUHJvbWlzZSIsInJlc29sdmUiLCJvblJ1bkNyZWF0ZSIsInJ1biIsInJvb3RJZCIsImlkIiwibGVuZ3RoIiwib25SdW5VcGRhdGUiLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/tracers/root_listener.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/tracers/tracer_langchain.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/tracers/tracer_langchain.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LangChainTracer: () => (/* binding */ LangChainTracer)\n/* harmony export */ });\n/* harmony import */ var langsmith__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! langsmith */ \"(rsc)/./node_modules/langsmith/index.js\");\n/* harmony import */ var _utils_env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/env.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/env.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/tracers/base.js\");\n\n\n\nclass LangChainTracer extends _base_js__WEBPACK_IMPORTED_MODULE_2__.BaseTracer {\n    constructor(fields = {}){\n        super(fields);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"langchain_tracer\"\n        });\n        Object.defineProperty(this, \"projectName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const { exampleId, projectName, client } = fields;\n        this.projectName = projectName ?? (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_PROJECT\") ?? (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_SESSION\");\n        this.exampleId = exampleId;\n        this.client = client ?? new langsmith__WEBPACK_IMPORTED_MODULE_0__.Client({});\n    }\n    async _convertToCreate(run, example_id = undefined) {\n        return {\n            ...run,\n            extra: {\n                ...run.extra,\n                runtime: await (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getRuntimeEnvironment)()\n            },\n            child_runs: undefined,\n            session_name: this.projectName,\n            reference_example_id: run.parent_run_id ? undefined : example_id\n        };\n    }\n    async persistRun(_run) {}\n    async onRunCreate(run) {\n        const persistedRun = await this._convertToCreate(run, this.exampleId);\n        await this.client.createRun(persistedRun);\n    }\n    async onRunUpdate(run) {\n        const runUpdate = {\n            end_time: run.end_time,\n            error: run.error,\n            outputs: run.outputs,\n            events: run.events,\n            inputs: run.inputs,\n            trace_id: run.trace_id,\n            dotted_order: run.dotted_order,\n            parent_run_id: run.parent_run_id\n        };\n        await this.client.updateRun(run.id, runUpdate);\n    }\n    getRun(id) {\n        return this.runMap.get(id);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC90cmFjZXJzL3RyYWNlcl9sYW5nY2hhaW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFtQztBQUM2QztBQUN6QztBQUNoQyxNQUFNSSx3QkFBd0JELGdEQUFVQTtJQUMzQ0UsWUFBWUMsU0FBUyxDQUFDLENBQUMsQ0FBRTtRQUNyQixLQUFLLENBQUNBO1FBQ05DLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUTtZQUNoQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZUFBZTtZQUN2Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsYUFBYTtZQUNyQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsVUFBVTtZQUNsQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsTUFBTSxFQUFFQyxTQUFTLEVBQUVDLFdBQVcsRUFBRUMsTUFBTSxFQUFFLEdBQUdUO1FBQzNDLElBQUksQ0FBQ1EsV0FBVyxHQUNaQSxlQUNJYixxRUFBc0JBLENBQUMsd0JBQ3ZCQSxxRUFBc0JBLENBQUM7UUFDL0IsSUFBSSxDQUFDWSxTQUFTLEdBQUdBO1FBQ2pCLElBQUksQ0FBQ0UsTUFBTSxHQUFHQSxVQUFVLElBQUlmLDZDQUFNQSxDQUFDLENBQUM7SUFDeEM7SUFDQSxNQUFNZ0IsaUJBQWlCQyxHQUFHLEVBQUVDLGFBQWFDLFNBQVMsRUFBRTtRQUNoRCxPQUFPO1lBQ0gsR0FBR0YsR0FBRztZQUNORyxPQUFPO2dCQUNILEdBQUdILElBQUlHLEtBQUs7Z0JBQ1pDLFNBQVMsTUFBTW5CLG9FQUFxQkE7WUFDeEM7WUFDQW9CLFlBQVlIO1lBQ1pJLGNBQWMsSUFBSSxDQUFDVCxXQUFXO1lBQzlCVSxzQkFBc0JQLElBQUlRLGFBQWEsR0FBR04sWUFBWUQ7UUFDMUQ7SUFDSjtJQUNBLE1BQU1RLFdBQVdDLElBQUksRUFBRSxDQUFFO0lBQ3pCLE1BQU1DLFlBQVlYLEdBQUcsRUFBRTtRQUNuQixNQUFNWSxlQUFlLE1BQU0sSUFBSSxDQUFDYixnQkFBZ0IsQ0FBQ0MsS0FBSyxJQUFJLENBQUNKLFNBQVM7UUFDcEUsTUFBTSxJQUFJLENBQUNFLE1BQU0sQ0FBQ2UsU0FBUyxDQUFDRDtJQUNoQztJQUNBLE1BQU1FLFlBQVlkLEdBQUcsRUFBRTtRQUNuQixNQUFNZSxZQUFZO1lBQ2RDLFVBQVVoQixJQUFJZ0IsUUFBUTtZQUN0QkMsT0FBT2pCLElBQUlpQixLQUFLO1lBQ2hCQyxTQUFTbEIsSUFBSWtCLE9BQU87WUFDcEJDLFFBQVFuQixJQUFJbUIsTUFBTTtZQUNsQkMsUUFBUXBCLElBQUlvQixNQUFNO1lBQ2xCQyxVQUFVckIsSUFBSXFCLFFBQVE7WUFDdEJDLGNBQWN0QixJQUFJc0IsWUFBWTtZQUM5QmQsZUFBZVIsSUFBSVEsYUFBYTtRQUNwQztRQUNBLE1BQU0sSUFBSSxDQUFDVixNQUFNLENBQUN5QixTQUFTLENBQUN2QixJQUFJd0IsRUFBRSxFQUFFVDtJQUN4QztJQUNBVSxPQUFPRCxFQUFFLEVBQUU7UUFDUCxPQUFPLElBQUksQ0FBQ0UsTUFBTSxDQUFDQyxHQUFHLENBQUNIO0lBQzNCO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3RyYWNlcnMvdHJhY2VyX2xhbmdjaGFpbi5qcz8xMzJkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENsaWVudCB9IGZyb20gXCJsYW5nc21pdGhcIjtcbmltcG9ydCB7IGdldEVudmlyb25tZW50VmFyaWFibGUsIGdldFJ1bnRpbWVFbnZpcm9ubWVudCB9IGZyb20gXCIuLi91dGlscy9lbnYuanNcIjtcbmltcG9ydCB7IEJhc2VUcmFjZXIgfSBmcm9tIFwiLi9iYXNlLmpzXCI7XG5leHBvcnQgY2xhc3MgTGFuZ0NoYWluVHJhY2VyIGV4dGVuZHMgQmFzZVRyYWNlciB7XG4gICAgY29uc3RydWN0b3IoZmllbGRzID0ge30pIHtcbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogXCJsYW5nY2hhaW5fdHJhY2VyXCJcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInByb2plY3ROYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImV4YW1wbGVJZFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjbGllbnRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgeyBleGFtcGxlSWQsIHByb2plY3ROYW1lLCBjbGllbnQgfSA9IGZpZWxkcztcbiAgICAgICAgdGhpcy5wcm9qZWN0TmFtZSA9XG4gICAgICAgICAgICBwcm9qZWN0TmFtZSA/P1xuICAgICAgICAgICAgICAgIGdldEVudmlyb25tZW50VmFyaWFibGUoXCJMQU5HQ0hBSU5fUFJPSkVDVFwiKSA/P1xuICAgICAgICAgICAgICAgIGdldEVudmlyb25tZW50VmFyaWFibGUoXCJMQU5HQ0hBSU5fU0VTU0lPTlwiKTtcbiAgICAgICAgdGhpcy5leGFtcGxlSWQgPSBleGFtcGxlSWQ7XG4gICAgICAgIHRoaXMuY2xpZW50ID0gY2xpZW50ID8/IG5ldyBDbGllbnQoe30pO1xuICAgIH1cbiAgICBhc3luYyBfY29udmVydFRvQ3JlYXRlKHJ1biwgZXhhbXBsZV9pZCA9IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4ucnVuLFxuICAgICAgICAgICAgZXh0cmE6IHtcbiAgICAgICAgICAgICAgICAuLi5ydW4uZXh0cmEsXG4gICAgICAgICAgICAgICAgcnVudGltZTogYXdhaXQgZ2V0UnVudGltZUVudmlyb25tZW50KCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2hpbGRfcnVuczogdW5kZWZpbmVkLFxuICAgICAgICAgICAgc2Vzc2lvbl9uYW1lOiB0aGlzLnByb2plY3ROYW1lLFxuICAgICAgICAgICAgcmVmZXJlbmNlX2V4YW1wbGVfaWQ6IHJ1bi5wYXJlbnRfcnVuX2lkID8gdW5kZWZpbmVkIDogZXhhbXBsZV9pZCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXN5bmMgcGVyc2lzdFJ1bihfcnVuKSB7IH1cbiAgICBhc3luYyBvblJ1bkNyZWF0ZShydW4pIHtcbiAgICAgICAgY29uc3QgcGVyc2lzdGVkUnVuID0gYXdhaXQgdGhpcy5fY29udmVydFRvQ3JlYXRlKHJ1biwgdGhpcy5leGFtcGxlSWQpO1xuICAgICAgICBhd2FpdCB0aGlzLmNsaWVudC5jcmVhdGVSdW4ocGVyc2lzdGVkUnVuKTtcbiAgICB9XG4gICAgYXN5bmMgb25SdW5VcGRhdGUocnVuKSB7XG4gICAgICAgIGNvbnN0IHJ1blVwZGF0ZSA9IHtcbiAgICAgICAgICAgIGVuZF90aW1lOiBydW4uZW5kX3RpbWUsXG4gICAgICAgICAgICBlcnJvcjogcnVuLmVycm9yLFxuICAgICAgICAgICAgb3V0cHV0czogcnVuLm91dHB1dHMsXG4gICAgICAgICAgICBldmVudHM6IHJ1bi5ldmVudHMsXG4gICAgICAgICAgICBpbnB1dHM6IHJ1bi5pbnB1dHMsXG4gICAgICAgICAgICB0cmFjZV9pZDogcnVuLnRyYWNlX2lkLFxuICAgICAgICAgICAgZG90dGVkX29yZGVyOiBydW4uZG90dGVkX29yZGVyLFxuICAgICAgICAgICAgcGFyZW50X3J1bl9pZDogcnVuLnBhcmVudF9ydW5faWQsXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IHRoaXMuY2xpZW50LnVwZGF0ZVJ1bihydW4uaWQsIHJ1blVwZGF0ZSk7XG4gICAgfVxuICAgIGdldFJ1bihpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ydW5NYXAuZ2V0KGlkKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiQ2xpZW50IiwiZ2V0RW52aXJvbm1lbnRWYXJpYWJsZSIsImdldFJ1bnRpbWVFbnZpcm9ubWVudCIsIkJhc2VUcmFjZXIiLCJMYW5nQ2hhaW5UcmFjZXIiLCJjb25zdHJ1Y3RvciIsImZpZWxkcyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJleGFtcGxlSWQiLCJwcm9qZWN0TmFtZSIsImNsaWVudCIsIl9jb252ZXJ0VG9DcmVhdGUiLCJydW4iLCJleGFtcGxlX2lkIiwidW5kZWZpbmVkIiwiZXh0cmEiLCJydW50aW1lIiwiY2hpbGRfcnVucyIsInNlc3Npb25fbmFtZSIsInJlZmVyZW5jZV9leGFtcGxlX2lkIiwicGFyZW50X3J1bl9pZCIsInBlcnNpc3RSdW4iLCJfcnVuIiwib25SdW5DcmVhdGUiLCJwZXJzaXN0ZWRSdW4iLCJjcmVhdGVSdW4iLCJvblJ1blVwZGF0ZSIsInJ1blVwZGF0ZSIsImVuZF90aW1lIiwiZXJyb3IiLCJvdXRwdXRzIiwiZXZlbnRzIiwiaW5wdXRzIiwidHJhY2VfaWQiLCJkb3R0ZWRfb3JkZXIiLCJ1cGRhdGVSdW4iLCJpZCIsImdldFJ1biIsInJ1bk1hcCIsImdldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/tracers/tracer_langchain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/tracers/tracer_langchain_v1.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/tracers/tracer_langchain_v1.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LangChainTracerV1: () => (/* binding */ LangChainTracerV1)\n/* harmony export */ });\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../messages/index.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _utils_env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/env.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/env.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/tracers/base.js\");\n\n\n\n/** @deprecated Use LangChainTracer instead. */ class LangChainTracerV1 extends _base_js__WEBPACK_IMPORTED_MODULE_2__.BaseTracer {\n    constructor(){\n        super();\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"langchain_tracer\"\n        });\n        Object.defineProperty(this, \"endpoint\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_ENDPOINT\") || \"http://localhost:1984\"\n        });\n        Object.defineProperty(this, \"headers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        Object.defineProperty(this, \"session\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const apiKey = (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_API_KEY\");\n        if (apiKey) {\n            this.headers[\"x-api-key\"] = apiKey;\n        }\n    }\n    async newSession(sessionName) {\n        const sessionCreate = {\n            start_time: Date.now(),\n            name: sessionName\n        };\n        const session = await this.persistSession(sessionCreate);\n        this.session = session;\n        return session;\n    }\n    async loadSession(sessionName) {\n        const endpoint = `${this.endpoint}/sessions?name=${sessionName}`;\n        return this._handleSessionResponse(endpoint);\n    }\n    async loadDefaultSession() {\n        const endpoint = `${this.endpoint}/sessions?name=default`;\n        return this._handleSessionResponse(endpoint);\n    }\n    async convertV2RunToRun(run) {\n        const session = this.session ?? await this.loadDefaultSession();\n        const serialized = run.serialized;\n        let runResult;\n        if (run.run_type === \"llm\") {\n            const prompts = run.inputs.prompts ? run.inputs.prompts : run.inputs.messages.map((x)=>(0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.getBufferString)(x));\n            const llmRun = {\n                uuid: run.id,\n                start_time: run.start_time,\n                end_time: run.end_time,\n                execution_order: run.execution_order,\n                child_execution_order: run.child_execution_order,\n                serialized,\n                type: run.run_type,\n                session_id: session.id,\n                prompts,\n                response: run.outputs\n            };\n            runResult = llmRun;\n        } else if (run.run_type === \"chain\") {\n            const child_runs = await Promise.all(run.child_runs.map((child_run)=>this.convertV2RunToRun(child_run)));\n            const chainRun = {\n                uuid: run.id,\n                start_time: run.start_time,\n                end_time: run.end_time,\n                execution_order: run.execution_order,\n                child_execution_order: run.child_execution_order,\n                serialized,\n                type: run.run_type,\n                session_id: session.id,\n                inputs: run.inputs,\n                outputs: run.outputs,\n                child_llm_runs: child_runs.filter((child_run)=>child_run.type === \"llm\"),\n                child_chain_runs: child_runs.filter((child_run)=>child_run.type === \"chain\"),\n                child_tool_runs: child_runs.filter((child_run)=>child_run.type === \"tool\")\n            };\n            runResult = chainRun;\n        } else if (run.run_type === \"tool\") {\n            const child_runs = await Promise.all(run.child_runs.map((child_run)=>this.convertV2RunToRun(child_run)));\n            const toolRun = {\n                uuid: run.id,\n                start_time: run.start_time,\n                end_time: run.end_time,\n                execution_order: run.execution_order,\n                child_execution_order: run.child_execution_order,\n                serialized,\n                type: run.run_type,\n                session_id: session.id,\n                tool_input: run.inputs.input,\n                output: run.outputs?.output,\n                action: JSON.stringify(serialized),\n                child_llm_runs: child_runs.filter((child_run)=>child_run.type === \"llm\"),\n                child_chain_runs: child_runs.filter((child_run)=>child_run.type === \"chain\"),\n                child_tool_runs: child_runs.filter((child_run)=>child_run.type === \"tool\")\n            };\n            runResult = toolRun;\n        } else {\n            throw new Error(`Unknown run type: ${run.run_type}`);\n        }\n        return runResult;\n    }\n    async persistRun(run) {\n        let endpoint;\n        let v1Run;\n        if (run.run_type !== undefined) {\n            v1Run = await this.convertV2RunToRun(run);\n        } else {\n            v1Run = run;\n        }\n        if (v1Run.type === \"llm\") {\n            endpoint = `${this.endpoint}/llm-runs`;\n        } else if (v1Run.type === \"chain\") {\n            endpoint = `${this.endpoint}/chain-runs`;\n        } else {\n            endpoint = `${this.endpoint}/tool-runs`;\n        }\n        const response = await fetch(endpoint, {\n            method: \"POST\",\n            headers: this.headers,\n            body: JSON.stringify(v1Run)\n        });\n        if (!response.ok) {\n            console.error(`Failed to persist run: ${response.status} ${response.statusText}`);\n        }\n    }\n    async persistSession(sessionCreate) {\n        const endpoint = `${this.endpoint}/sessions`;\n        const response = await fetch(endpoint, {\n            method: \"POST\",\n            headers: this.headers,\n            body: JSON.stringify(sessionCreate)\n        });\n        if (!response.ok) {\n            console.error(`Failed to persist session: ${response.status} ${response.statusText}, using default session.`);\n            return {\n                id: 1,\n                ...sessionCreate\n            };\n        }\n        return {\n            id: (await response.json()).id,\n            ...sessionCreate\n        };\n    }\n    async _handleSessionResponse(endpoint) {\n        const response = await fetch(endpoint, {\n            method: \"GET\",\n            headers: this.headers\n        });\n        let tracerSession;\n        if (!response.ok) {\n            console.error(`Failed to load session: ${response.status} ${response.statusText}`);\n            tracerSession = {\n                id: 1,\n                start_time: Date.now()\n            };\n            this.session = tracerSession;\n            return tracerSession;\n        }\n        const resp = await response.json();\n        if (resp.length === 0) {\n            tracerSession = {\n                id: 1,\n                start_time: Date.now()\n            };\n            this.session = tracerSession;\n            return tracerSession;\n        }\n        [tracerSession] = resp;\n        this.session = tracerSession;\n        return tracerSession;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/tracers/tracer_langchain_v1.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/async_caller.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/utils/async_caller.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncCaller: () => (/* binding */ AsyncCaller)\n/* harmony export */ });\n/* harmony import */ var p_retry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-retry */ \"(rsc)/./node_modules/p-retry/index.js\");\n/* harmony import */ var p_queue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! p-queue */ \"(rsc)/./node_modules/p-queue/dist/index.js\");\n\n\nconst STATUS_NO_RETRY = [\n    400,\n    401,\n    402,\n    403,\n    404,\n    405,\n    406,\n    407,\n    409\n];\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst defaultFailedAttemptHandler = (error)=>{\n    if (error.message.startsWith(\"Cancel\") || error.message.startsWith(\"AbortError\") || error.name === \"AbortError\") {\n        throw error;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (error?.code === \"ECONNABORTED\") {\n        throw error;\n    }\n    const status = // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    error?.response?.status ?? error?.status;\n    if (status && STATUS_NO_RETRY.includes(+status)) {\n        throw error;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (error?.error?.code === \"insufficient_quota\") {\n        const err = new Error(error?.message);\n        err.name = \"InsufficientQuotaError\";\n        throw err;\n    }\n};\n/**\n * A class that can be used to make async calls with concurrency and retry logic.\n *\n * This is useful for making calls to any kind of \"expensive\" external resource,\n * be it because it's rate-limited, subject to network issues, etc.\n *\n * Concurrent calls are limited by the `maxConcurrency` parameter, which defaults\n * to `Infinity`. This means that by default, all calls will be made in parallel.\n *\n * Retries are limited by the `maxRetries` parameter, which defaults to 6. This\n * means that by default, each call will be retried up to 6 times, with an\n * exponential backoff between each attempt.\n */ class AsyncCaller {\n    constructor(params){\n        Object.defineProperty(this, \"maxConcurrency\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxRetries\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"onFailedAttempt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"queue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.maxConcurrency = params.maxConcurrency ?? Infinity;\n        this.maxRetries = params.maxRetries ?? 6;\n        this.onFailedAttempt = params.onFailedAttempt ?? defaultFailedAttemptHandler;\n        const PQueue =  true ? p_queue__WEBPACK_IMPORTED_MODULE_1__[\"default\"] : p_queue__WEBPACK_IMPORTED_MODULE_1__;\n        this.queue = new PQueue({\n            concurrency: this.maxConcurrency\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    call(callable, ...args) {\n        return this.queue.add(()=>p_retry__WEBPACK_IMPORTED_MODULE_0__(()=>callable(...args).catch((error)=>{\n                    // eslint-disable-next-line no-instanceof/no-instanceof\n                    if (error instanceof Error) {\n                        throw error;\n                    } else {\n                        throw new Error(error);\n                    }\n                }), {\n                onFailedAttempt: this.onFailedAttempt,\n                retries: this.maxRetries,\n                randomize: true\n            }), {\n            throwOnTimeout: true\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callWithOptions(options, callable, ...args) {\n        // Note this doesn't cancel the underlying request,\n        // when available prefer to use the signal option of the underlying call\n        if (options.signal) {\n            return Promise.race([\n                this.call(callable, ...args),\n                new Promise((_, reject)=>{\n                    options.signal?.addEventListener(\"abort\", ()=>{\n                        reject(new Error(\"AbortError\"));\n                    });\n                })\n            ]);\n        }\n        return this.call(callable, ...args);\n    }\n    fetch(...args) {\n        return this.call(()=>fetch(...args).then((res)=>res.ok ? res : Promise.reject(res)));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/async_caller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/env.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/utils/env.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnv: () => (/* binding */ getEnv),\n/* harmony export */   getEnvironmentVariable: () => (/* binding */ getEnvironmentVariable),\n/* harmony export */   getRuntimeEnvironment: () => (/* binding */ getRuntimeEnvironment),\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser),\n/* harmony export */   isDeno: () => (/* binding */ isDeno),\n/* harmony export */   isJsDom: () => (/* binding */ isJsDom),\n/* harmony export */   isNode: () => (/* binding */ isNode),\n/* harmony export */   isWebWorker: () => (/* binding */ isWebWorker)\n/* harmony export */ });\nconst isBrowser = ()=> false && 0;\nconst isWebWorker = ()=>typeof globalThis === \"object\" && globalThis.constructor && globalThis.constructor.name === \"DedicatedWorkerGlobalScope\";\nconst isJsDom = ()=> false || typeof navigator !== \"undefined\" && (navigator.userAgent.includes(\"Node.js\") || navigator.userAgent.includes(\"jsdom\"));\n// Supabase Edge Function provides a `Deno` global object\n// without `version` property\nconst isDeno = ()=>typeof Deno !== \"undefined\";\n// Mark not-as-node if in Supabase Edge Function\nconst isNode = ()=>typeof process !== \"undefined\" && typeof process.versions !== \"undefined\" && typeof process.versions.node !== \"undefined\" && !isDeno();\nconst getEnv = ()=>{\n    let env;\n    if (isBrowser()) {\n        env = \"browser\";\n    } else if (isNode()) {\n        env = \"node\";\n    } else if (isWebWorker()) {\n        env = \"webworker\";\n    } else if (isJsDom()) {\n        env = \"jsdom\";\n    } else if (isDeno()) {\n        env = \"deno\";\n    } else {\n        env = \"other\";\n    }\n    return env;\n};\nlet runtimeEnvironment;\nasync function getRuntimeEnvironment() {\n    if (runtimeEnvironment === undefined) {\n        const env = getEnv();\n        runtimeEnvironment = {\n            library: \"langchain-js\",\n            runtime: env\n        };\n    }\n    return runtimeEnvironment;\n}\nfunction getEnvironmentVariable(name) {\n    // Certain Deno setups will throw an error if you try to access environment variables\n    // https://github.com/langchain-ai/langchainjs/issues/1412\n    try {\n        return typeof process !== \"undefined\" ? process.env?.[name] : undefined;\n    } catch (e) {\n        return undefined;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC91dGlscy9lbnYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBTyxNQUFNQSxZQUFZLElBQU0sTUFBNkIsSUFBSSxDQUFzQyxDQUFDO0FBQ2hHLE1BQU1HLGNBQWMsSUFBTSxPQUFPQyxlQUFlLFlBQ25EQSxXQUFXQyxXQUFXLElBQ3RCRCxXQUFXQyxXQUFXLENBQUNDLElBQUksS0FBSyw2QkFBNkI7QUFDMUQsTUFBTUMsVUFBVSxJQUFNLE1BQTBELElBQ2xGLE9BQU9DLGNBQWMsZUFDakJBLENBQUFBLFVBQVVDLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDLGNBQzFCRixVQUFVQyxTQUFTLENBQUNDLFFBQVEsQ0FBQyxRQUFPLEVBQUk7QUFDcEQseURBQXlEO0FBQ3pELDZCQUE2QjtBQUN0QixNQUFNQyxTQUFTLElBQU0sT0FBT0MsU0FBUyxZQUFZO0FBQ3hELGdEQUFnRDtBQUN6QyxNQUFNQyxTQUFTLElBQU0sT0FBT0MsWUFBWSxlQUMzQyxPQUFPQSxRQUFRQyxRQUFRLEtBQUssZUFDNUIsT0FBT0QsUUFBUUMsUUFBUSxDQUFDQyxJQUFJLEtBQUssZUFDakMsQ0FBQ0wsU0FBUztBQUNQLE1BQU1NLFNBQVM7SUFDbEIsSUFBSUM7SUFDSixJQUFJbEIsYUFBYTtRQUNia0IsTUFBTTtJQUNWLE9BQ0ssSUFBSUwsVUFBVTtRQUNmSyxNQUFNO0lBQ1YsT0FDSyxJQUFJZixlQUFlO1FBQ3BCZSxNQUFNO0lBQ1YsT0FDSyxJQUFJWCxXQUFXO1FBQ2hCVyxNQUFNO0lBQ1YsT0FDSyxJQUFJUCxVQUFVO1FBQ2ZPLE1BQU07SUFDVixPQUNLO1FBQ0RBLE1BQU07SUFDVjtJQUNBLE9BQU9BO0FBQ1gsRUFBRTtBQUNGLElBQUlDO0FBQ0csZUFBZUM7SUFDbEIsSUFBSUQsdUJBQXVCRSxXQUFXO1FBQ2xDLE1BQU1ILE1BQU1EO1FBQ1pFLHFCQUFxQjtZQUNqQkcsU0FBUztZQUNUQyxTQUFTTDtRQUNiO0lBQ0o7SUFDQSxPQUFPQztBQUNYO0FBQ08sU0FBU0ssdUJBQXVCbEIsSUFBSTtJQUN2QyxxRkFBcUY7SUFDckYsMERBQTBEO0lBQzFELElBQUk7UUFDQSxPQUFPLE9BQU9RLFlBQVksY0FFbEJBLFFBQVFJLEdBQUcsRUFBRSxDQUFDWixLQUFLLEdBQ3JCZTtJQUNWLEVBQ0EsT0FBT0ksR0FBRztRQUNOLE9BQU9KO0lBQ1g7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvZW52LmpzPzQxM2MiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGlzQnJvd3NlciA9ICgpID0+IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIjtcbmV4cG9ydCBjb25zdCBpc1dlYldvcmtlciA9ICgpID0+IHR5cGVvZiBnbG9iYWxUaGlzID09PSBcIm9iamVjdFwiICYmXG4gICAgZ2xvYmFsVGhpcy5jb25zdHJ1Y3RvciAmJlxuICAgIGdsb2JhbFRoaXMuY29uc3RydWN0b3IubmFtZSA9PT0gXCJEZWRpY2F0ZWRXb3JrZXJHbG9iYWxTY29wZVwiO1xuZXhwb3J0IGNvbnN0IGlzSnNEb20gPSAoKSA9PiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubmFtZSA9PT0gXCJub2RlanNcIikgfHxcbiAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcyhcIk5vZGUuanNcIikgfHxcbiAgICAgICAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQuaW5jbHVkZXMoXCJqc2RvbVwiKSkpO1xuLy8gU3VwYWJhc2UgRWRnZSBGdW5jdGlvbiBwcm92aWRlcyBhIGBEZW5vYCBnbG9iYWwgb2JqZWN0XG4vLyB3aXRob3V0IGB2ZXJzaW9uYCBwcm9wZXJ0eVxuZXhwb3J0IGNvbnN0IGlzRGVubyA9ICgpID0+IHR5cGVvZiBEZW5vICE9PSBcInVuZGVmaW5lZFwiO1xuLy8gTWFyayBub3QtYXMtbm9kZSBpZiBpbiBTdXBhYmFzZSBFZGdlIEZ1bmN0aW9uXG5leHBvcnQgY29uc3QgaXNOb2RlID0gKCkgPT4gdHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICB0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zLm5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAhaXNEZW5vKCk7XG5leHBvcnQgY29uc3QgZ2V0RW52ID0gKCkgPT4ge1xuICAgIGxldCBlbnY7XG4gICAgaWYgKGlzQnJvd3NlcigpKSB7XG4gICAgICAgIGVudiA9IFwiYnJvd3NlclwiO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc05vZGUoKSkge1xuICAgICAgICBlbnYgPSBcIm5vZGVcIjtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNXZWJXb3JrZXIoKSkge1xuICAgICAgICBlbnYgPSBcIndlYndvcmtlclwiO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0pzRG9tKCkpIHtcbiAgICAgICAgZW52ID0gXCJqc2RvbVwiO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0Rlbm8oKSkge1xuICAgICAgICBlbnYgPSBcImRlbm9cIjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGVudiA9IFwib3RoZXJcIjtcbiAgICB9XG4gICAgcmV0dXJuIGVudjtcbn07XG5sZXQgcnVudGltZUVudmlyb25tZW50O1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFJ1bnRpbWVFbnZpcm9ubWVudCgpIHtcbiAgICBpZiAocnVudGltZUVudmlyb25tZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgZW52ID0gZ2V0RW52KCk7XG4gICAgICAgIHJ1bnRpbWVFbnZpcm9ubWVudCA9IHtcbiAgICAgICAgICAgIGxpYnJhcnk6IFwibGFuZ2NoYWluLWpzXCIsXG4gICAgICAgICAgICBydW50aW1lOiBlbnYsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBydW50aW1lRW52aXJvbm1lbnQ7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RW52aXJvbm1lbnRWYXJpYWJsZShuYW1lKSB7XG4gICAgLy8gQ2VydGFpbiBEZW5vIHNldHVwcyB3aWxsIHRocm93IGFuIGVycm9yIGlmIHlvdSB0cnkgdG8gYWNjZXNzIGVudmlyb25tZW50IHZhcmlhYmxlc1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9sYW5nY2hhaW4tYWkvbGFuZ2NoYWluanMvaXNzdWVzLzE0MTJcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgICAgID8gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb2Nlc3MtZW52XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnY/LltuYW1lXVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbImlzQnJvd3NlciIsIndpbmRvdyIsImRvY3VtZW50IiwiaXNXZWJXb3JrZXIiLCJnbG9iYWxUaGlzIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiaXNKc0RvbSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImluY2x1ZGVzIiwiaXNEZW5vIiwiRGVubyIsImlzTm9kZSIsInByb2Nlc3MiLCJ2ZXJzaW9ucyIsIm5vZGUiLCJnZXRFbnYiLCJlbnYiLCJydW50aW1lRW52aXJvbm1lbnQiLCJnZXRSdW50aW1lRW52aXJvbm1lbnQiLCJ1bmRlZmluZWQiLCJsaWJyYXJ5IiwicnVudGltZSIsImdldEVudmlyb25tZW50VmFyaWFibGUiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/env.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/fast-json-patch/index.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/utils/fast-json-patch/index.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonPatchError: () => (/* reexport safe */ _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.PatchError),\n/* harmony export */   _areEquals: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__._areEquals),\n/* harmony export */   applyOperation: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.applyOperation),\n/* harmony export */   applyPatch: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch),\n/* harmony export */   applyReducer: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.applyReducer),\n/* harmony export */   compare: () => (/* reexport safe */ _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__.compare),\n/* harmony export */   deepClone: () => (/* reexport safe */ _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__._deepClone),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   escapePathComponent: () => (/* reexport safe */ _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.escapePathComponent),\n/* harmony export */   generate: () => (/* reexport safe */ _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__.generate),\n/* harmony export */   getValueByPointer: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.getValueByPointer),\n/* harmony export */   observe: () => (/* reexport safe */ _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__.observe),\n/* harmony export */   unescapePathComponent: () => (/* reexport safe */ _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.unescapePathComponent),\n/* harmony export */   unobserve: () => (/* reexport safe */ _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__.unobserve),\n/* harmony export */   validate: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.validate),\n/* harmony export */   validator: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.validator)\n/* harmony export */ });\n/* harmony import */ var _src_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/core.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js\");\n/* harmony import */ var _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/duplex.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.js\");\n/* harmony import */ var _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/helpers.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js\");\n\n\n\n/**\n * Default export for backwards compat\n */ \n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    ..._src_core_js__WEBPACK_IMPORTED_MODULE_0__,\n    // ...duplex,\n    JsonPatchError: _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.PatchError,\n    deepClone: _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__._deepClone,\n    escapePathComponent: _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.escapePathComponent,\n    unescapePathComponent: _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.unescapePathComponent\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC91dGlscy9mYXN0LWpzb24tcGF0Y2gvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE4QjtBQUNFO0FBQ3NHO0FBQ3RJOztDQUVDLEdBQ3FDO0FBQ2dHO0FBQ3RJLGlFQUFlO0lBQ1gsR0FBR00seUNBQUk7SUFDUCxhQUFhO0lBQ2JMLGNBQWNBLHlEQUFBQTtJQUNkRSxTQUFTQSx5REFBQUE7SUFDVEMsbUJBQW1CQSxrRUFBQUE7SUFDbkJDLHFCQUFxQkEsb0VBQUFBO0FBQ3pCLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvZmFzdC1qc29uLXBhdGNoL2luZGV4LmpzP2RlMjIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vc3JjL2NvcmUuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NyYy9kdXBsZXguanNcIjtcbmV4cG9ydCB7IFBhdGNoRXJyb3IgYXMgSnNvblBhdGNoRXJyb3IsIF9kZWVwQ2xvbmUgYXMgZGVlcENsb25lLCBlc2NhcGVQYXRoQ29tcG9uZW50LCB1bmVzY2FwZVBhdGhDb21wb25lbnQsIH0gZnJvbSBcIi4vc3JjL2hlbHBlcnMuanNcIjtcbi8qKlxuICogRGVmYXVsdCBleHBvcnQgZm9yIGJhY2t3YXJkcyBjb21wYXRcbiAqL1xuaW1wb3J0ICogYXMgY29yZSBmcm9tIFwiLi9zcmMvY29yZS5qc1wiO1xuaW1wb3J0IHsgUGF0Y2hFcnJvciBhcyBKc29uUGF0Y2hFcnJvciwgX2RlZXBDbG9uZSBhcyBkZWVwQ2xvbmUsIGVzY2FwZVBhdGhDb21wb25lbnQsIHVuZXNjYXBlUGF0aENvbXBvbmVudCwgfSBmcm9tIFwiLi9zcmMvaGVscGVycy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQge1xuICAgIC4uLmNvcmUsXG4gICAgLy8gLi4uZHVwbGV4LFxuICAgIEpzb25QYXRjaEVycm9yLFxuICAgIGRlZXBDbG9uZSxcbiAgICBlc2NhcGVQYXRoQ29tcG9uZW50LFxuICAgIHVuZXNjYXBlUGF0aENvbXBvbmVudCxcbn07XG4iXSwibmFtZXMiOlsiUGF0Y2hFcnJvciIsIkpzb25QYXRjaEVycm9yIiwiX2RlZXBDbG9uZSIsImRlZXBDbG9uZSIsImVzY2FwZVBhdGhDb21wb25lbnQiLCJ1bmVzY2FwZVBhdGhDb21wb25lbnQiLCJjb3JlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/fast-json-patch/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonPatchError: () => (/* binding */ JsonPatchError),\n/* harmony export */   _areEquals: () => (/* binding */ _areEquals),\n/* harmony export */   applyOperation: () => (/* binding */ applyOperation),\n/* harmony export */   applyPatch: () => (/* binding */ applyPatch),\n/* harmony export */   applyReducer: () => (/* binding */ applyReducer),\n/* harmony export */   deepClone: () => (/* binding */ deepClone),\n/* harmony export */   getValueByPointer: () => (/* binding */ getValueByPointer),\n/* harmony export */   validate: () => (/* binding */ validate),\n/* harmony export */   validator: () => (/* binding */ validator)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js\");\n// @ts-nocheck\n\nconst JsonPatchError = _helpers_js__WEBPACK_IMPORTED_MODULE_0__.PatchError;\nconst deepClone = _helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone;\n/* We use a Javascript hash to store each\n function. Each hash entry (property) uses\n the operation identifiers specified in rfc6902.\n In this way, we can map each patch operation\n to its dedicated function in efficient way.\n */ /* The operations applicable to an object */ const objOps = {\n    add: function(obj, key, document) {\n        obj[key] = this.value;\n        return {\n            newDocument: document\n        };\n    },\n    remove: function(obj, key, document) {\n        var removed = obj[key];\n        delete obj[key];\n        return {\n            newDocument: document,\n            removed\n        };\n    },\n    replace: function(obj, key, document) {\n        var removed = obj[key];\n        obj[key] = this.value;\n        return {\n            newDocument: document,\n            removed\n        };\n    },\n    move: function(obj, key, document) {\n        /* in case move target overwrites an existing value,\n        return the removed value, this can be taxing performance-wise,\n        and is potentially unneeded */ let removed = getValueByPointer(document, this.path);\n        if (removed) {\n            removed = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(removed);\n        }\n        const originalValue = applyOperation(document, {\n            op: \"remove\",\n            path: this.from\n        }).removed;\n        applyOperation(document, {\n            op: \"add\",\n            path: this.path,\n            value: originalValue\n        });\n        return {\n            newDocument: document,\n            removed\n        };\n    },\n    copy: function(obj, key, document) {\n        const valueToCopy = getValueByPointer(document, this.from);\n        // enforce copy by value so further operations don't affect source (see issue #177)\n        applyOperation(document, {\n            op: \"add\",\n            path: this.path,\n            value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(valueToCopy)\n        });\n        return {\n            newDocument: document\n        };\n    },\n    test: function(obj, key, document) {\n        return {\n            newDocument: document,\n            test: _areEquals(obj[key], this.value)\n        };\n    },\n    _get: function(obj, key, document) {\n        this.value = obj[key];\n        return {\n            newDocument: document\n        };\n    }\n};\n/* The operations applicable to an array. Many are the same as for the object */ var arrOps = {\n    add: function(arr, i, document) {\n        if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(i)) {\n            arr.splice(i, 0, this.value);\n        } else {\n            // array props\n            arr[i] = this.value;\n        }\n        // this may be needed when using '-' in an array\n        return {\n            newDocument: document,\n            index: i\n        };\n    },\n    remove: function(arr, i, document) {\n        var removedList = arr.splice(i, 1);\n        return {\n            newDocument: document,\n            removed: removedList[0]\n        };\n    },\n    replace: function(arr, i, document) {\n        var removed = arr[i];\n        arr[i] = this.value;\n        return {\n            newDocument: document,\n            removed\n        };\n    },\n    move: objOps.move,\n    copy: objOps.copy,\n    test: objOps.test,\n    _get: objOps._get\n};\n/**\n * Retrieves a value from a JSON document by a JSON pointer.\n * Returns the value.\n *\n * @param document The document to get the value from\n * @param pointer an escaped JSON pointer\n * @return The retrieved value\n */ function getValueByPointer(document, pointer) {\n    if (pointer == \"\") {\n        return document;\n    }\n    var getOriginalDestination = {\n        op: \"_get\",\n        path: pointer\n    };\n    applyOperation(document, getOriginalDestination);\n    return getOriginalDestination.value;\n}\n/**\n * Apply a single JSON Patch Operation on a JSON document.\n * Returns the {newDocument, result} of the operation.\n * It modifies the `document` and `operation` objects - it gets the values by reference.\n * If you would like to avoid touching your values, clone them:\n * `jsonpatch.applyOperation(document, jsonpatch._deepClone(operation))`.\n *\n * @param document The document to patch\n * @param operation The operation to apply\n * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.\n * @param mutateDocument Whether to mutate the original document or clone it before applying\n * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.\n * @return `{newDocument, result}` after the operation\n */ function applyOperation(document, operation, validateOperation = false, mutateDocument = true, banPrototypeModifications = true, index = 0) {\n    if (validateOperation) {\n        if (typeof validateOperation == \"function\") {\n            validateOperation(operation, 0, document, operation.path);\n        } else {\n            validator(operation, 0);\n        }\n    }\n    /* ROOT OPERATIONS */ if (operation.path === \"\") {\n        let returnValue = {\n            newDocument: document\n        };\n        if (operation.op === \"add\") {\n            returnValue.newDocument = operation.value;\n            return returnValue;\n        } else if (operation.op === \"replace\") {\n            returnValue.newDocument = operation.value;\n            returnValue.removed = document; //document we removed\n            return returnValue;\n        } else if (operation.op === \"move\" || operation.op === \"copy\") {\n            // it's a move or copy to root\n            returnValue.newDocument = getValueByPointer(document, operation.from); // get the value by json-pointer in `from` field\n            if (operation.op === \"move\") {\n                // report removed item\n                returnValue.removed = document;\n            }\n            return returnValue;\n        } else if (operation.op === \"test\") {\n            returnValue.test = _areEquals(document, operation.value);\n            if (returnValue.test === false) {\n                throw new JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n            }\n            returnValue.newDocument = document;\n            return returnValue;\n        } else if (operation.op === \"remove\") {\n            // a remove on root\n            returnValue.removed = document;\n            returnValue.newDocument = null;\n            return returnValue;\n        } else if (operation.op === \"_get\") {\n            operation.value = document;\n            return returnValue;\n        } else {\n            /* bad operation */ if (validateOperation) {\n                throw new JsonPatchError(\"Operation `op` property is not one of operations defined in RFC-6902\", \"OPERATION_OP_INVALID\", index, operation, document);\n            } else {\n                return returnValue;\n            }\n        }\n    } else {\n        if (!mutateDocument) {\n            document = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(document);\n        }\n        const path = operation.path || \"\";\n        const keys = path.split(\"/\");\n        let obj = document;\n        let t = 1; //skip empty element - http://jsperf.com/to-shift-or-not-to-shift\n        let len = keys.length;\n        let existingPathFragment = undefined;\n        let key;\n        let validateFunction;\n        if (typeof validateOperation == \"function\") {\n            validateFunction = validateOperation;\n        } else {\n            validateFunction = validator;\n        }\n        while(true){\n            key = keys[t];\n            if (key && key.indexOf(\"~\") != -1) {\n                key = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.unescapePathComponent)(key);\n            }\n            if (banPrototypeModifications && (key == \"__proto__\" || key == \"prototype\" && t > 0 && keys[t - 1] == \"constructor\")) {\n                throw new TypeError(\"JSON-Patch: modifying `__proto__` or `constructor/prototype` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README\");\n            }\n            if (validateOperation) {\n                if (existingPathFragment === undefined) {\n                    if (obj[key] === undefined) {\n                        existingPathFragment = keys.slice(0, t).join(\"/\");\n                    } else if (t == len - 1) {\n                        existingPathFragment = operation.path;\n                    }\n                    if (existingPathFragment !== undefined) {\n                        validateFunction(operation, 0, document, existingPathFragment);\n                    }\n                }\n            }\n            t++;\n            if (Array.isArray(obj)) {\n                if (key === \"-\") {\n                    key = obj.length;\n                } else {\n                    if (validateOperation && !(0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(key)) {\n                        throw new JsonPatchError(\"Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index\", \"OPERATION_PATH_ILLEGAL_ARRAY_INDEX\", index, operation, document);\n                    } else if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(key)) {\n                        key = ~~key;\n                    }\n                }\n                if (t >= len) {\n                    if (validateOperation && operation.op === \"add\" && key > obj.length) {\n                        throw new JsonPatchError(\"The specified index MUST NOT be greater than the number of elements in the array\", \"OPERATION_VALUE_OUT_OF_BOUNDS\", index, operation, document);\n                    }\n                    const returnValue = arrOps[operation.op].call(operation, obj, key, document); // Apply patch\n                    if (returnValue.test === false) {\n                        throw new JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n                    }\n                    return returnValue;\n                }\n            } else {\n                if (t >= len) {\n                    const returnValue = objOps[operation.op].call(operation, obj, key, document); // Apply patch\n                    if (returnValue.test === false) {\n                        throw new JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n                    }\n                    return returnValue;\n                }\n            }\n            obj = obj[key];\n            // If we have more keys in the path, but the next value isn't a non-null object,\n            // throw an OPERATION_PATH_UNRESOLVABLE error instead of iterating again.\n            if (validateOperation && t < len && (!obj || typeof obj !== \"object\")) {\n                throw new JsonPatchError(\"Cannot perform operation at the desired path\", \"OPERATION_PATH_UNRESOLVABLE\", index, operation, document);\n            }\n        }\n    }\n}\n/**\n * Apply a full JSON Patch array on a JSON document.\n * Returns the {newDocument, result} of the patch.\n * It modifies the `document` object and `patch` - it gets the values by reference.\n * If you would like to avoid touching your values, clone them:\n * `jsonpatch.applyPatch(document, jsonpatch._deepClone(patch))`.\n *\n * @param document The document to patch\n * @param patch The patch to apply\n * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.\n * @param mutateDocument Whether to mutate the original document or clone it before applying\n * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.\n * @return An array of `{newDocument, result}` after the patch\n */ function applyPatch(document, patch, validateOperation, mutateDocument = true, banPrototypeModifications = true) {\n    if (validateOperation) {\n        if (!Array.isArray(patch)) {\n            throw new JsonPatchError(\"Patch sequence must be an array\", \"SEQUENCE_NOT_AN_ARRAY\");\n        }\n    }\n    if (!mutateDocument) {\n        document = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(document);\n    }\n    const results = new Array(patch.length);\n    for(let i = 0, length = patch.length; i < length; i++){\n        // we don't need to pass mutateDocument argument because if it was true, we already deep cloned the object, we'll just pass `true`\n        results[i] = applyOperation(document, patch[i], validateOperation, true, banPrototypeModifications, i);\n        document = results[i].newDocument; // in case root was replaced\n    }\n    results.newDocument = document;\n    return results;\n}\n/**\n * Apply a single JSON Patch Operation on a JSON document.\n * Returns the updated document.\n * Suitable as a reducer.\n *\n * @param document The document to patch\n * @param operation The operation to apply\n * @return The updated document\n */ function applyReducer(document, operation, index) {\n    const operationResult = applyOperation(document, operation);\n    if (operationResult.test === false) {\n        // failed test\n        throw new JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n    }\n    return operationResult.newDocument;\n}\n/**\n * Validates a single operation. Called from `jsonpatch.validate`. Throws `JsonPatchError` in case of an error.\n * @param {object} operation - operation object (patch)\n * @param {number} index - index of operation in the sequence\n * @param {object} [document] - object where the operation is supposed to be applied\n * @param {string} [existingPathFragment] - comes along with `document`\n */ function validator(operation, index, document, existingPathFragment) {\n    if (typeof operation !== \"object\" || operation === null || Array.isArray(operation)) {\n        throw new JsonPatchError(\"Operation is not an object\", \"OPERATION_NOT_AN_OBJECT\", index, operation, document);\n    } else if (!objOps[operation.op]) {\n        throw new JsonPatchError(\"Operation `op` property is not one of operations defined in RFC-6902\", \"OPERATION_OP_INVALID\", index, operation, document);\n    } else if (typeof operation.path !== \"string\") {\n        throw new JsonPatchError(\"Operation `path` property is not a string\", \"OPERATION_PATH_INVALID\", index, operation, document);\n    } else if (operation.path.indexOf(\"/\") !== 0 && operation.path.length > 0) {\n        // paths that aren't empty string should start with \"/\"\n        throw new JsonPatchError('Operation `path` property must start with \"/\"', \"OPERATION_PATH_INVALID\", index, operation, document);\n    } else if ((operation.op === \"move\" || operation.op === \"copy\") && typeof operation.from !== \"string\") {\n        throw new JsonPatchError(\"Operation `from` property is not present (applicable in `move` and `copy` operations)\", \"OPERATION_FROM_REQUIRED\", index, operation, document);\n    } else if ((operation.op === \"add\" || operation.op === \"replace\" || operation.op === \"test\") && operation.value === undefined) {\n        throw new JsonPatchError(\"Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)\", \"OPERATION_VALUE_REQUIRED\", index, operation, document);\n    } else if ((operation.op === \"add\" || operation.op === \"replace\" || operation.op === \"test\") && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.hasUndefined)(operation.value)) {\n        throw new JsonPatchError(\"Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)\", \"OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED\", index, operation, document);\n    } else if (document) {\n        if (operation.op == \"add\") {\n            var pathLen = operation.path.split(\"/\").length;\n            var existingPathLen = existingPathFragment.split(\"/\").length;\n            if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) {\n                throw new JsonPatchError(\"Cannot perform an `add` operation at the desired path\", \"OPERATION_PATH_CANNOT_ADD\", index, operation, document);\n            }\n        } else if (operation.op === \"replace\" || operation.op === \"remove\" || operation.op === \"_get\") {\n            if (operation.path !== existingPathFragment) {\n                throw new JsonPatchError(\"Cannot perform the operation at a path that does not exist\", \"OPERATION_PATH_UNRESOLVABLE\", index, operation, document);\n            }\n        } else if (operation.op === \"move\" || operation.op === \"copy\") {\n            var existingValue = {\n                op: \"_get\",\n                path: operation.from,\n                value: undefined\n            };\n            var error = validate([\n                existingValue\n            ], document);\n            if (error && error.name === \"OPERATION_PATH_UNRESOLVABLE\") {\n                throw new JsonPatchError(\"Cannot perform the operation from a path that does not exist\", \"OPERATION_FROM_UNRESOLVABLE\", index, operation, document);\n            }\n        }\n    }\n}\n/**\n * Validates a sequence of operations. If `document` parameter is provided, the sequence is additionally validated against the object document.\n * If error is encountered, returns a JsonPatchError object\n * @param sequence\n * @param document\n * @returns {JsonPatchError|undefined}\n */ function validate(sequence, document, externalValidator) {\n    try {\n        if (!Array.isArray(sequence)) {\n            throw new JsonPatchError(\"Patch sequence must be an array\", \"SEQUENCE_NOT_AN_ARRAY\");\n        }\n        if (document) {\n            //clone document and sequence so that we can safely try applying operations\n            applyPatch((0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(document), (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(sequence), externalValidator || true);\n        } else {\n            externalValidator = externalValidator || validator;\n            for(var i = 0; i < sequence.length; i++){\n                externalValidator(sequence[i], i, document, undefined);\n            }\n        }\n    } catch (e) {\n        if (e instanceof JsonPatchError) {\n            return e;\n        } else {\n            throw e;\n        }\n    }\n}\n// based on https://github.com/epoberezkin/fast-deep-equal\n// MIT License\n// Copyright (c) 2017 Evgeny Poberezkin\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nfunction _areEquals(a, b) {\n    if (a === b) return true;\n    if (a && b && typeof a == \"object\" && typeof b == \"object\") {\n        var arrA = Array.isArray(a), arrB = Array.isArray(b), i, length, key;\n        if (arrA && arrB) {\n            length = a.length;\n            if (length != b.length) return false;\n            for(i = length; i-- !== 0;)if (!_areEquals(a[i], b[i])) return false;\n            return true;\n        }\n        if (arrA != arrB) return false;\n        var keys = Object.keys(a);\n        length = keys.length;\n        if (length !== Object.keys(b).length) return false;\n        for(i = length; i-- !== 0;)if (!b.hasOwnProperty(keys[i])) return false;\n        for(i = length; i-- !== 0;){\n            key = keys[i];\n            if (!_areEquals(a[key], b[key])) return false;\n        }\n        return true;\n    }\n    return a !== a && b !== b;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compare: () => (/* binding */ compare),\n/* harmony export */   generate: () => (/* binding */ generate),\n/* harmony export */   observe: () => (/* binding */ observe),\n/* harmony export */   unobserve: () => (/* binding */ unobserve)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js\");\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js\");\n// @ts-nocheck\n// Inlined because of ESM import issues\n/*!\n * https://github.com/Starcounter-Jack/JSON-Patch\n * (c) 2013-2021 Joachim Wester\n * MIT license\n */ \n\nvar beforeDict = new WeakMap();\nclass Mirror {\n    constructor(obj){\n        Object.defineProperty(this, \"obj\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"observers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n        Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.obj = obj;\n    }\n}\nclass ObserverInfo {\n    constructor(callback, observer){\n        Object.defineProperty(this, \"callback\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"observer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.callback = callback;\n        this.observer = observer;\n    }\n}\nfunction getMirror(obj) {\n    return beforeDict.get(obj);\n}\nfunction getObserverFromMirror(mirror, callback) {\n    return mirror.observers.get(callback);\n}\nfunction removeObserverFromMirror(mirror, observer) {\n    mirror.observers.delete(observer.callback);\n}\n/**\n * Detach an observer from an object\n */ function unobserve(root, observer) {\n    observer.unobserve();\n}\n/**\n * Observes changes made to an object, which can then be retrieved using generate\n */ function observe(obj, callback) {\n    var patches = [];\n    var observer;\n    var mirror = getMirror(obj);\n    if (!mirror) {\n        mirror = new Mirror(obj);\n        beforeDict.set(obj, mirror);\n    } else {\n        const observerInfo = getObserverFromMirror(mirror, callback);\n        observer = observerInfo && observerInfo.observer;\n    }\n    if (observer) {\n        return observer;\n    }\n    observer = {};\n    mirror.value = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(obj);\n    if (callback) {\n        observer.callback = callback;\n        observer.next = null;\n        var dirtyCheck = ()=>{\n            generate(observer);\n        };\n        var fastCheck = ()=>{\n            clearTimeout(observer.next);\n            observer.next = setTimeout(dirtyCheck);\n        };\n        if (false) {}\n    }\n    observer.patches = patches;\n    observer.object = obj;\n    observer.unobserve = ()=>{\n        generate(observer);\n        clearTimeout(observer.next);\n        removeObserverFromMirror(mirror, observer);\n        if (false) {}\n    };\n    mirror.observers.set(callback, new ObserverInfo(callback, observer));\n    return observer;\n}\n/**\n * Generate an array of patches from an observer\n */ function generate(observer, invertible = false) {\n    var mirror = beforeDict.get(observer.object);\n    _generate(mirror.value, observer.object, observer.patches, \"\", invertible);\n    if (observer.patches.length) {\n        (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.applyPatch)(mirror.value, observer.patches);\n    }\n    var temp = observer.patches;\n    if (temp.length > 0) {\n        observer.patches = [];\n        if (observer.callback) {\n            observer.callback(temp);\n        }\n    }\n    return temp;\n}\n// Dirty check if obj is different from mirror, generate patches and update mirror\nfunction _generate(mirror, obj, patches, path, invertible) {\n    if (obj === mirror) {\n        return;\n    }\n    if (typeof obj.toJSON === \"function\") {\n        obj = obj.toJSON();\n    }\n    var newKeys = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._objectKeys)(obj);\n    var oldKeys = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._objectKeys)(mirror);\n    var changed = false;\n    var deleted = false;\n    //if ever \"move\" operation is implemented here, make sure this test runs OK: \"should not generate the same patch twice (move)\"\n    for(var t = oldKeys.length - 1; t >= 0; t--){\n        var key = oldKeys[t];\n        var oldVal = mirror[key];\n        if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.hasOwnProperty)(obj, key) && !(obj[key] === undefined && oldVal !== undefined && Array.isArray(obj) === false)) {\n            var newVal = obj[key];\n            if (typeof oldVal == \"object\" && oldVal != null && typeof newVal == \"object\" && newVal != null && Array.isArray(oldVal) === Array.isArray(newVal)) {\n                _generate(oldVal, newVal, patches, path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key), invertible);\n            } else {\n                if (oldVal !== newVal) {\n                    changed = true;\n                    if (invertible) {\n                        patches.push({\n                            op: \"test\",\n                            path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key),\n                            value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(oldVal)\n                        });\n                    }\n                    patches.push({\n                        op: \"replace\",\n                        path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key),\n                        value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(newVal)\n                    });\n                }\n            }\n        } else if (Array.isArray(mirror) === Array.isArray(obj)) {\n            if (invertible) {\n                patches.push({\n                    op: \"test\",\n                    path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key),\n                    value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(oldVal)\n                });\n            }\n            patches.push({\n                op: \"remove\",\n                path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key)\n            });\n            deleted = true; // property has been deleted\n        } else {\n            if (invertible) {\n                patches.push({\n                    op: \"test\",\n                    path,\n                    value: mirror\n                });\n            }\n            patches.push({\n                op: \"replace\",\n                path,\n                value: obj\n            });\n            changed = true;\n        }\n    }\n    if (!deleted && newKeys.length == oldKeys.length) {\n        return;\n    }\n    for(var t = 0; t < newKeys.length; t++){\n        var key = newKeys[t];\n        if (!(0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.hasOwnProperty)(mirror, key) && obj[key] !== undefined) {\n            patches.push({\n                op: \"add\",\n                path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key),\n                value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(obj[key])\n            });\n        }\n    }\n}\n/**\n * Create an array of patches from the differences in two objects\n */ function compare(tree1, tree2, invertible = false) {\n    var patches = [];\n    _generate(tree1, tree2, patches, \"\", invertible);\n    return patches;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PatchError: () => (/* binding */ PatchError),\n/* harmony export */   _deepClone: () => (/* binding */ _deepClone),\n/* harmony export */   _getPathRecursive: () => (/* binding */ _getPathRecursive),\n/* harmony export */   _objectKeys: () => (/* binding */ _objectKeys),\n/* harmony export */   escapePathComponent: () => (/* binding */ escapePathComponent),\n/* harmony export */   getPath: () => (/* binding */ getPath),\n/* harmony export */   hasOwnProperty: () => (/* binding */ hasOwnProperty),\n/* harmony export */   hasUndefined: () => (/* binding */ hasUndefined),\n/* harmony export */   isInteger: () => (/* binding */ isInteger),\n/* harmony export */   unescapePathComponent: () => (/* binding */ unescapePathComponent)\n/* harmony export */ });\n// @ts-nocheck\n// Inlined because of ESM import issues\n/*!\n * https://github.com/Starcounter-Jack/JSON-Patch\n * (c) 2017-2022 Joachim Wester\n * MIT licensed\n */ const _hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwnProperty(obj, key) {\n    return _hasOwnProperty.call(obj, key);\n}\nfunction _objectKeys(obj) {\n    if (Array.isArray(obj)) {\n        const keys = new Array(obj.length);\n        for(let k = 0; k < keys.length; k++){\n            keys[k] = \"\" + k;\n        }\n        return keys;\n    }\n    if (Object.keys) {\n        return Object.keys(obj);\n    }\n    let keys = [];\n    for(let i in obj){\n        if (hasOwnProperty(obj, i)) {\n            keys.push(i);\n        }\n    }\n    return keys;\n}\n/**\n * Deeply clone the object.\n * https://jsperf.com/deep-copy-vs-json-stringify-json-parse/25 (recursiveDeepCopy)\n * @param  {any} obj value to clone\n * @return {any} cloned obj\n */ function _deepClone(obj) {\n    switch(typeof obj){\n        case \"object\":\n            return JSON.parse(JSON.stringify(obj)); //Faster than ES5 clone - http://jsperf.com/deep-cloning-of-objects/5\n        case \"undefined\":\n            return null; //this is how JSON.stringify behaves for array items\n        default:\n            return obj; //no need to clone primitives\n    }\n}\n//3x faster than cached /^\\d+$/.test(str)\nfunction isInteger(str) {\n    let i = 0;\n    const len = str.length;\n    let charCode;\n    while(i < len){\n        charCode = str.charCodeAt(i);\n        if (charCode >= 48 && charCode <= 57) {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\n/**\n * Escapes a json pointer path\n * @param path The raw pointer\n * @return the Escaped path\n */ function escapePathComponent(path) {\n    if (path.indexOf(\"/\") === -1 && path.indexOf(\"~\") === -1) return path;\n    return path.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n}\n/**\n * Unescapes a json pointer path\n * @param path The escaped pointer\n * @return The unescaped path\n */ function unescapePathComponent(path) {\n    return path.replace(/~1/g, \"/\").replace(/~0/g, \"~\");\n}\nfunction _getPathRecursive(root, obj) {\n    let found;\n    for(let key in root){\n        if (hasOwnProperty(root, key)) {\n            if (root[key] === obj) {\n                return escapePathComponent(key) + \"/\";\n            } else if (typeof root[key] === \"object\") {\n                found = _getPathRecursive(root[key], obj);\n                if (found != \"\") {\n                    return escapePathComponent(key) + \"/\" + found;\n                }\n            }\n        }\n    }\n    return \"\";\n}\nfunction getPath(root, obj) {\n    if (root === obj) {\n        return \"/\";\n    }\n    const path = _getPathRecursive(root, obj);\n    if (path === \"\") {\n        throw new Error(\"Object not found in root\");\n    }\n    return `/${path}`;\n}\n/**\n * Recursively checks whether an object has any undefined values inside.\n */ function hasUndefined(obj) {\n    if (obj === undefined) {\n        return true;\n    }\n    if (obj) {\n        if (Array.isArray(obj)) {\n            for(let i = 0, len = obj.length; i < len; i++){\n                if (hasUndefined(obj[i])) {\n                    return true;\n                }\n            }\n        } else if (typeof obj === \"object\") {\n            const objKeys = _objectKeys(obj);\n            const objKeysLength = objKeys.length;\n            for(var i = 0; i < objKeysLength; i++){\n                if (hasUndefined(obj[objKeys[i]])) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nfunction patchErrorMessageFormatter(message, args) {\n    const messageParts = [\n        message\n    ];\n    for(const key in args){\n        const value = typeof args[key] === \"object\" ? JSON.stringify(args[key], null, 2) : args[key]; // pretty print\n        if (typeof value !== \"undefined\") {\n            messageParts.push(`${key}: ${value}`);\n        }\n    }\n    return messageParts.join(\"\\n\");\n}\nclass PatchError extends Error {\n    constructor(message, name, index, operation, tree){\n        super(patchErrorMessageFormatter(message, {\n            name,\n            index,\n            operation,\n            tree\n        }));\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: name\n        });\n        Object.defineProperty(this, \"index\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: index\n        });\n        Object.defineProperty(this, \"operation\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: operation\n        });\n        Object.defineProperty(this, \"tree\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: tree\n        });\n        Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain, see https://stackoverflow.com/a/48342359\n        this.message = patchErrorMessageFormatter(message, {\n            name,\n            index,\n            operation,\n            tree\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/json.js":
/*!********************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/utils/json.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseJsonMarkdown: () => (/* binding */ parseJsonMarkdown),\n/* harmony export */   parsePartialJson: () => (/* binding */ parsePartialJson)\n/* harmony export */ });\nfunction parseJsonMarkdown(s, parser = parsePartialJson) {\n    // eslint-disable-next-line no-param-reassign\n    s = s.trim();\n    const match = /```(json)?(.*)```/s.exec(s);\n    if (!match) {\n        return parser(s);\n    } else {\n        return parser(match[2]);\n    }\n}\n// Adapted from https://github.com/KillianLucas/open-interpreter/blob/main/interpreter/core/llm/utils/parse_partial_json.py\n// MIT License\nfunction parsePartialJson(s) {\n    // If the input is undefined, return null to indicate failure.\n    if (typeof s === \"undefined\") {\n        return null;\n    }\n    // Attempt to parse the string as-is.\n    try {\n        return JSON.parse(s);\n    } catch (error) {\n    // Pass\n    }\n    // Initialize variables.\n    let new_s = \"\";\n    const stack = [];\n    let isInsideString = false;\n    let escaped = false;\n    // Process each character in the string one at a time.\n    for (let char of s){\n        if (isInsideString) {\n            if (char === '\"' && !escaped) {\n                isInsideString = false;\n            } else if (char === \"\\n\" && !escaped) {\n                char = \"\\\\n\"; // Replace the newline character with the escape sequence.\n            } else if (char === \"\\\\\") {\n                escaped = !escaped;\n            } else {\n                escaped = false;\n            }\n        } else {\n            if (char === '\"') {\n                isInsideString = true;\n                escaped = false;\n            } else if (char === \"{\") {\n                stack.push(\"}\");\n            } else if (char === \"[\") {\n                stack.push(\"]\");\n            } else if (char === \"}\" || char === \"]\") {\n                if (stack && stack[stack.length - 1] === char) {\n                    stack.pop();\n                } else {\n                    // Mismatched closing character; the input is malformed.\n                    return null;\n                }\n            }\n        }\n        // Append the processed character to the new string.\n        new_s += char;\n    }\n    // If we're still inside a string at the end of processing,\n    // we need to close the string.\n    if (isInsideString) {\n        new_s += '\"';\n    }\n    // Close any remaining open structures in the reverse order that they were opened.\n    for(let i = stack.length - 1; i >= 0; i -= 1){\n        new_s += stack[i];\n    }\n    // Attempt to parse the modified string as JSON.\n    try {\n        return JSON.parse(new_s);\n    } catch (error) {\n        // If we still can't parse the string as JSON, return null to indicate failure.\n        return null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC91dGlscy9qc29uLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sU0FBU0Esa0JBQWtCQyxDQUFDLEVBQUVDLFNBQVNDLGdCQUFnQjtJQUMxRCw2Q0FBNkM7SUFDN0NGLElBQUlBLEVBQUVHLElBQUk7SUFDVixNQUFNQyxRQUFRLHFCQUFxQkMsSUFBSSxDQUFDTDtJQUN4QyxJQUFJLENBQUNJLE9BQU87UUFDUixPQUFPSCxPQUFPRDtJQUNsQixPQUNLO1FBQ0QsT0FBT0MsT0FBT0csS0FBSyxDQUFDLEVBQUU7SUFDMUI7QUFDSjtBQUNBLDJIQUEySDtBQUMzSCxjQUFjO0FBQ1AsU0FBU0YsaUJBQWlCRixDQUFDO0lBQzlCLDhEQUE4RDtJQUM5RCxJQUFJLE9BQU9BLE1BQU0sYUFBYTtRQUMxQixPQUFPO0lBQ1g7SUFDQSxxQ0FBcUM7SUFDckMsSUFBSTtRQUNBLE9BQU9NLEtBQUtDLEtBQUssQ0FBQ1A7SUFDdEIsRUFDQSxPQUFPUSxPQUFPO0lBQ1YsT0FBTztJQUNYO0lBQ0Esd0JBQXdCO0lBQ3hCLElBQUlDLFFBQVE7SUFDWixNQUFNQyxRQUFRLEVBQUU7SUFDaEIsSUFBSUMsaUJBQWlCO0lBQ3JCLElBQUlDLFVBQVU7SUFDZCxzREFBc0Q7SUFDdEQsS0FBSyxJQUFJQyxRQUFRYixFQUFHO1FBQ2hCLElBQUlXLGdCQUFnQjtZQUNoQixJQUFJRSxTQUFTLE9BQU8sQ0FBQ0QsU0FBUztnQkFDMUJELGlCQUFpQjtZQUNyQixPQUNLLElBQUlFLFNBQVMsUUFBUSxDQUFDRCxTQUFTO2dCQUNoQ0MsT0FBTyxPQUFPLDBEQUEwRDtZQUM1RSxPQUNLLElBQUlBLFNBQVMsTUFBTTtnQkFDcEJELFVBQVUsQ0FBQ0E7WUFDZixPQUNLO2dCQUNEQSxVQUFVO1lBQ2Q7UUFDSixPQUNLO1lBQ0QsSUFBSUMsU0FBUyxLQUFLO2dCQUNkRixpQkFBaUI7Z0JBQ2pCQyxVQUFVO1lBQ2QsT0FDSyxJQUFJQyxTQUFTLEtBQUs7Z0JBQ25CSCxNQUFNSSxJQUFJLENBQUM7WUFDZixPQUNLLElBQUlELFNBQVMsS0FBSztnQkFDbkJILE1BQU1JLElBQUksQ0FBQztZQUNmLE9BQ0ssSUFBSUQsU0FBUyxPQUFPQSxTQUFTLEtBQUs7Z0JBQ25DLElBQUlILFNBQVNBLEtBQUssQ0FBQ0EsTUFBTUssTUFBTSxHQUFHLEVBQUUsS0FBS0YsTUFBTTtvQkFDM0NILE1BQU1NLEdBQUc7Z0JBQ2IsT0FDSztvQkFDRCx3REFBd0Q7b0JBQ3hELE9BQU87Z0JBQ1g7WUFDSjtRQUNKO1FBQ0Esb0RBQW9EO1FBQ3BEUCxTQUFTSTtJQUNiO0lBQ0EsMkRBQTJEO0lBQzNELCtCQUErQjtJQUMvQixJQUFJRixnQkFBZ0I7UUFDaEJGLFNBQVM7SUFDYjtJQUNBLGtGQUFrRjtJQUNsRixJQUFLLElBQUlRLElBQUlQLE1BQU1LLE1BQU0sR0FBRyxHQUFHRSxLQUFLLEdBQUdBLEtBQUssRUFBRztRQUMzQ1IsU0FBU0MsS0FBSyxDQUFDTyxFQUFFO0lBQ3JCO0lBQ0EsZ0RBQWdEO0lBQ2hELElBQUk7UUFDQSxPQUFPWCxLQUFLQyxLQUFLLENBQUNFO0lBQ3RCLEVBQ0EsT0FBT0QsT0FBTztRQUNWLCtFQUErRTtRQUMvRSxPQUFPO0lBQ1g7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvanNvbi5qcz9hOWYxIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBwYXJzZUpzb25NYXJrZG93bihzLCBwYXJzZXIgPSBwYXJzZVBhcnRpYWxKc29uKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgcyA9IHMudHJpbSgpO1xuICAgIGNvbnN0IG1hdGNoID0gL2BgYChqc29uKT8oLiopYGBgL3MuZXhlYyhzKTtcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHJldHVybiBwYXJzZXIocyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gcGFyc2VyKG1hdGNoWzJdKTtcbiAgICB9XG59XG4vLyBBZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL0tpbGxpYW5MdWNhcy9vcGVuLWludGVycHJldGVyL2Jsb2IvbWFpbi9pbnRlcnByZXRlci9jb3JlL2xsbS91dGlscy9wYXJzZV9wYXJ0aWFsX2pzb24ucHlcbi8vIE1JVCBMaWNlbnNlXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VQYXJ0aWFsSnNvbihzKSB7XG4gICAgLy8gSWYgdGhlIGlucHV0IGlzIHVuZGVmaW5lZCwgcmV0dXJuIG51bGwgdG8gaW5kaWNhdGUgZmFpbHVyZS5cbiAgICBpZiAodHlwZW9mIHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8vIEF0dGVtcHQgdG8gcGFyc2UgdGhlIHN0cmluZyBhcy1pcy5cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShzKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIFBhc3NcbiAgICB9XG4gICAgLy8gSW5pdGlhbGl6ZSB2YXJpYWJsZXMuXG4gICAgbGV0IG5ld19zID0gXCJcIjtcbiAgICBjb25zdCBzdGFjayA9IFtdO1xuICAgIGxldCBpc0luc2lkZVN0cmluZyA9IGZhbHNlO1xuICAgIGxldCBlc2NhcGVkID0gZmFsc2U7XG4gICAgLy8gUHJvY2VzcyBlYWNoIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nIG9uZSBhdCBhIHRpbWUuXG4gICAgZm9yIChsZXQgY2hhciBvZiBzKSB7XG4gICAgICAgIGlmIChpc0luc2lkZVN0cmluZykge1xuICAgICAgICAgICAgaWYgKGNoYXIgPT09ICdcIicgJiYgIWVzY2FwZWQpIHtcbiAgICAgICAgICAgICAgICBpc0luc2lkZVN0cmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hhciA9PT0gXCJcXG5cIiAmJiAhZXNjYXBlZCkge1xuICAgICAgICAgICAgICAgIGNoYXIgPSBcIlxcXFxuXCI7IC8vIFJlcGxhY2UgdGhlIG5ld2xpbmUgY2hhcmFjdGVyIHdpdGggdGhlIGVzY2FwZSBzZXF1ZW5jZS5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoYXIgPT09IFwiXFxcXFwiKSB7XG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9ICFlc2NhcGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGNoYXIgPT09ICdcIicpIHtcbiAgICAgICAgICAgICAgICBpc0luc2lkZVN0cmluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hhciA9PT0gXCJ7XCIpIHtcbiAgICAgICAgICAgICAgICBzdGFjay5wdXNoKFwifVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoYXIgPT09IFwiW1wiKSB7XG4gICAgICAgICAgICAgICAgc3RhY2sucHVzaChcIl1cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGFyID09PSBcIn1cIiB8fCBjaGFyID09PSBcIl1cIikge1xuICAgICAgICAgICAgICAgIGlmIChzdGFjayAmJiBzdGFja1tzdGFjay5sZW5ndGggLSAxXSA9PT0gY2hhcikge1xuICAgICAgICAgICAgICAgICAgICBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1pc21hdGNoZWQgY2xvc2luZyBjaGFyYWN0ZXI7IHRoZSBpbnB1dCBpcyBtYWxmb3JtZWQuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBBcHBlbmQgdGhlIHByb2Nlc3NlZCBjaGFyYWN0ZXIgdG8gdGhlIG5ldyBzdHJpbmcuXG4gICAgICAgIG5ld19zICs9IGNoYXI7XG4gICAgfVxuICAgIC8vIElmIHdlJ3JlIHN0aWxsIGluc2lkZSBhIHN0cmluZyBhdCB0aGUgZW5kIG9mIHByb2Nlc3NpbmcsXG4gICAgLy8gd2UgbmVlZCB0byBjbG9zZSB0aGUgc3RyaW5nLlxuICAgIGlmIChpc0luc2lkZVN0cmluZykge1xuICAgICAgICBuZXdfcyArPSAnXCInO1xuICAgIH1cbiAgICAvLyBDbG9zZSBhbnkgcmVtYWluaW5nIG9wZW4gc3RydWN0dXJlcyBpbiB0aGUgcmV2ZXJzZSBvcmRlciB0aGF0IHRoZXkgd2VyZSBvcGVuZWQuXG4gICAgZm9yIChsZXQgaSA9IHN0YWNrLmxlbmd0aCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgIG5ld19zICs9IHN0YWNrW2ldO1xuICAgIH1cbiAgICAvLyBBdHRlbXB0IHRvIHBhcnNlIHRoZSBtb2RpZmllZCBzdHJpbmcgYXMgSlNPTi5cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShuZXdfcyk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBJZiB3ZSBzdGlsbCBjYW4ndCBwYXJzZSB0aGUgc3RyaW5nIGFzIEpTT04sIHJldHVybiBudWxsIHRvIGluZGljYXRlIGZhaWx1cmUuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJwYXJzZUpzb25NYXJrZG93biIsInMiLCJwYXJzZXIiLCJwYXJzZVBhcnRpYWxKc29uIiwidHJpbSIsIm1hdGNoIiwiZXhlYyIsIkpTT04iLCJwYXJzZSIsImVycm9yIiwibmV3X3MiLCJzdGFjayIsImlzSW5zaWRlU3RyaW5nIiwiZXNjYXBlZCIsImNoYXIiLCJwdXNoIiwibGVuZ3RoIiwicG9wIiwiaSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/json.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/stream.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/utils/stream.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncGeneratorWithSetup: () => (/* binding */ AsyncGeneratorWithSetup),\n/* harmony export */   IterableReadableStream: () => (/* binding */ IterableReadableStream),\n/* harmony export */   atee: () => (/* binding */ atee),\n/* harmony export */   concat: () => (/* binding */ concat),\n/* harmony export */   pipeGeneratorWithSetup: () => (/* binding */ pipeGeneratorWithSetup)\n/* harmony export */ });\n/*\n * Support async iterator syntax for ReadableStreams in all environments.\n * Source: https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */ class IterableReadableStream extends ReadableStream {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"reader\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    ensureReader() {\n        if (!this.reader) {\n            this.reader = this.getReader();\n        }\n    }\n    async next() {\n        this.ensureReader();\n        try {\n            const result = await this.reader.read();\n            if (result.done) {\n                this.reader.releaseLock(); // release lock when stream becomes closed\n                return {\n                    done: true,\n                    value: undefined\n                };\n            } else {\n                return {\n                    done: false,\n                    value: result.value\n                };\n            }\n        } catch (e) {\n            this.reader.releaseLock(); // release lock when stream becomes errored\n            throw e;\n        }\n    }\n    async return() {\n        this.ensureReader();\n        // If wrapped in a Node stream, cancel is already called.\n        if (this.locked) {\n            const cancelPromise = this.reader.cancel(); // cancel first, but don't await yet\n            this.reader.releaseLock(); // release lock first\n            await cancelPromise; // now await it\n        }\n        return {\n            done: true,\n            value: undefined\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async throw(e) {\n        this.ensureReader();\n        if (this.locked) {\n            const cancelPromise = this.reader.cancel(); // cancel first, but don't await yet\n            this.reader.releaseLock(); // release lock first\n            await cancelPromise; // now await it\n        }\n        throw e;\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    static fromReadableStream(stream) {\n        // From https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_streams#reading_the_stream\n        const reader = stream.getReader();\n        return new IterableReadableStream({\n            start (controller) {\n                return pump();\n                function pump() {\n                    return reader.read().then(({ done, value })=>{\n                        // When no more data needs to be consumed, close the stream\n                        if (done) {\n                            controller.close();\n                            return;\n                        }\n                        // Enqueue the next data chunk into our target stream\n                        controller.enqueue(value);\n                        return pump();\n                    });\n                }\n            },\n            cancel () {\n                reader.releaseLock();\n            }\n        });\n    }\n    static fromAsyncGenerator(generator) {\n        return new IterableReadableStream({\n            async pull (controller) {\n                const { value, done } = await generator.next();\n                // When no more data needs to be consumed, close the stream\n                if (done) {\n                    controller.close();\n                }\n                // Fix: `else if (value)` will hang the streaming when nullish value (e.g. empty string) is pulled\n                controller.enqueue(value);\n            },\n            async cancel (reason) {\n                await generator.return(reason);\n            }\n        });\n    }\n}\nfunction atee(iter, length = 2) {\n    const buffers = Array.from({\n        length\n    }, ()=>[]);\n    return buffers.map(async function* makeIter(buffer) {\n        while(true){\n            if (buffer.length === 0) {\n                const result = await iter.next();\n                for (const buffer of buffers){\n                    buffer.push(result);\n                }\n            } else if (buffer[0].done) {\n                return;\n            } else {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                yield buffer.shift().value;\n            }\n        }\n    });\n}\nfunction concat(first, second) {\n    if (Array.isArray(first) && Array.isArray(second)) {\n        return first.concat(second);\n    } else if (typeof first === \"string\" && typeof second === \"string\") {\n        return first + second;\n    } else if (typeof first === \"number\" && typeof second === \"number\") {\n        return first + second;\n    } else if (// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    \"concat\" in first && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof first.concat === \"function\") {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return first.concat(second);\n    } else if (typeof first === \"object\" && typeof second === \"object\") {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const chunk = {\n            ...first\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        for (const [key, value] of Object.entries(second)){\n            if (key in chunk && !Array.isArray(chunk[key])) {\n                chunk[key] = concat(chunk[key], value);\n            } else {\n                chunk[key] = value;\n            }\n        }\n        return chunk;\n    } else {\n        throw new Error(`Cannot concat ${typeof first} and ${typeof second}`);\n    }\n}\nclass AsyncGeneratorWithSetup {\n    constructor(generator, startSetup){\n        Object.defineProperty(this, \"generator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"setup\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"firstResult\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"firstResultUsed\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        this.generator = generator;\n        // setup is a promise that resolves only after the first iterator value\n        // is available. this is useful when setup of several piped generators\n        // needs to happen in logical order, ie. in the order in which input to\n        // to each generator is available.\n        this.setup = new Promise((resolve, reject)=>{\n            this.firstResult = generator.next();\n            if (startSetup) {\n                this.firstResult.then(startSetup).then(resolve, reject);\n            } else {\n                this.firstResult.then((_result)=>resolve(undefined), reject);\n            }\n        });\n    }\n    async next(...args) {\n        if (!this.firstResultUsed) {\n            this.firstResultUsed = true;\n            return this.firstResult;\n        }\n        return this.generator.next(...args);\n    }\n    async return(value) {\n        return this.generator.return(value);\n    }\n    async throw(e) {\n        return this.generator.throw(e);\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n}\nasync function pipeGeneratorWithSetup(to, generator, startSetup, ...args) {\n    const gen = new AsyncGeneratorWithSetup(generator, startSetup);\n    const setup = await gen.setup;\n    return {\n        output: to(gen, setup, ...args),\n        setup\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/tiktoken.js":
/*!************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/dist/utils/tiktoken.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodingForModel: () => (/* binding */ encodingForModel),\n/* harmony export */   getEncoding: () => (/* binding */ getEncoding)\n/* harmony export */ });\n/* harmony import */ var js_tiktoken_lite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-tiktoken/lite */ \"(rsc)/./node_modules/js-tiktoken/dist/lite.js\");\n/* harmony import */ var _async_caller_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./async_caller.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/async_caller.js\");\n\n\nconst cache = {};\nconst caller = /* #__PURE__ */ new _async_caller_js__WEBPACK_IMPORTED_MODULE_1__.AsyncCaller({});\nasync function getEncoding(encoding) {\n    if (!(encoding in cache)) {\n        cache[encoding] = caller.fetch(`https://tiktoken.pages.dev/js/${encoding}.json`).then((res)=>res.json()).then((data)=>new js_tiktoken_lite__WEBPACK_IMPORTED_MODULE_0__.Tiktoken(data)).catch((e)=>{\n            delete cache[encoding];\n            throw e;\n        });\n    }\n    return await cache[encoding];\n}\nasync function encodingForModel(model) {\n    return getEncoding((0,js_tiktoken_lite__WEBPACK_IMPORTED_MODULE_0__.getEncodingNameForModel)(model));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC91dGlscy90aWt0b2tlbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXNFO0FBQ3RCO0FBQ2hELE1BQU1HLFFBQVEsQ0FBQztBQUNmLE1BQU1DLFNBQVMsYUFBYSxHQUFHLElBQUlGLHlEQUFXQSxDQUFDLENBQUM7QUFDekMsZUFBZUcsWUFBWUMsUUFBUTtJQUN0QyxJQUFJLENBQUVBLENBQUFBLFlBQVlILEtBQUksR0FBSTtRQUN0QkEsS0FBSyxDQUFDRyxTQUFTLEdBQUdGLE9BQ2JHLEtBQUssQ0FBQyxDQUFDLDhCQUE4QixFQUFFRCxTQUFTLEtBQUssQ0FBQyxFQUN0REUsSUFBSSxDQUFDLENBQUNDLE1BQVFBLElBQUlDLElBQUksSUFDdEJGLElBQUksQ0FBQyxDQUFDRyxPQUFTLElBQUlYLHNEQUFRQSxDQUFDVyxPQUM1QkMsS0FBSyxDQUFDLENBQUNDO1lBQ1IsT0FBT1YsS0FBSyxDQUFDRyxTQUFTO1lBQ3RCLE1BQU1PO1FBQ1Y7SUFDSjtJQUNBLE9BQU8sTUFBTVYsS0FBSyxDQUFDRyxTQUFTO0FBQ2hDO0FBQ08sZUFBZVEsaUJBQWlCQyxLQUFLO0lBQ3hDLE9BQU9WLFlBQVlKLHlFQUF1QkEsQ0FBQ2M7QUFDL0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL3Rpa3Rva2VuLmpzP2EwZmQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGlrdG9rZW4sIGdldEVuY29kaW5nTmFtZUZvck1vZGVsLCB9IGZyb20gXCJqcy10aWt0b2tlbi9saXRlXCI7XG5pbXBvcnQgeyBBc3luY0NhbGxlciB9IGZyb20gXCIuL2FzeW5jX2NhbGxlci5qc1wiO1xuY29uc3QgY2FjaGUgPSB7fTtcbmNvbnN0IGNhbGxlciA9IC8qICNfX1BVUkVfXyAqLyBuZXcgQXN5bmNDYWxsZXIoe30pO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEVuY29kaW5nKGVuY29kaW5nKSB7XG4gICAgaWYgKCEoZW5jb2RpbmcgaW4gY2FjaGUpKSB7XG4gICAgICAgIGNhY2hlW2VuY29kaW5nXSA9IGNhbGxlclxuICAgICAgICAgICAgLmZldGNoKGBodHRwczovL3Rpa3Rva2VuLnBhZ2VzLmRldi9qcy8ke2VuY29kaW5nfS5qc29uYClcbiAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHJlcy5qc29uKCkpXG4gICAgICAgICAgICAudGhlbigoZGF0YSkgPT4gbmV3IFRpa3Rva2VuKGRhdGEpKVxuICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICBkZWxldGUgY2FjaGVbZW5jb2RpbmddO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCBjYWNoZVtlbmNvZGluZ107XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZW5jb2RpbmdGb3JNb2RlbChtb2RlbCkge1xuICAgIHJldHVybiBnZXRFbmNvZGluZyhnZXRFbmNvZGluZ05hbWVGb3JNb2RlbChtb2RlbCkpO1xufVxuIl0sIm5hbWVzIjpbIlRpa3Rva2VuIiwiZ2V0RW5jb2RpbmdOYW1lRm9yTW9kZWwiLCJBc3luY0NhbGxlciIsImNhY2hlIiwiY2FsbGVyIiwiZ2V0RW5jb2RpbmciLCJlbmNvZGluZyIsImZldGNoIiwidGhlbiIsInJlcyIsImpzb24iLCJkYXRhIiwiY2F0Y2giLCJlIiwiZW5jb2RpbmdGb3JNb2RlbCIsIm1vZGVsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/tiktoken.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/documents.js":
/*!**************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/documents.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseDocumentTransformer: () => (/* reexport safe */ _dist_documents_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseDocumentTransformer),\n/* harmony export */   Document: () => (/* reexport safe */ _dist_documents_index_js__WEBPACK_IMPORTED_MODULE_0__.Document),\n/* harmony export */   MappingDocumentTransformer: () => (/* reexport safe */ _dist_documents_index_js__WEBPACK_IMPORTED_MODULE_0__.MappingDocumentTransformer)\n/* harmony export */ });\n/* harmony import */ var _dist_documents_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/documents/index.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/documents/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZG9jdW1lbnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kb2N1bWVudHMuanM/YjE3NiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2Rpc3QvZG9jdW1lbnRzL2luZGV4LmpzJyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/documents.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/utils/env.js":
/*!**************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/utils/env.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnv: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.getEnv),\n/* harmony export */   getEnvironmentVariable: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable),\n/* harmony export */   getRuntimeEnvironment: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.getRuntimeEnvironment),\n/* harmony export */   isBrowser: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isBrowser),\n/* harmony export */   isDeno: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isDeno),\n/* harmony export */   isJsDom: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isJsDom),\n/* harmony export */   isNode: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isNode),\n/* harmony export */   isWebWorker: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isWebWorker)\n/* harmony export */ });\n/* harmony import */ var _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/utils/env.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/env.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvdXRpbHMvZW52LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2RhdGEtYm90Ly4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2Vudi5qcz9jMTAzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4uL2Rpc3QvdXRpbHMvZW52LmpzJyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/utils/env.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/core/utils/tiktoken.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/core/utils/tiktoken.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodingForModel: () => (/* reexport safe */ _dist_utils_tiktoken_js__WEBPACK_IMPORTED_MODULE_0__.encodingForModel),\n/* harmony export */   getEncoding: () => (/* reexport safe */ _dist_utils_tiktoken_js__WEBPACK_IMPORTED_MODULE_0__.getEncoding)\n/* harmony export */ });\n/* harmony import */ var _dist_utils_tiktoken_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/utils/tiktoken.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/core/dist/utils/tiktoken.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvdXRpbHMvdGlrdG9rZW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF0YS1ib3QvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvdXRpbHMvdGlrdG9rZW4uanM/NjFmNSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuLi9kaXN0L3V0aWxzL3Rpa3Rva2VuLmpzJyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/core/utils/tiktoken.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/text_splitter.js":
/*!*************************************************!*\
  !*** ./node_modules/langchain/text_splitter.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CharacterTextSplitter: () => (/* reexport safe */ _dist_text_splitter_js__WEBPACK_IMPORTED_MODULE_0__.CharacterTextSplitter),\n/* harmony export */   LatexTextSplitter: () => (/* reexport safe */ _dist_text_splitter_js__WEBPACK_IMPORTED_MODULE_0__.LatexTextSplitter),\n/* harmony export */   MarkdownTextSplitter: () => (/* reexport safe */ _dist_text_splitter_js__WEBPACK_IMPORTED_MODULE_0__.MarkdownTextSplitter),\n/* harmony export */   RecursiveCharacterTextSplitter: () => (/* reexport safe */ _dist_text_splitter_js__WEBPACK_IMPORTED_MODULE_0__.RecursiveCharacterTextSplitter),\n/* harmony export */   SupportedTextSplitterLanguages: () => (/* reexport safe */ _dist_text_splitter_js__WEBPACK_IMPORTED_MODULE_0__.SupportedTextSplitterLanguages),\n/* harmony export */   TextSplitter: () => (/* reexport safe */ _dist_text_splitter_js__WEBPACK_IMPORTED_MODULE_0__.TextSplitter),\n/* harmony export */   TokenTextSplitter: () => (/* reexport safe */ _dist_text_splitter_js__WEBPACK_IMPORTED_MODULE_0__.TokenTextSplitter)\n/* harmony export */ });\n/* harmony import */ var _dist_text_splitter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/text_splitter.js */ \"(rsc)/./node_modules/langchain/dist/text_splitter.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL3RleHRfc3BsaXR0ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXRhLWJvdC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vdGV4dF9zcGxpdHRlci5qcz83ZWFjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vZGlzdC90ZXh0X3NwbGl0dGVyLmpzJyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/text_splitter.js\n");

/***/ })

};
;